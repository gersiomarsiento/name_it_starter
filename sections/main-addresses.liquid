<section
  role="region"
  aria-label="{{ 'customer.addresses.title' | t }}"
  class="w-full py-8 lg:py-12"
>
  {%- paginate customer.addresses by 6 -%}
    <div class="c-container flex flex-col gap-y-8">
      <div class="flex flex-col md:flex-row md:justify-between md:items-center gap-8">
        <div class="flex flex-col gap-y-3">
          <h1 class="h2">{{ 'customer.addresses.title' | t }}</h1>

          <a href="{{ routes.account_url }}" class=" body-4 font-semibold">
            {%- render 'icon-arrow', class: 'w-4 rotate-180 inline-block' -%}
            <span class="underline">{{ 'customer.account.return' | t }}</span>
          </a>
        </div>

        <button
          type="button"
          class="button-primary w-max"
          aria-expanded="false"
          aria-controls="AddAddress"
          data-modal="AddressesFormNew"
        >
          {{- 'customer.addresses.add_new' | t -}}
        </button>
      </div>

      <ul role="list" class="grid grid-cols-350px gap-8">
        {%- for address in customer.addresses -%}
          {%- assign modalID = 'AddressesFormEdit' | append: address.id -%}

          <li class="grid grid-cols-1 gap-y-5 shadow-card border border-gray-300 rounded-[15px] p-5">
            {%- if address == customer.default_address -%}
              <div class="font-bold body-4">{{ 'customer.addresses.default' | t }}</div>
            {%- endif -%}

            {{ address | format_address }}

            <div class="flex flex-row justify-around gap-5 items-center self-end">
              <button
                type="button"
                class="button-secondary small flex-1"
                aria-label="{{ 'customer.addresses.edit_address' | t }} {{ forloop.index }}"
                aria-controls="EditAddress_{{ address.id }}"
                aria-expanded="false"
                data-modal="{{ modalID }}"
              >
                {{- 'customer.addresses.edit' | t -}}
              </button>
              {% comment %} MODAL code is at the bottom  {% endcomment %}

              <button
                type="button"
                class="button-secondary small flex-1 border-red-600 text-red-600 hover:!border-red-600 hover:!shadow-red-600"
                aria-label="{{ 'customer.addresses.delete' | t }} {{ forloop.index }}"
                data-target="{{ address.url }}"
                data-delete-message="{{ 'customer.addresses.delete_confirm' | t }}"
              >
                {{- 'customer.addresses.delete' | t -}}
              </button>
              {% comment %} Delete function is at the bottom  {% endcomment %}
            </div>
          </li>
        {%- endfor -%}
      </ul>

      {%- if paginate.pages > 1 -%}
        {%- render 'pagination', paginate: paginate -%}
      {%- endif -%}
    </div>

    {% comment %} NEW MODAL {% endcomment %}
    {%- capture AddressesFormNew -%}
      {%- render 'addresses-form-new' -%}
    {%- endcapture -%}

    {%- render 'modal',
      width: 600,
      class: '',
      id: 'AddressesFormNew',
      hasPadding: false,
      modalContent: AddressesFormNew
    -%}
    {% comment %} END NEW MODAL {% endcomment %}

    {% comment %} EDIT MODALS {% endcomment %}
    {%- for address in customer.addresses -%}
      {%- assign modalID = 'AddressesFormEdit' | append: address.id -%}

      {%- capture AddressesFormEdit -%}
        {%- render 'addresses-edit-form', address: address -%}
      {%- endcapture -%}

      {%- render 'modal', width: 600, class: '', id: modalID, hasPadding: false, modalContent: AddressesFormEdit -%}
    {%- endfor -%}
    {% comment %} END EDIT MODALS {% endcomment %}
  {%- endpaginate -%}
</section>

<script>
  window.addEventListener('load', () => {
    new Shopify.CountryProvinceSelector('AddressCountryNew', 'AddressProvinceNew', {
      hideElement: 'AddressProvinceContainerNew',
    });

    document.querySelectorAll('[data-address-country-select]').forEach((select) => {
      const formId = select.dataset.formId;
      new Shopify.CountryProvinceSelector(`AddressCountry_${formId}`, `AddressProvince_${formId}`, {
        hideElement: `AddressProvinceContainer_${formId}`,
      });
    });

    function handleDeleteButtonClick({ currentTarget }) {
      if (confirm(currentTarget.getAttribute('data-delete-message'))) {
        Shopify.postLink(currentTarget.dataset.target, {
          parameters: { _method: 'delete' },
        });
      }
    }

    document.querySelectorAll('button[data-delete-message]').forEach((button) => {
      button.addEventListener('click', handleDeleteButtonClick);
    });
  });
</script>

{% schema %}
{
  "name": "Addresses",
  "settings": []
}
{% endschema %}
