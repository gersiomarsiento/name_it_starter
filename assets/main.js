var xi=!1,Si=!1,Pe=[],Ei=-1;function Bs(t){Hs(t)}function Hs(t){Pe.includes(t)||Pe.push(t),Gs()}function tn(t){let e=Pe.indexOf(t);e!==-1&&e>Ei&&Pe.splice(e,1)}function Gs(){!Si&&!xi&&(xi=!0,queueMicrotask(js))}function js(){xi=!1,Si=!0;for(let t=0;t<Pe.length;t++)Pe[t](),Ei=t;Pe.length=0,Ei=-1,Si=!1}var Ye,Ne,Ue,rn,Ti=!0;function Vs(t){Ti=!1,t(),Ti=!0}function Ws(t){Ye=t.reactive,Ue=t.release,Ne=e=>t.effect(e,{scheduler:i=>{Ti?Bs(i):i()}}),rn=t.raw}function yr(t){Ne=t}function Xs(t){let e=()=>{};return[r=>{let n=Ne(r);return t._x_effects||(t._x_effects=new Set,t._x_runEffects=()=>{t._x_effects.forEach(s=>s())}),t._x_effects.add(n),e=()=>{n!==void 0&&(t._x_effects.delete(n),Ue(n))},n},()=>{e()}]}function nn(t,e){let i=!0,r,n=Ne(()=>{let s=t();JSON.stringify(s),i?r=s:queueMicrotask(()=>{e(s,r),r=s}),i=!1});return()=>Ue(n)}var sn=[],an=[],on=[];function qs(t){on.push(t)}function Vi(t,e){typeof e=="function"?(t._x_cleanups||(t._x_cleanups=[]),t._x_cleanups.push(e)):(e=t,an.push(e))}function ln(t){sn.push(t)}function cn(t,e,i){t._x_attributeCleanups||(t._x_attributeCleanups={}),t._x_attributeCleanups[e]||(t._x_attributeCleanups[e]=[]),t._x_attributeCleanups[e].push(i)}function dn(t,e){t._x_attributeCleanups&&Object.entries(t._x_attributeCleanups).forEach(([i,r])=>{(e===void 0||e.includes(i))&&(r.forEach(n=>n()),delete t._x_attributeCleanups[i])})}function Ys(t){if(t._x_cleanups)for(;t._x_cleanups.length;)t._x_cleanups.pop()()}var Wi=new MutationObserver(Ui),Xi=!1;function qi(){Wi.observe(document,{subtree:!0,childList:!0,attributes:!0,attributeOldValue:!0}),Xi=!0}function un(){Us(),Wi.disconnect(),Xi=!1}var et=[];function Us(){let t=Wi.takeRecords();et.push(()=>t.length>0&&Ui(t));let e=et.length;queueMicrotask(()=>{if(et.length===e)for(;et.length>0;)et.shift()()})}function Y(t){if(!Xi)return t();un();let e=t();return qi(),e}var Yi=!1,$t=[];function Ks(){Yi=!0}function Js(){Yi=!1,Ui($t),$t=[]}function Ui(t){if(Yi){$t=$t.concat(t);return}let e=new Set,i=new Set,r=new Map,n=new Map;for(let s=0;s<t.length;s++)if(!t[s].target._x_ignoreMutationObserver&&(t[s].type==="childList"&&(t[s].addedNodes.forEach(a=>a.nodeType===1&&e.add(a)),t[s].removedNodes.forEach(a=>a.nodeType===1&&i.add(a))),t[s].type==="attributes")){let a=t[s].target,o=t[s].attributeName,l=t[s].oldValue,u=()=>{r.has(a)||r.set(a,[]),r.get(a).push({name:o,value:a.getAttribute(o)})},d=()=>{n.has(a)||n.set(a,[]),n.get(a).push(o)};a.hasAttribute(o)&&l===null?u():a.hasAttribute(o)?(d(),u()):d()}n.forEach((s,a)=>{dn(a,s)}),r.forEach((s,a)=>{sn.forEach(o=>o(a,s))});for(let s of i)e.has(s)||an.forEach(a=>a(s));e.forEach(s=>{s._x_ignoreSelf=!0,s._x_ignore=!0});for(let s of e)i.has(s)||s.isConnected&&(delete s._x_ignoreSelf,delete s._x_ignore,on.forEach(a=>a(s)),s._x_ignore=!0,s._x_ignoreSelf=!0);e.forEach(s=>{delete s._x_ignoreSelf,delete s._x_ignore}),e=null,i=null,r=null,n=null}function fn(t){return mt(Ve(t))}function pt(t,e,i){return t._x_dataStack=[e,...Ve(i||t)],()=>{t._x_dataStack=t._x_dataStack.filter(r=>r!==e)}}function Ve(t){return t._x_dataStack?t._x_dataStack:typeof ShadowRoot=="function"&&t instanceof ShadowRoot?Ve(t.host):t.parentNode?Ve(t.parentNode):[]}function mt(t){return new Proxy({objects:t},Zs)}var Zs={ownKeys({objects:t}){return Array.from(new Set(t.flatMap(e=>Object.keys(e))))},has({objects:t},e){return e==Symbol.unscopables?!1:t.some(i=>Object.prototype.hasOwnProperty.call(i,e)||Reflect.has(i,e))},get({objects:t},e,i){return e=="toJSON"?Qs:Reflect.get(t.find(r=>Reflect.has(r,e))||{},e,i)},set({objects:t},e,i,r){const n=t.find(a=>Object.prototype.hasOwnProperty.call(a,e))||t[t.length-1],s=Object.getOwnPropertyDescriptor(n,e);return s!=null&&s.set&&(s!=null&&s.get)?Reflect.set(n,e,i,r):Reflect.set(n,e,i)}};function Qs(){return Reflect.ownKeys(this).reduce((e,i)=>(e[i]=Reflect.get(this,i),e),{})}function pn(t){let e=r=>typeof r=="object"&&!Array.isArray(r)&&r!==null,i=(r,n="")=>{Object.entries(Object.getOwnPropertyDescriptors(r)).forEach(([s,{value:a,enumerable:o}])=>{if(o===!1||a===void 0||typeof a=="object"&&a!==null&&a.__v_skip)return;let l=n===""?s:`${n}.${s}`;typeof a=="object"&&a!==null&&a._x_interceptor?r[s]=a.initialize(t,l,s):e(a)&&a!==r&&!(a instanceof Element)&&i(a,l)})};return i(t)}function mn(t,e=()=>{}){let i={initialValue:void 0,_x_interceptor:!0,initialize(r,n,s){return t(this.initialValue,()=>ea(r,n),a=>_i(r,n,a),n,s)}};return e(i),r=>{if(typeof r=="object"&&r!==null&&r._x_interceptor){let n=i.initialize.bind(i);i.initialize=(s,a,o)=>{let l=r.initialize(s,a,o);return i.initialValue=l,n(s,a,o)}}else i.initialValue=r;return i}}function ea(t,e){return e.split(".").reduce((i,r)=>i[r],t)}function _i(t,e,i){if(typeof e=="string"&&(e=e.split(".")),e.length===1)t[e[0]]=i;else{if(e.length===0)throw error;return t[e[0]]||(t[e[0]]={}),_i(t[e[0]],e.slice(1),i)}}var hn={};function le(t,e){hn[t]=e}function Ci(t,e){return Object.entries(hn).forEach(([i,r])=>{let n=null;function s(){if(n)return n;{let[a,o]=xn(e);return n={interceptor:mn,...a},Vi(e,o),n}}Object.defineProperty(t,`$${i}`,{get(){return r(e,s())},enumerable:!1})}),t}function ta(t,e,i,...r){try{return i(...r)}catch(n){dt(n,t,e)}}function dt(t,e,i=void 0){t=Object.assign(t??{message:"No error message given."},{el:e,expression:i}),console.warn(`Alpine Expression Error: ${t.message}

${i?'Expression: "'+i+`"

`:""}`,e),setTimeout(()=>{throw t},0)}var Lt=!0;function gn(t){let e=Lt;Lt=!1;let i=t();return Lt=e,i}function Le(t,e,i={}){let r;return Q(t,e)(n=>r=n,i),r}function Q(...t){return vn(...t)}var vn=wn;function ia(t){vn=t}function wn(t,e){let i={};Ci(i,t);let r=[i,...Ve(t)],n=typeof e=="function"?ra(r,e):sa(r,e,t);return ta.bind(null,t,e,n)}function ra(t,e){return(i=()=>{},{scope:r={},params:n=[]}={})=>{let s=e.apply(mt([r,...t]),n);zt(i,s)}}var ci={};function na(t,e){if(ci[t])return ci[t];let i=Object.getPrototypeOf(async function(){}).constructor,r=/^[\n\s]*if.*\(.*\)/.test(t.trim())||/^(let|const)\s/.test(t.trim())?`(async()=>{ ${t} })()`:t,s=(()=>{try{let a=new i(["__self","scope"],`with (scope) { __self.result = ${r} }; __self.finished = true; return __self.result;`);return Object.defineProperty(a,"name",{value:`[Alpine] ${t}`}),a}catch(a){return dt(a,e,t),Promise.resolve()}})();return ci[t]=s,s}function sa(t,e,i){let r=na(e,i);return(n=()=>{},{scope:s={},params:a=[]}={})=>{r.result=void 0,r.finished=!1;let o=mt([s,...t]);if(typeof r=="function"){let l=r(r,o).catch(u=>dt(u,i,e));r.finished?(zt(n,r.result,o,a,i),r.result=void 0):l.then(u=>{zt(n,u,o,a,i)}).catch(u=>dt(u,i,e)).finally(()=>r.result=void 0)}}}function zt(t,e,i,r,n){if(Lt&&typeof e=="function"){let s=e.apply(i,r);s instanceof Promise?s.then(a=>zt(t,a,i,r)).catch(a=>dt(a,n,e)):t(s)}else typeof e=="object"&&e instanceof Promise?e.then(s=>t(s)):t(e)}var Ki="x-";function Ke(t=""){return Ki+t}function aa(t){Ki=t}var Rt={};function q(t,e){return Rt[t]=e,{before(i){if(!Rt[i]){console.warn(String.raw`Cannot find directive \`${i}\`. \`${t}\` will use the default order of execution`);return}const r=Ae.indexOf(i);Ae.splice(r>=0?r:Ae.indexOf("DEFAULT"),0,t)}}}function oa(t){return Object.keys(Rt).includes(t)}function Ji(t,e,i){if(e=Array.from(e),t._x_virtualDirectives){let s=Object.entries(t._x_virtualDirectives).map(([o,l])=>({name:o,value:l})),a=bn(s);s=s.map(o=>a.find(l=>l.name===o.name)?{name:`x-bind:${o.name}`,value:`"${o.value}"`}:o),e=e.concat(s)}let r={};return e.map(Tn((s,a)=>r[s]=a)).filter(Cn).map(da(r,i)).sort(ua).map(s=>ca(t,s))}function bn(t){return Array.from(t).map(Tn()).filter(e=>!Cn(e))}var Mi=!1,nt=new Map,yn=Symbol();function la(t){Mi=!0;let e=Symbol();yn=e,nt.set(e,[]);let i=()=>{for(;nt.get(e).length;)nt.get(e).shift()();nt.delete(e)},r=()=>{Mi=!1,i()};t(i),r()}function xn(t){let e=[],i=o=>e.push(o),[r,n]=Xs(t);return e.push(n),[{Alpine:gt,effect:r,cleanup:i,evaluateLater:Q.bind(Q,t),evaluate:Le.bind(Le,t)},()=>e.forEach(o=>o())]}function ca(t,e){let i=()=>{},r=Rt[e.type]||i,[n,s]=xn(t);cn(t,e.original,s);let a=()=>{t._x_ignore||t._x_ignoreSelf||(r.inline&&r.inline(t,e,n),r=r.bind(r,t,e,n),Mi?nt.get(yn).push(r):r())};return a.runCleanups=s,a}var Sn=(t,e)=>({name:i,value:r})=>(i.startsWith(t)&&(i=i.replace(t,e)),{name:i,value:r}),En=t=>t;function Tn(t=()=>{}){return({name:e,value:i})=>{let{name:r,value:n}=_n.reduce((s,a)=>a(s),{name:e,value:i});return r!==e&&t(r,e),{name:r,value:n}}}var _n=[];function Zi(t){_n.push(t)}function Cn({name:t}){return Mn().test(t)}var Mn=()=>new RegExp(`^${Ki}([^:^.]+)\\b`);function da(t,e){return({name:i,value:r})=>{let n=i.match(Mn()),s=i.match(/:([a-zA-Z0-9\-_:]+)/),a=i.match(/\.[^.\]]+(?=[^\]]*$)/g)||[],o=e||t[i]||i;return{type:n?n[1]:null,value:s?s[1]:null,modifiers:a.map(l=>l.replace(".","")),expression:r,original:o}}}var Ai="DEFAULT",Ae=["ignore","ref","data","id","anchor","bind","init","for","model","modelable","transition","show","if",Ai,"teleport"];function ua(t,e){let i=Ae.indexOf(t.type)===-1?Ai:t.type,r=Ae.indexOf(e.type)===-1?Ai:e.type;return Ae.indexOf(i)-Ae.indexOf(r)}function ot(t,e,i={}){t.dispatchEvent(new CustomEvent(e,{detail:i,bubbles:!0,composed:!0,cancelable:!0}))}function ye(t,e){if(typeof ShadowRoot=="function"&&t instanceof ShadowRoot){Array.from(t.children).forEach(n=>ye(n,e));return}let i=!1;if(e(t,()=>i=!0),i)return;let r=t.firstElementChild;for(;r;)ye(r,e),r=r.nextElementSibling}function se(t,...e){console.warn(`Alpine Warning: ${t}`,...e)}var xr=!1;function fa(){xr&&se("Alpine has already been initialized on this page. Calling Alpine.start() more than once can cause problems."),xr=!0,document.body||se("Unable to initialize. Trying to load Alpine before `<body>` is available. Did you forget to add `defer` in Alpine's `<script>` tag?"),ot(document,"alpine:init"),ot(document,"alpine:initializing"),qi(),qs(e=>me(e,ye)),Vi(e=>$n(e)),ln((e,i)=>{Ji(e,i).forEach(r=>r())});let t=e=>!Xt(e.parentElement,!0);Array.from(document.querySelectorAll(Ln().join(","))).filter(t).forEach(e=>{me(e)}),ot(document,"alpine:initialized"),setTimeout(()=>{ha()})}var Qi=[],An=[];function Pn(){return Qi.map(t=>t())}function Ln(){return Qi.concat(An).map(t=>t())}function In(t){Qi.push(t)}function On(t){An.push(t)}function Xt(t,e=!1){return ht(t,i=>{if((e?Ln():Pn()).some(n=>i.matches(n)))return!0})}function ht(t,e){if(t){if(e(t))return t;if(t._x_teleportBack&&(t=t._x_teleportBack),!!t.parentElement)return ht(t.parentElement,e)}}function pa(t){return Pn().some(e=>t.matches(e))}var Dn=[];function ma(t){Dn.push(t)}function me(t,e=ye,i=()=>{}){la(()=>{e(t,(r,n)=>{i(r,n),Dn.forEach(s=>s(r,n)),Ji(r,r.attributes).forEach(s=>s()),r._x_ignore&&n()})})}function $n(t,e=ye){e(t,i=>{dn(i),Ys(i)})}function ha(){[["ui","dialog",["[x-dialog], [x-popover]"]],["anchor","anchor",["[x-anchor]"]],["sort","sort",["[x-sort]"]]].forEach(([e,i,r])=>{oa(i)||r.some(n=>{if(document.querySelector(n))return se(`found "${n}", but missing ${e} plugin`),!0})})}var Pi=[],er=!1;function tr(t=()=>{}){return queueMicrotask(()=>{er||setTimeout(()=>{Li()})}),new Promise(e=>{Pi.push(()=>{t(),e()})})}function Li(){for(er=!1;Pi.length;)Pi.shift()()}function ga(){er=!0}function ir(t,e){return Array.isArray(e)?Sr(t,e.join(" ")):typeof e=="object"&&e!==null?va(t,e):typeof e=="function"?ir(t,e()):Sr(t,e)}function Sr(t,e){let i=n=>n.split(" ").filter(s=>!t.classList.contains(s)).filter(Boolean),r=n=>(t.classList.add(...n),()=>{t.classList.remove(...n)});return e=e===!0?e="":e||"",r(i(e))}function va(t,e){let i=o=>o.split(" ").filter(Boolean),r=Object.entries(e).flatMap(([o,l])=>l?i(o):!1).filter(Boolean),n=Object.entries(e).flatMap(([o,l])=>l?!1:i(o)).filter(Boolean),s=[],a=[];return n.forEach(o=>{t.classList.contains(o)&&(t.classList.remove(o),a.push(o))}),r.forEach(o=>{t.classList.contains(o)||(t.classList.add(o),s.push(o))}),()=>{a.forEach(o=>t.classList.add(o)),s.forEach(o=>t.classList.remove(o))}}function qt(t,e){return typeof e=="object"&&e!==null?wa(t,e):ba(t,e)}function wa(t,e){let i={};return Object.entries(e).forEach(([r,n])=>{i[r]=t.style[r],r.startsWith("--")||(r=ya(r)),t.style.setProperty(r,n)}),setTimeout(()=>{t.style.length===0&&t.removeAttribute("style")}),()=>{qt(t,i)}}function ba(t,e){let i=t.getAttribute("style",e);return t.setAttribute("style",e),()=>{t.setAttribute("style",i||"")}}function ya(t){return t.replace(/([a-z])([A-Z])/g,"$1-$2").toLowerCase()}function Ii(t,e=()=>{}){let i=!1;return function(){i?e.apply(this,arguments):(i=!0,t.apply(this,arguments))}}q("transition",(t,{value:e,modifiers:i,expression:r},{evaluate:n})=>{typeof r=="function"&&(r=n(r)),r!==!1&&(!r||typeof r=="boolean"?Sa(t,i,e):xa(t,r,e))});function xa(t,e,i){zn(t,ir,""),{enter:n=>{t._x_transition.enter.during=n},"enter-start":n=>{t._x_transition.enter.start=n},"enter-end":n=>{t._x_transition.enter.end=n},leave:n=>{t._x_transition.leave.during=n},"leave-start":n=>{t._x_transition.leave.start=n},"leave-end":n=>{t._x_transition.leave.end=n}}[i](e)}function Sa(t,e,i){zn(t,qt);let r=!e.includes("in")&&!e.includes("out")&&!i,n=r||e.includes("in")||["enter"].includes(i),s=r||e.includes("out")||["leave"].includes(i);e.includes("in")&&!r&&(e=e.filter((p,b)=>b<e.indexOf("out"))),e.includes("out")&&!r&&(e=e.filter((p,b)=>b>e.indexOf("out")));let a=!e.includes("opacity")&&!e.includes("scale"),o=a||e.includes("opacity"),l=a||e.includes("scale"),u=o?0:1,d=l?tt(e,"scale",95)/100:1,c=tt(e,"delay",0)/1e3,f=tt(e,"origin","center"),m="opacity, transform",g=tt(e,"duration",150)/1e3,v=tt(e,"duration",75)/1e3,h="cubic-bezier(0.4, 0.0, 0.2, 1)";n&&(t._x_transition.enter.during={transformOrigin:f,transitionDelay:`${c}s`,transitionProperty:m,transitionDuration:`${g}s`,transitionTimingFunction:h},t._x_transition.enter.start={opacity:u,transform:`scale(${d})`},t._x_transition.enter.end={opacity:1,transform:"scale(1)"}),s&&(t._x_transition.leave.during={transformOrigin:f,transitionDelay:`${c}s`,transitionProperty:m,transitionDuration:`${v}s`,transitionTimingFunction:h},t._x_transition.leave.start={opacity:1,transform:"scale(1)"},t._x_transition.leave.end={opacity:u,transform:`scale(${d})`})}function zn(t,e,i={}){t._x_transition||(t._x_transition={enter:{during:i,start:i,end:i},leave:{during:i,start:i,end:i},in(r=()=>{},n=()=>{}){Oi(t,e,{during:this.enter.during,start:this.enter.start,end:this.enter.end},r,n)},out(r=()=>{},n=()=>{}){Oi(t,e,{during:this.leave.during,start:this.leave.start,end:this.leave.end},r,n)}})}window.Element.prototype._x_toggleAndCascadeWithTransitions=function(t,e,i,r){const n=document.visibilityState==="visible"?requestAnimationFrame:setTimeout;let s=()=>n(i);if(e){t._x_transition&&(t._x_transition.enter||t._x_transition.leave)?t._x_transition.enter&&(Object.entries(t._x_transition.enter.during).length||Object.entries(t._x_transition.enter.start).length||Object.entries(t._x_transition.enter.end).length)?t._x_transition.in(i):s():t._x_transition?t._x_transition.in(i):s();return}t._x_hidePromise=t._x_transition?new Promise((a,o)=>{t._x_transition.out(()=>{},()=>a(r)),t._x_transitioning&&t._x_transitioning.beforeCancel(()=>o({isFromCancelledTransition:!0}))}):Promise.resolve(r),queueMicrotask(()=>{let a=Rn(t);a?(a._x_hideChildren||(a._x_hideChildren=[]),a._x_hideChildren.push(t)):n(()=>{let o=l=>{let u=Promise.all([l._x_hidePromise,...(l._x_hideChildren||[]).map(o)]).then(([d])=>d==null?void 0:d());return delete l._x_hidePromise,delete l._x_hideChildren,u};o(t).catch(l=>{if(!l.isFromCancelledTransition)throw l})})})};function Rn(t){let e=t.parentNode;if(e)return e._x_hidePromise?e:Rn(e)}function Oi(t,e,{during:i,start:r,end:n}={},s=()=>{},a=()=>{}){if(t._x_transitioning&&t._x_transitioning.cancel(),Object.keys(i).length===0&&Object.keys(r).length===0&&Object.keys(n).length===0){s(),a();return}let o,l,u;Ea(t,{start(){o=e(t,r)},during(){l=e(t,i)},before:s,end(){o(),u=e(t,n)},after:a,cleanup(){l(),u()}})}function Ea(t,e){let i,r,n,s=Ii(()=>{Y(()=>{i=!0,r||e.before(),n||(e.end(),Li()),e.after(),t.isConnected&&e.cleanup(),delete t._x_transitioning})});t._x_transitioning={beforeCancels:[],beforeCancel(a){this.beforeCancels.push(a)},cancel:Ii(function(){for(;this.beforeCancels.length;)this.beforeCancels.shift()();s()}),finish:s},Y(()=>{e.start(),e.during()}),ga(),requestAnimationFrame(()=>{if(i)return;let a=Number(getComputedStyle(t).transitionDuration.replace(/,.*/,"").replace("s",""))*1e3,o=Number(getComputedStyle(t).transitionDelay.replace(/,.*/,"").replace("s",""))*1e3;a===0&&(a=Number(getComputedStyle(t).animationDuration.replace("s",""))*1e3),Y(()=>{e.before()}),r=!0,requestAnimationFrame(()=>{i||(Y(()=>{e.end()}),Li(),setTimeout(t._x_transitioning.finish,a+o),n=!0)})})}function tt(t,e,i){if(t.indexOf(e)===-1)return i;const r=t[t.indexOf(e)+1];if(!r||e==="scale"&&isNaN(r))return i;if(e==="duration"||e==="delay"){let n=r.match(/([0-9]+)ms/);if(n)return n[1]}return e==="origin"&&["top","right","left","center","bottom"].includes(t[t.indexOf(e)+2])?[r,t[t.indexOf(e)+2]].join(" "):r}var xe=!1;function _e(t,e=()=>{}){return(...i)=>xe?e(...i):t(...i)}function Ta(t){return(...e)=>xe&&t(...e)}var kn=[];function Yt(t){kn.push(t)}function _a(t,e){kn.forEach(i=>i(t,e)),xe=!0,Fn(()=>{me(e,(i,r)=>{r(i,()=>{})})}),xe=!1}var Di=!1;function Ca(t,e){e._x_dataStack||(e._x_dataStack=t._x_dataStack),xe=!0,Di=!0,Fn(()=>{Ma(e)}),xe=!1,Di=!1}function Ma(t){let e=!1;me(t,(r,n)=>{ye(r,(s,a)=>{if(e&&pa(s))return a();e=!0,n(s,a)})})}function Fn(t){let e=Ne;yr((i,r)=>{let n=e(i);return Ue(n),()=>{}}),t(),yr(e)}function Nn(t,e,i,r=[]){switch(t._x_bindings||(t._x_bindings=Ye({})),t._x_bindings[e]=i,e=r.includes("camel")?za(e):e,e){case"value":Aa(t,i);break;case"style":La(t,i);break;case"class":Pa(t,i);break;case"selected":case"checked":Ia(t,e,i);break;default:Bn(t,e,i);break}}function Aa(t,e){if(t.type==="radio")t.attributes.value===void 0&&(t.value=e),window.fromModel&&(typeof e=="boolean"?t.checked=It(t.value)===e:t.checked=Er(t.value,e));else if(t.type==="checkbox")Number.isInteger(e)?t.value=e:!Array.isArray(e)&&typeof e!="boolean"&&![null,void 0].includes(e)?t.value=String(e):Array.isArray(e)?t.checked=e.some(i=>Er(i,t.value)):t.checked=!!e;else if(t.tagName==="SELECT")$a(t,e);else{if(t.value===e)return;t.value=e===void 0?"":e}}function Pa(t,e){t._x_undoAddedClasses&&t._x_undoAddedClasses(),t._x_undoAddedClasses=ir(t,e)}function La(t,e){t._x_undoAddedStyles&&t._x_undoAddedStyles(),t._x_undoAddedStyles=qt(t,e)}function Ia(t,e,i){Bn(t,e,i),Da(t,e,i)}function Bn(t,e,i){[null,void 0,!1].includes(i)&&Ra(e)?t.removeAttribute(e):(Hn(e)&&(i=e),Oa(t,e,i))}function Oa(t,e,i){t.getAttribute(e)!=i&&t.setAttribute(e,i)}function Da(t,e,i){t[e]!==i&&(t[e]=i)}function $a(t,e){const i=[].concat(e).map(r=>r+"");Array.from(t.options).forEach(r=>{r.selected=i.includes(r.value)})}function za(t){return t.toLowerCase().replace(/-(\w)/g,(e,i)=>i.toUpperCase())}function Er(t,e){return t==e}function It(t){return[1,"1","true","on","yes",!0].includes(t)?!0:[0,"0","false","off","no",!1].includes(t)?!1:t?!!t:null}function Hn(t){return["disabled","checked","required","readonly","open","selected","autofocus","itemscope","multiple","novalidate","allowfullscreen","allowpaymentrequest","formnovalidate","autoplay","controls","loop","muted","playsinline","default","ismap","reversed","async","defer","nomodule"].includes(t)}function Ra(t){return!["aria-pressed","aria-checked","aria-expanded","aria-selected"].includes(t)}function ka(t,e,i){return t._x_bindings&&t._x_bindings[e]!==void 0?t._x_bindings[e]:Gn(t,e,i)}function Fa(t,e,i,r=!0){if(t._x_bindings&&t._x_bindings[e]!==void 0)return t._x_bindings[e];if(t._x_inlineBindings&&t._x_inlineBindings[e]!==void 0){let n=t._x_inlineBindings[e];return n.extract=r,gn(()=>Le(t,n.expression))}return Gn(t,e,i)}function Gn(t,e,i){let r=t.getAttribute(e);return r===null?typeof i=="function"?i():i:r===""?!0:Hn(e)?!![e,"true"].includes(r):r}function jn(t,e){var i;return function(){var r=this,n=arguments,s=function(){i=null,t.apply(r,n)};clearTimeout(i),i=setTimeout(s,e)}}function Vn(t,e){let i;return function(){let r=this,n=arguments;i||(t.apply(r,n),i=!0,setTimeout(()=>i=!1,e))}}function Wn({get:t,set:e},{get:i,set:r}){let n=!0,s,a=Ne(()=>{let o=t(),l=i();if(n)r(di(o)),n=!1;else{let u=JSON.stringify(o),d=JSON.stringify(l);u!==s?r(di(o)):u!==d&&e(di(l))}s=JSON.stringify(t()),JSON.stringify(i())});return()=>{Ue(a)}}function di(t){return typeof t=="object"?JSON.parse(JSON.stringify(t)):t}function Na(t){(Array.isArray(t)?t:[t]).forEach(i=>i(gt))}var Me={},Tr=!1;function Ba(t,e){if(Tr||(Me=Ye(Me),Tr=!0),e===void 0)return Me[t];Me[t]=e,typeof e=="object"&&e!==null&&e.hasOwnProperty("init")&&typeof e.init=="function"&&Me[t].init(),pn(Me[t])}function Ha(){return Me}var Xn={};function Ga(t,e){let i=typeof e!="function"?()=>e:e;return t instanceof Element?qn(t,i()):(Xn[t]=i,()=>{})}function ja(t){return Object.entries(Xn).forEach(([e,i])=>{Object.defineProperty(t,e,{get(){return(...r)=>i(...r)}})}),t}function qn(t,e,i){let r=[];for(;r.length;)r.pop()();let n=Object.entries(e).map(([a,o])=>({name:a,value:o})),s=bn(n);return n=n.map(a=>s.find(o=>o.name===a.name)?{name:`x-bind:${a.name}`,value:`"${a.value}"`}:a),Ji(t,n,i).map(a=>{r.push(a.runCleanups),a()}),()=>{for(;r.length;)r.pop()()}}var Yn={};function Va(t,e){Yn[t]=e}function Wa(t,e){return Object.entries(Yn).forEach(([i,r])=>{Object.defineProperty(t,i,{get(){return(...n)=>r.bind(e)(...n)},enumerable:!1})}),t}var Xa={get reactive(){return Ye},get release(){return Ue},get effect(){return Ne},get raw(){return rn},version:"3.14.0",flushAndStopDeferringMutations:Js,dontAutoEvaluateFunctions:gn,disableEffectScheduling:Vs,startObservingMutations:qi,stopObservingMutations:un,setReactivityEngine:Ws,onAttributeRemoved:cn,onAttributesAdded:ln,closestDataStack:Ve,skipDuringClone:_e,onlyDuringClone:Ta,addRootSelector:In,addInitSelector:On,interceptClone:Yt,addScopeToNode:pt,deferMutations:Ks,mapAttributes:Zi,evaluateLater:Q,interceptInit:ma,setEvaluator:ia,mergeProxies:mt,extractProp:Fa,findClosest:ht,onElRemoved:Vi,closestRoot:Xt,destroyTree:$n,interceptor:mn,transition:Oi,setStyles:qt,mutateDom:Y,directive:q,entangle:Wn,throttle:Vn,debounce:jn,evaluate:Le,initTree:me,nextTick:tr,prefixed:Ke,prefix:aa,plugin:Na,magic:le,store:Ba,start:fa,clone:Ca,cloneNode:_a,bound:ka,$data:fn,watch:nn,walk:ye,data:Va,bind:Ga},gt=Xa;function qa(t,e){const i=Object.create(null),r=t.split(",");for(let n=0;n<r.length;n++)i[r[n]]=!0;return n=>!!i[n]}var Ya=Object.freeze({}),Ua=Object.prototype.hasOwnProperty,Ut=(t,e)=>Ua.call(t,e),Ie=Array.isArray,lt=t=>Un(t)==="[object Map]",Ka=t=>typeof t=="string",rr=t=>typeof t=="symbol",Kt=t=>t!==null&&typeof t=="object",Ja=Object.prototype.toString,Un=t=>Ja.call(t),Kn=t=>Un(t).slice(8,-1),nr=t=>Ka(t)&&t!=="NaN"&&t[0]!=="-"&&""+parseInt(t,10)===t,Za=t=>{const e=Object.create(null);return i=>e[i]||(e[i]=t(i))},Qa=Za(t=>t.charAt(0).toUpperCase()+t.slice(1)),Jn=(t,e)=>t!==e&&(t===t||e===e),$i=new WeakMap,it=[],ce,Oe=Symbol("iterate"),zi=Symbol("Map key iterate");function eo(t){return t&&t._isEffect===!0}function to(t,e=Ya){eo(t)&&(t=t.raw);const i=no(t,e);return e.lazy||i(),i}function io(t){t.active&&(Zn(t),t.options.onStop&&t.options.onStop(),t.active=!1)}var ro=0;function no(t,e){const i=function(){if(!i.active)return t();if(!it.includes(i)){Zn(i);try{return ao(),it.push(i),ce=i,t()}finally{it.pop(),Qn(),ce=it[it.length-1]}}};return i.id=ro++,i.allowRecurse=!!e.allowRecurse,i._isEffect=!0,i.active=!0,i.raw=t,i.deps=[],i.options=e,i}function Zn(t){const{deps:e}=t;if(e.length){for(let i=0;i<e.length;i++)e[i].delete(t);e.length=0}}var We=!0,sr=[];function so(){sr.push(We),We=!1}function ao(){sr.push(We),We=!0}function Qn(){const t=sr.pop();We=t===void 0?!0:t}function oe(t,e,i){if(!We||ce===void 0)return;let r=$i.get(t);r||$i.set(t,r=new Map);let n=r.get(i);n||r.set(i,n=new Set),n.has(ce)||(n.add(ce),ce.deps.push(n),ce.options.onTrack&&ce.options.onTrack({effect:ce,target:t,type:e,key:i}))}function Se(t,e,i,r,n,s){const a=$i.get(t);if(!a)return;const o=new Set,l=d=>{d&&d.forEach(c=>{(c!==ce||c.allowRecurse)&&o.add(c)})};if(e==="clear")a.forEach(l);else if(i==="length"&&Ie(t))a.forEach((d,c)=>{(c==="length"||c>=r)&&l(d)});else switch(i!==void 0&&l(a.get(i)),e){case"add":Ie(t)?nr(i)&&l(a.get("length")):(l(a.get(Oe)),lt(t)&&l(a.get(zi)));break;case"delete":Ie(t)||(l(a.get(Oe)),lt(t)&&l(a.get(zi)));break;case"set":lt(t)&&l(a.get(Oe));break}const u=d=>{d.options.onTrigger&&d.options.onTrigger({effect:d,target:t,key:i,type:e,newValue:r,oldValue:n,oldTarget:s}),d.options.scheduler?d.options.scheduler(d):d()};o.forEach(u)}var oo=qa("__proto__,__v_isRef,__isVue"),es=new Set(Object.getOwnPropertyNames(Symbol).map(t=>Symbol[t]).filter(rr)),lo=ts(),co=ts(!0),_r=uo();function uo(){const t={};return["includes","indexOf","lastIndexOf"].forEach(e=>{t[e]=function(...i){const r=V(this);for(let s=0,a=this.length;s<a;s++)oe(r,"get",s+"");const n=r[e](...i);return n===-1||n===!1?r[e](...i.map(V)):n}}),["push","pop","shift","unshift","splice"].forEach(e=>{t[e]=function(...i){so();const r=V(this)[e].apply(this,i);return Qn(),r}}),t}function ts(t=!1,e=!1){return function(r,n,s){if(n==="__v_isReactive")return!t;if(n==="__v_isReadonly")return t;if(n==="__v_raw"&&s===(t?e?_o:ss:e?To:ns).get(r))return r;const a=Ie(r);if(!t&&a&&Ut(_r,n))return Reflect.get(_r,n,s);const o=Reflect.get(r,n,s);return(rr(n)?es.has(n):oo(n))||(t||oe(r,"get",n),e)?o:Ri(o)?!a||!nr(n)?o.value:o:Kt(o)?t?as(o):cr(o):o}}var fo=po();function po(t=!1){return function(i,r,n,s){let a=i[r];if(!t&&(n=V(n),a=V(a),!Ie(i)&&Ri(a)&&!Ri(n)))return a.value=n,!0;const o=Ie(i)&&nr(r)?Number(r)<i.length:Ut(i,r),l=Reflect.set(i,r,n,s);return i===V(s)&&(o?Jn(n,a)&&Se(i,"set",r,n,a):Se(i,"add",r,n)),l}}function mo(t,e){const i=Ut(t,e),r=t[e],n=Reflect.deleteProperty(t,e);return n&&i&&Se(t,"delete",e,void 0,r),n}function ho(t,e){const i=Reflect.has(t,e);return(!rr(e)||!es.has(e))&&oe(t,"has",e),i}function go(t){return oe(t,"iterate",Ie(t)?"length":Oe),Reflect.ownKeys(t)}var vo={get:lo,set:fo,deleteProperty:mo,has:ho,ownKeys:go},wo={get:co,set(t,e){return console.warn(`Set operation on key "${String(e)}" failed: target is readonly.`,t),!0},deleteProperty(t,e){return console.warn(`Delete operation on key "${String(e)}" failed: target is readonly.`,t),!0}},ar=t=>Kt(t)?cr(t):t,or=t=>Kt(t)?as(t):t,lr=t=>t,Jt=t=>Reflect.getPrototypeOf(t);function St(t,e,i=!1,r=!1){t=t.__v_raw;const n=V(t),s=V(e);e!==s&&!i&&oe(n,"get",e),!i&&oe(n,"get",s);const{has:a}=Jt(n),o=r?lr:i?or:ar;if(a.call(n,e))return o(t.get(e));if(a.call(n,s))return o(t.get(s));t!==n&&t.get(e)}function Et(t,e=!1){const i=this.__v_raw,r=V(i),n=V(t);return t!==n&&!e&&oe(r,"has",t),!e&&oe(r,"has",n),t===n?i.has(t):i.has(t)||i.has(n)}function Tt(t,e=!1){return t=t.__v_raw,!e&&oe(V(t),"iterate",Oe),Reflect.get(t,"size",t)}function Cr(t){t=V(t);const e=V(this);return Jt(e).has.call(e,t)||(e.add(t),Se(e,"add",t,t)),this}function Mr(t,e){e=V(e);const i=V(this),{has:r,get:n}=Jt(i);let s=r.call(i,t);s?rs(i,r,t):(t=V(t),s=r.call(i,t));const a=n.call(i,t);return i.set(t,e),s?Jn(e,a)&&Se(i,"set",t,e,a):Se(i,"add",t,e),this}function Ar(t){const e=V(this),{has:i,get:r}=Jt(e);let n=i.call(e,t);n?rs(e,i,t):(t=V(t),n=i.call(e,t));const s=r?r.call(e,t):void 0,a=e.delete(t);return n&&Se(e,"delete",t,void 0,s),a}function Pr(){const t=V(this),e=t.size!==0,i=lt(t)?new Map(t):new Set(t),r=t.clear();return e&&Se(t,"clear",void 0,void 0,i),r}function _t(t,e){return function(r,n){const s=this,a=s.__v_raw,o=V(a),l=e?lr:t?or:ar;return!t&&oe(o,"iterate",Oe),a.forEach((u,d)=>r.call(n,l(u),l(d),s))}}function Ct(t,e,i){return function(...r){const n=this.__v_raw,s=V(n),a=lt(s),o=t==="entries"||t===Symbol.iterator&&a,l=t==="keys"&&a,u=n[t](...r),d=i?lr:e?or:ar;return!e&&oe(s,"iterate",l?zi:Oe),{next(){const{value:c,done:f}=u.next();return f?{value:c,done:f}:{value:o?[d(c[0]),d(c[1])]:d(c),done:f}},[Symbol.iterator](){return this}}}}function ve(t){return function(...e){{const i=e[0]?`on key "${e[0]}" `:"";console.warn(`${Qa(t)} operation ${i}failed: target is readonly.`,V(this))}return t==="delete"?!1:this}}function bo(){const t={get(s){return St(this,s)},get size(){return Tt(this)},has:Et,add:Cr,set:Mr,delete:Ar,clear:Pr,forEach:_t(!1,!1)},e={get(s){return St(this,s,!1,!0)},get size(){return Tt(this)},has:Et,add:Cr,set:Mr,delete:Ar,clear:Pr,forEach:_t(!1,!0)},i={get(s){return St(this,s,!0)},get size(){return Tt(this,!0)},has(s){return Et.call(this,s,!0)},add:ve("add"),set:ve("set"),delete:ve("delete"),clear:ve("clear"),forEach:_t(!0,!1)},r={get(s){return St(this,s,!0,!0)},get size(){return Tt(this,!0)},has(s){return Et.call(this,s,!0)},add:ve("add"),set:ve("set"),delete:ve("delete"),clear:ve("clear"),forEach:_t(!0,!0)};return["keys","values","entries",Symbol.iterator].forEach(s=>{t[s]=Ct(s,!1,!1),i[s]=Ct(s,!0,!1),e[s]=Ct(s,!1,!0),r[s]=Ct(s,!0,!0)}),[t,i,e,r]}var[yo,xo,Ud,Kd]=bo();function is(t,e){const i=t?xo:yo;return(r,n,s)=>n==="__v_isReactive"?!t:n==="__v_isReadonly"?t:n==="__v_raw"?r:Reflect.get(Ut(i,n)&&n in r?i:r,n,s)}var So={get:is(!1)},Eo={get:is(!0)};function rs(t,e,i){const r=V(i);if(r!==i&&e.call(t,r)){const n=Kn(t);console.warn(`Reactive ${n} contains both the raw and reactive versions of the same object${n==="Map"?" as keys":""}, which can lead to inconsistencies. Avoid differentiating between the raw and reactive versions of an object and only use the reactive version if possible.`)}}var ns=new WeakMap,To=new WeakMap,ss=new WeakMap,_o=new WeakMap;function Co(t){switch(t){case"Object":case"Array":return 1;case"Map":case"Set":case"WeakMap":case"WeakSet":return 2;default:return 0}}function Mo(t){return t.__v_skip||!Object.isExtensible(t)?0:Co(Kn(t))}function cr(t){return t&&t.__v_isReadonly?t:os(t,!1,vo,So,ns)}function as(t){return os(t,!0,wo,Eo,ss)}function os(t,e,i,r,n){if(!Kt(t))return console.warn(`value cannot be made reactive: ${String(t)}`),t;if(t.__v_raw&&!(e&&t.__v_isReactive))return t;const s=n.get(t);if(s)return s;const a=Mo(t);if(a===0)return t;const o=new Proxy(t,a===2?r:i);return n.set(t,o),o}function V(t){return t&&V(t.__v_raw)||t}function Ri(t){return!!(t&&t.__v_isRef===!0)}le("nextTick",()=>tr);le("dispatch",t=>ot.bind(ot,t));le("watch",(t,{evaluateLater:e,cleanup:i})=>(r,n)=>{let s=e(r),o=nn(()=>{let l;return s(u=>l=u),l},n);i(o)});le("store",Ha);le("data",t=>fn(t));le("root",t=>Xt(t));le("refs",t=>(t._x_refs_proxy||(t._x_refs_proxy=mt(Ao(t))),t._x_refs_proxy));function Ao(t){let e=[];return ht(t,i=>{i._x_refs&&e.push(i._x_refs)}),e}var ui={};function ls(t){return ui[t]||(ui[t]=0),++ui[t]}function Po(t,e){return ht(t,i=>{if(i._x_ids&&i._x_ids[e])return!0})}function Lo(t,e){t._x_ids||(t._x_ids={}),t._x_ids[e]||(t._x_ids[e]=ls(e))}le("id",(t,{cleanup:e})=>(i,r=null)=>{let n=`${i}${r?`-${r}`:""}`;return Io(t,n,e,()=>{let s=Po(t,i),a=s?s._x_ids[i]:ls(i);return r?`${i}-${a}-${r}`:`${i}-${a}`})});Yt((t,e)=>{t._x_id&&(e._x_id=t._x_id)});function Io(t,e,i,r){if(t._x_id||(t._x_id={}),t._x_id[e])return t._x_id[e];let n=r();return t._x_id[e]=n,i(()=>{delete t._x_id[e]}),n}le("el",t=>t);cs("Focus","focus","focus");cs("Persist","persist","persist");function cs(t,e,i){le(e,r=>se(`You can't use [$${e}] without first installing the "${t}" plugin here: https://alpinejs.dev/plugins/${i}`,r))}q("modelable",(t,{expression:e},{effect:i,evaluateLater:r,cleanup:n})=>{let s=r(e),a=()=>{let d;return s(c=>d=c),d},o=r(`${e} = __placeholder`),l=d=>o(()=>{},{scope:{__placeholder:d}}),u=a();l(u),queueMicrotask(()=>{if(!t._x_model)return;t._x_removeModelListeners.default();let d=t._x_model.get,c=t._x_model.set,f=Wn({get(){return d()},set(m){c(m)}},{get(){return a()},set(m){l(m)}});n(f)})});q("teleport",(t,{modifiers:e,expression:i},{cleanup:r})=>{t.tagName.toLowerCase()!=="template"&&se("x-teleport can only be used on a <template> tag",t);let n=Lr(i),s=t.content.cloneNode(!0).firstElementChild;t._x_teleport=s,s._x_teleportBack=t,t.setAttribute("data-teleport-template",!0),s.setAttribute("data-teleport-target",!0),t._x_forwardEvents&&t._x_forwardEvents.forEach(o=>{s.addEventListener(o,l=>{l.stopPropagation(),t.dispatchEvent(new l.constructor(l.type,l))})}),pt(s,{},t);let a=(o,l,u)=>{u.includes("prepend")?l.parentNode.insertBefore(o,l):u.includes("append")?l.parentNode.insertBefore(o,l.nextSibling):l.appendChild(o)};Y(()=>{a(s,n,e),_e(()=>{me(s),s._x_ignore=!0})()}),t._x_teleportPutBack=()=>{let o=Lr(i);Y(()=>{a(t._x_teleport,o,e)})},r(()=>s.remove())});var Oo=document.createElement("div");function Lr(t){let e=_e(()=>document.querySelector(t),()=>Oo)();return e||se(`Cannot find x-teleport element for selector: "${t}"`),e}var ds=()=>{};ds.inline=(t,{modifiers:e},{cleanup:i})=>{e.includes("self")?t._x_ignoreSelf=!0:t._x_ignore=!0,i(()=>{e.includes("self")?delete t._x_ignoreSelf:delete t._x_ignore})};q("ignore",ds);q("effect",_e((t,{expression:e},{effect:i})=>{i(Q(t,e))}));function ki(t,e,i,r){let n=t,s=l=>r(l),a={},o=(l,u)=>d=>u(l,d);if(i.includes("dot")&&(e=Do(e)),i.includes("camel")&&(e=$o(e)),i.includes("passive")&&(a.passive=!0),i.includes("capture")&&(a.capture=!0),i.includes("window")&&(n=window),i.includes("document")&&(n=document),i.includes("debounce")){let l=i[i.indexOf("debounce")+1]||"invalid-wait",u=kt(l.split("ms")[0])?Number(l.split("ms")[0]):250;s=jn(s,u)}if(i.includes("throttle")){let l=i[i.indexOf("throttle")+1]||"invalid-wait",u=kt(l.split("ms")[0])?Number(l.split("ms")[0]):250;s=Vn(s,u)}return i.includes("prevent")&&(s=o(s,(l,u)=>{u.preventDefault(),l(u)})),i.includes("stop")&&(s=o(s,(l,u)=>{u.stopPropagation(),l(u)})),i.includes("once")&&(s=o(s,(l,u)=>{l(u),n.removeEventListener(e,s,a)})),(i.includes("away")||i.includes("outside"))&&(n=document,s=o(s,(l,u)=>{t.contains(u.target)||u.target.isConnected!==!1&&(t.offsetWidth<1&&t.offsetHeight<1||t._x_isShown!==!1&&l(u))})),i.includes("self")&&(s=o(s,(l,u)=>{u.target===t&&l(u)})),(Ro(e)||us(e))&&(s=o(s,(l,u)=>{ko(u,i)||l(u)})),n.addEventListener(e,s,a),()=>{n.removeEventListener(e,s,a)}}function Do(t){return t.replace(/-/g,".")}function $o(t){return t.toLowerCase().replace(/-(\w)/g,(e,i)=>i.toUpperCase())}function kt(t){return!Array.isArray(t)&&!isNaN(t)}function zo(t){return[" ","_"].includes(t)?t:t.replace(/([a-z])([A-Z])/g,"$1-$2").replace(/[_\s]/,"-").toLowerCase()}function Ro(t){return["keydown","keyup"].includes(t)}function us(t){return["contextmenu","click","mouse"].some(e=>t.includes(e))}function ko(t,e){let i=e.filter(s=>!["window","document","prevent","stop","once","capture","self","away","outside","passive"].includes(s));if(i.includes("debounce")){let s=i.indexOf("debounce");i.splice(s,kt((i[s+1]||"invalid-wait").split("ms")[0])?2:1)}if(i.includes("throttle")){let s=i.indexOf("throttle");i.splice(s,kt((i[s+1]||"invalid-wait").split("ms")[0])?2:1)}if(i.length===0||i.length===1&&Ir(t.key).includes(i[0]))return!1;const n=["ctrl","shift","alt","meta","cmd","super"].filter(s=>i.includes(s));return i=i.filter(s=>!n.includes(s)),!(n.length>0&&n.filter(a=>((a==="cmd"||a==="super")&&(a="meta"),t[`${a}Key`])).length===n.length&&(us(t.type)||Ir(t.key).includes(i[0])))}function Ir(t){if(!t)return[];t=zo(t);let e={ctrl:"control",slash:"/",space:" ",spacebar:" ",cmd:"meta",esc:"escape",up:"arrow-up",down:"arrow-down",left:"arrow-left",right:"arrow-right",period:".",comma:",",equal:"=",minus:"-",underscore:"_"};return e[t]=t,Object.keys(e).map(i=>{if(e[i]===t)return i}).filter(i=>i)}q("model",(t,{modifiers:e,expression:i},{effect:r,cleanup:n})=>{let s=t;e.includes("parent")&&(s=t.parentNode);let a=Q(s,i),o;typeof i=="string"?o=Q(s,`${i} = __placeholder`):typeof i=="function"&&typeof i()=="string"?o=Q(s,`${i()} = __placeholder`):o=()=>{};let l=()=>{let f;return a(m=>f=m),Or(f)?f.get():f},u=f=>{let m;a(g=>m=g),Or(m)?m.set(f):o(()=>{},{scope:{__placeholder:f}})};typeof i=="string"&&t.type==="radio"&&Y(()=>{t.hasAttribute("name")||t.setAttribute("name",i)});var d=t.tagName.toLowerCase()==="select"||["checkbox","radio"].includes(t.type)||e.includes("lazy")?"change":"input";let c=xe?()=>{}:ki(t,d,e,f=>{u(fi(t,e,f,l()))});if(e.includes("fill")&&([void 0,null,""].includes(l())||t.type==="checkbox"&&Array.isArray(l())||t.tagName.toLowerCase()==="select"&&t.multiple)&&u(fi(t,e,{target:t},l())),t._x_removeModelListeners||(t._x_removeModelListeners={}),t._x_removeModelListeners.default=c,n(()=>t._x_removeModelListeners.default()),t.form){let f=ki(t.form,"reset",[],m=>{tr(()=>t._x_model&&t._x_model.set(fi(t,e,{target:t},l())))});n(()=>f())}t._x_model={get(){return l()},set(f){u(f)}},t._x_forceModelUpdate=f=>{f===void 0&&typeof i=="string"&&i.match(/\./)&&(f=""),window.fromModel=!0,Y(()=>Nn(t,"value",f)),delete window.fromModel},r(()=>{let f=l();e.includes("unintrusive")&&document.activeElement.isSameNode(t)||t._x_forceModelUpdate(f)})});function fi(t,e,i,r){return Y(()=>{if(i instanceof CustomEvent&&i.detail!==void 0)return i.detail!==null&&i.detail!==void 0?i.detail:i.target.value;if(t.type==="checkbox")if(Array.isArray(r)){let n=null;return e.includes("number")?n=pi(i.target.value):e.includes("boolean")?n=It(i.target.value):n=i.target.value,i.target.checked?r.includes(n)?r:r.concat([n]):r.filter(s=>!Fo(s,n))}else return i.target.checked;else{if(t.tagName.toLowerCase()==="select"&&t.multiple)return e.includes("number")?Array.from(i.target.selectedOptions).map(n=>{let s=n.value||n.text;return pi(s)}):e.includes("boolean")?Array.from(i.target.selectedOptions).map(n=>{let s=n.value||n.text;return It(s)}):Array.from(i.target.selectedOptions).map(n=>n.value||n.text);{let n;return t.type==="radio"?i.target.checked?n=i.target.value:n=r:n=i.target.value,e.includes("number")?pi(n):e.includes("boolean")?It(n):e.includes("trim")?n.trim():n}}})}function pi(t){let e=t?parseFloat(t):null;return No(e)?e:t}function Fo(t,e){return t==e}function No(t){return!Array.isArray(t)&&!isNaN(t)}function Or(t){return t!==null&&typeof t=="object"&&typeof t.get=="function"&&typeof t.set=="function"}q("cloak",t=>queueMicrotask(()=>Y(()=>t.removeAttribute(Ke("cloak")))));On(()=>`[${Ke("init")}]`);q("init",_e((t,{expression:e},{evaluate:i})=>typeof e=="string"?!!e.trim()&&i(e,{},!1):i(e,{},!1)));q("text",(t,{expression:e},{effect:i,evaluateLater:r})=>{let n=r(e);i(()=>{n(s=>{Y(()=>{t.textContent=s})})})});q("html",(t,{expression:e},{effect:i,evaluateLater:r})=>{let n=r(e);i(()=>{n(s=>{Y(()=>{t.innerHTML=s,t._x_ignoreSelf=!0,me(t),delete t._x_ignoreSelf})})})});Zi(Sn(":",En(Ke("bind:"))));var fs=(t,{value:e,modifiers:i,expression:r,original:n},{effect:s,cleanup:a})=>{if(!e){let l={};ja(l),Q(t,r)(d=>{qn(t,d,n)},{scope:l});return}if(e==="key")return Bo(t,r);if(t._x_inlineBindings&&t._x_inlineBindings[e]&&t._x_inlineBindings[e].extract)return;let o=Q(t,r);s(()=>o(l=>{l===void 0&&typeof r=="string"&&r.match(/\./)&&(l=""),Y(()=>Nn(t,e,l,i))})),a(()=>{t._x_undoAddedClasses&&t._x_undoAddedClasses(),t._x_undoAddedStyles&&t._x_undoAddedStyles()})};fs.inline=(t,{value:e,modifiers:i,expression:r})=>{e&&(t._x_inlineBindings||(t._x_inlineBindings={}),t._x_inlineBindings[e]={expression:r,extract:!1})};q("bind",fs);function Bo(t,e){t._x_keyExpression=e}In(()=>`[${Ke("data")}]`);q("data",(t,{expression:e},{cleanup:i})=>{if(Ho(t))return;e=e===""?"{}":e;let r={};Ci(r,t);let n={};Wa(n,r);let s=Le(t,e,{scope:n});(s===void 0||s===!0)&&(s={}),Ci(s,t);let a=Ye(s);pn(a);let o=pt(t,a);a.init&&Le(t,a.init),i(()=>{a.destroy&&Le(t,a.destroy),o()})});Yt((t,e)=>{t._x_dataStack&&(e._x_dataStack=t._x_dataStack,e.setAttribute("data-has-alpine-state",!0))});function Ho(t){return xe?Di?!0:t.hasAttribute("data-has-alpine-state"):!1}q("show",(t,{modifiers:e,expression:i},{effect:r})=>{let n=Q(t,i);t._x_doHide||(t._x_doHide=()=>{Y(()=>{t.style.setProperty("display","none",e.includes("important")?"important":void 0)})}),t._x_doShow||(t._x_doShow=()=>{Y(()=>{t.style.length===1&&t.style.display==="none"?t.removeAttribute("style"):t.style.removeProperty("display")})});let s=()=>{t._x_doHide(),t._x_isShown=!1},a=()=>{t._x_doShow(),t._x_isShown=!0},o=()=>setTimeout(a),l=Ii(c=>c?a():s(),c=>{typeof t._x_toggleAndCascadeWithTransitions=="function"?t._x_toggleAndCascadeWithTransitions(t,c,a,s):c?o():s()}),u,d=!0;r(()=>n(c=>{!d&&c===u||(e.includes("immediate")&&(c?o():s()),l(c),u=c,d=!1)}))});q("for",(t,{expression:e},{effect:i,cleanup:r})=>{let n=jo(e),s=Q(t,n.items),a=Q(t,t._x_keyExpression||"index");t._x_prevKeys=[],t._x_lookup={},i(()=>Go(t,n,s,a)),r(()=>{Object.values(t._x_lookup).forEach(o=>o.remove()),delete t._x_prevKeys,delete t._x_lookup})});function Go(t,e,i,r){let n=a=>typeof a=="object"&&!Array.isArray(a),s=t;i(a=>{Vo(a)&&a>=0&&(a=Array.from(Array(a).keys(),h=>h+1)),a===void 0&&(a=[]);let o=t._x_lookup,l=t._x_prevKeys,u=[],d=[];if(n(a))a=Object.entries(a).map(([h,p])=>{let b=Dr(e,p,h,a);r(w=>{d.includes(w)&&se("Duplicate key on x-for",t),d.push(w)},{scope:{index:h,...b}}),u.push(b)});else for(let h=0;h<a.length;h++){let p=Dr(e,a[h],h,a);r(b=>{d.includes(b)&&se("Duplicate key on x-for",t),d.push(b)},{scope:{index:h,...p}}),u.push(p)}let c=[],f=[],m=[],g=[];for(let h=0;h<l.length;h++){let p=l[h];d.indexOf(p)===-1&&m.push(p)}l=l.filter(h=>!m.includes(h));let v="template";for(let h=0;h<d.length;h++){let p=d[h],b=l.indexOf(p);if(b===-1)l.splice(h,0,p),c.push([v,h]);else if(b!==h){let w=l.splice(h,1)[0],y=l.splice(b-1,1)[0];l.splice(h,0,y),l.splice(b,0,w),f.push([w,y])}else g.push(p);v=p}for(let h=0;h<m.length;h++){let p=m[h];o[p]._x_effects&&o[p]._x_effects.forEach(tn),o[p].remove(),o[p]=null,delete o[p]}for(let h=0;h<f.length;h++){let[p,b]=f[h],w=o[p],y=o[b],E=document.createElement("div");Y(()=>{y||se('x-for ":key" is undefined or invalid',s,b,o),y.after(E),w.after(y),y._x_currentIfEl&&y.after(y._x_currentIfEl),E.before(w),w._x_currentIfEl&&w.after(w._x_currentIfEl),E.remove()}),y._x_refreshXForScope(u[d.indexOf(b)])}for(let h=0;h<c.length;h++){let[p,b]=c[h],w=p==="template"?s:o[p];w._x_currentIfEl&&(w=w._x_currentIfEl);let y=u[b],E=d[b],x=document.importNode(s.content,!0).firstElementChild,A=Ye(y);pt(x,A,s),x._x_refreshXForScope=S=>{Object.entries(S).forEach(([P,C])=>{A[P]=C})},Y(()=>{w.after(x),_e(()=>me(x))()}),typeof E=="object"&&se("x-for key cannot be an object, it must be a string or an integer",s),o[E]=x}for(let h=0;h<g.length;h++)o[g[h]]._x_refreshXForScope(u[d.indexOf(g[h])]);s._x_prevKeys=d})}function jo(t){let e=/,([^,\}\]]*)(?:,([^,\}\]]*))?$/,i=/^\s*\(|\)\s*$/g,r=/([\s\S]*?)\s+(?:in|of)\s+([\s\S]*)/,n=t.match(r);if(!n)return;let s={};s.items=n[2].trim();let a=n[1].replace(i,"").trim(),o=a.match(e);return o?(s.item=a.replace(e,"").trim(),s.index=o[1].trim(),o[2]&&(s.collection=o[2].trim())):s.item=a,s}function Dr(t,e,i,r){let n={};return/^\[.*\]$/.test(t.item)&&Array.isArray(e)?t.item.replace("[","").replace("]","").split(",").map(a=>a.trim()).forEach((a,o)=>{n[a]=e[o]}):/^\{.*\}$/.test(t.item)&&!Array.isArray(e)&&typeof e=="object"?t.item.replace("{","").replace("}","").split(",").map(a=>a.trim()).forEach(a=>{n[a]=e[a]}):n[t.item]=e,t.index&&(n[t.index]=i),t.collection&&(n[t.collection]=r),n}function Vo(t){return!Array.isArray(t)&&!isNaN(t)}function ps(){}ps.inline=(t,{expression:e},{cleanup:i})=>{let r=Xt(t);r._x_refs||(r._x_refs={}),r._x_refs[e]=t,i(()=>delete r._x_refs[e])};q("ref",ps);q("if",(t,{expression:e},{effect:i,cleanup:r})=>{t.tagName.toLowerCase()!=="template"&&se("x-if can only be used on a <template> tag",t);let n=Q(t,e),s=()=>{if(t._x_currentIfEl)return t._x_currentIfEl;let o=t.content.cloneNode(!0).firstElementChild;return pt(o,{},t),Y(()=>{t.after(o),_e(()=>me(o))()}),t._x_currentIfEl=o,t._x_undoIf=()=>{ye(o,l=>{l._x_effects&&l._x_effects.forEach(tn)}),o.remove(),delete t._x_currentIfEl},o},a=()=>{t._x_undoIf&&(t._x_undoIf(),delete t._x_undoIf)};i(()=>n(o=>{o?s():a()})),r(()=>t._x_undoIf&&t._x_undoIf())});q("id",(t,{expression:e},{evaluate:i})=>{i(e).forEach(n=>Lo(t,n))});Yt((t,e)=>{t._x_ids&&(e._x_ids=t._x_ids)});Zi(Sn("@",En(Ke("on:"))));q("on",_e((t,{value:e,modifiers:i,expression:r},{cleanup:n})=>{let s=r?Q(t,r):()=>{};t.tagName.toLowerCase()==="template"&&(t._x_forwardEvents||(t._x_forwardEvents=[]),t._x_forwardEvents.includes(e)||t._x_forwardEvents.push(e));let a=ki(t,e,i,o=>{s(()=>{},{scope:{$event:o},params:[o]})});n(()=>a())}));Zt("Collapse","collapse","collapse");Zt("Intersect","intersect","intersect");Zt("Focus","trap","focus");Zt("Mask","mask","mask");function Zt(t,e,i){q(e,r=>se(`You can't use [x-${e}] without first installing the "${t}" plugin here: https://alpinejs.dev/plugins/${i}`,r))}gt.setEvaluator(wn);gt.setReactivityEngine({reactive:cr,effect:to,release:io,raw:V});var Wo=gt,de=Wo;function $r(t){return t!==null&&typeof t=="object"&&"constructor"in t&&t.constructor===Object}function dr(t,e){t===void 0&&(t={}),e===void 0&&(e={}),Object.keys(e).forEach(i=>{typeof t[i]>"u"?t[i]=e[i]:$r(e[i])&&$r(t[i])&&Object.keys(e[i]).length>0&&dr(t[i],e[i])})}const ms={body:{},addEventListener(){},removeEventListener(){},activeElement:{blur(){},nodeName:""},querySelector(){return null},querySelectorAll(){return[]},getElementById(){return null},createEvent(){return{initEvent(){}}},createElement(){return{children:[],childNodes:[],style:{},setAttribute(){},getElementsByTagName(){return[]}}},createElementNS(){return{}},importNode(){return null},location:{hash:"",host:"",hostname:"",href:"",origin:"",pathname:"",protocol:"",search:""}};function J(){const t=typeof document<"u"?document:{};return dr(t,ms),t}const Xo={document:ms,navigator:{userAgent:""},location:{hash:"",host:"",hostname:"",href:"",origin:"",pathname:"",protocol:"",search:""},history:{replaceState(){},pushState(){},go(){},back(){}},CustomEvent:function(){return this},addEventListener(){},removeEventListener(){},getComputedStyle(){return{getPropertyValue(){return""}}},Image(){},Date(){},screen:{},setTimeout(){},clearTimeout(){},matchMedia(){return{}},requestAnimationFrame(t){return typeof setTimeout>"u"?(t(),null):setTimeout(t,0)},cancelAnimationFrame(t){typeof setTimeout>"u"||clearTimeout(t)}};function W(){const t=typeof window<"u"?window:{};return dr(t,Xo),t}function we(t){return t===void 0&&(t=""),t.trim().split(" ").filter(e=>!!e.trim())}function qo(t){const e=t;Object.keys(e).forEach(i=>{try{e[i]=null}catch{}try{delete e[i]}catch{}})}function ze(t,e){return e===void 0&&(e=0),setTimeout(t,e)}function ne(){return Date.now()}function Yo(t){const e=W();let i;return e.getComputedStyle&&(i=e.getComputedStyle(t,null)),!i&&t.currentStyle&&(i=t.currentStyle),i||(i=t.style),i}function Fi(t,e){e===void 0&&(e="x");const i=W();let r,n,s;const a=Yo(t);return i.WebKitCSSMatrix?(n=a.transform||a.webkitTransform,n.split(",").length>6&&(n=n.split(", ").map(o=>o.replace(",",".")).join(", ")),s=new i.WebKitCSSMatrix(n==="none"?"":n)):(s=a.MozTransform||a.OTransform||a.MsTransform||a.msTransform||a.transform||a.getPropertyValue("transform").replace("translate(","matrix(1, 0, 0, 1,"),r=s.toString().split(",")),e==="x"&&(i.WebKitCSSMatrix?n=s.m41:r.length===16?n=parseFloat(r[12]):n=parseFloat(r[4])),e==="y"&&(i.WebKitCSSMatrix?n=s.m42:r.length===16?n=parseFloat(r[13]):n=parseFloat(r[5])),n||0}function st(t){return typeof t=="object"&&t!==null&&t.constructor&&Object.prototype.toString.call(t).slice(8,-1)==="Object"}function Uo(t){return typeof window<"u"&&typeof window.HTMLElement<"u"?t instanceof HTMLElement:t&&(t.nodeType===1||t.nodeType===11)}function te(){const t=Object(arguments.length<=0?void 0:arguments[0]),e=["__proto__","constructor","prototype"];for(let i=1;i<arguments.length;i+=1){const r=i<0||arguments.length<=i?void 0:arguments[i];if(r!=null&&!Uo(r)){const n=Object.keys(Object(r)).filter(s=>e.indexOf(s)<0);for(let s=0,a=n.length;s<a;s+=1){const o=n[s],l=Object.getOwnPropertyDescriptor(r,o);l!==void 0&&l.enumerable&&(st(t[o])&&st(r[o])?r[o].__swiper__?t[o]=r[o]:te(t[o],r[o]):!st(t[o])&&st(r[o])?(t[o]={},r[o].__swiper__?t[o]=r[o]:te(t[o],r[o])):t[o]=r[o])}}}return t}function at(t,e,i){t.style.setProperty(e,i)}function hs(t){let{swiper:e,targetPosition:i,side:r}=t;const n=W(),s=-e.translate;let a=null,o;const l=e.params.speed;e.wrapperEl.style.scrollSnapType="none",n.cancelAnimationFrame(e.cssModeFrameID);const u=i>s?"next":"prev",d=(f,m)=>u==="next"&&f>=m||u==="prev"&&f<=m,c=()=>{o=new Date().getTime(),a===null&&(a=o);const f=Math.max(Math.min((o-a)/l,1),0),m=.5-Math.cos(f*Math.PI)/2;let g=s+m*(i-s);if(d(g,i)&&(g=i),e.wrapperEl.scrollTo({[r]:g}),d(g,i)){e.wrapperEl.style.overflow="hidden",e.wrapperEl.style.scrollSnapType="",setTimeout(()=>{e.wrapperEl.style.overflow="",e.wrapperEl.scrollTo({[r]:g})}),n.cancelAnimationFrame(e.cssModeFrameID);return}e.cssModeFrameID=n.requestAnimationFrame(c)};c()}function Be(t){return t.querySelector(".swiper-slide-transform")||t.shadowRoot&&t.shadowRoot.querySelector(".swiper-slide-transform")||t}function K(t,e){return e===void 0&&(e=""),[...t.children].filter(i=>i.matches(e))}function Ft(t){try{console.warn(t);return}catch{}}function ie(t,e){e===void 0&&(e=[]);const i=document.createElement(t);return i.classList.add(...Array.isArray(e)?e:we(e)),i}function Nt(t){const e=W(),i=J(),r=t.getBoundingClientRect(),n=i.body,s=t.clientTop||n.clientTop||0,a=t.clientLeft||n.clientLeft||0,o=t===e?e.scrollY:t.scrollTop,l=t===e?e.scrollX:t.scrollLeft;return{top:r.top+o-s,left:r.left+l-a}}function Ko(t,e){const i=[];for(;t.previousElementSibling;){const r=t.previousElementSibling;e?r.matches(e)&&i.push(r):i.push(r),t=r}return i}function Jo(t,e){const i=[];for(;t.nextElementSibling;){const r=t.nextElementSibling;e?r.matches(e)&&i.push(r):i.push(r),t=r}return i}function be(t,e){return W().getComputedStyle(t,null).getPropertyValue(e)}function ut(t){let e=t,i;if(e){for(i=0;(e=e.previousSibling)!==null;)e.nodeType===1&&(i+=1);return i}}function De(t,e){const i=[];let r=t.parentElement;for(;r;)e?r.matches(e)&&i.push(r):i.push(r),r=r.parentElement;return i}function ct(t,e){function i(r){r.target===t&&(e.call(t,r),t.removeEventListener("transitionend",i))}e&&t.addEventListener("transitionend",i)}function Ni(t,e,i){const r=W();return t[e==="width"?"offsetWidth":"offsetHeight"]+parseFloat(r.getComputedStyle(t,null).getPropertyValue(e==="width"?"margin-right":"margin-top"))+parseFloat(r.getComputedStyle(t,null).getPropertyValue(e==="width"?"margin-left":"margin-bottom"))}function H(t){return(Array.isArray(t)?t:[t]).filter(e=>!!e)}let mi;function Zo(){const t=W(),e=J();return{smoothScroll:e.documentElement&&e.documentElement.style&&"scrollBehavior"in e.documentElement.style,touch:!!("ontouchstart"in t||t.DocumentTouch&&e instanceof t.DocumentTouch)}}function gs(){return mi||(mi=Zo()),mi}let hi;function Qo(t){let{userAgent:e}=t===void 0?{}:t;const i=gs(),r=W(),n=r.navigator.platform,s=e||r.navigator.userAgent,a={ios:!1,android:!1},o=r.screen.width,l=r.screen.height,u=s.match(/(Android);?[\s\/]+([\d.]+)?/);let d=s.match(/(iPad).*OS\s([\d_]+)/);const c=s.match(/(iPod)(.*OS\s([\d_]+))?/),f=!d&&s.match(/(iPhone\sOS|iOS)\s([\d_]+)/),m=n==="Win32";let g=n==="MacIntel";const v=["1024x1366","1366x1024","834x1194","1194x834","834x1112","1112x834","768x1024","1024x768","820x1180","1180x820","810x1080","1080x810"];return!d&&g&&i.touch&&v.indexOf(`${o}x${l}`)>=0&&(d=s.match(/(Version)\/([\d.]+)/),d||(d=[0,1,"13_0_0"]),g=!1),u&&!m&&(a.os="android",a.android=!0),(d||f||c)&&(a.os="ios",a.ios=!0),a}function vs(t){return t===void 0&&(t={}),hi||(hi=Qo(t)),hi}let gi;function el(){const t=W(),e=vs();let i=!1;function r(){const o=t.navigator.userAgent.toLowerCase();return o.indexOf("safari")>=0&&o.indexOf("chrome")<0&&o.indexOf("android")<0}if(r()){const o=String(t.navigator.userAgent);if(o.includes("Version/")){const[l,u]=o.split("Version/")[1].split(" ")[0].split(".").map(d=>Number(d));i=l<16||l===16&&u<2}}const n=/(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/i.test(t.navigator.userAgent),s=r(),a=s||n&&e.ios;return{isSafari:i||s,needPerspectiveFix:i,need3dFix:a,isWebView:n}}function tl(){return gi||(gi=el()),gi}function il(t){let{swiper:e,on:i,emit:r}=t;const n=W();let s=null,a=null;const o=()=>{!e||e.destroyed||!e.initialized||(r("beforeResize"),r("resize"))},l=()=>{!e||e.destroyed||!e.initialized||(s=new ResizeObserver(c=>{a=n.requestAnimationFrame(()=>{const{width:f,height:m}=e;let g=f,v=m;c.forEach(h=>{let{contentBoxSize:p,contentRect:b,target:w}=h;w&&w!==e.el||(g=b?b.width:(p[0]||p).inlineSize,v=b?b.height:(p[0]||p).blockSize)}),(g!==f||v!==m)&&o()})}),s.observe(e.el))},u=()=>{a&&n.cancelAnimationFrame(a),s&&s.unobserve&&e.el&&(s.unobserve(e.el),s=null)},d=()=>{!e||e.destroyed||!e.initialized||r("orientationchange")};i("init",()=>{if(e.params.resizeObserver&&typeof n.ResizeObserver<"u"){l();return}n.addEventListener("resize",o),n.addEventListener("orientationchange",d)}),i("destroy",()=>{u(),n.removeEventListener("resize",o),n.removeEventListener("orientationchange",d)})}function rl(t){let{swiper:e,extendParams:i,on:r,emit:n}=t;const s=[],a=W(),o=function(d,c){c===void 0&&(c={});const f=a.MutationObserver||a.WebkitMutationObserver,m=new f(g=>{if(e.__preventObserver__)return;if(g.length===1){n("observerUpdate",g[0]);return}const v=function(){n("observerUpdate",g[0])};a.requestAnimationFrame?a.requestAnimationFrame(v):a.setTimeout(v,0)});m.observe(d,{attributes:typeof c.attributes>"u"?!0:c.attributes,childList:typeof c.childList>"u"?!0:c.childList,characterData:typeof c.characterData>"u"?!0:c.characterData}),s.push(m)},l=()=>{if(e.params.observer){if(e.params.observeParents){const d=De(e.hostEl);for(let c=0;c<d.length;c+=1)o(d[c])}o(e.hostEl,{childList:e.params.observeSlideChildren}),o(e.wrapperEl,{attributes:!1})}},u=()=>{s.forEach(d=>{d.disconnect()}),s.splice(0,s.length)};i({observer:!1,observeParents:!1,observeSlideChildren:!1}),r("init",l),r("destroy",u)}var nl={on(t,e,i){const r=this;if(!r.eventsListeners||r.destroyed||typeof e!="function")return r;const n=i?"unshift":"push";return t.split(" ").forEach(s=>{r.eventsListeners[s]||(r.eventsListeners[s]=[]),r.eventsListeners[s][n](e)}),r},once(t,e,i){const r=this;if(!r.eventsListeners||r.destroyed||typeof e!="function")return r;function n(){r.off(t,n),n.__emitterProxy&&delete n.__emitterProxy;for(var s=arguments.length,a=new Array(s),o=0;o<s;o++)a[o]=arguments[o];e.apply(r,a)}return n.__emitterProxy=e,r.on(t,n,i)},onAny(t,e){const i=this;if(!i.eventsListeners||i.destroyed||typeof t!="function")return i;const r=e?"unshift":"push";return i.eventsAnyListeners.indexOf(t)<0&&i.eventsAnyListeners[r](t),i},offAny(t){const e=this;if(!e.eventsListeners||e.destroyed||!e.eventsAnyListeners)return e;const i=e.eventsAnyListeners.indexOf(t);return i>=0&&e.eventsAnyListeners.splice(i,1),e},off(t,e){const i=this;return!i.eventsListeners||i.destroyed||!i.eventsListeners||t.split(" ").forEach(r=>{typeof e>"u"?i.eventsListeners[r]=[]:i.eventsListeners[r]&&i.eventsListeners[r].forEach((n,s)=>{(n===e||n.__emitterProxy&&n.__emitterProxy===e)&&i.eventsListeners[r].splice(s,1)})}),i},emit(){const t=this;if(!t.eventsListeners||t.destroyed||!t.eventsListeners)return t;let e,i,r;for(var n=arguments.length,s=new Array(n),a=0;a<n;a++)s[a]=arguments[a];return typeof s[0]=="string"||Array.isArray(s[0])?(e=s[0],i=s.slice(1,s.length),r=t):(e=s[0].events,i=s[0].data,r=s[0].context||t),i.unshift(r),(Array.isArray(e)?e:e.split(" ")).forEach(l=>{t.eventsAnyListeners&&t.eventsAnyListeners.length&&t.eventsAnyListeners.forEach(u=>{u.apply(r,[l,...i])}),t.eventsListeners&&t.eventsListeners[l]&&t.eventsListeners[l].forEach(u=>{u.apply(r,i)})}),t}};function sl(){const t=this;let e,i;const r=t.el;typeof t.params.width<"u"&&t.params.width!==null?e=t.params.width:e=r.clientWidth,typeof t.params.height<"u"&&t.params.height!==null?i=t.params.height:i=r.clientHeight,!(e===0&&t.isHorizontal()||i===0&&t.isVertical())&&(e=e-parseInt(be(r,"padding-left")||0,10)-parseInt(be(r,"padding-right")||0,10),i=i-parseInt(be(r,"padding-top")||0,10)-parseInt(be(r,"padding-bottom")||0,10),Number.isNaN(e)&&(e=0),Number.isNaN(i)&&(i=0),Object.assign(t,{width:e,height:i,size:t.isHorizontal()?e:i}))}function al(){const t=this;function e(C,O){return parseFloat(C.getPropertyValue(t.getDirectionLabel(O))||0)}const i=t.params,{wrapperEl:r,slidesEl:n,size:s,rtlTranslate:a,wrongRTL:o}=t,l=t.virtual&&i.virtual.enabled,u=l?t.virtual.slides.length:t.slides.length,d=K(n,`.${t.params.slideClass}, swiper-slide`),c=l?t.virtual.slides.length:d.length;let f=[];const m=[],g=[];let v=i.slidesOffsetBefore;typeof v=="function"&&(v=i.slidesOffsetBefore.call(t));let h=i.slidesOffsetAfter;typeof h=="function"&&(h=i.slidesOffsetAfter.call(t));const p=t.snapGrid.length,b=t.slidesGrid.length;let w=i.spaceBetween,y=-v,E=0,x=0;if(typeof s>"u")return;typeof w=="string"&&w.indexOf("%")>=0?w=parseFloat(w.replace("%",""))/100*s:typeof w=="string"&&(w=parseFloat(w)),t.virtualSize=-w,d.forEach(C=>{a?C.style.marginLeft="":C.style.marginRight="",C.style.marginBottom="",C.style.marginTop=""}),i.centeredSlides&&i.cssMode&&(at(r,"--swiper-centered-offset-before",""),at(r,"--swiper-centered-offset-after",""));const A=i.grid&&i.grid.rows>1&&t.grid;A?t.grid.initSlides(d):t.grid&&t.grid.unsetSlides();let S;const P=i.slidesPerView==="auto"&&i.breakpoints&&Object.keys(i.breakpoints).filter(C=>typeof i.breakpoints[C].slidesPerView<"u").length>0;for(let C=0;C<c;C+=1){S=0;let O;if(d[C]&&(O=d[C]),A&&t.grid.updateSlide(C,O,d),!(d[C]&&be(O,"display")==="none")){if(i.slidesPerView==="auto"){P&&(d[C].style[t.getDirectionLabel("width")]="");const T=getComputedStyle(O),_=O.style.transform,M=O.style.webkitTransform;if(_&&(O.style.transform="none"),M&&(O.style.webkitTransform="none"),i.roundLengths)S=t.isHorizontal()?Ni(O,"width"):Ni(O,"height");else{const D=e(T,"width"),k=e(T,"padding-left"),L=e(T,"padding-right"),I=e(T,"margin-left"),R=e(T,"margin-right"),B=T.getPropertyValue("box-sizing");if(B&&B==="border-box")S=D+I+R;else{const{clientWidth:$,offsetWidth:z}=O;S=D+k+L+I+R+(z-$)}}_&&(O.style.transform=_),M&&(O.style.webkitTransform=M),i.roundLengths&&(S=Math.floor(S))}else S=(s-(i.slidesPerView-1)*w)/i.slidesPerView,i.roundLengths&&(S=Math.floor(S)),d[C]&&(d[C].style[t.getDirectionLabel("width")]=`${S}px`);d[C]&&(d[C].swiperSlideSize=S),g.push(S),i.centeredSlides?(y=y+S/2+E/2+w,E===0&&C!==0&&(y=y-s/2-w),C===0&&(y=y-s/2-w),Math.abs(y)<1/1e3&&(y=0),i.roundLengths&&(y=Math.floor(y)),x%i.slidesPerGroup===0&&f.push(y),m.push(y)):(i.roundLengths&&(y=Math.floor(y)),(x-Math.min(t.params.slidesPerGroupSkip,x))%t.params.slidesPerGroup===0&&f.push(y),m.push(y),y=y+S+w),t.virtualSize+=S+w,E=S,x+=1}}if(t.virtualSize=Math.max(t.virtualSize,s)+h,a&&o&&(i.effect==="slide"||i.effect==="coverflow")&&(r.style.width=`${t.virtualSize+w}px`),i.setWrapperSize&&(r.style[t.getDirectionLabel("width")]=`${t.virtualSize+w}px`),A&&t.grid.updateWrapperSize(S,f),!i.centeredSlides){const C=[];for(let O=0;O<f.length;O+=1){let T=f[O];i.roundLengths&&(T=Math.floor(T)),f[O]<=t.virtualSize-s&&C.push(T)}f=C,Math.floor(t.virtualSize-s)-Math.floor(f[f.length-1])>1&&f.push(t.virtualSize-s)}if(l&&i.loop){const C=g[0]+w;if(i.slidesPerGroup>1){const O=Math.ceil((t.virtual.slidesBefore+t.virtual.slidesAfter)/i.slidesPerGroup),T=C*i.slidesPerGroup;for(let _=0;_<O;_+=1)f.push(f[f.length-1]+T)}for(let O=0;O<t.virtual.slidesBefore+t.virtual.slidesAfter;O+=1)i.slidesPerGroup===1&&f.push(f[f.length-1]+C),m.push(m[m.length-1]+C),t.virtualSize+=C}if(f.length===0&&(f=[0]),w!==0){const C=t.isHorizontal()&&a?"marginLeft":t.getDirectionLabel("marginRight");d.filter((O,T)=>!i.cssMode||i.loop?!0:T!==d.length-1).forEach(O=>{O.style[C]=`${w}px`})}if(i.centeredSlides&&i.centeredSlidesBounds){let C=0;g.forEach(T=>{C+=T+(w||0)}),C-=w;const O=C-s;f=f.map(T=>T<=0?-v:T>O?O+h:T)}if(i.centerInsufficientSlides){let C=0;g.forEach(T=>{C+=T+(w||0)}),C-=w;const O=(i.slidesOffsetBefore||0)+(i.slidesOffsetAfter||0);if(C+O<s){const T=(s-C-O)/2;f.forEach((_,M)=>{f[M]=_-T}),m.forEach((_,M)=>{m[M]=_+T})}}if(Object.assign(t,{slides:d,snapGrid:f,slidesGrid:m,slidesSizesGrid:g}),i.centeredSlides&&i.cssMode&&!i.centeredSlidesBounds){at(r,"--swiper-centered-offset-before",`${-f[0]}px`),at(r,"--swiper-centered-offset-after",`${t.size/2-g[g.length-1]/2}px`);const C=-t.snapGrid[0],O=-t.slidesGrid[0];t.snapGrid=t.snapGrid.map(T=>T+C),t.slidesGrid=t.slidesGrid.map(T=>T+O)}if(c!==u&&t.emit("slidesLengthChange"),f.length!==p&&(t.params.watchOverflow&&t.checkOverflow(),t.emit("snapGridLengthChange")),m.length!==b&&t.emit("slidesGridLengthChange"),i.watchSlidesProgress&&t.updateSlidesOffset(),t.emit("slidesUpdated"),!l&&!i.cssMode&&(i.effect==="slide"||i.effect==="fade")){const C=`${i.containerModifierClass}backface-hidden`,O=t.el.classList.contains(C);c<=i.maxBackfaceHiddenSlides?O||t.el.classList.add(C):O&&t.el.classList.remove(C)}}function ol(t){const e=this,i=[],r=e.virtual&&e.params.virtual.enabled;let n=0,s;typeof t=="number"?e.setTransition(t):t===!0&&e.setTransition(e.params.speed);const a=o=>r?e.slides[e.getSlideIndexByData(o)]:e.slides[o];if(e.params.slidesPerView!=="auto"&&e.params.slidesPerView>1)if(e.params.centeredSlides)(e.visibleSlides||[]).forEach(o=>{i.push(o)});else for(s=0;s<Math.ceil(e.params.slidesPerView);s+=1){const o=e.activeIndex+s;if(o>e.slides.length&&!r)break;i.push(a(o))}else i.push(a(e.activeIndex));for(s=0;s<i.length;s+=1)if(typeof i[s]<"u"){const o=i[s].offsetHeight;n=o>n?o:n}(n||n===0)&&(e.wrapperEl.style.height=`${n}px`)}function ll(){const t=this,e=t.slides,i=t.isElement?t.isHorizontal()?t.wrapperEl.offsetLeft:t.wrapperEl.offsetTop:0;for(let r=0;r<e.length;r+=1)e[r].swiperSlideOffset=(t.isHorizontal()?e[r].offsetLeft:e[r].offsetTop)-i-t.cssOverflowAdjustment()}const zr=(t,e,i)=>{e&&!t.classList.contains(i)?t.classList.add(i):!e&&t.classList.contains(i)&&t.classList.remove(i)};function cl(t){t===void 0&&(t=this&&this.translate||0);const e=this,i=e.params,{slides:r,rtlTranslate:n,snapGrid:s}=e;if(r.length===0)return;typeof r[0].swiperSlideOffset>"u"&&e.updateSlidesOffset();let a=-t;n&&(a=t),e.visibleSlidesIndexes=[],e.visibleSlides=[];let o=i.spaceBetween;typeof o=="string"&&o.indexOf("%")>=0?o=parseFloat(o.replace("%",""))/100*e.size:typeof o=="string"&&(o=parseFloat(o));for(let l=0;l<r.length;l+=1){const u=r[l];let d=u.swiperSlideOffset;i.cssMode&&i.centeredSlides&&(d-=r[0].swiperSlideOffset);const c=(a+(i.centeredSlides?e.minTranslate():0)-d)/(u.swiperSlideSize+o),f=(a-s[0]+(i.centeredSlides?e.minTranslate():0)-d)/(u.swiperSlideSize+o),m=-(a-d),g=m+e.slidesSizesGrid[l],v=m>=0&&m<=e.size-e.slidesSizesGrid[l],h=m>=0&&m<e.size-1||g>1&&g<=e.size||m<=0&&g>=e.size;h&&(e.visibleSlides.push(u),e.visibleSlidesIndexes.push(l)),zr(u,h,i.slideVisibleClass),zr(u,v,i.slideFullyVisibleClass),u.progress=n?-c:c,u.originalProgress=n?-f:f}}function dl(t){const e=this;if(typeof t>"u"){const d=e.rtlTranslate?-1:1;t=e&&e.translate&&e.translate*d||0}const i=e.params,r=e.maxTranslate()-e.minTranslate();let{progress:n,isBeginning:s,isEnd:a,progressLoop:o}=e;const l=s,u=a;if(r===0)n=0,s=!0,a=!0;else{n=(t-e.minTranslate())/r;const d=Math.abs(t-e.minTranslate())<1,c=Math.abs(t-e.maxTranslate())<1;s=d||n<=0,a=c||n>=1,d&&(n=0),c&&(n=1)}if(i.loop){const d=e.getSlideIndexByData(0),c=e.getSlideIndexByData(e.slides.length-1),f=e.slidesGrid[d],m=e.slidesGrid[c],g=e.slidesGrid[e.slidesGrid.length-1],v=Math.abs(t);v>=f?o=(v-f)/g:o=(v+g-m)/g,o>1&&(o-=1)}Object.assign(e,{progress:n,progressLoop:o,isBeginning:s,isEnd:a}),(i.watchSlidesProgress||i.centeredSlides&&i.autoHeight)&&e.updateSlidesProgress(t),s&&!l&&e.emit("reachBeginning toEdge"),a&&!u&&e.emit("reachEnd toEdge"),(l&&!s||u&&!a)&&e.emit("fromEdge"),e.emit("progress",n)}const vi=(t,e,i)=>{e&&!t.classList.contains(i)?t.classList.add(i):!e&&t.classList.contains(i)&&t.classList.remove(i)};function ul(){const t=this,{slides:e,params:i,slidesEl:r,activeIndex:n}=t,s=t.virtual&&i.virtual.enabled,a=t.grid&&i.grid&&i.grid.rows>1,o=c=>K(r,`.${i.slideClass}${c}, swiper-slide${c}`)[0];let l,u,d;if(s)if(i.loop){let c=n-t.virtual.slidesBefore;c<0&&(c=t.virtual.slides.length+c),c>=t.virtual.slides.length&&(c-=t.virtual.slides.length),l=o(`[data-swiper-slide-index="${c}"]`)}else l=o(`[data-swiper-slide-index="${n}"]`);else a?(l=e.filter(c=>c.column===n)[0],d=e.filter(c=>c.column===n+1)[0],u=e.filter(c=>c.column===n-1)[0]):l=e[n];l&&(a||(d=Jo(l,`.${i.slideClass}, swiper-slide`)[0],i.loop&&!d&&(d=e[0]),u=Ko(l,`.${i.slideClass}, swiper-slide`)[0],i.loop&&!u===0&&(u=e[e.length-1]))),e.forEach(c=>{vi(c,c===l,i.slideActiveClass),vi(c,c===d,i.slideNextClass),vi(c,c===u,i.slidePrevClass)}),t.emitSlidesClasses()}const Ot=(t,e)=>{if(!t||t.destroyed||!t.params)return;const i=()=>t.isElement?"swiper-slide":`.${t.params.slideClass}`,r=e.closest(i());if(r){let n=r.querySelector(`.${t.params.lazyPreloaderClass}`);!n&&t.isElement&&(r.shadowRoot?n=r.shadowRoot.querySelector(`.${t.params.lazyPreloaderClass}`):requestAnimationFrame(()=>{r.shadowRoot&&(n=r.shadowRoot.querySelector(`.${t.params.lazyPreloaderClass}`),n&&n.remove())})),n&&n.remove()}},wi=(t,e)=>{if(!t.slides[e])return;const i=t.slides[e].querySelector('[loading="lazy"]');i&&i.removeAttribute("loading")},Bi=t=>{if(!t||t.destroyed||!t.params)return;let e=t.params.lazyPreloadPrevNext;const i=t.slides.length;if(!i||!e||e<0)return;e=Math.min(e,i);const r=t.params.slidesPerView==="auto"?t.slidesPerViewDynamic():Math.ceil(t.params.slidesPerView),n=t.activeIndex;if(t.params.grid&&t.params.grid.rows>1){const a=n,o=[a-e];o.push(...Array.from({length:e}).map((l,u)=>a+r+u)),t.slides.forEach((l,u)=>{o.includes(l.column)&&wi(t,u)});return}const s=n+r-1;if(t.params.rewind||t.params.loop)for(let a=n-e;a<=s+e;a+=1){const o=(a%i+i)%i;(o<n||o>s)&&wi(t,o)}else for(let a=Math.max(n-e,0);a<=Math.min(s+e,i-1);a+=1)a!==n&&(a>s||a<n)&&wi(t,a)};function fl(t){const{slidesGrid:e,params:i}=t,r=t.rtlTranslate?t.translate:-t.translate;let n;for(let s=0;s<e.length;s+=1)typeof e[s+1]<"u"?r>=e[s]&&r<e[s+1]-(e[s+1]-e[s])/2?n=s:r>=e[s]&&r<e[s+1]&&(n=s+1):r>=e[s]&&(n=s);return i.normalizeSlideIndex&&(n<0||typeof n>"u")&&(n=0),n}function pl(t){const e=this,i=e.rtlTranslate?e.translate:-e.translate,{snapGrid:r,params:n,activeIndex:s,realIndex:a,snapIndex:o}=e;let l=t,u;const d=m=>{let g=m-e.virtual.slidesBefore;return g<0&&(g=e.virtual.slides.length+g),g>=e.virtual.slides.length&&(g-=e.virtual.slides.length),g};if(typeof l>"u"&&(l=fl(e)),r.indexOf(i)>=0)u=r.indexOf(i);else{const m=Math.min(n.slidesPerGroupSkip,l);u=m+Math.floor((l-m)/n.slidesPerGroup)}if(u>=r.length&&(u=r.length-1),l===s&&!e.params.loop){u!==o&&(e.snapIndex=u,e.emit("snapIndexChange"));return}if(l===s&&e.params.loop&&e.virtual&&e.params.virtual.enabled){e.realIndex=d(l);return}const c=e.grid&&n.grid&&n.grid.rows>1;let f;if(e.virtual&&n.virtual.enabled&&n.loop)f=d(l);else if(c){const m=e.slides.filter(v=>v.column===l)[0];let g=parseInt(m.getAttribute("data-swiper-slide-index"),10);Number.isNaN(g)&&(g=Math.max(e.slides.indexOf(m),0)),f=Math.floor(g/n.grid.rows)}else if(e.slides[l]){const m=e.slides[l].getAttribute("data-swiper-slide-index");m?f=parseInt(m,10):f=l}else f=l;Object.assign(e,{previousSnapIndex:o,snapIndex:u,previousRealIndex:a,realIndex:f,previousIndex:s,activeIndex:l}),e.initialized&&Bi(e),e.emit("activeIndexChange"),e.emit("snapIndexChange"),(e.initialized||e.params.runCallbacksOnInit)&&(a!==f&&e.emit("realIndexChange"),e.emit("slideChange"))}function ml(t,e){const i=this,r=i.params;let n=t.closest(`.${r.slideClass}, swiper-slide`);!n&&i.isElement&&e&&e.length>1&&e.includes(t)&&[...e.slice(e.indexOf(t)+1,e.length)].forEach(o=>{!n&&o.matches&&o.matches(`.${r.slideClass}, swiper-slide`)&&(n=o)});let s=!1,a;if(n){for(let o=0;o<i.slides.length;o+=1)if(i.slides[o]===n){s=!0,a=o;break}}if(n&&s)i.clickedSlide=n,i.virtual&&i.params.virtual.enabled?i.clickedIndex=parseInt(n.getAttribute("data-swiper-slide-index"),10):i.clickedIndex=a;else{i.clickedSlide=void 0,i.clickedIndex=void 0;return}r.slideToClickedSlide&&i.clickedIndex!==void 0&&i.clickedIndex!==i.activeIndex&&i.slideToClickedSlide()}var hl={updateSize:sl,updateSlides:al,updateAutoHeight:ol,updateSlidesOffset:ll,updateSlidesProgress:cl,updateProgress:dl,updateSlidesClasses:ul,updateActiveIndex:pl,updateClickedSlide:ml};function gl(t){t===void 0&&(t=this.isHorizontal()?"x":"y");const e=this,{params:i,rtlTranslate:r,translate:n,wrapperEl:s}=e;if(i.virtualTranslate)return r?-n:n;if(i.cssMode)return n;let a=Fi(s,t);return a+=e.cssOverflowAdjustment(),r&&(a=-a),a||0}function vl(t,e){const i=this,{rtlTranslate:r,params:n,wrapperEl:s,progress:a}=i;let o=0,l=0;const u=0;i.isHorizontal()?o=r?-t:t:l=t,n.roundLengths&&(o=Math.floor(o),l=Math.floor(l)),i.previousTranslate=i.translate,i.translate=i.isHorizontal()?o:l,n.cssMode?s[i.isHorizontal()?"scrollLeft":"scrollTop"]=i.isHorizontal()?-o:-l:n.virtualTranslate||(i.isHorizontal()?o-=i.cssOverflowAdjustment():l-=i.cssOverflowAdjustment(),s.style.transform=`translate3d(${o}px, ${l}px, ${u}px)`);let d;const c=i.maxTranslate()-i.minTranslate();c===0?d=0:d=(t-i.minTranslate())/c,d!==a&&i.updateProgress(t),i.emit("setTranslate",i.translate,e)}function wl(){return-this.snapGrid[0]}function bl(){return-this.snapGrid[this.snapGrid.length-1]}function yl(t,e,i,r,n){t===void 0&&(t=0),e===void 0&&(e=this.params.speed),i===void 0&&(i=!0),r===void 0&&(r=!0);const s=this,{params:a,wrapperEl:o}=s;if(s.animating&&a.preventInteractionOnTransition)return!1;const l=s.minTranslate(),u=s.maxTranslate();let d;if(r&&t>l?d=l:r&&t<u?d=u:d=t,s.updateProgress(d),a.cssMode){const c=s.isHorizontal();if(e===0)o[c?"scrollLeft":"scrollTop"]=-d;else{if(!s.support.smoothScroll)return hs({swiper:s,targetPosition:-d,side:c?"left":"top"}),!0;o.scrollTo({[c?"left":"top"]:-d,behavior:"smooth"})}return!0}return e===0?(s.setTransition(0),s.setTranslate(d),i&&(s.emit("beforeTransitionStart",e,n),s.emit("transitionEnd"))):(s.setTransition(e),s.setTranslate(d),i&&(s.emit("beforeTransitionStart",e,n),s.emit("transitionStart")),s.animating||(s.animating=!0,s.onTranslateToWrapperTransitionEnd||(s.onTranslateToWrapperTransitionEnd=function(f){!s||s.destroyed||f.target===this&&(s.wrapperEl.removeEventListener("transitionend",s.onTranslateToWrapperTransitionEnd),s.onTranslateToWrapperTransitionEnd=null,delete s.onTranslateToWrapperTransitionEnd,s.animating=!1,i&&s.emit("transitionEnd"))}),s.wrapperEl.addEventListener("transitionend",s.onTranslateToWrapperTransitionEnd))),!0}var xl={getTranslate:gl,setTranslate:vl,minTranslate:wl,maxTranslate:bl,translateTo:yl};function Sl(t,e){const i=this;i.params.cssMode||(i.wrapperEl.style.transitionDuration=`${t}ms`,i.wrapperEl.style.transitionDelay=t===0?"0ms":""),i.emit("setTransition",t,e)}function ws(t){let{swiper:e,runCallbacks:i,direction:r,step:n}=t;const{activeIndex:s,previousIndex:a}=e;let o=r;if(o||(s>a?o="next":s<a?o="prev":o="reset"),e.emit(`transition${n}`),i&&s!==a){if(o==="reset"){e.emit(`slideResetTransition${n}`);return}e.emit(`slideChangeTransition${n}`),o==="next"?e.emit(`slideNextTransition${n}`):e.emit(`slidePrevTransition${n}`)}}function El(t,e){t===void 0&&(t=!0);const i=this,{params:r}=i;r.cssMode||(r.autoHeight&&i.updateAutoHeight(),ws({swiper:i,runCallbacks:t,direction:e,step:"Start"}))}function Tl(t,e){t===void 0&&(t=!0);const i=this,{params:r}=i;i.animating=!1,!r.cssMode&&(i.setTransition(0),ws({swiper:i,runCallbacks:t,direction:e,step:"End"}))}var _l={setTransition:Sl,transitionStart:El,transitionEnd:Tl};function Cl(t,e,i,r,n){t===void 0&&(t=0),i===void 0&&(i=!0),typeof t=="string"&&(t=parseInt(t,10));const s=this;let a=t;a<0&&(a=0);const{params:o,snapGrid:l,slidesGrid:u,previousIndex:d,activeIndex:c,rtlTranslate:f,wrapperEl:m,enabled:g}=s;if(!g&&!r&&!n||s.destroyed||s.animating&&o.preventInteractionOnTransition)return!1;typeof e>"u"&&(e=s.params.speed);const v=Math.min(s.params.slidesPerGroupSkip,a);let h=v+Math.floor((a-v)/s.params.slidesPerGroup);h>=l.length&&(h=l.length-1);const p=-l[h];if(o.normalizeSlideIndex)for(let w=0;w<u.length;w+=1){const y=-Math.floor(p*100),E=Math.floor(u[w]*100),x=Math.floor(u[w+1]*100);typeof u[w+1]<"u"?y>=E&&y<x-(x-E)/2?a=w:y>=E&&y<x&&(a=w+1):y>=E&&(a=w)}if(s.initialized&&a!==c&&(!s.allowSlideNext&&(f?p>s.translate&&p>s.minTranslate():p<s.translate&&p<s.minTranslate())||!s.allowSlidePrev&&p>s.translate&&p>s.maxTranslate()&&(c||0)!==a))return!1;a!==(d||0)&&i&&s.emit("beforeSlideChangeStart"),s.updateProgress(p);let b;if(a>c?b="next":a<c?b="prev":b="reset",f&&-p===s.translate||!f&&p===s.translate)return s.updateActiveIndex(a),o.autoHeight&&s.updateAutoHeight(),s.updateSlidesClasses(),o.effect!=="slide"&&s.setTranslate(p),b!=="reset"&&(s.transitionStart(i,b),s.transitionEnd(i,b)),!1;if(o.cssMode){const w=s.isHorizontal(),y=f?p:-p;if(e===0){const E=s.virtual&&s.params.virtual.enabled;E&&(s.wrapperEl.style.scrollSnapType="none",s._immediateVirtual=!0),E&&!s._cssModeVirtualInitialSet&&s.params.initialSlide>0?(s._cssModeVirtualInitialSet=!0,requestAnimationFrame(()=>{m[w?"scrollLeft":"scrollTop"]=y})):m[w?"scrollLeft":"scrollTop"]=y,E&&requestAnimationFrame(()=>{s.wrapperEl.style.scrollSnapType="",s._immediateVirtual=!1})}else{if(!s.support.smoothScroll)return hs({swiper:s,targetPosition:y,side:w?"left":"top"}),!0;m.scrollTo({[w?"left":"top"]:y,behavior:"smooth"})}return!0}return s.setTransition(e),s.setTranslate(p),s.updateActiveIndex(a),s.updateSlidesClasses(),s.emit("beforeTransitionStart",e,r),s.transitionStart(i,b),e===0?s.transitionEnd(i,b):s.animating||(s.animating=!0,s.onSlideToWrapperTransitionEnd||(s.onSlideToWrapperTransitionEnd=function(y){!s||s.destroyed||y.target===this&&(s.wrapperEl.removeEventListener("transitionend",s.onSlideToWrapperTransitionEnd),s.onSlideToWrapperTransitionEnd=null,delete s.onSlideToWrapperTransitionEnd,s.transitionEnd(i,b))}),s.wrapperEl.addEventListener("transitionend",s.onSlideToWrapperTransitionEnd)),!0}function Ml(t,e,i,r){t===void 0&&(t=0),i===void 0&&(i=!0),typeof t=="string"&&(t=parseInt(t,10));const n=this;if(n.destroyed)return;typeof e>"u"&&(e=n.params.speed);const s=n.grid&&n.params.grid&&n.params.grid.rows>1;let a=t;if(n.params.loop)if(n.virtual&&n.params.virtual.enabled)a=a+n.virtual.slidesBefore;else{let o;if(s){const f=a*n.params.grid.rows;o=n.slides.filter(m=>m.getAttribute("data-swiper-slide-index")*1===f)[0].column}else o=n.getSlideIndexByData(a);const l=s?Math.ceil(n.slides.length/n.params.grid.rows):n.slides.length,{centeredSlides:u}=n.params;let d=n.params.slidesPerView;d==="auto"?d=n.slidesPerViewDynamic():(d=Math.ceil(parseFloat(n.params.slidesPerView,10)),u&&d%2===0&&(d=d+1));let c=l-o<d;if(u&&(c=c||o<Math.ceil(d/2)),r&&u&&n.params.slidesPerView!=="auto"&&!s&&(c=!1),c){const f=u?o<n.activeIndex?"prev":"next":o-n.activeIndex-1<n.params.slidesPerView?"next":"prev";n.loopFix({direction:f,slideTo:!0,activeSlideIndex:f==="next"?o+1:o-l+1,slideRealIndex:f==="next"?n.realIndex:void 0})}if(s){const f=a*n.params.grid.rows;a=n.slides.filter(m=>m.getAttribute("data-swiper-slide-index")*1===f)[0].column}else a=n.getSlideIndexByData(a)}return requestAnimationFrame(()=>{n.slideTo(a,e,i,r)}),n}function Al(t,e,i){e===void 0&&(e=!0);const r=this,{enabled:n,params:s,animating:a}=r;if(!n||r.destroyed)return r;typeof t>"u"&&(t=r.params.speed);let o=s.slidesPerGroup;s.slidesPerView==="auto"&&s.slidesPerGroup===1&&s.slidesPerGroupAuto&&(o=Math.max(r.slidesPerViewDynamic("current",!0),1));const l=r.activeIndex<s.slidesPerGroupSkip?1:o,u=r.virtual&&s.virtual.enabled;if(s.loop){if(a&&!u&&s.loopPreventsSliding)return!1;if(r.loopFix({direction:"next"}),r._clientLeft=r.wrapperEl.clientLeft,r.activeIndex===r.slides.length-1&&s.cssMode)return requestAnimationFrame(()=>{r.slideTo(r.activeIndex+l,t,e,i)}),!0}return s.rewind&&r.isEnd?r.slideTo(0,t,e,i):r.slideTo(r.activeIndex+l,t,e,i)}function Pl(t,e,i){e===void 0&&(e=!0);const r=this,{params:n,snapGrid:s,slidesGrid:a,rtlTranslate:o,enabled:l,animating:u}=r;if(!l||r.destroyed)return r;typeof t>"u"&&(t=r.params.speed);const d=r.virtual&&n.virtual.enabled;if(n.loop){if(u&&!d&&n.loopPreventsSliding)return!1;r.loopFix({direction:"prev"}),r._clientLeft=r.wrapperEl.clientLeft}const c=o?r.translate:-r.translate;function f(p){return p<0?-Math.floor(Math.abs(p)):Math.floor(p)}const m=f(c),g=s.map(p=>f(p));let v=s[g.indexOf(m)-1];if(typeof v>"u"&&n.cssMode){let p;s.forEach((b,w)=>{m>=b&&(p=w)}),typeof p<"u"&&(v=s[p>0?p-1:p])}let h=0;if(typeof v<"u"&&(h=a.indexOf(v),h<0&&(h=r.activeIndex-1),n.slidesPerView==="auto"&&n.slidesPerGroup===1&&n.slidesPerGroupAuto&&(h=h-r.slidesPerViewDynamic("previous",!0)+1,h=Math.max(h,0))),n.rewind&&r.isBeginning){const p=r.params.virtual&&r.params.virtual.enabled&&r.virtual?r.virtual.slides.length-1:r.slides.length-1;return r.slideTo(p,t,e,i)}else if(n.loop&&r.activeIndex===0&&n.cssMode)return requestAnimationFrame(()=>{r.slideTo(h,t,e,i)}),!0;return r.slideTo(h,t,e,i)}function Ll(t,e,i){e===void 0&&(e=!0);const r=this;if(!r.destroyed)return typeof t>"u"&&(t=r.params.speed),r.slideTo(r.activeIndex,t,e,i)}function Il(t,e,i,r){e===void 0&&(e=!0),r===void 0&&(r=.5);const n=this;if(n.destroyed)return;typeof t>"u"&&(t=n.params.speed);let s=n.activeIndex;const a=Math.min(n.params.slidesPerGroupSkip,s),o=a+Math.floor((s-a)/n.params.slidesPerGroup),l=n.rtlTranslate?n.translate:-n.translate;if(l>=n.snapGrid[o]){const u=n.snapGrid[o],d=n.snapGrid[o+1];l-u>(d-u)*r&&(s+=n.params.slidesPerGroup)}else{const u=n.snapGrid[o-1],d=n.snapGrid[o];l-u<=(d-u)*r&&(s-=n.params.slidesPerGroup)}return s=Math.max(s,0),s=Math.min(s,n.slidesGrid.length-1),n.slideTo(s,t,e,i)}function Ol(){const t=this;if(t.destroyed)return;const{params:e,slidesEl:i}=t,r=e.slidesPerView==="auto"?t.slidesPerViewDynamic():e.slidesPerView;let n=t.clickedIndex,s;const a=t.isElement?"swiper-slide":`.${e.slideClass}`;if(e.loop){if(t.animating)return;s=parseInt(t.clickedSlide.getAttribute("data-swiper-slide-index"),10),e.centeredSlides?n<t.loopedSlides-r/2||n>t.slides.length-t.loopedSlides+r/2?(t.loopFix(),n=t.getSlideIndex(K(i,`${a}[data-swiper-slide-index="${s}"]`)[0]),ze(()=>{t.slideTo(n)})):t.slideTo(n):n>t.slides.length-r?(t.loopFix(),n=t.getSlideIndex(K(i,`${a}[data-swiper-slide-index="${s}"]`)[0]),ze(()=>{t.slideTo(n)})):t.slideTo(n)}else t.slideTo(n)}var Dl={slideTo:Cl,slideToLoop:Ml,slideNext:Al,slidePrev:Pl,slideReset:Ll,slideToClosest:Il,slideToClickedSlide:Ol};function $l(t){const e=this,{params:i,slidesEl:r}=e;if(!i.loop||e.virtual&&e.params.virtual.enabled)return;const n=()=>{K(r,`.${i.slideClass}, swiper-slide`).forEach((c,f)=>{c.setAttribute("data-swiper-slide-index",f)})},s=e.grid&&i.grid&&i.grid.rows>1,a=i.slidesPerGroup*(s?i.grid.rows:1),o=e.slides.length%a!==0,l=s&&e.slides.length%i.grid.rows!==0,u=d=>{for(let c=0;c<d;c+=1){const f=e.isElement?ie("swiper-slide",[i.slideBlankClass]):ie("div",[i.slideClass,i.slideBlankClass]);e.slidesEl.append(f)}};if(o){if(i.loopAddBlankSlides){const d=a-e.slides.length%a;u(d),e.recalcSlides(),e.updateSlides()}else Ft("Swiper Loop Warning: The number of slides is not even to slidesPerGroup, loop mode may not function properly. You need to add more slides (or make duplicates, or empty slides)");n()}else if(l){if(i.loopAddBlankSlides){const d=i.grid.rows-e.slides.length%i.grid.rows;u(d),e.recalcSlides(),e.updateSlides()}else Ft("Swiper Loop Warning: The number of slides is not even to grid.rows, loop mode may not function properly. You need to add more slides (or make duplicates, or empty slides)");n()}else n();e.loopFix({slideRealIndex:t,direction:i.centeredSlides?void 0:"next"})}function zl(t){let{slideRealIndex:e,slideTo:i=!0,direction:r,setTranslate:n,activeSlideIndex:s,byController:a,byMousewheel:o}=t===void 0?{}:t;const l=this;if(!l.params.loop)return;l.emit("beforeLoopFix");const{slides:u,allowSlidePrev:d,allowSlideNext:c,slidesEl:f,params:m}=l,{centeredSlides:g}=m;if(l.allowSlidePrev=!0,l.allowSlideNext=!0,l.virtual&&m.virtual.enabled){i&&(!m.centeredSlides&&l.snapIndex===0?l.slideTo(l.virtual.slides.length,0,!1,!0):m.centeredSlides&&l.snapIndex<m.slidesPerView?l.slideTo(l.virtual.slides.length+l.snapIndex,0,!1,!0):l.snapIndex===l.snapGrid.length-1&&l.slideTo(l.virtual.slidesBefore,0,!1,!0)),l.allowSlidePrev=d,l.allowSlideNext=c,l.emit("loopFix");return}let v=m.slidesPerView;v==="auto"?v=l.slidesPerViewDynamic():(v=Math.ceil(parseFloat(m.slidesPerView,10)),g&&v%2===0&&(v=v+1));const h=m.slidesPerGroupAuto?v:m.slidesPerGroup;let p=h;p%h!==0&&(p+=h-p%h),p+=m.loopAdditionalSlides,l.loopedSlides=p;const b=l.grid&&m.grid&&m.grid.rows>1;u.length<v+p?Ft("Swiper Loop Warning: The number of slides is not enough for loop mode, it will be disabled and not function properly. You need to add more slides (or make duplicates) or lower the values of slidesPerView and slidesPerGroup parameters"):b&&m.grid.fill==="row"&&Ft("Swiper Loop Warning: Loop mode is not compatible with grid.fill = `row`");const w=[],y=[];let E=l.activeIndex;typeof s>"u"?s=l.getSlideIndex(u.filter(_=>_.classList.contains(m.slideActiveClass))[0]):E=s;const x=r==="next"||!r,A=r==="prev"||!r;let S=0,P=0;const C=b?Math.ceil(u.length/m.grid.rows):u.length,T=(b?u[s].column:s)+(g&&typeof n>"u"?-v/2+.5:0);if(T<p){S=Math.max(p-T,h);for(let _=0;_<p-T;_+=1){const M=_-Math.floor(_/C)*C;if(b){const D=C-M-1;for(let k=u.length-1;k>=0;k-=1)u[k].column===D&&w.push(k)}else w.push(C-M-1)}}else if(T+v>C-p){P=Math.max(T-(C-p*2),h);for(let _=0;_<P;_+=1){const M=_-Math.floor(_/C)*C;b?u.forEach((D,k)=>{D.column===M&&y.push(k)}):y.push(M)}}if(l.__preventObserver__=!0,requestAnimationFrame(()=>{l.__preventObserver__=!1}),A&&w.forEach(_=>{u[_].swiperLoopMoveDOM=!0,f.prepend(u[_]),u[_].swiperLoopMoveDOM=!1}),x&&y.forEach(_=>{u[_].swiperLoopMoveDOM=!0,f.append(u[_]),u[_].swiperLoopMoveDOM=!1}),l.recalcSlides(),m.slidesPerView==="auto"?l.updateSlides():b&&(w.length>0&&A||y.length>0&&x)&&l.slides.forEach((_,M)=>{l.grid.updateSlide(M,_,l.slides)}),m.watchSlidesProgress&&l.updateSlidesOffset(),i){if(w.length>0&&A){if(typeof e>"u"){const _=l.slidesGrid[E],D=l.slidesGrid[E+S]-_;o?l.setTranslate(l.translate-D):(l.slideTo(E+Math.ceil(S),0,!1,!0),n&&(l.touchEventsData.startTranslate=l.touchEventsData.startTranslate-D,l.touchEventsData.currentTranslate=l.touchEventsData.currentTranslate-D))}else if(n){const _=b?w.length/m.grid.rows:w.length;l.slideTo(l.activeIndex+_,0,!1,!0),l.touchEventsData.currentTranslate=l.translate}}else if(y.length>0&&x)if(typeof e>"u"){const _=l.slidesGrid[E],D=l.slidesGrid[E-P]-_;o?l.setTranslate(l.translate-D):(l.slideTo(E-P,0,!1,!0),n&&(l.touchEventsData.startTranslate=l.touchEventsData.startTranslate-D,l.touchEventsData.currentTranslate=l.touchEventsData.currentTranslate-D))}else{const _=b?y.length/m.grid.rows:y.length;l.slideTo(l.activeIndex-_,0,!1,!0)}}if(l.allowSlidePrev=d,l.allowSlideNext=c,l.controller&&l.controller.control&&!a){const _={slideRealIndex:e,direction:r,setTranslate:n,activeSlideIndex:s,byController:!0};Array.isArray(l.controller.control)?l.controller.control.forEach(M=>{!M.destroyed&&M.params.loop&&M.loopFix({..._,slideTo:M.params.slidesPerView===m.slidesPerView?i:!1})}):l.controller.control instanceof l.constructor&&l.controller.control.params.loop&&l.controller.control.loopFix({..._,slideTo:l.controller.control.params.slidesPerView===m.slidesPerView?i:!1})}l.emit("loopFix")}function Rl(){const t=this,{params:e,slidesEl:i}=t;if(!e.loop||t.virtual&&t.params.virtual.enabled)return;t.recalcSlides();const r=[];t.slides.forEach(n=>{const s=typeof n.swiperSlideIndex>"u"?n.getAttribute("data-swiper-slide-index")*1:n.swiperSlideIndex;r[s]=n}),t.slides.forEach(n=>{n.removeAttribute("data-swiper-slide-index")}),r.forEach(n=>{i.append(n)}),t.recalcSlides(),t.slideTo(t.realIndex,0)}var kl={loopCreate:$l,loopFix:zl,loopDestroy:Rl};function Fl(t){const e=this;if(!e.params.simulateTouch||e.params.watchOverflow&&e.isLocked||e.params.cssMode)return;const i=e.params.touchEventsTarget==="container"?e.el:e.wrapperEl;e.isElement&&(e.__preventObserver__=!0),i.style.cursor="move",i.style.cursor=t?"grabbing":"grab",e.isElement&&requestAnimationFrame(()=>{e.__preventObserver__=!1})}function Nl(){const t=this;t.params.watchOverflow&&t.isLocked||t.params.cssMode||(t.isElement&&(t.__preventObserver__=!0),t[t.params.touchEventsTarget==="container"?"el":"wrapperEl"].style.cursor="",t.isElement&&requestAnimationFrame(()=>{t.__preventObserver__=!1}))}var Bl={setGrabCursor:Fl,unsetGrabCursor:Nl};function Hl(t,e){e===void 0&&(e=this);function i(r){if(!r||r===J()||r===W())return null;r.assignedSlot&&(r=r.assignedSlot);const n=r.closest(t);return!n&&!r.getRootNode?null:n||i(r.getRootNode().host)}return i(e)}function Rr(t,e,i){const r=W(),{params:n}=t,s=n.edgeSwipeDetection,a=n.edgeSwipeThreshold;return s&&(i<=a||i>=r.innerWidth-a)?s==="prevent"?(e.preventDefault(),!0):!1:!0}function Gl(t){const e=this,i=J();let r=t;r.originalEvent&&(r=r.originalEvent);const n=e.touchEventsData;if(r.type==="pointerdown"){if(n.pointerId!==null&&n.pointerId!==r.pointerId)return;n.pointerId=r.pointerId}else r.type==="touchstart"&&r.targetTouches.length===1&&(n.touchId=r.targetTouches[0].identifier);if(r.type==="touchstart"){Rr(e,r,r.targetTouches[0].pageX);return}const{params:s,touches:a,enabled:o}=e;if(!o||!s.simulateTouch&&r.pointerType==="mouse"||e.animating&&s.preventInteractionOnTransition)return;!e.animating&&s.cssMode&&s.loop&&e.loopFix();let l=r.target;if(s.touchEventsTarget==="wrapper"&&!e.wrapperEl.contains(l)||"which"in r&&r.which===3||"button"in r&&r.button>0||n.isTouched&&n.isMoved)return;const u=!!s.noSwipingClass&&s.noSwipingClass!=="",d=r.composedPath?r.composedPath():r.path;u&&r.target&&r.target.shadowRoot&&d&&(l=d[0]);const c=s.noSwipingSelector?s.noSwipingSelector:`.${s.noSwipingClass}`,f=!!(r.target&&r.target.shadowRoot);if(s.noSwiping&&(f?Hl(c,l):l.closest(c))){e.allowClick=!0;return}if(s.swipeHandler&&!l.closest(s.swipeHandler))return;a.currentX=r.pageX,a.currentY=r.pageY;const m=a.currentX,g=a.currentY;if(!Rr(e,r,m))return;Object.assign(n,{isTouched:!0,isMoved:!1,allowTouchCallbacks:!0,isScrolling:void 0,startMoving:void 0}),a.startX=m,a.startY=g,n.touchStartTime=ne(),e.allowClick=!0,e.updateSize(),e.swipeDirection=void 0,s.threshold>0&&(n.allowThresholdMove=!1);let v=!0;l.matches(n.focusableElements)&&(v=!1,l.nodeName==="SELECT"&&(n.isTouched=!1)),i.activeElement&&i.activeElement.matches(n.focusableElements)&&i.activeElement!==l&&i.activeElement.blur();const h=v&&e.allowTouchMove&&s.touchStartPreventDefault;(s.touchStartForcePreventDefault||h)&&!l.isContentEditable&&r.preventDefault(),s.freeMode&&s.freeMode.enabled&&e.freeMode&&e.animating&&!s.cssMode&&e.freeMode.onTouchStart(),e.emit("touchStart",r)}function jl(t){const e=J(),i=this,r=i.touchEventsData,{params:n,touches:s,rtlTranslate:a,enabled:o}=i;if(!o||!n.simulateTouch&&t.pointerType==="mouse")return;let l=t;if(l.originalEvent&&(l=l.originalEvent),l.type==="pointermove"&&(r.touchId!==null||l.pointerId!==r.pointerId))return;let u;if(l.type==="touchmove"){if(u=[...l.changedTouches].filter(x=>x.identifier===r.touchId)[0],!u||u.identifier!==r.touchId)return}else u=l;if(!r.isTouched){r.startMoving&&r.isScrolling&&i.emit("touchMoveOpposite",l);return}const d=u.pageX,c=u.pageY;if(l.preventedByNestedSwiper){s.startX=d,s.startY=c;return}if(!i.allowTouchMove){l.target.matches(r.focusableElements)||(i.allowClick=!1),r.isTouched&&(Object.assign(s,{startX:d,startY:c,currentX:d,currentY:c}),r.touchStartTime=ne());return}if(n.touchReleaseOnEdges&&!n.loop){if(i.isVertical()){if(c<s.startY&&i.translate<=i.maxTranslate()||c>s.startY&&i.translate>=i.minTranslate()){r.isTouched=!1,r.isMoved=!1;return}}else if(d<s.startX&&i.translate<=i.maxTranslate()||d>s.startX&&i.translate>=i.minTranslate())return}if(e.activeElement&&l.target===e.activeElement&&l.target.matches(r.focusableElements)){r.isMoved=!0,i.allowClick=!1;return}r.allowTouchCallbacks&&i.emit("touchMove",l),s.previousX=s.currentX,s.previousY=s.currentY,s.currentX=d,s.currentY=c;const f=s.currentX-s.startX,m=s.currentY-s.startY;if(i.params.threshold&&Math.sqrt(f**2+m**2)<i.params.threshold)return;if(typeof r.isScrolling>"u"){let x;i.isHorizontal()&&s.currentY===s.startY||i.isVertical()&&s.currentX===s.startX?r.isScrolling=!1:f*f+m*m>=25&&(x=Math.atan2(Math.abs(m),Math.abs(f))*180/Math.PI,r.isScrolling=i.isHorizontal()?x>n.touchAngle:90-x>n.touchAngle)}if(r.isScrolling&&i.emit("touchMoveOpposite",l),typeof r.startMoving>"u"&&(s.currentX!==s.startX||s.currentY!==s.startY)&&(r.startMoving=!0),r.isScrolling||l.type==="touchmove"&&r.preventTouchMoveFromPointerMove){r.isTouched=!1;return}if(!r.startMoving)return;i.allowClick=!1,!n.cssMode&&l.cancelable&&l.preventDefault(),n.touchMoveStopPropagation&&!n.nested&&l.stopPropagation();let g=i.isHorizontal()?f:m,v=i.isHorizontal()?s.currentX-s.previousX:s.currentY-s.previousY;n.oneWayMovement&&(g=Math.abs(g)*(a?1:-1),v=Math.abs(v)*(a?1:-1)),s.diff=g,g*=n.touchRatio,a&&(g=-g,v=-v);const h=i.touchesDirection;i.swipeDirection=g>0?"prev":"next",i.touchesDirection=v>0?"prev":"next";const p=i.params.loop&&!n.cssMode,b=i.touchesDirection==="next"&&i.allowSlideNext||i.touchesDirection==="prev"&&i.allowSlidePrev;if(!r.isMoved){if(p&&b&&i.loopFix({direction:i.swipeDirection}),r.startTranslate=i.getTranslate(),i.setTransition(0),i.animating){const x=new window.CustomEvent("transitionend",{bubbles:!0,cancelable:!0,detail:{bySwiperTouchMove:!0}});i.wrapperEl.dispatchEvent(x)}r.allowMomentumBounce=!1,n.grabCursor&&(i.allowSlideNext===!0||i.allowSlidePrev===!0)&&i.setGrabCursor(!0),i.emit("sliderFirstMove",l)}let w;if(new Date().getTime(),r.isMoved&&r.allowThresholdMove&&h!==i.touchesDirection&&p&&b&&Math.abs(g)>=1){Object.assign(s,{startX:d,startY:c,currentX:d,currentY:c,startTranslate:r.currentTranslate}),r.loopSwapReset=!0,r.startTranslate=r.currentTranslate;return}i.emit("sliderMove",l),r.isMoved=!0,r.currentTranslate=g+r.startTranslate;let y=!0,E=n.resistanceRatio;if(n.touchReleaseOnEdges&&(E=0),g>0?(p&&b&&!w&&r.allowThresholdMove&&r.currentTranslate>(n.centeredSlides?i.minTranslate()-i.slidesSizesGrid[i.activeIndex+1]:i.minTranslate())&&i.loopFix({direction:"prev",setTranslate:!0,activeSlideIndex:0}),r.currentTranslate>i.minTranslate()&&(y=!1,n.resistance&&(r.currentTranslate=i.minTranslate()-1+(-i.minTranslate()+r.startTranslate+g)**E))):g<0&&(p&&b&&!w&&r.allowThresholdMove&&r.currentTranslate<(n.centeredSlides?i.maxTranslate()+i.slidesSizesGrid[i.slidesSizesGrid.length-1]:i.maxTranslate())&&i.loopFix({direction:"next",setTranslate:!0,activeSlideIndex:i.slides.length-(n.slidesPerView==="auto"?i.slidesPerViewDynamic():Math.ceil(parseFloat(n.slidesPerView,10)))}),r.currentTranslate<i.maxTranslate()&&(y=!1,n.resistance&&(r.currentTranslate=i.maxTranslate()+1-(i.maxTranslate()-r.startTranslate-g)**E))),y&&(l.preventedByNestedSwiper=!0),!i.allowSlideNext&&i.swipeDirection==="next"&&r.currentTranslate<r.startTranslate&&(r.currentTranslate=r.startTranslate),!i.allowSlidePrev&&i.swipeDirection==="prev"&&r.currentTranslate>r.startTranslate&&(r.currentTranslate=r.startTranslate),!i.allowSlidePrev&&!i.allowSlideNext&&(r.currentTranslate=r.startTranslate),n.threshold>0)if(Math.abs(g)>n.threshold||r.allowThresholdMove){if(!r.allowThresholdMove){r.allowThresholdMove=!0,s.startX=s.currentX,s.startY=s.currentY,r.currentTranslate=r.startTranslate,s.diff=i.isHorizontal()?s.currentX-s.startX:s.currentY-s.startY;return}}else{r.currentTranslate=r.startTranslate;return}!n.followFinger||n.cssMode||((n.freeMode&&n.freeMode.enabled&&i.freeMode||n.watchSlidesProgress)&&(i.updateActiveIndex(),i.updateSlidesClasses()),n.freeMode&&n.freeMode.enabled&&i.freeMode&&i.freeMode.onTouchMove(),i.updateProgress(r.currentTranslate),i.setTranslate(r.currentTranslate))}function Vl(t){const e=this,i=e.touchEventsData;let r=t;r.originalEvent&&(r=r.originalEvent);let n;if(r.type==="touchend"||r.type==="touchcancel"){if(n=[...r.changedTouches].filter(E=>E.identifier===i.touchId)[0],!n||n.identifier!==i.touchId)return}else{if(i.touchId!==null||r.pointerId!==i.pointerId)return;n=r}if(["pointercancel","pointerout","pointerleave","contextmenu"].includes(r.type)&&!(["pointercancel","contextmenu"].includes(r.type)&&(e.browser.isSafari||e.browser.isWebView)))return;i.pointerId=null,i.touchId=null;const{params:a,touches:o,rtlTranslate:l,slidesGrid:u,enabled:d}=e;if(!d||!a.simulateTouch&&r.pointerType==="mouse")return;if(i.allowTouchCallbacks&&e.emit("touchEnd",r),i.allowTouchCallbacks=!1,!i.isTouched){i.isMoved&&a.grabCursor&&e.setGrabCursor(!1),i.isMoved=!1,i.startMoving=!1;return}a.grabCursor&&i.isMoved&&i.isTouched&&(e.allowSlideNext===!0||e.allowSlidePrev===!0)&&e.setGrabCursor(!1);const c=ne(),f=c-i.touchStartTime;if(e.allowClick){const E=r.path||r.composedPath&&r.composedPath();e.updateClickedSlide(E&&E[0]||r.target,E),e.emit("tap click",r),f<300&&c-i.lastClickTime<300&&e.emit("doubleTap doubleClick",r)}if(i.lastClickTime=ne(),ze(()=>{e.destroyed||(e.allowClick=!0)}),!i.isTouched||!i.isMoved||!e.swipeDirection||o.diff===0&&!i.loopSwapReset||i.currentTranslate===i.startTranslate&&!i.loopSwapReset){i.isTouched=!1,i.isMoved=!1,i.startMoving=!1;return}i.isTouched=!1,i.isMoved=!1,i.startMoving=!1;let m;if(a.followFinger?m=l?e.translate:-e.translate:m=-i.currentTranslate,a.cssMode)return;if(a.freeMode&&a.freeMode.enabled){e.freeMode.onTouchEnd({currentPos:m});return}const g=m>=-e.maxTranslate()&&!e.params.loop;let v=0,h=e.slidesSizesGrid[0];for(let E=0;E<u.length;E+=E<a.slidesPerGroupSkip?1:a.slidesPerGroup){const x=E<a.slidesPerGroupSkip-1?1:a.slidesPerGroup;typeof u[E+x]<"u"?(g||m>=u[E]&&m<u[E+x])&&(v=E,h=u[E+x]-u[E]):(g||m>=u[E])&&(v=E,h=u[u.length-1]-u[u.length-2])}let p=null,b=null;a.rewind&&(e.isBeginning?b=a.virtual&&a.virtual.enabled&&e.virtual?e.virtual.slides.length-1:e.slides.length-1:e.isEnd&&(p=0));const w=(m-u[v])/h,y=v<a.slidesPerGroupSkip-1?1:a.slidesPerGroup;if(f>a.longSwipesMs){if(!a.longSwipes){e.slideTo(e.activeIndex);return}e.swipeDirection==="next"&&(w>=a.longSwipesRatio?e.slideTo(a.rewind&&e.isEnd?p:v+y):e.slideTo(v)),e.swipeDirection==="prev"&&(w>1-a.longSwipesRatio?e.slideTo(v+y):b!==null&&w<0&&Math.abs(w)>a.longSwipesRatio?e.slideTo(b):e.slideTo(v))}else{if(!a.shortSwipes){e.slideTo(e.activeIndex);return}e.navigation&&(r.target===e.navigation.nextEl||r.target===e.navigation.prevEl)?r.target===e.navigation.nextEl?e.slideTo(v+y):e.slideTo(v):(e.swipeDirection==="next"&&e.slideTo(p!==null?p:v+y),e.swipeDirection==="prev"&&e.slideTo(b!==null?b:v))}}function kr(){const t=this,{params:e,el:i}=t;if(i&&i.offsetWidth===0)return;e.breakpoints&&t.setBreakpoint();const{allowSlideNext:r,allowSlidePrev:n,snapGrid:s}=t,a=t.virtual&&t.params.virtual.enabled;t.allowSlideNext=!0,t.allowSlidePrev=!0,t.updateSize(),t.updateSlides(),t.updateSlidesClasses();const o=a&&e.loop;(e.slidesPerView==="auto"||e.slidesPerView>1)&&t.isEnd&&!t.isBeginning&&!t.params.centeredSlides&&!o?t.slideTo(t.slides.length-1,0,!1,!0):t.params.loop&&!a?t.slideToLoop(t.realIndex,0,!1,!0):t.slideTo(t.activeIndex,0,!1,!0),t.autoplay&&t.autoplay.running&&t.autoplay.paused&&(clearTimeout(t.autoplay.resizeTimeout),t.autoplay.resizeTimeout=setTimeout(()=>{t.autoplay&&t.autoplay.running&&t.autoplay.paused&&t.autoplay.resume()},500)),t.allowSlidePrev=n,t.allowSlideNext=r,t.params.watchOverflow&&s!==t.snapGrid&&t.checkOverflow()}function Wl(t){const e=this;e.enabled&&(e.allowClick||(e.params.preventClicks&&t.preventDefault(),e.params.preventClicksPropagation&&e.animating&&(t.stopPropagation(),t.stopImmediatePropagation())))}function Xl(){const t=this,{wrapperEl:e,rtlTranslate:i,enabled:r}=t;if(!r)return;t.previousTranslate=t.translate,t.isHorizontal()?t.translate=-e.scrollLeft:t.translate=-e.scrollTop,t.translate===0&&(t.translate=0),t.updateActiveIndex(),t.updateSlidesClasses();let n;const s=t.maxTranslate()-t.minTranslate();s===0?n=0:n=(t.translate-t.minTranslate())/s,n!==t.progress&&t.updateProgress(i?-t.translate:t.translate),t.emit("setTranslate",t.translate,!1)}function ql(t){const e=this;Ot(e,t.target),!(e.params.cssMode||e.params.slidesPerView!=="auto"&&!e.params.autoHeight)&&e.update()}function Yl(){const t=this;t.documentTouchHandlerProceeded||(t.documentTouchHandlerProceeded=!0,t.params.touchReleaseOnEdges&&(t.el.style.touchAction="auto"))}const bs=(t,e)=>{const i=J(),{params:r,el:n,wrapperEl:s,device:a}=t,o=!!r.nested,l=e==="on"?"addEventListener":"removeEventListener",u=e;!n||typeof n=="string"||(i[l]("touchstart",t.onDocumentTouchStart,{passive:!1,capture:o}),n[l]("touchstart",t.onTouchStart,{passive:!1}),n[l]("pointerdown",t.onTouchStart,{passive:!1}),i[l]("touchmove",t.onTouchMove,{passive:!1,capture:o}),i[l]("pointermove",t.onTouchMove,{passive:!1,capture:o}),i[l]("touchend",t.onTouchEnd,{passive:!0}),i[l]("pointerup",t.onTouchEnd,{passive:!0}),i[l]("pointercancel",t.onTouchEnd,{passive:!0}),i[l]("touchcancel",t.onTouchEnd,{passive:!0}),i[l]("pointerout",t.onTouchEnd,{passive:!0}),i[l]("pointerleave",t.onTouchEnd,{passive:!0}),i[l]("contextmenu",t.onTouchEnd,{passive:!0}),(r.preventClicks||r.preventClicksPropagation)&&n[l]("click",t.onClick,!0),r.cssMode&&s[l]("scroll",t.onScroll),r.updateOnWindowResize?t[u](a.ios||a.android?"resize orientationchange observerUpdate":"resize observerUpdate",kr,!0):t[u]("observerUpdate",kr,!0),n[l]("load",t.onLoad,{capture:!0}))};function Ul(){const t=this,{params:e}=t;t.onTouchStart=Gl.bind(t),t.onTouchMove=jl.bind(t),t.onTouchEnd=Vl.bind(t),t.onDocumentTouchStart=Yl.bind(t),e.cssMode&&(t.onScroll=Xl.bind(t)),t.onClick=Wl.bind(t),t.onLoad=ql.bind(t),bs(t,"on")}function Kl(){bs(this,"off")}var Jl={attachEvents:Ul,detachEvents:Kl};const Fr=(t,e)=>t.grid&&e.grid&&e.grid.rows>1;function Zl(){const t=this,{realIndex:e,initialized:i,params:r,el:n}=t,s=r.breakpoints;if(!s||s&&Object.keys(s).length===0)return;const a=t.getBreakpoint(s,t.params.breakpointsBase,t.el);if(!a||t.currentBreakpoint===a)return;const l=(a in s?s[a]:void 0)||t.originalParams,u=Fr(t,r),d=Fr(t,l),c=t.params.grabCursor,f=l.grabCursor,m=r.enabled;u&&!d?(n.classList.remove(`${r.containerModifierClass}grid`,`${r.containerModifierClass}grid-column`),t.emitContainerClasses()):!u&&d&&(n.classList.add(`${r.containerModifierClass}grid`),(l.grid.fill&&l.grid.fill==="column"||!l.grid.fill&&r.grid.fill==="column")&&n.classList.add(`${r.containerModifierClass}grid-column`),t.emitContainerClasses()),c&&!f?t.unsetGrabCursor():!c&&f&&t.setGrabCursor(),["navigation","pagination","scrollbar"].forEach(w=>{if(typeof l[w]>"u")return;const y=r[w]&&r[w].enabled,E=l[w]&&l[w].enabled;y&&!E&&t[w].disable(),!y&&E&&t[w].enable()});const g=l.direction&&l.direction!==r.direction,v=r.loop&&(l.slidesPerView!==r.slidesPerView||g),h=r.loop;g&&i&&t.changeDirection(),te(t.params,l);const p=t.params.enabled,b=t.params.loop;Object.assign(t,{allowTouchMove:t.params.allowTouchMove,allowSlideNext:t.params.allowSlideNext,allowSlidePrev:t.params.allowSlidePrev}),m&&!p?t.disable():!m&&p&&t.enable(),t.currentBreakpoint=a,t.emit("_beforeBreakpoint",l),i&&(v?(t.loopDestroy(),t.loopCreate(e),t.updateSlides()):!h&&b?(t.loopCreate(e),t.updateSlides()):h&&!b&&t.loopDestroy()),t.emit("breakpoint",l)}function Ql(t,e,i){if(e===void 0&&(e="window"),!t||e==="container"&&!i)return;let r=!1;const n=W(),s=e==="window"?n.innerHeight:i.clientHeight,a=Object.keys(t).map(o=>{if(typeof o=="string"&&o.indexOf("@")===0){const l=parseFloat(o.substr(1));return{value:s*l,point:o}}return{value:o,point:o}});a.sort((o,l)=>parseInt(o.value,10)-parseInt(l.value,10));for(let o=0;o<a.length;o+=1){const{point:l,value:u}=a[o];e==="window"?n.matchMedia(`(min-width: ${u}px)`).matches&&(r=l):u<=i.clientWidth&&(r=l)}return r||"max"}var ec={setBreakpoint:Zl,getBreakpoint:Ql};function tc(t,e){const i=[];return t.forEach(r=>{typeof r=="object"?Object.keys(r).forEach(n=>{r[n]&&i.push(e+n)}):typeof r=="string"&&i.push(e+r)}),i}function ic(){const t=this,{classNames:e,params:i,rtl:r,el:n,device:s}=t,a=tc(["initialized",i.direction,{"free-mode":t.params.freeMode&&i.freeMode.enabled},{autoheight:i.autoHeight},{rtl:r},{grid:i.grid&&i.grid.rows>1},{"grid-column":i.grid&&i.grid.rows>1&&i.grid.fill==="column"},{android:s.android},{ios:s.ios},{"css-mode":i.cssMode},{centered:i.cssMode&&i.centeredSlides},{"watch-progress":i.watchSlidesProgress}],i.containerModifierClass);e.push(...a),n.classList.add(...e),t.emitContainerClasses()}function rc(){const t=this,{el:e,classNames:i}=t;!e||typeof e=="string"||(e.classList.remove(...i),t.emitContainerClasses())}var nc={addClasses:ic,removeClasses:rc};function sc(){const t=this,{isLocked:e,params:i}=t,{slidesOffsetBefore:r}=i;if(r){const n=t.slides.length-1,s=t.slidesGrid[n]+t.slidesSizesGrid[n]+r*2;t.isLocked=t.size>s}else t.isLocked=t.snapGrid.length===1;i.allowSlideNext===!0&&(t.allowSlideNext=!t.isLocked),i.allowSlidePrev===!0&&(t.allowSlidePrev=!t.isLocked),e&&e!==t.isLocked&&(t.isEnd=!1),e!==t.isLocked&&t.emit(t.isLocked?"lock":"unlock")}var ac={checkOverflow:sc},Nr={init:!0,direction:"horizontal",oneWayMovement:!1,swiperElementNodeName:"SWIPER-CONTAINER",touchEventsTarget:"wrapper",initialSlide:0,speed:300,cssMode:!1,updateOnWindowResize:!0,resizeObserver:!0,nested:!1,createElements:!1,eventsPrefix:"swiper",enabled:!0,focusableElements:"input, select, option, textarea, button, video, label",width:null,height:null,preventInteractionOnTransition:!1,userAgent:null,url:null,edgeSwipeDetection:!1,edgeSwipeThreshold:20,autoHeight:!1,setWrapperSize:!1,virtualTranslate:!1,effect:"slide",breakpoints:void 0,breakpointsBase:"window",spaceBetween:0,slidesPerView:1,slidesPerGroup:1,slidesPerGroupSkip:0,slidesPerGroupAuto:!1,centeredSlides:!1,centeredSlidesBounds:!1,slidesOffsetBefore:0,slidesOffsetAfter:0,normalizeSlideIndex:!0,centerInsufficientSlides:!1,watchOverflow:!0,roundLengths:!1,touchRatio:1,touchAngle:45,simulateTouch:!0,shortSwipes:!0,longSwipes:!0,longSwipesRatio:.5,longSwipesMs:300,followFinger:!0,allowTouchMove:!0,threshold:5,touchMoveStopPropagation:!1,touchStartPreventDefault:!0,touchStartForcePreventDefault:!1,touchReleaseOnEdges:!1,uniqueNavElements:!0,resistance:!0,resistanceRatio:.85,watchSlidesProgress:!1,grabCursor:!1,preventClicks:!0,preventClicksPropagation:!0,slideToClickedSlide:!1,loop:!1,loopAddBlankSlides:!0,loopAdditionalSlides:0,loopPreventsSliding:!0,rewind:!1,allowSlidePrev:!0,allowSlideNext:!0,swipeHandler:null,noSwiping:!0,noSwipingClass:"swiper-no-swiping",noSwipingSelector:null,passiveListeners:!0,maxBackfaceHiddenSlides:10,containerModifierClass:"swiper-",slideClass:"swiper-slide",slideBlankClass:"swiper-slide-blank",slideActiveClass:"swiper-slide-active",slideVisibleClass:"swiper-slide-visible",slideFullyVisibleClass:"swiper-slide-fully-visible",slideNextClass:"swiper-slide-next",slidePrevClass:"swiper-slide-prev",wrapperClass:"swiper-wrapper",lazyPreloaderClass:"swiper-lazy-preloader",lazyPreloadPrevNext:0,runCallbacksOnInit:!0,_emitClasses:!1};function oc(t,e){return function(r){r===void 0&&(r={});const n=Object.keys(r)[0],s=r[n];if(typeof s!="object"||s===null){te(e,r);return}if(t[n]===!0&&(t[n]={enabled:!0}),n==="navigation"&&t[n]&&t[n].enabled&&!t[n].prevEl&&!t[n].nextEl&&(t[n].auto=!0),["pagination","scrollbar"].indexOf(n)>=0&&t[n]&&t[n].enabled&&!t[n].el&&(t[n].auto=!0),!(n in t&&"enabled"in s)){te(e,r);return}typeof t[n]=="object"&&!("enabled"in t[n])&&(t[n].enabled=!0),t[n]||(t[n]={enabled:!1}),te(e,r)}}const bi={eventsEmitter:nl,update:hl,translate:xl,transition:_l,slide:Dl,loop:kl,grabCursor:Bl,events:Jl,breakpoints:ec,checkOverflow:ac,classes:nc},yi={};class ee{constructor(){let e,i;for(var r=arguments.length,n=new Array(r),s=0;s<r;s++)n[s]=arguments[s];n.length===1&&n[0].constructor&&Object.prototype.toString.call(n[0]).slice(8,-1)==="Object"?i=n[0]:[e,i]=n,i||(i={}),i=te({},i),e&&!i.el&&(i.el=e);const a=J();if(i.el&&typeof i.el=="string"&&a.querySelectorAll(i.el).length>1){const d=[];return a.querySelectorAll(i.el).forEach(c=>{const f=te({},i,{el:c});d.push(new ee(f))}),d}const o=this;o.__swiper__=!0,o.support=gs(),o.device=vs({userAgent:i.userAgent}),o.browser=tl(),o.eventsListeners={},o.eventsAnyListeners=[],o.modules=[...o.__modules__],i.modules&&Array.isArray(i.modules)&&o.modules.push(...i.modules);const l={};o.modules.forEach(d=>{d({params:i,swiper:o,extendParams:oc(i,l),on:o.on.bind(o),once:o.once.bind(o),off:o.off.bind(o),emit:o.emit.bind(o)})});const u=te({},Nr,l);return o.params=te({},u,yi,i),o.originalParams=te({},o.params),o.passedParams=te({},i),o.params&&o.params.on&&Object.keys(o.params.on).forEach(d=>{o.on(d,o.params.on[d])}),o.params&&o.params.onAny&&o.onAny(o.params.onAny),Object.assign(o,{enabled:o.params.enabled,el:e,classNames:[],slides:[],slidesGrid:[],snapGrid:[],slidesSizesGrid:[],isHorizontal(){return o.params.direction==="horizontal"},isVertical(){return o.params.direction==="vertical"},activeIndex:0,realIndex:0,isBeginning:!0,isEnd:!1,translate:0,previousTranslate:0,progress:0,velocity:0,animating:!1,cssOverflowAdjustment(){return Math.trunc(this.translate/2**23)*2**23},allowSlideNext:o.params.allowSlideNext,allowSlidePrev:o.params.allowSlidePrev,touchEventsData:{isTouched:void 0,isMoved:void 0,allowTouchCallbacks:void 0,touchStartTime:void 0,isScrolling:void 0,currentTranslate:void 0,startTranslate:void 0,allowThresholdMove:void 0,focusableElements:o.params.focusableElements,lastClickTime:0,clickTimeout:void 0,velocities:[],allowMomentumBounce:void 0,startMoving:void 0,pointerId:null,touchId:null},allowClick:!0,allowTouchMove:o.params.allowTouchMove,touches:{startX:0,startY:0,currentX:0,currentY:0,diff:0},imagesToLoad:[],imagesLoaded:0}),o.emit("_swiper"),o.params.init&&o.init(),o}getDirectionLabel(e){return this.isHorizontal()?e:{width:"height","margin-top":"margin-left","margin-bottom ":"margin-right","margin-left":"margin-top","margin-right":"margin-bottom","padding-left":"padding-top","padding-right":"padding-bottom",marginRight:"marginBottom"}[e]}getSlideIndex(e){const{slidesEl:i,params:r}=this,n=K(i,`.${r.slideClass}, swiper-slide`),s=ut(n[0]);return ut(e)-s}getSlideIndexByData(e){return this.getSlideIndex(this.slides.filter(i=>i.getAttribute("data-swiper-slide-index")*1===e)[0])}recalcSlides(){const e=this,{slidesEl:i,params:r}=e;e.slides=K(i,`.${r.slideClass}, swiper-slide`)}enable(){const e=this;e.enabled||(e.enabled=!0,e.params.grabCursor&&e.setGrabCursor(),e.emit("enable"))}disable(){const e=this;e.enabled&&(e.enabled=!1,e.params.grabCursor&&e.unsetGrabCursor(),e.emit("disable"))}setProgress(e,i){const r=this;e=Math.min(Math.max(e,0),1);const n=r.minTranslate(),a=(r.maxTranslate()-n)*e+n;r.translateTo(a,typeof i>"u"?0:i),r.updateActiveIndex(),r.updateSlidesClasses()}emitContainerClasses(){const e=this;if(!e.params._emitClasses||!e.el)return;const i=e.el.className.split(" ").filter(r=>r.indexOf("swiper")===0||r.indexOf(e.params.containerModifierClass)===0);e.emit("_containerClasses",i.join(" "))}getSlideClasses(e){const i=this;return i.destroyed?"":e.className.split(" ").filter(r=>r.indexOf("swiper-slide")===0||r.indexOf(i.params.slideClass)===0).join(" ")}emitSlidesClasses(){const e=this;if(!e.params._emitClasses||!e.el)return;const i=[];e.slides.forEach(r=>{const n=e.getSlideClasses(r);i.push({slideEl:r,classNames:n}),e.emit("_slideClass",r,n)}),e.emit("_slideClasses",i)}slidesPerViewDynamic(e,i){e===void 0&&(e="current"),i===void 0&&(i=!1);const r=this,{params:n,slides:s,slidesGrid:a,slidesSizesGrid:o,size:l,activeIndex:u}=r;let d=1;if(typeof n.slidesPerView=="number")return n.slidesPerView;if(n.centeredSlides){let c=s[u]?Math.ceil(s[u].swiperSlideSize):0,f;for(let m=u+1;m<s.length;m+=1)s[m]&&!f&&(c+=Math.ceil(s[m].swiperSlideSize),d+=1,c>l&&(f=!0));for(let m=u-1;m>=0;m-=1)s[m]&&!f&&(c+=s[m].swiperSlideSize,d+=1,c>l&&(f=!0))}else if(e==="current")for(let c=u+1;c<s.length;c+=1)(i?a[c]+o[c]-a[u]<l:a[c]-a[u]<l)&&(d+=1);else for(let c=u-1;c>=0;c-=1)a[u]-a[c]<l&&(d+=1);return d}update(){const e=this;if(!e||e.destroyed)return;const{snapGrid:i,params:r}=e;r.breakpoints&&e.setBreakpoint(),[...e.el.querySelectorAll('[loading="lazy"]')].forEach(a=>{a.complete&&Ot(e,a)}),e.updateSize(),e.updateSlides(),e.updateProgress(),e.updateSlidesClasses();function n(){const a=e.rtlTranslate?e.translate*-1:e.translate,o=Math.min(Math.max(a,e.maxTranslate()),e.minTranslate());e.setTranslate(o),e.updateActiveIndex(),e.updateSlidesClasses()}let s;if(r.freeMode&&r.freeMode.enabled&&!r.cssMode)n(),r.autoHeight&&e.updateAutoHeight();else{if((r.slidesPerView==="auto"||r.slidesPerView>1)&&e.isEnd&&!r.centeredSlides){const a=e.virtual&&r.virtual.enabled?e.virtual.slides:e.slides;s=e.slideTo(a.length-1,0,!1,!0)}else s=e.slideTo(e.activeIndex,0,!1,!0);s||n()}r.watchOverflow&&i!==e.snapGrid&&e.checkOverflow(),e.emit("update")}changeDirection(e,i){i===void 0&&(i=!0);const r=this,n=r.params.direction;return e||(e=n==="horizontal"?"vertical":"horizontal"),e===n||e!=="horizontal"&&e!=="vertical"||(r.el.classList.remove(`${r.params.containerModifierClass}${n}`),r.el.classList.add(`${r.params.containerModifierClass}${e}`),r.emitContainerClasses(),r.params.direction=e,r.slides.forEach(s=>{e==="vertical"?s.style.width="":s.style.height=""}),r.emit("changeDirection"),i&&r.update()),r}changeLanguageDirection(e){const i=this;i.rtl&&e==="rtl"||!i.rtl&&e==="ltr"||(i.rtl=e==="rtl",i.rtlTranslate=i.params.direction==="horizontal"&&i.rtl,i.rtl?(i.el.classList.add(`${i.params.containerModifierClass}rtl`),i.el.dir="rtl"):(i.el.classList.remove(`${i.params.containerModifierClass}rtl`),i.el.dir="ltr"),i.update())}mount(e){const i=this;if(i.mounted)return!0;let r=e||i.params.el;if(typeof r=="string"&&(r=document.querySelector(r)),!r)return!1;r.swiper=i,r.parentNode&&r.parentNode.host&&r.parentNode.host.nodeName===i.params.swiperElementNodeName.toUpperCase()&&(i.isElement=!0);const n=()=>`.${(i.params.wrapperClass||"").trim().split(" ").join(".")}`;let a=r&&r.shadowRoot&&r.shadowRoot.querySelector?r.shadowRoot.querySelector(n()):K(r,n())[0];return!a&&i.params.createElements&&(a=ie("div",i.params.wrapperClass),r.append(a),K(r,`.${i.params.slideClass}`).forEach(o=>{a.append(o)})),Object.assign(i,{el:r,wrapperEl:a,slidesEl:i.isElement&&!r.parentNode.host.slideSlots?r.parentNode.host:a,hostEl:i.isElement?r.parentNode.host:r,mounted:!0,rtl:r.dir.toLowerCase()==="rtl"||be(r,"direction")==="rtl",rtlTranslate:i.params.direction==="horizontal"&&(r.dir.toLowerCase()==="rtl"||be(r,"direction")==="rtl"),wrongRTL:be(a,"display")==="-webkit-box"}),!0}init(e){const i=this;if(i.initialized||i.mount(e)===!1)return i;i.emit("beforeInit"),i.params.breakpoints&&i.setBreakpoint(),i.addClasses(),i.updateSize(),i.updateSlides(),i.params.watchOverflow&&i.checkOverflow(),i.params.grabCursor&&i.enabled&&i.setGrabCursor(),i.params.loop&&i.virtual&&i.params.virtual.enabled?i.slideTo(i.params.initialSlide+i.virtual.slidesBefore,0,i.params.runCallbacksOnInit,!1,!0):i.slideTo(i.params.initialSlide,0,i.params.runCallbacksOnInit,!1,!0),i.params.loop&&i.loopCreate(),i.attachEvents();const n=[...i.el.querySelectorAll('[loading="lazy"]')];return i.isElement&&n.push(...i.hostEl.querySelectorAll('[loading="lazy"]')),n.forEach(s=>{s.complete?Ot(i,s):s.addEventListener("load",a=>{Ot(i,a.target)})}),Bi(i),i.initialized=!0,Bi(i),i.emit("init"),i.emit("afterInit"),i}destroy(e,i){e===void 0&&(e=!0),i===void 0&&(i=!0);const r=this,{params:n,el:s,wrapperEl:a,slides:o}=r;return typeof r.params>"u"||r.destroyed||(r.emit("beforeDestroy"),r.initialized=!1,r.detachEvents(),n.loop&&r.loopDestroy(),i&&(r.removeClasses(),s&&typeof s!="string"&&s.removeAttribute("style"),a&&a.removeAttribute("style"),o&&o.length&&o.forEach(l=>{l.classList.remove(n.slideVisibleClass,n.slideFullyVisibleClass,n.slideActiveClass,n.slideNextClass,n.slidePrevClass),l.removeAttribute("style"),l.removeAttribute("data-swiper-slide-index")})),r.emit("destroy"),Object.keys(r.eventsListeners).forEach(l=>{r.off(l)}),e!==!1&&(r.el&&typeof r.el!="string"&&(r.el.swiper=null),qo(r)),r.destroyed=!0),null}static extendDefaults(e){te(yi,e)}static get extendedDefaults(){return yi}static get defaults(){return Nr}static installModule(e){ee.prototype.__modules__||(ee.prototype.__modules__=[]);const i=ee.prototype.__modules__;typeof e=="function"&&i.indexOf(e)<0&&i.push(e)}static use(e){return Array.isArray(e)?(e.forEach(i=>ee.installModule(i)),ee):(ee.installModule(e),ee)}}Object.keys(bi).forEach(t=>{Object.keys(bi[t]).forEach(e=>{ee.prototype[e]=bi[t][e]})});ee.use([il,rl]);function lc(t){let{swiper:e,extendParams:i,on:r,emit:n}=t;i({virtual:{enabled:!1,slides:[],cache:!0,renderSlide:null,renderExternal:null,renderExternalUpdate:!0,addSlidesBefore:0,addSlidesAfter:0}});let s;const a=J();e.virtual={cache:{},from:void 0,to:void 0,slides:[],offset:0,slidesGrid:[]};const o=a.createElement("div");function l(g,v){const h=e.params.virtual;if(h.cache&&e.virtual.cache[v])return e.virtual.cache[v];let p;return h.renderSlide?(p=h.renderSlide.call(e,g,v),typeof p=="string"&&(o.innerHTML=p,p=o.children[0])):e.isElement?p=ie("swiper-slide"):p=ie("div",e.params.slideClass),p.setAttribute("data-swiper-slide-index",v),h.renderSlide||(p.innerHTML=g),h.cache&&(e.virtual.cache[v]=p),p}function u(g,v){const{slidesPerView:h,slidesPerGroup:p,centeredSlides:b,loop:w,initialSlide:y}=e.params;if(v&&!w&&y>0)return;const{addSlidesBefore:E,addSlidesAfter:x}=e.params.virtual,{from:A,to:S,slides:P,slidesGrid:C,offset:O}=e.virtual;e.params.cssMode||e.updateActiveIndex();const T=e.activeIndex||0;let _;e.rtlTranslate?_="right":_=e.isHorizontal()?"left":"top";let M,D;b?(M=Math.floor(h/2)+p+x,D=Math.floor(h/2)+p+E):(M=h+(p-1)+x,D=(w?h:p)+E);let k=T-D,L=T+M;w||(k=Math.max(k,0),L=Math.min(L,P.length-1));let I=(e.slidesGrid[k]||0)-(e.slidesGrid[0]||0);w&&T>=D?(k-=D,b||(I+=e.slidesGrid[0])):w&&T<D&&(k=-D,b&&(I+=e.slidesGrid[0])),Object.assign(e.virtual,{from:k,to:L,offset:I,slidesGrid:e.slidesGrid,slidesBefore:D,slidesAfter:M});function R(){e.updateSlides(),e.updateProgress(),e.updateSlidesClasses(),n("virtualUpdate")}if(A===k&&S===L&&!g){e.slidesGrid!==C&&I!==O&&e.slides.forEach(N=>{N.style[_]=`${I-Math.abs(e.cssOverflowAdjustment())}px`}),e.updateProgress(),n("virtualUpdate");return}if(e.params.virtual.renderExternal){e.params.virtual.renderExternal.call(e,{offset:I,from:k,to:L,slides:function(){const G=[];for(let Z=k;Z<=L;Z+=1)G.push(P[Z]);return G}()}),e.params.virtual.renderExternalUpdate?R():n("virtualUpdate");return}const B=[],$=[],z=N=>{let G=N;return N<0?G=P.length+N:G>=P.length&&(G=G-P.length),G};if(g)e.slides.filter(N=>N.matches(`.${e.params.slideClass}, swiper-slide`)).forEach(N=>{N.remove()});else for(let N=A;N<=S;N+=1)if(N<k||N>L){const G=z(N);e.slides.filter(Z=>Z.matches(`.${e.params.slideClass}[data-swiper-slide-index="${G}"], swiper-slide[data-swiper-slide-index="${G}"]`)).forEach(Z=>{Z.remove()})}const F=w?-P.length:0,j=w?P.length*2:P.length;for(let N=F;N<j;N+=1)if(N>=k&&N<=L){const G=z(N);typeof S>"u"||g?$.push(G):(N>S&&$.push(G),N<A&&B.push(G))}if($.forEach(N=>{e.slidesEl.append(l(P[N],N))}),w)for(let N=B.length-1;N>=0;N-=1){const G=B[N];e.slidesEl.prepend(l(P[G],G))}else B.sort((N,G)=>G-N),B.forEach(N=>{e.slidesEl.prepend(l(P[N],N))});K(e.slidesEl,".swiper-slide, swiper-slide").forEach(N=>{N.style[_]=`${I-Math.abs(e.cssOverflowAdjustment())}px`}),R()}function d(g){if(typeof g=="object"&&"length"in g)for(let v=0;v<g.length;v+=1)g[v]&&e.virtual.slides.push(g[v]);else e.virtual.slides.push(g);u(!0)}function c(g){const v=e.activeIndex;let h=v+1,p=1;if(Array.isArray(g)){for(let b=0;b<g.length;b+=1)g[b]&&e.virtual.slides.unshift(g[b]);h=v+g.length,p=g.length}else e.virtual.slides.unshift(g);if(e.params.virtual.cache){const b=e.virtual.cache,w={};Object.keys(b).forEach(y=>{const E=b[y],x=E.getAttribute("data-swiper-slide-index");x&&E.setAttribute("data-swiper-slide-index",parseInt(x,10)+p),w[parseInt(y,10)+p]=E}),e.virtual.cache=w}u(!0),e.slideTo(h,0)}function f(g){if(typeof g>"u"||g===null)return;let v=e.activeIndex;if(Array.isArray(g))for(let h=g.length-1;h>=0;h-=1)e.params.virtual.cache&&(delete e.virtual.cache[g[h]],Object.keys(e.virtual.cache).forEach(p=>{p>g&&(e.virtual.cache[p-1]=e.virtual.cache[p],e.virtual.cache[p-1].setAttribute("data-swiper-slide-index",p-1),delete e.virtual.cache[p])})),e.virtual.slides.splice(g[h],1),g[h]<v&&(v-=1),v=Math.max(v,0);else e.params.virtual.cache&&(delete e.virtual.cache[g],Object.keys(e.virtual.cache).forEach(h=>{h>g&&(e.virtual.cache[h-1]=e.virtual.cache[h],e.virtual.cache[h-1].setAttribute("data-swiper-slide-index",h-1),delete e.virtual.cache[h])})),e.virtual.slides.splice(g,1),g<v&&(v-=1),v=Math.max(v,0);u(!0),e.slideTo(v,0)}function m(){e.virtual.slides=[],e.params.virtual.cache&&(e.virtual.cache={}),u(!0),e.slideTo(0,0)}r("beforeInit",()=>{if(!e.params.virtual.enabled)return;let g;if(typeof e.passedParams.virtual.slides>"u"){const v=[...e.slidesEl.children].filter(h=>h.matches(`.${e.params.slideClass}, swiper-slide`));v&&v.length&&(e.virtual.slides=[...v],g=!0,v.forEach((h,p)=>{h.setAttribute("data-swiper-slide-index",p),e.virtual.cache[p]=h,h.remove()}))}g||(e.virtual.slides=e.params.virtual.slides),e.classNames.push(`${e.params.containerModifierClass}virtual`),e.params.watchSlidesProgress=!0,e.originalParams.watchSlidesProgress=!0,u(!1,!0)}),r("setTranslate",()=>{e.params.virtual.enabled&&(e.params.cssMode&&!e._immediateVirtual?(clearTimeout(s),s=setTimeout(()=>{u()},100)):u())}),r("init update resize",()=>{e.params.virtual.enabled&&e.params.cssMode&&at(e.wrapperEl,"--swiper-virtual-size",`${e.virtualSize}px`)}),Object.assign(e.virtual,{appendSlide:d,prependSlide:c,removeSlide:f,removeAllSlides:m,update:u})}function cc(t){let{swiper:e,extendParams:i,on:r,emit:n}=t;const s=J(),a=W();e.keyboard={enabled:!1},i({keyboard:{enabled:!1,onlyInViewport:!0,pageUpDown:!0}});function o(d){if(!e.enabled)return;const{rtlTranslate:c}=e;let f=d;f.originalEvent&&(f=f.originalEvent);const m=f.keyCode||f.charCode,g=e.params.keyboard.pageUpDown,v=g&&m===33,h=g&&m===34,p=m===37,b=m===39,w=m===38,y=m===40;if(!e.allowSlideNext&&(e.isHorizontal()&&b||e.isVertical()&&y||h)||!e.allowSlidePrev&&(e.isHorizontal()&&p||e.isVertical()&&w||v))return!1;if(!(f.shiftKey||f.altKey||f.ctrlKey||f.metaKey)&&!(s.activeElement&&s.activeElement.nodeName&&(s.activeElement.nodeName.toLowerCase()==="input"||s.activeElement.nodeName.toLowerCase()==="textarea"))){if(e.params.keyboard.onlyInViewport&&(v||h||p||b||w||y)){let E=!1;if(De(e.el,`.${e.params.slideClass}, swiper-slide`).length>0&&De(e.el,`.${e.params.slideActiveClass}`).length===0)return;const x=e.el,A=x.clientWidth,S=x.clientHeight,P=a.innerWidth,C=a.innerHeight,O=Nt(x);c&&(O.left-=x.scrollLeft);const T=[[O.left,O.top],[O.left+A,O.top],[O.left,O.top+S],[O.left+A,O.top+S]];for(let _=0;_<T.length;_+=1){const M=T[_];if(M[0]>=0&&M[0]<=P&&M[1]>=0&&M[1]<=C){if(M[0]===0&&M[1]===0)continue;E=!0}}if(!E)return}e.isHorizontal()?((v||h||p||b)&&(f.preventDefault?f.preventDefault():f.returnValue=!1),((h||b)&&!c||(v||p)&&c)&&e.slideNext(),((v||p)&&!c||(h||b)&&c)&&e.slidePrev()):((v||h||w||y)&&(f.preventDefault?f.preventDefault():f.returnValue=!1),(h||y)&&e.slideNext(),(v||w)&&e.slidePrev()),n("keyPress",m)}}function l(){e.keyboard.enabled||(s.addEventListener("keydown",o),e.keyboard.enabled=!0)}function u(){e.keyboard.enabled&&(s.removeEventListener("keydown",o),e.keyboard.enabled=!1)}r("init",()=>{e.params.keyboard.enabled&&l()}),r("destroy",()=>{e.keyboard.enabled&&u()}),Object.assign(e.keyboard,{enable:l,disable:u})}function dc(t){let{swiper:e,extendParams:i,on:r,emit:n}=t;const s=W();i({mousewheel:{enabled:!1,releaseOnEdges:!1,invert:!1,forceToAxis:!1,sensitivity:1,eventsTarget:"container",thresholdDelta:null,thresholdTime:null,noMousewheelClass:"swiper-no-mousewheel"}}),e.mousewheel={enabled:!1};let a,o=ne(),l;const u=[];function d(w){let A=0,S=0,P=0,C=0;return"detail"in w&&(S=w.detail),"wheelDelta"in w&&(S=-w.wheelDelta/120),"wheelDeltaY"in w&&(S=-w.wheelDeltaY/120),"wheelDeltaX"in w&&(A=-w.wheelDeltaX/120),"axis"in w&&w.axis===w.HORIZONTAL_AXIS&&(A=S,S=0),P=A*10,C=S*10,"deltaY"in w&&(C=w.deltaY),"deltaX"in w&&(P=w.deltaX),w.shiftKey&&!P&&(P=C,C=0),(P||C)&&w.deltaMode&&(w.deltaMode===1?(P*=40,C*=40):(P*=800,C*=800)),P&&!A&&(A=P<1?-1:1),C&&!S&&(S=C<1?-1:1),{spinX:A,spinY:S,pixelX:P,pixelY:C}}function c(){e.enabled&&(e.mouseEntered=!0)}function f(){e.enabled&&(e.mouseEntered=!1)}function m(w){return e.params.mousewheel.thresholdDelta&&w.delta<e.params.mousewheel.thresholdDelta||e.params.mousewheel.thresholdTime&&ne()-o<e.params.mousewheel.thresholdTime?!1:w.delta>=6&&ne()-o<60?!0:(w.direction<0?(!e.isEnd||e.params.loop)&&!e.animating&&(e.slideNext(),n("scroll",w.raw)):(!e.isBeginning||e.params.loop)&&!e.animating&&(e.slidePrev(),n("scroll",w.raw)),o=new s.Date().getTime(),!1)}function g(w){const y=e.params.mousewheel;if(w.direction<0){if(e.isEnd&&!e.params.loop&&y.releaseOnEdges)return!0}else if(e.isBeginning&&!e.params.loop&&y.releaseOnEdges)return!0;return!1}function v(w){let y=w,E=!0;if(!e.enabled||w.target.closest(`.${e.params.mousewheel.noMousewheelClass}`))return;const x=e.params.mousewheel;e.params.cssMode&&y.preventDefault();let A=e.el;e.params.mousewheel.eventsTarget!=="container"&&(A=document.querySelector(e.params.mousewheel.eventsTarget));const S=A&&A.contains(y.target);if(!e.mouseEntered&&!S&&!x.releaseOnEdges)return!0;y.originalEvent&&(y=y.originalEvent);let P=0;const C=e.rtlTranslate?-1:1,O=d(y);if(x.forceToAxis)if(e.isHorizontal())if(Math.abs(O.pixelX)>Math.abs(O.pixelY))P=-O.pixelX*C;else return!0;else if(Math.abs(O.pixelY)>Math.abs(O.pixelX))P=-O.pixelY;else return!0;else P=Math.abs(O.pixelX)>Math.abs(O.pixelY)?-O.pixelX*C:-O.pixelY;if(P===0)return!0;x.invert&&(P=-P);let T=e.getTranslate()+P*x.sensitivity;if(T>=e.minTranslate()&&(T=e.minTranslate()),T<=e.maxTranslate()&&(T=e.maxTranslate()),E=e.params.loop?!0:!(T===e.minTranslate()||T===e.maxTranslate()),E&&e.params.nested&&y.stopPropagation(),!e.params.freeMode||!e.params.freeMode.enabled){const _={time:ne(),delta:Math.abs(P),direction:Math.sign(P),raw:w};u.length>=2&&u.shift();const M=u.length?u[u.length-1]:void 0;if(u.push(_),M?(_.direction!==M.direction||_.delta>M.delta||_.time>M.time+150)&&m(_):m(_),g(_))return!0}else{const _={time:ne(),delta:Math.abs(P),direction:Math.sign(P)},M=l&&_.time<l.time+500&&_.delta<=l.delta&&_.direction===l.direction;if(!M){l=void 0;let D=e.getTranslate()+P*x.sensitivity;const k=e.isBeginning,L=e.isEnd;if(D>=e.minTranslate()&&(D=e.minTranslate()),D<=e.maxTranslate()&&(D=e.maxTranslate()),e.setTransition(0),e.setTranslate(D),e.updateProgress(),e.updateActiveIndex(),e.updateSlidesClasses(),(!k&&e.isBeginning||!L&&e.isEnd)&&e.updateSlidesClasses(),e.params.loop&&e.loopFix({direction:_.direction<0?"next":"prev",byMousewheel:!0}),e.params.freeMode.sticky){clearTimeout(a),a=void 0,u.length>=15&&u.shift();const I=u.length?u[u.length-1]:void 0,R=u[0];if(u.push(_),I&&(_.delta>I.delta||_.direction!==I.direction))u.splice(0);else if(u.length>=15&&_.time-R.time<500&&R.delta-_.delta>=1&&_.delta<=6){const B=P>0?.8:.2;l=_,u.splice(0),a=ze(()=>{e.slideToClosest(e.params.speed,!0,void 0,B)},0)}a||(a=ze(()=>{l=_,u.splice(0),e.slideToClosest(e.params.speed,!0,void 0,.5)},500))}if(M||n("scroll",y),e.params.autoplay&&e.params.autoplayDisableOnInteraction&&e.autoplay.stop(),x.releaseOnEdges&&(D===e.minTranslate()||D===e.maxTranslate()))return!0}}return y.preventDefault?y.preventDefault():y.returnValue=!1,!1}function h(w){let y=e.el;e.params.mousewheel.eventsTarget!=="container"&&(y=document.querySelector(e.params.mousewheel.eventsTarget)),y[w]("mouseenter",c),y[w]("mouseleave",f),y[w]("wheel",v)}function p(){return e.params.cssMode?(e.wrapperEl.removeEventListener("wheel",v),!0):e.mousewheel.enabled?!1:(h("addEventListener"),e.mousewheel.enabled=!0,!0)}function b(){return e.params.cssMode?(e.wrapperEl.addEventListener(event,v),!0):e.mousewheel.enabled?(h("removeEventListener"),e.mousewheel.enabled=!1,!0):!1}r("init",()=>{!e.params.mousewheel.enabled&&e.params.cssMode&&b(),e.params.mousewheel.enabled&&p()}),r("destroy",()=>{e.params.cssMode&&p(),e.mousewheel.enabled&&b()}),Object.assign(e.mousewheel,{enable:p,disable:b})}function ur(t,e,i,r){return t.params.createElements&&Object.keys(r).forEach(n=>{if(!i[n]&&i.auto===!0){let s=K(t.el,`.${r[n]}`)[0];s||(s=ie("div",r[n]),s.className=r[n],t.el.append(s)),i[n]=s,e[n]=s}}),i}function uc(t){let{swiper:e,extendParams:i,on:r,emit:n}=t;i({navigation:{nextEl:null,prevEl:null,hideOnClick:!1,disabledClass:"swiper-button-disabled",hiddenClass:"swiper-button-hidden",lockClass:"swiper-button-lock",navigationDisabledClass:"swiper-navigation-disabled"}}),e.navigation={nextEl:null,prevEl:null};function s(g){let v;return g&&typeof g=="string"&&e.isElement&&(v=e.el.querySelector(g),v)?v:(g&&(typeof g=="string"&&(v=[...document.querySelectorAll(g)]),e.params.uniqueNavElements&&typeof g=="string"&&v&&v.length>1&&e.el.querySelectorAll(g).length===1?v=e.el.querySelector(g):v&&v.length===1&&(v=v[0])),g&&!v?g:v)}function a(g,v){const h=e.params.navigation;g=H(g),g.forEach(p=>{p&&(p.classList[v?"add":"remove"](...h.disabledClass.split(" ")),p.tagName==="BUTTON"&&(p.disabled=v),e.params.watchOverflow&&e.enabled&&p.classList[e.isLocked?"add":"remove"](h.lockClass))})}function o(){const{nextEl:g,prevEl:v}=e.navigation;if(e.params.loop){a(v,!1),a(g,!1);return}a(v,e.isBeginning&&!e.params.rewind),a(g,e.isEnd&&!e.params.rewind)}function l(g){g.preventDefault(),!(e.isBeginning&&!e.params.loop&&!e.params.rewind)&&(e.slidePrev(),n("navigationPrev"))}function u(g){g.preventDefault(),!(e.isEnd&&!e.params.loop&&!e.params.rewind)&&(e.slideNext(),n("navigationNext"))}function d(){const g=e.params.navigation;if(e.params.navigation=ur(e,e.originalParams.navigation,e.params.navigation,{nextEl:"swiper-button-next",prevEl:"swiper-button-prev"}),!(g.nextEl||g.prevEl))return;let v=s(g.nextEl),h=s(g.prevEl);Object.assign(e.navigation,{nextEl:v,prevEl:h}),v=H(v),h=H(h);const p=(b,w)=>{b&&b.addEventListener("click",w==="next"?u:l),!e.enabled&&b&&b.classList.add(...g.lockClass.split(" "))};v.forEach(b=>p(b,"next")),h.forEach(b=>p(b,"prev"))}function c(){let{nextEl:g,prevEl:v}=e.navigation;g=H(g),v=H(v);const h=(p,b)=>{p.removeEventListener("click",b==="next"?u:l),p.classList.remove(...e.params.navigation.disabledClass.split(" "))};g.forEach(p=>h(p,"next")),v.forEach(p=>h(p,"prev"))}r("init",()=>{e.params.navigation.enabled===!1?m():(d(),o())}),r("toEdge fromEdge lock unlock",()=>{o()}),r("destroy",()=>{c()}),r("enable disable",()=>{let{nextEl:g,prevEl:v}=e.navigation;if(g=H(g),v=H(v),e.enabled){o();return}[...g,...v].filter(h=>!!h).forEach(h=>h.classList.add(e.params.navigation.lockClass))}),r("click",(g,v)=>{let{nextEl:h,prevEl:p}=e.navigation;h=H(h),p=H(p);const b=v.target;let w=p.includes(b)||h.includes(b);if(e.isElement&&!w){const y=v.path||v.composedPath&&v.composedPath();y&&(w=y.find(E=>h.includes(E)||p.includes(E)))}if(e.params.navigation.hideOnClick&&!w){if(e.pagination&&e.params.pagination&&e.params.pagination.clickable&&(e.pagination.el===b||e.pagination.el.contains(b)))return;let y;h.length?y=h[0].classList.contains(e.params.navigation.hiddenClass):p.length&&(y=p[0].classList.contains(e.params.navigation.hiddenClass)),n(y===!0?"navigationShow":"navigationHide"),[...h,...p].filter(E=>!!E).forEach(E=>E.classList.toggle(e.params.navigation.hiddenClass))}});const f=()=>{e.el.classList.remove(...e.params.navigation.navigationDisabledClass.split(" ")),d(),o()},m=()=>{e.el.classList.add(...e.params.navigation.navigationDisabledClass.split(" ")),c()};Object.assign(e.navigation,{enable:f,disable:m,update:o,init:d,destroy:c})}function pe(t){return t===void 0&&(t=""),`.${t.trim().replace(/([\.:!+\/])/g,"\\$1").replace(/ /g,".")}`}function fc(t){let{swiper:e,extendParams:i,on:r,emit:n}=t;const s="swiper-pagination";i({pagination:{el:null,bulletElement:"span",clickable:!1,hideOnClick:!1,renderBullet:null,renderProgressbar:null,renderFraction:null,renderCustom:null,progressbarOpposite:!1,type:"bullets",dynamicBullets:!1,dynamicMainBullets:1,formatFractionCurrent:p=>p,formatFractionTotal:p=>p,bulletClass:`${s}-bullet`,bulletActiveClass:`${s}-bullet-active`,modifierClass:`${s}-`,currentClass:`${s}-current`,totalClass:`${s}-total`,hiddenClass:`${s}-hidden`,progressbarFillClass:`${s}-progressbar-fill`,progressbarOppositeClass:`${s}-progressbar-opposite`,clickableClass:`${s}-clickable`,lockClass:`${s}-lock`,horizontalClass:`${s}-horizontal`,verticalClass:`${s}-vertical`,paginationDisabledClass:`${s}-disabled`}}),e.pagination={el:null,bullets:[]};let a,o=0;function l(){return!e.params.pagination.el||!e.pagination.el||Array.isArray(e.pagination.el)&&e.pagination.el.length===0}function u(p,b){const{bulletActiveClass:w}=e.params.pagination;p&&(p=p[`${b==="prev"?"previous":"next"}ElementSibling`],p&&(p.classList.add(`${w}-${b}`),p=p[`${b==="prev"?"previous":"next"}ElementSibling`],p&&p.classList.add(`${w}-${b}-${b}`)))}function d(p){const b=p.target.closest(pe(e.params.pagination.bulletClass));if(!b)return;p.preventDefault();const w=ut(b)*e.params.slidesPerGroup;if(e.params.loop){if(e.realIndex===w)return;e.slideToLoop(w)}else e.slideTo(w)}function c(){const p=e.rtl,b=e.params.pagination;if(l())return;let w=e.pagination.el;w=H(w);let y,E;const x=e.virtual&&e.params.virtual.enabled?e.virtual.slides.length:e.slides.length,A=e.params.loop?Math.ceil(x/e.params.slidesPerGroup):e.snapGrid.length;if(e.params.loop?(E=e.previousRealIndex||0,y=e.params.slidesPerGroup>1?Math.floor(e.realIndex/e.params.slidesPerGroup):e.realIndex):typeof e.snapIndex<"u"?(y=e.snapIndex,E=e.previousSnapIndex):(E=e.previousIndex||0,y=e.activeIndex||0),b.type==="bullets"&&e.pagination.bullets&&e.pagination.bullets.length>0){const S=e.pagination.bullets;let P,C,O;if(b.dynamicBullets&&(a=Ni(S[0],e.isHorizontal()?"width":"height"),w.forEach(T=>{T.style[e.isHorizontal()?"width":"height"]=`${a*(b.dynamicMainBullets+4)}px`}),b.dynamicMainBullets>1&&E!==void 0&&(o+=y-(E||0),o>b.dynamicMainBullets-1?o=b.dynamicMainBullets-1:o<0&&(o=0)),P=Math.max(y-o,0),C=P+(Math.min(S.length,b.dynamicMainBullets)-1),O=(C+P)/2),S.forEach(T=>{const _=[...["","-next","-next-next","-prev","-prev-prev","-main"].map(M=>`${b.bulletActiveClass}${M}`)].map(M=>typeof M=="string"&&M.includes(" ")?M.split(" "):M).flat();T.classList.remove(..._)}),w.length>1)S.forEach(T=>{const _=ut(T);_===y?T.classList.add(...b.bulletActiveClass.split(" ")):e.isElement&&T.setAttribute("part","bullet"),b.dynamicBullets&&(_>=P&&_<=C&&T.classList.add(...`${b.bulletActiveClass}-main`.split(" ")),_===P&&u(T,"prev"),_===C&&u(T,"next"))});else{const T=S[y];if(T&&T.classList.add(...b.bulletActiveClass.split(" ")),e.isElement&&S.forEach((_,M)=>{_.setAttribute("part",M===y?"bullet-active":"bullet")}),b.dynamicBullets){const _=S[P],M=S[C];for(let D=P;D<=C;D+=1)S[D]&&S[D].classList.add(...`${b.bulletActiveClass}-main`.split(" "));u(_,"prev"),u(M,"next")}}if(b.dynamicBullets){const T=Math.min(S.length,b.dynamicMainBullets+4),_=(a*T-a)/2-O*a,M=p?"right":"left";S.forEach(D=>{D.style[e.isHorizontal()?M:"top"]=`${_}px`})}}w.forEach((S,P)=>{if(b.type==="fraction"&&(S.querySelectorAll(pe(b.currentClass)).forEach(C=>{C.textContent=b.formatFractionCurrent(y+1)}),S.querySelectorAll(pe(b.totalClass)).forEach(C=>{C.textContent=b.formatFractionTotal(A)})),b.type==="progressbar"){let C;b.progressbarOpposite?C=e.isHorizontal()?"vertical":"horizontal":C=e.isHorizontal()?"horizontal":"vertical";const O=(y+1)/A;let T=1,_=1;C==="horizontal"?T=O:_=O,S.querySelectorAll(pe(b.progressbarFillClass)).forEach(M=>{M.style.transform=`translate3d(0,0,0) scaleX(${T}) scaleY(${_})`,M.style.transitionDuration=`${e.params.speed}ms`})}b.type==="custom"&&b.renderCustom?(S.innerHTML=b.renderCustom(e,y+1,A),P===0&&n("paginationRender",S)):(P===0&&n("paginationRender",S),n("paginationUpdate",S)),e.params.watchOverflow&&e.enabled&&S.classList[e.isLocked?"add":"remove"](b.lockClass)})}function f(){const p=e.params.pagination;if(l())return;const b=e.virtual&&e.params.virtual.enabled?e.virtual.slides.length:e.grid&&e.params.grid.rows>1?e.slides.length/Math.ceil(e.params.grid.rows):e.slides.length;let w=e.pagination.el;w=H(w);let y="";if(p.type==="bullets"){let E=e.params.loop?Math.ceil(b/e.params.slidesPerGroup):e.snapGrid.length;e.params.freeMode&&e.params.freeMode.enabled&&E>b&&(E=b);for(let x=0;x<E;x+=1)p.renderBullet?y+=p.renderBullet.call(e,x,p.bulletClass):y+=`<${p.bulletElement} ${e.isElement?'part="bullet"':""} class="${p.bulletClass}"></${p.bulletElement}>`}p.type==="fraction"&&(p.renderFraction?y=p.renderFraction.call(e,p.currentClass,p.totalClass):y=`<span class="${p.currentClass}"></span> / <span class="${p.totalClass}"></span>`),p.type==="progressbar"&&(p.renderProgressbar?y=p.renderProgressbar.call(e,p.progressbarFillClass):y=`<span class="${p.progressbarFillClass}"></span>`),e.pagination.bullets=[],w.forEach(E=>{p.type!=="custom"&&(E.innerHTML=y||""),p.type==="bullets"&&e.pagination.bullets.push(...E.querySelectorAll(pe(p.bulletClass)))}),p.type!=="custom"&&n("paginationRender",w[0])}function m(){e.params.pagination=ur(e,e.originalParams.pagination,e.params.pagination,{el:"swiper-pagination"});const p=e.params.pagination;if(!p.el)return;let b;typeof p.el=="string"&&e.isElement&&(b=e.el.querySelector(p.el)),!b&&typeof p.el=="string"&&(b=[...document.querySelectorAll(p.el)]),b||(b=p.el),!(!b||b.length===0)&&(e.params.uniqueNavElements&&typeof p.el=="string"&&Array.isArray(b)&&b.length>1&&(b=[...e.el.querySelectorAll(p.el)],b.length>1&&(b=b.filter(w=>De(w,".swiper")[0]===e.el)[0])),Array.isArray(b)&&b.length===1&&(b=b[0]),Object.assign(e.pagination,{el:b}),b=H(b),b.forEach(w=>{p.type==="bullets"&&p.clickable&&w.classList.add(...(p.clickableClass||"").split(" ")),w.classList.add(p.modifierClass+p.type),w.classList.add(e.isHorizontal()?p.horizontalClass:p.verticalClass),p.type==="bullets"&&p.dynamicBullets&&(w.classList.add(`${p.modifierClass}${p.type}-dynamic`),o=0,p.dynamicMainBullets<1&&(p.dynamicMainBullets=1)),p.type==="progressbar"&&p.progressbarOpposite&&w.classList.add(p.progressbarOppositeClass),p.clickable&&w.addEventListener("click",d),e.enabled||w.classList.add(p.lockClass)}))}function g(){const p=e.params.pagination;if(l())return;let b=e.pagination.el;b&&(b=H(b),b.forEach(w=>{w.classList.remove(p.hiddenClass),w.classList.remove(p.modifierClass+p.type),w.classList.remove(e.isHorizontal()?p.horizontalClass:p.verticalClass),p.clickable&&(w.classList.remove(...(p.clickableClass||"").split(" ")),w.removeEventListener("click",d))})),e.pagination.bullets&&e.pagination.bullets.forEach(w=>w.classList.remove(...p.bulletActiveClass.split(" ")))}r("changeDirection",()=>{if(!e.pagination||!e.pagination.el)return;const p=e.params.pagination;let{el:b}=e.pagination;b=H(b),b.forEach(w=>{w.classList.remove(p.horizontalClass,p.verticalClass),w.classList.add(e.isHorizontal()?p.horizontalClass:p.verticalClass)})}),r("init",()=>{e.params.pagination.enabled===!1?h():(m(),f(),c())}),r("activeIndexChange",()=>{typeof e.snapIndex>"u"&&c()}),r("snapIndexChange",()=>{c()}),r("snapGridLengthChange",()=>{f(),c()}),r("destroy",()=>{g()}),r("enable disable",()=>{let{el:p}=e.pagination;p&&(p=H(p),p.forEach(b=>b.classList[e.enabled?"remove":"add"](e.params.pagination.lockClass)))}),r("lock unlock",()=>{c()}),r("click",(p,b)=>{const w=b.target,y=H(e.pagination.el);if(e.params.pagination.el&&e.params.pagination.hideOnClick&&y&&y.length>0&&!w.classList.contains(e.params.pagination.bulletClass)){if(e.navigation&&(e.navigation.nextEl&&w===e.navigation.nextEl||e.navigation.prevEl&&w===e.navigation.prevEl))return;const E=y[0].classList.contains(e.params.pagination.hiddenClass);n(E===!0?"paginationShow":"paginationHide"),y.forEach(x=>x.classList.toggle(e.params.pagination.hiddenClass))}});const v=()=>{e.el.classList.remove(e.params.pagination.paginationDisabledClass);let{el:p}=e.pagination;p&&(p=H(p),p.forEach(b=>b.classList.remove(e.params.pagination.paginationDisabledClass))),m(),f(),c()},h=()=>{e.el.classList.add(e.params.pagination.paginationDisabledClass);let{el:p}=e.pagination;p&&(p=H(p),p.forEach(b=>b.classList.add(e.params.pagination.paginationDisabledClass))),g()};Object.assign(e.pagination,{enable:v,disable:h,render:f,update:c,init:m,destroy:g})}function pc(t){let{swiper:e,extendParams:i,on:r,emit:n}=t;const s=J();let a=!1,o=null,l=null,u,d,c,f;i({scrollbar:{el:null,dragSize:"auto",hide:!1,draggable:!1,snapOnRelease:!0,lockClass:"swiper-scrollbar-lock",dragClass:"swiper-scrollbar-drag",scrollbarDisabledClass:"swiper-scrollbar-disabled",horizontalClass:"swiper-scrollbar-horizontal",verticalClass:"swiper-scrollbar-vertical"}}),e.scrollbar={el:null,dragEl:null};function m(){if(!e.params.scrollbar.el||!e.scrollbar.el)return;const{scrollbar:T,rtlTranslate:_}=e,{dragEl:M,el:D}=T,k=e.params.scrollbar,L=e.params.loop?e.progressLoop:e.progress;let I=d,R=(c-d)*L;_?(R=-R,R>0?(I=d-R,R=0):-R+d>c&&(I=c+R)):R<0?(I=d+R,R=0):R+d>c&&(I=c-R),e.isHorizontal()?(M.style.transform=`translate3d(${R}px, 0, 0)`,M.style.width=`${I}px`):(M.style.transform=`translate3d(0px, ${R}px, 0)`,M.style.height=`${I}px`),k.hide&&(clearTimeout(o),D.style.opacity=1,o=setTimeout(()=>{D.style.opacity=0,D.style.transitionDuration="400ms"},1e3))}function g(T){!e.params.scrollbar.el||!e.scrollbar.el||(e.scrollbar.dragEl.style.transitionDuration=`${T}ms`)}function v(){if(!e.params.scrollbar.el||!e.scrollbar.el)return;const{scrollbar:T}=e,{dragEl:_,el:M}=T;_.style.width="",_.style.height="",c=e.isHorizontal()?M.offsetWidth:M.offsetHeight,f=e.size/(e.virtualSize+e.params.slidesOffsetBefore-(e.params.centeredSlides?e.snapGrid[0]:0)),e.params.scrollbar.dragSize==="auto"?d=c*f:d=parseInt(e.params.scrollbar.dragSize,10),e.isHorizontal()?_.style.width=`${d}px`:_.style.height=`${d}px`,f>=1?M.style.display="none":M.style.display="",e.params.scrollbar.hide&&(M.style.opacity=0),e.params.watchOverflow&&e.enabled&&T.el.classList[e.isLocked?"add":"remove"](e.params.scrollbar.lockClass)}function h(T){return e.isHorizontal()?T.clientX:T.clientY}function p(T){const{scrollbar:_,rtlTranslate:M}=e,{el:D}=_;let k;k=(h(T)-Nt(D)[e.isHorizontal()?"left":"top"]-(u!==null?u:d/2))/(c-d),k=Math.max(Math.min(k,1),0),M&&(k=1-k);const L=e.minTranslate()+(e.maxTranslate()-e.minTranslate())*k;e.updateProgress(L),e.setTranslate(L),e.updateActiveIndex(),e.updateSlidesClasses()}function b(T){const _=e.params.scrollbar,{scrollbar:M,wrapperEl:D}=e,{el:k,dragEl:L}=M;a=!0,u=T.target===L?h(T)-T.target.getBoundingClientRect()[e.isHorizontal()?"left":"top"]:null,T.preventDefault(),T.stopPropagation(),D.style.transitionDuration="100ms",L.style.transitionDuration="100ms",p(T),clearTimeout(l),k.style.transitionDuration="0ms",_.hide&&(k.style.opacity=1),e.params.cssMode&&(e.wrapperEl.style["scroll-snap-type"]="none"),n("scrollbarDragStart",T)}function w(T){const{scrollbar:_,wrapperEl:M}=e,{el:D,dragEl:k}=_;a&&(T.preventDefault&&T.cancelable?T.preventDefault():T.returnValue=!1,p(T),M.style.transitionDuration="0ms",D.style.transitionDuration="0ms",k.style.transitionDuration="0ms",n("scrollbarDragMove",T))}function y(T){const _=e.params.scrollbar,{scrollbar:M,wrapperEl:D}=e,{el:k}=M;a&&(a=!1,e.params.cssMode&&(e.wrapperEl.style["scroll-snap-type"]="",D.style.transitionDuration=""),_.hide&&(clearTimeout(l),l=ze(()=>{k.style.opacity=0,k.style.transitionDuration="400ms"},1e3)),n("scrollbarDragEnd",T),_.snapOnRelease&&e.slideToClosest())}function E(T){const{scrollbar:_,params:M}=e,D=_.el;if(!D)return;const k=D,L=M.passiveListeners?{passive:!1,capture:!1}:!1,I=M.passiveListeners?{passive:!0,capture:!1}:!1;if(!k)return;const R=T==="on"?"addEventListener":"removeEventListener";k[R]("pointerdown",b,L),s[R]("pointermove",w,L),s[R]("pointerup",y,I)}function x(){!e.params.scrollbar.el||!e.scrollbar.el||E("on")}function A(){!e.params.scrollbar.el||!e.scrollbar.el||E("off")}function S(){const{scrollbar:T,el:_}=e;e.params.scrollbar=ur(e,e.originalParams.scrollbar,e.params.scrollbar,{el:"swiper-scrollbar"});const M=e.params.scrollbar;if(!M.el)return;let D;if(typeof M.el=="string"&&e.isElement&&(D=e.el.querySelector(M.el)),!D&&typeof M.el=="string"){if(D=s.querySelectorAll(M.el),!D.length)return}else D||(D=M.el);e.params.uniqueNavElements&&typeof M.el=="string"&&D.length>1&&_.querySelectorAll(M.el).length===1&&(D=_.querySelector(M.el)),D.length>0&&(D=D[0]),D.classList.add(e.isHorizontal()?M.horizontalClass:M.verticalClass);let k;D&&(k=D.querySelector(pe(e.params.scrollbar.dragClass)),k||(k=ie("div",e.params.scrollbar.dragClass),D.append(k))),Object.assign(T,{el:D,dragEl:k}),M.draggable&&x(),D&&D.classList[e.enabled?"remove":"add"](...we(e.params.scrollbar.lockClass))}function P(){const T=e.params.scrollbar,_=e.scrollbar.el;_&&_.classList.remove(...we(e.isHorizontal()?T.horizontalClass:T.verticalClass)),A()}r("changeDirection",()=>{if(!e.scrollbar||!e.scrollbar.el)return;const T=e.params.scrollbar;let{el:_}=e.scrollbar;_=H(_),_.forEach(M=>{M.classList.remove(T.horizontalClass,T.verticalClass),M.classList.add(e.isHorizontal()?T.horizontalClass:T.verticalClass)})}),r("init",()=>{e.params.scrollbar.enabled===!1?O():(S(),v(),m())}),r("update resize observerUpdate lock unlock changeDirection",()=>{v()}),r("setTranslate",()=>{m()}),r("setTransition",(T,_)=>{g(_)}),r("enable disable",()=>{const{el:T}=e.scrollbar;T&&T.classList[e.enabled?"remove":"add"](...we(e.params.scrollbar.lockClass))}),r("destroy",()=>{P()});const C=()=>{e.el.classList.remove(...we(e.params.scrollbar.scrollbarDisabledClass)),e.scrollbar.el&&e.scrollbar.el.classList.remove(...we(e.params.scrollbar.scrollbarDisabledClass)),S(),v(),m()},O=()=>{e.el.classList.add(...we(e.params.scrollbar.scrollbarDisabledClass)),e.scrollbar.el&&e.scrollbar.el.classList.add(...we(e.params.scrollbar.scrollbarDisabledClass)),P()};Object.assign(e.scrollbar,{enable:C,disable:O,updateSize:v,setTranslate:m,init:S,destroy:P})}function mc(t){let{swiper:e,extendParams:i,on:r}=t;i({parallax:{enabled:!1}});const n="[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y], [data-swiper-parallax-opacity], [data-swiper-parallax-scale]",s=(l,u)=>{const{rtl:d}=e,c=d?-1:1,f=l.getAttribute("data-swiper-parallax")||"0";let m=l.getAttribute("data-swiper-parallax-x"),g=l.getAttribute("data-swiper-parallax-y");const v=l.getAttribute("data-swiper-parallax-scale"),h=l.getAttribute("data-swiper-parallax-opacity"),p=l.getAttribute("data-swiper-parallax-rotate");if(m||g?(m=m||"0",g=g||"0"):e.isHorizontal()?(m=f,g="0"):(g=f,m="0"),m.indexOf("%")>=0?m=`${parseInt(m,10)*u*c}%`:m=`${m*u*c}px`,g.indexOf("%")>=0?g=`${parseInt(g,10)*u}%`:g=`${g*u}px`,typeof h<"u"&&h!==null){const w=h-(h-1)*(1-Math.abs(u));l.style.opacity=w}let b=`translate3d(${m}, ${g}, 0px)`;if(typeof v<"u"&&v!==null){const w=v-(v-1)*(1-Math.abs(u));b+=` scale(${w})`}if(p&&typeof p<"u"&&p!==null){const w=p*u*-1;b+=` rotate(${w}deg)`}l.style.transform=b},a=()=>{const{el:l,slides:u,progress:d,snapGrid:c,isElement:f}=e,m=K(l,n);e.isElement&&m.push(...K(e.hostEl,n)),m.forEach(g=>{s(g,d)}),u.forEach((g,v)=>{let h=g.progress;e.params.slidesPerGroup>1&&e.params.slidesPerView!=="auto"&&(h+=Math.ceil(v/2)-d*(c.length-1)),h=Math.min(Math.max(h,-1),1),g.querySelectorAll(`${n}, [data-swiper-parallax-rotate]`).forEach(p=>{s(p,h)})})},o=function(l){l===void 0&&(l=e.params.speed);const{el:u,hostEl:d}=e,c=[...u.querySelectorAll(n)];e.isElement&&c.push(...d.querySelectorAll(n)),c.forEach(f=>{let m=parseInt(f.getAttribute("data-swiper-parallax-duration"),10)||l;l===0&&(m=0),f.style.transitionDuration=`${m}ms`})};r("beforeInit",()=>{e.params.parallax.enabled&&(e.params.watchSlidesProgress=!0,e.originalParams.watchSlidesProgress=!0)}),r("init",()=>{e.params.parallax.enabled&&a()}),r("setTranslate",()=>{e.params.parallax.enabled&&a()}),r("setTransition",(l,u)=>{e.params.parallax.enabled&&o(u)})}function hc(t){let{swiper:e,extendParams:i,on:r,emit:n}=t;const s=W();i({zoom:{enabled:!1,limitToOriginalSize:!1,maxRatio:3,minRatio:1,toggle:!0,containerClass:"swiper-zoom-container",zoomedSlideClass:"swiper-slide-zoomed"}}),e.zoom={enabled:!1};let a=1,o=!1,l,u;const d=[],c={originX:0,originY:0,slideEl:void 0,slideWidth:void 0,slideHeight:void 0,imageEl:void 0,imageWrapEl:void 0,maxRatio:3},f={isTouched:void 0,isMoved:void 0,currentX:void 0,currentY:void 0,minX:void 0,minY:void 0,maxX:void 0,maxY:void 0,width:void 0,height:void 0,startX:void 0,startY:void 0,touchesStart:{},touchesCurrent:{}},m={x:void 0,y:void 0,prevPositionX:void 0,prevPositionY:void 0,prevTime:void 0};let g=1;Object.defineProperty(e.zoom,"scale",{get(){return g},set($){if(g!==$){const z=c.imageEl,F=c.slideEl;n("zoomChange",$,z,F)}g=$}});function v(){if(d.length<2)return 1;const $=d[0].pageX,z=d[0].pageY,F=d[1].pageX,j=d[1].pageY;return Math.sqrt((F-$)**2+(j-z)**2)}function h(){const $=e.params.zoom,z=c.imageWrapEl.getAttribute("data-swiper-zoom")||$.maxRatio;if($.limitToOriginalSize&&c.imageEl&&c.imageEl.naturalWidth){const F=c.imageEl.naturalWidth/c.imageEl.offsetWidth;return Math.min(F,z)}return z}function p(){if(d.length<2)return{x:null,y:null};const $=c.imageEl.getBoundingClientRect();return[(d[0].pageX+(d[1].pageX-d[0].pageX)/2-$.x-s.scrollX)/a,(d[0].pageY+(d[1].pageY-d[0].pageY)/2-$.y-s.scrollY)/a]}function b(){return e.isElement?"swiper-slide":`.${e.params.slideClass}`}function w($){const z=b();return!!($.target.matches(z)||e.slides.filter(F=>F.contains($.target)).length>0)}function y($){const z=`.${e.params.zoom.containerClass}`;return!!($.target.matches(z)||[...e.hostEl.querySelectorAll(z)].filter(F=>F.contains($.target)).length>0)}function E($){if($.pointerType==="mouse"&&d.splice(0,d.length),!w($))return;const z=e.params.zoom;if(l=!1,u=!1,d.push($),!(d.length<2)){if(l=!0,c.scaleStart=v(),!c.slideEl){c.slideEl=$.target.closest(`.${e.params.slideClass}, swiper-slide`),c.slideEl||(c.slideEl=e.slides[e.activeIndex]);let F=c.slideEl.querySelector(`.${z.containerClass}`);if(F&&(F=F.querySelectorAll("picture, img, svg, canvas, .swiper-zoom-target")[0]),c.imageEl=F,F?c.imageWrapEl=De(c.imageEl,`.${z.containerClass}`)[0]:c.imageWrapEl=void 0,!c.imageWrapEl){c.imageEl=void 0;return}c.maxRatio=h()}if(c.imageEl){const[F,j]=p();c.originX=F,c.originY=j,c.imageEl.style.transitionDuration="0ms"}o=!0}}function x($){if(!w($))return;const z=e.params.zoom,F=e.zoom,j=d.findIndex(N=>N.pointerId===$.pointerId);j>=0&&(d[j]=$),!(d.length<2)&&(u=!0,c.scaleMove=v(),c.imageEl&&(F.scale=c.scaleMove/c.scaleStart*a,F.scale>c.maxRatio&&(F.scale=c.maxRatio-1+(F.scale-c.maxRatio+1)**.5),F.scale<z.minRatio&&(F.scale=z.minRatio+1-(z.minRatio-F.scale+1)**.5),c.imageEl.style.transform=`translate3d(0,0,0) scale(${F.scale})`))}function A($){if(!w($)||$.pointerType==="mouse"&&$.type==="pointerout")return;const z=e.params.zoom,F=e.zoom,j=d.findIndex(N=>N.pointerId===$.pointerId);j>=0&&d.splice(j,1),!(!l||!u)&&(l=!1,u=!1,c.imageEl&&(F.scale=Math.max(Math.min(F.scale,c.maxRatio),z.minRatio),c.imageEl.style.transitionDuration=`${e.params.speed}ms`,c.imageEl.style.transform=`translate3d(0,0,0) scale(${F.scale})`,a=F.scale,o=!1,F.scale>1&&c.slideEl?c.slideEl.classList.add(`${z.zoomedSlideClass}`):F.scale<=1&&c.slideEl&&c.slideEl.classList.remove(`${z.zoomedSlideClass}`),F.scale===1&&(c.originX=0,c.originY=0,c.slideEl=void 0)))}let S;function P(){e.touchEventsData.preventTouchMoveFromPointerMove=!1}function C(){clearTimeout(S),e.touchEventsData.preventTouchMoveFromPointerMove=!0,S=setTimeout(()=>{P()})}function O($){const z=e.device;if(!c.imageEl||f.isTouched)return;z.android&&$.cancelable&&$.preventDefault(),f.isTouched=!0;const F=d.length>0?d[0]:$;f.touchesStart.x=F.pageX,f.touchesStart.y=F.pageY}function T($){if(!w($)||!y($))return;const z=e.zoom;if(!c.imageEl||!f.isTouched||!c.slideEl)return;f.isMoved||(f.width=c.imageEl.offsetWidth||c.imageEl.clientWidth,f.height=c.imageEl.offsetHeight||c.imageEl.clientHeight,f.startX=Fi(c.imageWrapEl,"x")||0,f.startY=Fi(c.imageWrapEl,"y")||0,c.slideWidth=c.slideEl.offsetWidth,c.slideHeight=c.slideEl.offsetHeight,c.imageWrapEl.style.transitionDuration="0ms");const F=f.width*z.scale,j=f.height*z.scale;if(f.minX=Math.min(c.slideWidth/2-F/2,0),f.maxX=-f.minX,f.minY=Math.min(c.slideHeight/2-j/2,0),f.maxY=-f.minY,f.touchesCurrent.x=d.length>0?d[0].pageX:$.pageX,f.touchesCurrent.y=d.length>0?d[0].pageY:$.pageY,Math.max(Math.abs(f.touchesCurrent.x-f.touchesStart.x),Math.abs(f.touchesCurrent.y-f.touchesStart.y))>5&&(e.allowClick=!1),!f.isMoved&&!o){if(e.isHorizontal()&&(Math.floor(f.minX)===Math.floor(f.startX)&&f.touchesCurrent.x<f.touchesStart.x||Math.floor(f.maxX)===Math.floor(f.startX)&&f.touchesCurrent.x>f.touchesStart.x)){f.isTouched=!1,P();return}if(!e.isHorizontal()&&(Math.floor(f.minY)===Math.floor(f.startY)&&f.touchesCurrent.y<f.touchesStart.y||Math.floor(f.maxY)===Math.floor(f.startY)&&f.touchesCurrent.y>f.touchesStart.y)){f.isTouched=!1,P();return}}$.cancelable&&$.preventDefault(),$.stopPropagation(),C(),f.isMoved=!0;const G=(z.scale-a)/(c.maxRatio-e.params.zoom.minRatio),{originX:Z,originY:He}=c;f.currentX=f.touchesCurrent.x-f.touchesStart.x+f.startX+G*(f.width-Z*2),f.currentY=f.touchesCurrent.y-f.touchesStart.y+f.startY+G*(f.height-He*2),f.currentX<f.minX&&(f.currentX=f.minX+1-(f.minX-f.currentX+1)**.8),f.currentX>f.maxX&&(f.currentX=f.maxX-1+(f.currentX-f.maxX+1)**.8),f.currentY<f.minY&&(f.currentY=f.minY+1-(f.minY-f.currentY+1)**.8),f.currentY>f.maxY&&(f.currentY=f.maxY-1+(f.currentY-f.maxY+1)**.8),m.prevPositionX||(m.prevPositionX=f.touchesCurrent.x),m.prevPositionY||(m.prevPositionY=f.touchesCurrent.y),m.prevTime||(m.prevTime=Date.now()),m.x=(f.touchesCurrent.x-m.prevPositionX)/(Date.now()-m.prevTime)/2,m.y=(f.touchesCurrent.y-m.prevPositionY)/(Date.now()-m.prevTime)/2,Math.abs(f.touchesCurrent.x-m.prevPositionX)<2&&(m.x=0),Math.abs(f.touchesCurrent.y-m.prevPositionY)<2&&(m.y=0),m.prevPositionX=f.touchesCurrent.x,m.prevPositionY=f.touchesCurrent.y,m.prevTime=Date.now(),c.imageWrapEl.style.transform=`translate3d(${f.currentX}px, ${f.currentY}px,0)`}function _(){const $=e.zoom;if(!c.imageEl)return;if(!f.isTouched||!f.isMoved){f.isTouched=!1,f.isMoved=!1;return}f.isTouched=!1,f.isMoved=!1;let z=300,F=300;const j=m.x*z,N=f.currentX+j,G=m.y*F,Z=f.currentY+G;m.x!==0&&(z=Math.abs((N-f.currentX)/m.x)),m.y!==0&&(F=Math.abs((Z-f.currentY)/m.y));const He=Math.max(z,F);f.currentX=N,f.currentY=Z;const bt=f.width*$.scale,fe=f.height*$.scale;f.minX=Math.min(c.slideWidth/2-bt/2,0),f.maxX=-f.minX,f.minY=Math.min(c.slideHeight/2-fe/2,0),f.maxY=-f.minY,f.currentX=Math.max(Math.min(f.currentX,f.maxX),f.minX),f.currentY=Math.max(Math.min(f.currentY,f.maxY),f.minY),c.imageWrapEl.style.transitionDuration=`${He}ms`,c.imageWrapEl.style.transform=`translate3d(${f.currentX}px, ${f.currentY}px,0)`}function M(){const $=e.zoom;c.slideEl&&e.activeIndex!==e.slides.indexOf(c.slideEl)&&(c.imageEl&&(c.imageEl.style.transform="translate3d(0,0,0) scale(1)"),c.imageWrapEl&&(c.imageWrapEl.style.transform="translate3d(0,0,0)"),c.slideEl.classList.remove(`${e.params.zoom.zoomedSlideClass}`),$.scale=1,a=1,c.slideEl=void 0,c.imageEl=void 0,c.imageWrapEl=void 0,c.originX=0,c.originY=0)}function D($){const z=e.zoom,F=e.params.zoom;if(!c.slideEl){$&&$.target&&(c.slideEl=$.target.closest(`.${e.params.slideClass}, swiper-slide`)),c.slideEl||(e.params.virtual&&e.params.virtual.enabled&&e.virtual?c.slideEl=K(e.slidesEl,`.${e.params.slideActiveClass}`)[0]:c.slideEl=e.slides[e.activeIndex]);let Qe=c.slideEl.querySelector(`.${F.containerClass}`);Qe&&(Qe=Qe.querySelectorAll("picture, img, svg, canvas, .swiper-zoom-target")[0]),c.imageEl=Qe,Qe?c.imageWrapEl=De(c.imageEl,`.${F.containerClass}`)[0]:c.imageWrapEl=void 0}if(!c.imageEl||!c.imageWrapEl)return;e.params.cssMode&&(e.wrapperEl.style.overflow="hidden",e.wrapperEl.style.touchAction="none"),c.slideEl.classList.add(`${F.zoomedSlideClass}`);let j,N,G,Z,He,bt,fe,Ce,hr,gr,vr,wr,yt,xt,si,ai,oi,li;typeof f.touchesStart.x>"u"&&$?(j=$.pageX,N=$.pageY):(j=f.touchesStart.x,N=f.touchesStart.y);const Ze=typeof $=="number"?$:null;a===1&&Ze&&(j=void 0,N=void 0);const br=h();z.scale=Ze||br,a=Ze||br,$&&!(a===1&&Ze)?(oi=c.slideEl.offsetWidth,li=c.slideEl.offsetHeight,G=Nt(c.slideEl).left+s.scrollX,Z=Nt(c.slideEl).top+s.scrollY,He=G+oi/2-j,bt=Z+li/2-N,hr=c.imageEl.offsetWidth||c.imageEl.clientWidth,gr=c.imageEl.offsetHeight||c.imageEl.clientHeight,vr=hr*z.scale,wr=gr*z.scale,yt=Math.min(oi/2-vr/2,0),xt=Math.min(li/2-wr/2,0),si=-yt,ai=-xt,fe=He*z.scale,Ce=bt*z.scale,fe<yt&&(fe=yt),fe>si&&(fe=si),Ce<xt&&(Ce=xt),Ce>ai&&(Ce=ai)):(fe=0,Ce=0),Ze&&z.scale===1&&(c.originX=0,c.originY=0),c.imageWrapEl.style.transitionDuration="300ms",c.imageWrapEl.style.transform=`translate3d(${fe}px, ${Ce}px,0)`,c.imageEl.style.transitionDuration="300ms",c.imageEl.style.transform=`translate3d(0,0,0) scale(${z.scale})`}function k(){const $=e.zoom,z=e.params.zoom;if(!c.slideEl){e.params.virtual&&e.params.virtual.enabled&&e.virtual?c.slideEl=K(e.slidesEl,`.${e.params.slideActiveClass}`)[0]:c.slideEl=e.slides[e.activeIndex];let F=c.slideEl.querySelector(`.${z.containerClass}`);F&&(F=F.querySelectorAll("picture, img, svg, canvas, .swiper-zoom-target")[0]),c.imageEl=F,F?c.imageWrapEl=De(c.imageEl,`.${z.containerClass}`)[0]:c.imageWrapEl=void 0}!c.imageEl||!c.imageWrapEl||(e.params.cssMode&&(e.wrapperEl.style.overflow="",e.wrapperEl.style.touchAction=""),$.scale=1,a=1,c.imageWrapEl.style.transitionDuration="300ms",c.imageWrapEl.style.transform="translate3d(0,0,0)",c.imageEl.style.transitionDuration="300ms",c.imageEl.style.transform="translate3d(0,0,0) scale(1)",c.slideEl.classList.remove(`${z.zoomedSlideClass}`),c.slideEl=void 0,c.originX=0,c.originY=0)}function L($){const z=e.zoom;z.scale&&z.scale!==1?k():D($)}function I(){const $=e.params.passiveListeners?{passive:!0,capture:!1}:!1,z=e.params.passiveListeners?{passive:!1,capture:!0}:!0;return{passiveListener:$,activeListenerWithCapture:z}}function R(){const $=e.zoom;if($.enabled)return;$.enabled=!0;const{passiveListener:z,activeListenerWithCapture:F}=I();e.wrapperEl.addEventListener("pointerdown",E,z),e.wrapperEl.addEventListener("pointermove",x,F),["pointerup","pointercancel","pointerout"].forEach(j=>{e.wrapperEl.addEventListener(j,A,z)}),e.wrapperEl.addEventListener("pointermove",T,F)}function B(){const $=e.zoom;if(!$.enabled)return;$.enabled=!1;const{passiveListener:z,activeListenerWithCapture:F}=I();e.wrapperEl.removeEventListener("pointerdown",E,z),e.wrapperEl.removeEventListener("pointermove",x,F),["pointerup","pointercancel","pointerout"].forEach(j=>{e.wrapperEl.removeEventListener(j,A,z)}),e.wrapperEl.removeEventListener("pointermove",T,F)}r("init",()=>{e.params.zoom.enabled&&R()}),r("destroy",()=>{B()}),r("touchStart",($,z)=>{e.zoom.enabled&&O(z)}),r("touchEnd",($,z)=>{e.zoom.enabled&&_()}),r("doubleTap",($,z)=>{!e.animating&&e.params.zoom.enabled&&e.zoom.enabled&&e.params.zoom.toggle&&L(z)}),r("transitionEnd",()=>{e.zoom.enabled&&e.params.zoom.enabled&&M()}),r("slideChange",()=>{e.zoom.enabled&&e.params.zoom.enabled&&e.params.cssMode&&M()}),Object.assign(e.zoom,{enable:R,disable:B,in:D,out:k,toggle:L})}function gc(t){let{swiper:e,extendParams:i,on:r}=t;i({controller:{control:void 0,inverse:!1,by:"slide"}}),e.controller={control:void 0};function n(u,d){const c=function(){let v,h,p;return(b,w)=>{for(h=-1,v=b.length;v-h>1;)p=v+h>>1,b[p]<=w?h=p:v=p;return v}}();this.x=u,this.y=d,this.lastIndex=u.length-1;let f,m;return this.interpolate=function(v){return v?(m=c(this.x,v),f=m-1,(v-this.x[f])*(this.y[m]-this.y[f])/(this.x[m]-this.x[f])+this.y[f]):0},this}function s(u){e.controller.spline=e.params.loop?new n(e.slidesGrid,u.slidesGrid):new n(e.snapGrid,u.snapGrid)}function a(u,d){const c=e.controller.control;let f,m;const g=e.constructor;function v(h){if(h.destroyed)return;const p=e.rtlTranslate?-e.translate:e.translate;e.params.controller.by==="slide"&&(s(h),m=-e.controller.spline.interpolate(-p)),(!m||e.params.controller.by==="container")&&(f=(h.maxTranslate()-h.minTranslate())/(e.maxTranslate()-e.minTranslate()),(Number.isNaN(f)||!Number.isFinite(f))&&(f=1),m=(p-e.minTranslate())*f+h.minTranslate()),e.params.controller.inverse&&(m=h.maxTranslate()-m),h.updateProgress(m),h.setTranslate(m,e),h.updateActiveIndex(),h.updateSlidesClasses()}if(Array.isArray(c))for(let h=0;h<c.length;h+=1)c[h]!==d&&c[h]instanceof g&&v(c[h]);else c instanceof g&&d!==c&&v(c)}function o(u,d){const c=e.constructor,f=e.controller.control;let m;function g(v){v.destroyed||(v.setTransition(u,e),u!==0&&(v.transitionStart(),v.params.autoHeight&&ze(()=>{v.updateAutoHeight()}),ct(v.wrapperEl,()=>{f&&v.transitionEnd()})))}if(Array.isArray(f))for(m=0;m<f.length;m+=1)f[m]!==d&&f[m]instanceof c&&g(f[m]);else f instanceof c&&d!==f&&g(f)}function l(){e.controller.control&&e.controller.spline&&(e.controller.spline=void 0,delete e.controller.spline)}r("beforeInit",()=>{if(typeof window<"u"&&(typeof e.params.controller.control=="string"||e.params.controller.control instanceof HTMLElement)){const u=document.querySelector(e.params.controller.control);if(u&&u.swiper)e.controller.control=u.swiper;else if(u){const d=c=>{e.controller.control=c.detail[0],e.update(),u.removeEventListener("init",d)};u.addEventListener("init",d)}return}e.controller.control=e.params.controller.control}),r("update",()=>{l()}),r("resize",()=>{l()}),r("observerUpdate",()=>{l()}),r("setTranslate",(u,d,c)=>{!e.controller.control||e.controller.control.destroyed||e.controller.setTranslate(d,c)}),r("setTransition",(u,d,c)=>{!e.controller.control||e.controller.control.destroyed||e.controller.setTransition(d,c)}),Object.assign(e.controller,{setTranslate:a,setTransition:o})}function vc(t){let{swiper:e,extendParams:i,on:r}=t;i({a11y:{enabled:!0,notificationClass:"swiper-notification",prevSlideMessage:"Previous slide",nextSlideMessage:"Next slide",firstSlideMessage:"This is the first slide",lastSlideMessage:"This is the last slide",paginationBulletMessage:"Go to slide {{index}}",slideLabelMessage:"{{index}} / {{slidesLength}}",containerMessage:null,containerRoleDescriptionMessage:null,itemRoleDescriptionMessage:null,slideRole:"group",id:null}}),e.a11y={clicked:!1};let n=null,s,a,o=new Date().getTime();function l(L){const I=n;I.length!==0&&(I.innerHTML="",I.innerHTML=L)}function u(L){const I=()=>Math.round(16*Math.random()).toString(16);return"x".repeat(L).replace(/x/g,I)}function d(L){L=H(L),L.forEach(I=>{I.setAttribute("tabIndex","0")})}function c(L){L=H(L),L.forEach(I=>{I.setAttribute("tabIndex","-1")})}function f(L,I){L=H(L),L.forEach(R=>{R.setAttribute("role",I)})}function m(L,I){L=H(L),L.forEach(R=>{R.setAttribute("aria-roledescription",I)})}function g(L,I){L=H(L),L.forEach(R=>{R.setAttribute("aria-controls",I)})}function v(L,I){L=H(L),L.forEach(R=>{R.setAttribute("aria-label",I)})}function h(L,I){L=H(L),L.forEach(R=>{R.setAttribute("id",I)})}function p(L,I){L=H(L),L.forEach(R=>{R.setAttribute("aria-live",I)})}function b(L){L=H(L),L.forEach(I=>{I.setAttribute("aria-disabled",!0)})}function w(L){L=H(L),L.forEach(I=>{I.setAttribute("aria-disabled",!1)})}function y(L){if(L.keyCode!==13&&L.keyCode!==32)return;const I=e.params.a11y,R=L.target;if(!(e.pagination&&e.pagination.el&&(R===e.pagination.el||e.pagination.el.contains(L.target))&&!L.target.matches(pe(e.params.pagination.bulletClass)))){if(e.navigation&&e.navigation.prevEl&&e.navigation.nextEl){const B=H(e.navigation.prevEl);H(e.navigation.nextEl).includes(R)&&(e.isEnd&&!e.params.loop||e.slideNext(),e.isEnd?l(I.lastSlideMessage):l(I.nextSlideMessage)),B.includes(R)&&(e.isBeginning&&!e.params.loop||e.slidePrev(),e.isBeginning?l(I.firstSlideMessage):l(I.prevSlideMessage))}e.pagination&&R.matches(pe(e.params.pagination.bulletClass))&&R.click()}}function E(){if(e.params.loop||e.params.rewind||!e.navigation)return;const{nextEl:L,prevEl:I}=e.navigation;I&&(e.isBeginning?(b(I),c(I)):(w(I),d(I))),L&&(e.isEnd?(b(L),c(L)):(w(L),d(L)))}function x(){return e.pagination&&e.pagination.bullets&&e.pagination.bullets.length}function A(){return x()&&e.params.pagination.clickable}function S(){const L=e.params.a11y;x()&&e.pagination.bullets.forEach(I=>{e.params.pagination.clickable&&(d(I),e.params.pagination.renderBullet||(f(I,"button"),v(I,L.paginationBulletMessage.replace(/\{\{index\}\}/,ut(I)+1)))),I.matches(pe(e.params.pagination.bulletActiveClass))?I.setAttribute("aria-current","true"):I.removeAttribute("aria-current")})}const P=(L,I,R)=>{d(L),L.tagName!=="BUTTON"&&(f(L,"button"),L.addEventListener("keydown",y)),v(L,R),g(L,I)},C=L=>{a&&a!==L.target&&!a.contains(L.target)&&(s=!0),e.a11y.clicked=!0},O=()=>{s=!1,requestAnimationFrame(()=>{requestAnimationFrame(()=>{e.destroyed||(e.a11y.clicked=!1)})})},T=L=>{o=new Date().getTime()},_=L=>{if(e.a11y.clicked||new Date().getTime()-o<100)return;const I=L.target.closest(`.${e.params.slideClass}, swiper-slide`);if(!I||!e.slides.includes(I))return;a=I;const R=e.slides.indexOf(I)===e.activeIndex,B=e.params.watchSlidesProgress&&e.visibleSlides&&e.visibleSlides.includes(I);R||B||L.sourceCapabilities&&L.sourceCapabilities.firesTouchEvents||(e.isHorizontal()?e.el.scrollLeft=0:e.el.scrollTop=0,requestAnimationFrame(()=>{s||(e.params.loop?e.slideToLoop(parseInt(I.getAttribute("data-swiper-slide-index")),0):e.slideTo(e.slides.indexOf(I),0),s=!1)}))},M=()=>{const L=e.params.a11y;L.itemRoleDescriptionMessage&&m(e.slides,L.itemRoleDescriptionMessage),L.slideRole&&f(e.slides,L.slideRole);const I=e.slides.length;L.slideLabelMessage&&e.slides.forEach((R,B)=>{const $=e.params.loop?parseInt(R.getAttribute("data-swiper-slide-index"),10):B,z=L.slideLabelMessage.replace(/\{\{index\}\}/,$+1).replace(/\{\{slidesLength\}\}/,I);v(R,z)})},D=()=>{const L=e.params.a11y;e.el.append(n);const I=e.el;L.containerRoleDescriptionMessage&&m(I,L.containerRoleDescriptionMessage),L.containerMessage&&v(I,L.containerMessage);const R=e.wrapperEl,B=L.id||R.getAttribute("id")||`swiper-wrapper-${u(16)}`,$=e.params.autoplay&&e.params.autoplay.enabled?"off":"polite";h(R,B),p(R,$),M();let{nextEl:z,prevEl:F}=e.navigation?e.navigation:{};z=H(z),F=H(F),z&&z.forEach(N=>P(N,B,L.nextSlideMessage)),F&&F.forEach(N=>P(N,B,L.prevSlideMessage)),A()&&H(e.pagination.el).forEach(G=>{G.addEventListener("keydown",y)}),J().addEventListener("visibilitychange",T),e.el.addEventListener("focus",_,!0),e.el.addEventListener("focus",_,!0),e.el.addEventListener("pointerdown",C,!0),e.el.addEventListener("pointerup",O,!0)};function k(){n&&n.remove();let{nextEl:L,prevEl:I}=e.navigation?e.navigation:{};L=H(L),I=H(I),L&&L.forEach(B=>B.removeEventListener("keydown",y)),I&&I.forEach(B=>B.removeEventListener("keydown",y)),A()&&H(e.pagination.el).forEach($=>{$.removeEventListener("keydown",y)}),J().removeEventListener("visibilitychange",T),e.el&&typeof e.el!="string"&&(e.el.removeEventListener("focus",_,!0),e.el.removeEventListener("pointerdown",C,!0),e.el.removeEventListener("pointerup",O,!0))}r("beforeInit",()=>{n=ie("span",e.params.a11y.notificationClass),n.setAttribute("aria-live","assertive"),n.setAttribute("aria-atomic","true")}),r("afterInit",()=>{e.params.a11y.enabled&&D()}),r("slidesLengthChange snapGridLengthChange slidesGridLengthChange",()=>{e.params.a11y.enabled&&M()}),r("fromEdge toEdge afterInit lock unlock",()=>{e.params.a11y.enabled&&E()}),r("paginationUpdate",()=>{e.params.a11y.enabled&&S()}),r("destroy",()=>{e.params.a11y.enabled&&k()})}function wc(t){let{swiper:e,extendParams:i,on:r}=t;i({history:{enabled:!1,root:"",replaceState:!1,key:"slides",keepQuery:!1}});let n=!1,s={};const a=m=>m.toString().replace(/\s+/g,"-").replace(/[^\w-]+/g,"").replace(/--+/g,"-").replace(/^-+/,"").replace(/-+$/,""),o=m=>{const g=W();let v;m?v=new URL(m):v=g.location;const h=v.pathname.slice(1).split("/").filter(y=>y!==""),p=h.length,b=h[p-2],w=h[p-1];return{key:b,value:w}},l=(m,g)=>{const v=W();if(!n||!e.params.history.enabled)return;let h;e.params.url?h=new URL(e.params.url):h=v.location;const p=e.virtual&&e.params.virtual.enabled?e.slidesEl.querySelector(`[data-swiper-slide-index="${g}"]`):e.slides[g];let b=a(p.getAttribute("data-history"));if(e.params.history.root.length>0){let y=e.params.history.root;y[y.length-1]==="/"&&(y=y.slice(0,y.length-1)),b=`${y}/${m?`${m}/`:""}${b}`}else h.pathname.includes(m)||(b=`${m?`${m}/`:""}${b}`);e.params.history.keepQuery&&(b+=h.search);const w=v.history.state;w&&w.value===b||(e.params.history.replaceState?v.history.replaceState({value:b},null,b):v.history.pushState({value:b},null,b))},u=(m,g,v)=>{if(g)for(let h=0,p=e.slides.length;h<p;h+=1){const b=e.slides[h];if(a(b.getAttribute("data-history"))===g){const y=e.getSlideIndex(b);e.slideTo(y,m,v)}}else e.slideTo(0,m,v)},d=()=>{s=o(e.params.url),u(e.params.speed,s.value,!1)},c=()=>{const m=W();if(e.params.history){if(!m.history||!m.history.pushState){e.params.history.enabled=!1,e.params.hashNavigation.enabled=!0;return}if(n=!0,s=o(e.params.url),!s.key&&!s.value){e.params.history.replaceState||m.addEventListener("popstate",d);return}u(0,s.value,e.params.runCallbacksOnInit),e.params.history.replaceState||m.addEventListener("popstate",d)}},f=()=>{const m=W();e.params.history.replaceState||m.removeEventListener("popstate",d)};r("init",()=>{e.params.history.enabled&&c()}),r("destroy",()=>{e.params.history.enabled&&f()}),r("transitionEnd _freeModeNoMomentumRelease",()=>{n&&l(e.params.history.key,e.activeIndex)}),r("slideChange",()=>{n&&e.params.cssMode&&l(e.params.history.key,e.activeIndex)})}function bc(t){let{swiper:e,extendParams:i,emit:r,on:n}=t,s=!1;const a=J(),o=W();i({hashNavigation:{enabled:!1,replaceState:!1,watchState:!1,getSlideIndex(f,m){if(e.virtual&&e.params.virtual.enabled){const g=e.slides.filter(h=>h.getAttribute("data-hash")===m)[0];return g?parseInt(g.getAttribute("data-swiper-slide-index"),10):0}return e.getSlideIndex(K(e.slidesEl,`.${e.params.slideClass}[data-hash="${m}"], swiper-slide[data-hash="${m}"]`)[0])}}});const l=()=>{r("hashChange");const f=a.location.hash.replace("#",""),m=e.virtual&&e.params.virtual.enabled?e.slidesEl.querySelector(`[data-swiper-slide-index="${e.activeIndex}"]`):e.slides[e.activeIndex],g=m?m.getAttribute("data-hash"):"";if(f!==g){const v=e.params.hashNavigation.getSlideIndex(e,f);if(typeof v>"u"||Number.isNaN(v))return;e.slideTo(v)}},u=()=>{if(!s||!e.params.hashNavigation.enabled)return;const f=e.virtual&&e.params.virtual.enabled?e.slidesEl.querySelector(`[data-swiper-slide-index="${e.activeIndex}"]`):e.slides[e.activeIndex],m=f?f.getAttribute("data-hash")||f.getAttribute("data-history"):"";e.params.hashNavigation.replaceState&&o.history&&o.history.replaceState?(o.history.replaceState(null,null,`#${m}`||""),r("hashSet")):(a.location.hash=m||"",r("hashSet"))},d=()=>{if(!e.params.hashNavigation.enabled||e.params.history&&e.params.history.enabled)return;s=!0;const f=a.location.hash.replace("#","");if(f){const g=e.params.hashNavigation.getSlideIndex(e,f);e.slideTo(g||0,0,e.params.runCallbacksOnInit,!0)}e.params.hashNavigation.watchState&&o.addEventListener("hashchange",l)},c=()=>{e.params.hashNavigation.watchState&&o.removeEventListener("hashchange",l)};n("init",()=>{e.params.hashNavigation.enabled&&d()}),n("destroy",()=>{e.params.hashNavigation.enabled&&c()}),n("transitionEnd _freeModeNoMomentumRelease",()=>{s&&u()}),n("slideChange",()=>{s&&e.params.cssMode&&u()})}function yc(t){let{swiper:e,extendParams:i,on:r,emit:n,params:s}=t;e.autoplay={running:!1,paused:!1,timeLeft:0},i({autoplay:{enabled:!1,delay:3e3,waitForTransition:!0,disableOnInteraction:!1,stopOnLastSlide:!1,reverseDirection:!1,pauseOnMouseEnter:!1}});let a,o,l=s&&s.autoplay?s.autoplay.delay:3e3,u=s&&s.autoplay?s.autoplay.delay:3e3,d,c=new Date().getTime(),f,m,g,v,h,p,b;function w(I){!e||e.destroyed||!e.wrapperEl||I.target===e.wrapperEl&&(e.wrapperEl.removeEventListener("transitionend",w),!(b||I.detail&&I.detail.bySwiperTouchMove)&&C())}const y=()=>{if(e.destroyed||!e.autoplay.running)return;e.autoplay.paused?f=!0:f&&(u=d,f=!1);const I=e.autoplay.paused?d:c+u-new Date().getTime();e.autoplay.timeLeft=I,n("autoplayTimeLeft",I,I/l),o=requestAnimationFrame(()=>{y()})},E=()=>{let I;return e.virtual&&e.params.virtual.enabled?I=e.slides.filter(B=>B.classList.contains("swiper-slide-active"))[0]:I=e.slides[e.activeIndex],I?parseInt(I.getAttribute("data-swiper-autoplay"),10):void 0},x=I=>{if(e.destroyed||!e.autoplay.running)return;cancelAnimationFrame(o),y();let R=typeof I>"u"?e.params.autoplay.delay:I;l=e.params.autoplay.delay,u=e.params.autoplay.delay;const B=E();!Number.isNaN(B)&&B>0&&typeof I>"u"&&(R=B,l=B,u=B),d=R;const $=e.params.speed,z=()=>{!e||e.destroyed||(e.params.autoplay.reverseDirection?!e.isBeginning||e.params.loop||e.params.rewind?(e.slidePrev($,!0,!0),n("autoplay")):e.params.autoplay.stopOnLastSlide||(e.slideTo(e.slides.length-1,$,!0,!0),n("autoplay")):!e.isEnd||e.params.loop||e.params.rewind?(e.slideNext($,!0,!0),n("autoplay")):e.params.autoplay.stopOnLastSlide||(e.slideTo(0,$,!0,!0),n("autoplay")),e.params.cssMode&&(c=new Date().getTime(),requestAnimationFrame(()=>{x()})))};return R>0?(clearTimeout(a),a=setTimeout(()=>{z()},R)):requestAnimationFrame(()=>{z()}),R},A=()=>{c=new Date().getTime(),e.autoplay.running=!0,x(),n("autoplayStart")},S=()=>{e.autoplay.running=!1,clearTimeout(a),cancelAnimationFrame(o),n("autoplayStop")},P=(I,R)=>{if(e.destroyed||!e.autoplay.running)return;clearTimeout(a),I||(p=!0);const B=()=>{n("autoplayPause"),e.params.autoplay.waitForTransition?e.wrapperEl.addEventListener("transitionend",w):C()};if(e.autoplay.paused=!0,R){h&&(d=e.params.autoplay.delay),h=!1,B();return}d=(d||e.params.autoplay.delay)-(new Date().getTime()-c),!(e.isEnd&&d<0&&!e.params.loop)&&(d<0&&(d=0),B())},C=()=>{e.isEnd&&d<0&&!e.params.loop||e.destroyed||!e.autoplay.running||(c=new Date().getTime(),p?(p=!1,x(d)):x(),e.autoplay.paused=!1,n("autoplayResume"))},O=()=>{if(e.destroyed||!e.autoplay.running)return;const I=J();I.visibilityState==="hidden"&&(p=!0,P(!0)),I.visibilityState==="visible"&&C()},T=I=>{I.pointerType==="mouse"&&(p=!0,b=!0,!(e.animating||e.autoplay.paused)&&P(!0))},_=I=>{I.pointerType==="mouse"&&(b=!1,e.autoplay.paused&&C())},M=()=>{e.params.autoplay.pauseOnMouseEnter&&(e.el.addEventListener("pointerenter",T),e.el.addEventListener("pointerleave",_))},D=()=>{e.el&&typeof e.el!="string"&&(e.el.removeEventListener("pointerenter",T),e.el.removeEventListener("pointerleave",_))},k=()=>{J().addEventListener("visibilitychange",O)},L=()=>{J().removeEventListener("visibilitychange",O)};r("init",()=>{e.params.autoplay.enabled&&(M(),k(),A())}),r("destroy",()=>{D(),L(),e.autoplay.running&&S()}),r("_freeModeStaticRelease",()=>{(g||p)&&C()}),r("_freeModeNoMomentumRelease",()=>{e.params.autoplay.disableOnInteraction?S():P(!0,!0)}),r("beforeTransitionStart",(I,R,B)=>{e.destroyed||!e.autoplay.running||(B||!e.params.autoplay.disableOnInteraction?P(!0,!0):S())}),r("sliderFirstMove",()=>{if(!(e.destroyed||!e.autoplay.running)){if(e.params.autoplay.disableOnInteraction){S();return}m=!0,g=!1,p=!1,v=setTimeout(()=>{p=!0,g=!0,P(!0)},200)}}),r("touchEnd",()=>{if(!(e.destroyed||!e.autoplay.running||!m)){if(clearTimeout(v),clearTimeout(a),e.params.autoplay.disableOnInteraction){g=!1,m=!1;return}g&&e.params.cssMode&&C(),g=!1,m=!1}}),r("slideChange",()=>{e.destroyed||!e.autoplay.running||(h=!0)}),Object.assign(e.autoplay,{start:A,stop:S,pause:P,resume:C})}function xc(t){let{swiper:e,extendParams:i,on:r}=t;i({thumbs:{swiper:null,multipleActiveThumbs:!0,autoScrollOffset:0,slideThumbActiveClass:"swiper-slide-thumb-active",thumbsContainerClass:"swiper-thumbs"}});let n=!1,s=!1;e.thumbs={swiper:null};function a(){const u=e.thumbs.swiper;if(!u||u.destroyed)return;const d=u.clickedIndex,c=u.clickedSlide;if(c&&c.classList.contains(e.params.thumbs.slideThumbActiveClass)||typeof d>"u"||d===null)return;let f;u.params.loop?f=parseInt(u.clickedSlide.getAttribute("data-swiper-slide-index"),10):f=d,e.params.loop?e.slideToLoop(f):e.slideTo(f)}function o(){const{thumbs:u}=e.params;if(n)return!1;n=!0;const d=e.constructor;if(u.swiper instanceof d)e.thumbs.swiper=u.swiper,Object.assign(e.thumbs.swiper.originalParams,{watchSlidesProgress:!0,slideToClickedSlide:!1}),Object.assign(e.thumbs.swiper.params,{watchSlidesProgress:!0,slideToClickedSlide:!1}),e.thumbs.swiper.update();else if(st(u.swiper)){const c=Object.assign({},u.swiper);Object.assign(c,{watchSlidesProgress:!0,slideToClickedSlide:!1}),e.thumbs.swiper=new d(c),s=!0}return e.thumbs.swiper.el.classList.add(e.params.thumbs.thumbsContainerClass),e.thumbs.swiper.on("tap",a),!0}function l(u){const d=e.thumbs.swiper;if(!d||d.destroyed)return;const c=d.params.slidesPerView==="auto"?d.slidesPerViewDynamic():d.params.slidesPerView;let f=1;const m=e.params.thumbs.slideThumbActiveClass;if(e.params.slidesPerView>1&&!e.params.centeredSlides&&(f=e.params.slidesPerView),e.params.thumbs.multipleActiveThumbs||(f=1),f=Math.floor(f),d.slides.forEach(h=>h.classList.remove(m)),d.params.loop||d.params.virtual&&d.params.virtual.enabled)for(let h=0;h<f;h+=1)K(d.slidesEl,`[data-swiper-slide-index="${e.realIndex+h}"]`).forEach(p=>{p.classList.add(m)});else for(let h=0;h<f;h+=1)d.slides[e.realIndex+h]&&d.slides[e.realIndex+h].classList.add(m);const g=e.params.thumbs.autoScrollOffset,v=g&&!d.params.loop;if(e.realIndex!==d.realIndex||v){const h=d.activeIndex;let p,b;if(d.params.loop){const w=d.slides.filter(y=>y.getAttribute("data-swiper-slide-index")===`${e.realIndex}`)[0];p=d.slides.indexOf(w),b=e.activeIndex>e.previousIndex?"next":"prev"}else p=e.realIndex,b=p>e.previousIndex?"next":"prev";v&&(p+=b==="next"?g:-1*g),d.visibleSlidesIndexes&&d.visibleSlidesIndexes.indexOf(p)<0&&(d.params.centeredSlides?p>h?p=p-Math.floor(c/2)+1:p=p+Math.floor(c/2)-1:p>h&&d.params.slidesPerGroup,d.slideTo(p,u?0:void 0))}}r("beforeInit",()=>{const{thumbs:u}=e.params;if(!(!u||!u.swiper))if(typeof u.swiper=="string"||u.swiper instanceof HTMLElement){const d=J(),c=()=>{const m=typeof u.swiper=="string"?d.querySelector(u.swiper):u.swiper;if(m&&m.swiper)u.swiper=m.swiper,o(),l(!0);else if(m){const g=v=>{u.swiper=v.detail[0],m.removeEventListener("init",g),o(),l(!0),u.swiper.update(),e.update()};m.addEventListener("init",g)}return m},f=()=>{if(e.destroyed)return;c()||requestAnimationFrame(f)};requestAnimationFrame(f)}else o(),l(!0)}),r("slideChange update resize observerUpdate",()=>{l()}),r("setTransition",(u,d)=>{const c=e.thumbs.swiper;!c||c.destroyed||c.setTransition(d)}),r("beforeDestroy",()=>{const u=e.thumbs.swiper;!u||u.destroyed||s&&u.destroy()}),Object.assign(e.thumbs,{init:o,update:l})}function Sc(t){let{swiper:e,extendParams:i,emit:r,once:n}=t;i({freeMode:{enabled:!1,momentum:!0,momentumRatio:1,momentumBounce:!0,momentumBounceRatio:1,momentumVelocityRatio:1,sticky:!1,minimumVelocity:.02}});function s(){if(e.params.cssMode)return;const l=e.getTranslate();e.setTranslate(l),e.setTransition(0),e.touchEventsData.velocities.length=0,e.freeMode.onTouchEnd({currentPos:e.rtl?e.translate:-e.translate})}function a(){if(e.params.cssMode)return;const{touchEventsData:l,touches:u}=e;l.velocities.length===0&&l.velocities.push({position:u[e.isHorizontal()?"startX":"startY"],time:l.touchStartTime}),l.velocities.push({position:u[e.isHorizontal()?"currentX":"currentY"],time:ne()})}function o(l){let{currentPos:u}=l;if(e.params.cssMode)return;const{params:d,wrapperEl:c,rtlTranslate:f,snapGrid:m,touchEventsData:g}=e,h=ne()-g.touchStartTime;if(u<-e.minTranslate()){e.slideTo(e.activeIndex);return}if(u>-e.maxTranslate()){e.slides.length<m.length?e.slideTo(m.length-1):e.slideTo(e.slides.length-1);return}if(d.freeMode.momentum){if(g.velocities.length>1){const S=g.velocities.pop(),P=g.velocities.pop(),C=S.position-P.position,O=S.time-P.time;e.velocity=C/O,e.velocity/=2,Math.abs(e.velocity)<d.freeMode.minimumVelocity&&(e.velocity=0),(O>150||ne()-S.time>300)&&(e.velocity=0)}else e.velocity=0;e.velocity*=d.freeMode.momentumVelocityRatio,g.velocities.length=0;let p=1e3*d.freeMode.momentumRatio;const b=e.velocity*p;let w=e.translate+b;f&&(w=-w);let y=!1,E;const x=Math.abs(e.velocity)*20*d.freeMode.momentumBounceRatio;let A;if(w<e.maxTranslate())d.freeMode.momentumBounce?(w+e.maxTranslate()<-x&&(w=e.maxTranslate()-x),E=e.maxTranslate(),y=!0,g.allowMomentumBounce=!0):w=e.maxTranslate(),d.loop&&d.centeredSlides&&(A=!0);else if(w>e.minTranslate())d.freeMode.momentumBounce?(w-e.minTranslate()>x&&(w=e.minTranslate()+x),E=e.minTranslate(),y=!0,g.allowMomentumBounce=!0):w=e.minTranslate(),d.loop&&d.centeredSlides&&(A=!0);else if(d.freeMode.sticky){let S;for(let P=0;P<m.length;P+=1)if(m[P]>-w){S=P;break}Math.abs(m[S]-w)<Math.abs(m[S-1]-w)||e.swipeDirection==="next"?w=m[S]:w=m[S-1],w=-w}if(A&&n("transitionEnd",()=>{e.loopFix()}),e.velocity!==0){if(f?p=Math.abs((-w-e.translate)/e.velocity):p=Math.abs((w-e.translate)/e.velocity),d.freeMode.sticky){const S=Math.abs((f?-w:w)-e.translate),P=e.slidesSizesGrid[e.activeIndex];S<P?p=d.speed:S<2*P?p=d.speed*1.5:p=d.speed*2.5}}else if(d.freeMode.sticky){e.slideToClosest();return}d.freeMode.momentumBounce&&y?(e.updateProgress(E),e.setTransition(p),e.setTranslate(w),e.transitionStart(!0,e.swipeDirection),e.animating=!0,ct(c,()=>{!e||e.destroyed||!g.allowMomentumBounce||(r("momentumBounce"),e.setTransition(d.speed),setTimeout(()=>{e.setTranslate(E),ct(c,()=>{!e||e.destroyed||e.transitionEnd()})},0))})):e.velocity?(r("_freeModeNoMomentumRelease"),e.updateProgress(w),e.setTransition(p),e.setTranslate(w),e.transitionStart(!0,e.swipeDirection),e.animating||(e.animating=!0,ct(c,()=>{!e||e.destroyed||e.transitionEnd()}))):e.updateProgress(w),e.updateActiveIndex(),e.updateSlidesClasses()}else if(d.freeMode.sticky){e.slideToClosest();return}else d.freeMode&&r("_freeModeNoMomentumRelease");(!d.freeMode.momentum||h>=d.longSwipesMs)&&(r("_freeModeStaticRelease"),e.updateProgress(),e.updateActiveIndex(),e.updateSlidesClasses())}Object.assign(e,{freeMode:{onTouchStart:s,onTouchMove:a,onTouchEnd:o}})}function Ec(t){let{swiper:e,extendParams:i,on:r}=t;i({grid:{rows:1,fill:"column"}});let n,s,a,o;const l=()=>{let v=e.params.spaceBetween;return typeof v=="string"&&v.indexOf("%")>=0?v=parseFloat(v.replace("%",""))/100*e.size:typeof v=="string"&&(v=parseFloat(v)),v},u=v=>{const{slidesPerView:h}=e.params,{rows:p,fill:b}=e.params.grid,w=e.virtual&&e.params.virtual.enabled?e.virtual.slides.length:v.length;a=Math.floor(w/p),Math.floor(w/p)===w/p?n=w:n=Math.ceil(w/p)*p,h!=="auto"&&b==="row"&&(n=Math.max(n,h*p)),s=n/p},d=()=>{e.slides&&e.slides.forEach(v=>{v.swiperSlideGridSet&&(v.style.height="",v.style[e.getDirectionLabel("margin-top")]="")})},c=(v,h,p)=>{const{slidesPerGroup:b}=e.params,w=l(),{rows:y,fill:E}=e.params.grid,x=e.virtual&&e.params.virtual.enabled?e.virtual.slides.length:p.length;let A,S,P;if(E==="row"&&b>1){const C=Math.floor(v/(b*y)),O=v-y*b*C,T=C===0?b:Math.min(Math.ceil((x-C*y*b)/y),b);P=Math.floor(O/T),S=O-P*T+C*b,A=S+P*n/y,h.style.order=A}else E==="column"?(S=Math.floor(v/y),P=v-S*y,(S>a||S===a&&P===y-1)&&(P+=1,P>=y&&(P=0,S+=1))):(P=Math.floor(v/s),S=v-P*s);h.row=P,h.column=S,h.style.height=`calc((100% - ${(y-1)*w}px) / ${y})`,h.style[e.getDirectionLabel("margin-top")]=P!==0?w&&`${w}px`:"",h.swiperSlideGridSet=!0},f=(v,h)=>{const{centeredSlides:p,roundLengths:b}=e.params,w=l(),{rows:y}=e.params.grid;if(e.virtualSize=(v+w)*n,e.virtualSize=Math.ceil(e.virtualSize/y)-w,e.params.cssMode||(e.wrapperEl.style[e.getDirectionLabel("width")]=`${e.virtualSize+w}px`),p){const E=[];for(let x=0;x<h.length;x+=1){let A=h[x];b&&(A=Math.floor(A)),h[x]<e.virtualSize+h[0]&&E.push(A)}h.splice(0,h.length),h.push(...E)}},m=()=>{o=e.params.grid&&e.params.grid.rows>1},g=()=>{const{params:v,el:h}=e,p=v.grid&&v.grid.rows>1;o&&!p?(h.classList.remove(`${v.containerModifierClass}grid`,`${v.containerModifierClass}grid-column`),a=1,e.emitContainerClasses()):!o&&p&&(h.classList.add(`${v.containerModifierClass}grid`),v.grid.fill==="column"&&h.classList.add(`${v.containerModifierClass}grid-column`),e.emitContainerClasses()),o=p};r("init",m),r("update",g),e.grid={initSlides:u,unsetSlides:d,updateSlide:c,updateWrapperSize:f}}function Tc(t){const e=this,{params:i,slidesEl:r}=e;i.loop&&e.loopDestroy();const n=s=>{if(typeof s=="string"){const a=document.createElement("div");a.innerHTML=s,r.append(a.children[0]),a.innerHTML=""}else r.append(s)};if(typeof t=="object"&&"length"in t)for(let s=0;s<t.length;s+=1)t[s]&&n(t[s]);else n(t);e.recalcSlides(),i.loop&&e.loopCreate(),(!i.observer||e.isElement)&&e.update()}function _c(t){const e=this,{params:i,activeIndex:r,slidesEl:n}=e;i.loop&&e.loopDestroy();let s=r+1;const a=o=>{if(typeof o=="string"){const l=document.createElement("div");l.innerHTML=o,n.prepend(l.children[0]),l.innerHTML=""}else n.prepend(o)};if(typeof t=="object"&&"length"in t){for(let o=0;o<t.length;o+=1)t[o]&&a(t[o]);s=r+t.length}else a(t);e.recalcSlides(),i.loop&&e.loopCreate(),(!i.observer||e.isElement)&&e.update(),e.slideTo(s,0,!1)}function Cc(t,e){const i=this,{params:r,activeIndex:n,slidesEl:s}=i;let a=n;r.loop&&(a-=i.loopedSlides,i.loopDestroy(),i.recalcSlides());const o=i.slides.length;if(t<=0){i.prependSlide(e);return}if(t>=o){i.appendSlide(e);return}let l=a>t?a+1:a;const u=[];for(let d=o-1;d>=t;d-=1){const c=i.slides[d];c.remove(),u.unshift(c)}if(typeof e=="object"&&"length"in e){for(let d=0;d<e.length;d+=1)e[d]&&s.append(e[d]);l=a>t?a+e.length:a}else s.append(e);for(let d=0;d<u.length;d+=1)s.append(u[d]);i.recalcSlides(),r.loop&&i.loopCreate(),(!r.observer||i.isElement)&&i.update(),r.loop?i.slideTo(l+i.loopedSlides,0,!1):i.slideTo(l,0,!1)}function Mc(t){const e=this,{params:i,activeIndex:r}=e;let n=r;i.loop&&(n-=e.loopedSlides,e.loopDestroy());let s=n,a;if(typeof t=="object"&&"length"in t){for(let o=0;o<t.length;o+=1)a=t[o],e.slides[a]&&e.slides[a].remove(),a<s&&(s-=1);s=Math.max(s,0)}else a=t,e.slides[a]&&e.slides[a].remove(),a<s&&(s-=1),s=Math.max(s,0);e.recalcSlides(),i.loop&&e.loopCreate(),(!i.observer||e.isElement)&&e.update(),i.loop?e.slideTo(s+e.loopedSlides,0,!1):e.slideTo(s,0,!1)}function Ac(){const t=this,e=[];for(let i=0;i<t.slides.length;i+=1)e.push(i);t.removeSlide(e)}function Pc(t){let{swiper:e}=t;Object.assign(e,{appendSlide:Tc.bind(e),prependSlide:_c.bind(e),addSlide:Cc.bind(e),removeSlide:Mc.bind(e),removeAllSlides:Ac.bind(e)})}function Je(t){const{effect:e,swiper:i,on:r,setTranslate:n,setTransition:s,overwriteParams:a,perspective:o,recreateShadows:l,getEffectParams:u}=t;r("beforeInit",()=>{if(i.params.effect!==e)return;i.classNames.push(`${i.params.containerModifierClass}${e}`),o&&o()&&i.classNames.push(`${i.params.containerModifierClass}3d`);const c=a?a():{};Object.assign(i.params,c),Object.assign(i.originalParams,c)}),r("setTranslate",()=>{i.params.effect===e&&n()}),r("setTransition",(c,f)=>{i.params.effect===e&&s(f)}),r("transitionEnd",()=>{if(i.params.effect===e&&l){if(!u||!u().slideShadows)return;i.slides.forEach(c=>{c.querySelectorAll(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").forEach(f=>f.remove())}),l()}});let d;r("virtualUpdate",()=>{i.params.effect===e&&(i.slides.length||(d=!0),requestAnimationFrame(()=>{d&&i.slides&&i.slides.length&&(n(),d=!1)}))})}function vt(t,e){const i=Be(e);return i!==e&&(i.style.backfaceVisibility="hidden",i.style["-webkit-backface-visibility"]="hidden"),i}function Qt(t){let{swiper:e,duration:i,transformElements:r,allSlides:n}=t;const{activeIndex:s}=e,a=o=>o.parentElement?o.parentElement:e.slides.filter(u=>u.shadowRoot&&u.shadowRoot===o.parentNode)[0];if(e.params.virtualTranslate&&i!==0){let o=!1,l;n?l=r:l=r.filter(u=>{const d=u.classList.contains("swiper-slide-transform")?a(u):u;return e.getSlideIndex(d)===s}),l.forEach(u=>{ct(u,()=>{if(o||!e||e.destroyed)return;o=!0,e.animating=!1;const d=new window.CustomEvent("transitionend",{bubbles:!0,cancelable:!0});e.wrapperEl.dispatchEvent(d)})})}}function Lc(t){let{swiper:e,extendParams:i,on:r}=t;i({fadeEffect:{crossFade:!1}}),Je({effect:"fade",swiper:e,on:r,setTranslate:()=>{const{slides:a}=e,o=e.params.fadeEffect;for(let l=0;l<a.length;l+=1){const u=e.slides[l];let c=-u.swiperSlideOffset;e.params.virtualTranslate||(c-=e.translate);let f=0;e.isHorizontal()||(f=c,c=0);const m=e.params.fadeEffect.crossFade?Math.max(1-Math.abs(u.progress),0):1+Math.min(Math.max(u.progress,-1),0),g=vt(o,u);g.style.opacity=m,g.style.transform=`translate3d(${c}px, ${f}px, 0px)`}},setTransition:a=>{const o=e.slides.map(l=>Be(l));o.forEach(l=>{l.style.transitionDuration=`${a}ms`}),Qt({swiper:e,duration:a,transformElements:o,allSlides:!0})},overwriteParams:()=>({slidesPerView:1,slidesPerGroup:1,watchSlidesProgress:!0,spaceBetween:0,virtualTranslate:!e.params.cssMode})})}function Ic(t){let{swiper:e,extendParams:i,on:r}=t;i({cubeEffect:{slideShadows:!0,shadow:!0,shadowOffset:20,shadowScale:.94}});const n=(l,u,d)=>{let c=d?l.querySelector(".swiper-slide-shadow-left"):l.querySelector(".swiper-slide-shadow-top"),f=d?l.querySelector(".swiper-slide-shadow-right"):l.querySelector(".swiper-slide-shadow-bottom");c||(c=ie("div",`swiper-slide-shadow-cube swiper-slide-shadow-${d?"left":"top"}`.split(" ")),l.append(c)),f||(f=ie("div",`swiper-slide-shadow-cube swiper-slide-shadow-${d?"right":"bottom"}`.split(" ")),l.append(f)),c&&(c.style.opacity=Math.max(-u,0)),f&&(f.style.opacity=Math.max(u,0))};Je({effect:"cube",swiper:e,on:r,setTranslate:()=>{const{el:l,wrapperEl:u,slides:d,width:c,height:f,rtlTranslate:m,size:g,browser:v}=e,h=e.params.cubeEffect,p=e.isHorizontal(),b=e.virtual&&e.params.virtual.enabled;let w=0,y;h.shadow&&(p?(y=e.wrapperEl.querySelector(".swiper-cube-shadow"),y||(y=ie("div","swiper-cube-shadow"),e.wrapperEl.append(y)),y.style.height=`${c}px`):(y=l.querySelector(".swiper-cube-shadow"),y||(y=ie("div","swiper-cube-shadow"),l.append(y))));for(let x=0;x<d.length;x+=1){const A=d[x];let S=x;b&&(S=parseInt(A.getAttribute("data-swiper-slide-index"),10));let P=S*90,C=Math.floor(P/360);m&&(P=-P,C=Math.floor(-P/360));const O=Math.max(Math.min(A.progress,1),-1);let T=0,_=0,M=0;S%4===0?(T=-C*4*g,M=0):(S-1)%4===0?(T=0,M=-C*4*g):(S-2)%4===0?(T=g+C*4*g,M=g):(S-3)%4===0&&(T=-g,M=3*g+g*4*C),m&&(T=-T),p||(_=T,T=0);const D=`rotateX(${p?0:-P}deg) rotateY(${p?P:0}deg) translate3d(${T}px, ${_}px, ${M}px)`;O<=1&&O>-1&&(w=S*90+O*90,m&&(w=-S*90-O*90),e.browser&&e.browser.need3dFix&&Math.abs(w)/90%2===1&&(w+=.001)),A.style.transform=D,h.slideShadows&&n(A,O,p)}if(u.style.transformOrigin=`50% 50% -${g/2}px`,u.style["-webkit-transform-origin"]=`50% 50% -${g/2}px`,h.shadow)if(p)y.style.transform=`translate3d(0px, ${c/2+h.shadowOffset}px, ${-c/2}px) rotateX(89.99deg) rotateZ(0deg) scale(${h.shadowScale})`;else{const x=Math.abs(w)-Math.floor(Math.abs(w)/90)*90,A=1.5-(Math.sin(x*2*Math.PI/360)/2+Math.cos(x*2*Math.PI/360)/2),S=h.shadowScale,P=h.shadowScale/A,C=h.shadowOffset;y.style.transform=`scale3d(${S}, 1, ${P}) translate3d(0px, ${f/2+C}px, ${-f/2/P}px) rotateX(-89.99deg)`}const E=(v.isSafari||v.isWebView)&&v.needPerspectiveFix?-g/2:0;u.style.transform=`translate3d(0px,0,${E}px) rotateX(${e.isHorizontal()?0:w}deg) rotateY(${e.isHorizontal()?-w:0}deg)`,u.style.setProperty("--swiper-cube-translate-z",`${E}px`)},setTransition:l=>{const{el:u,slides:d}=e;if(d.forEach(c=>{c.style.transitionDuration=`${l}ms`,c.querySelectorAll(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").forEach(f=>{f.style.transitionDuration=`${l}ms`})}),e.params.cubeEffect.shadow&&!e.isHorizontal()){const c=u.querySelector(".swiper-cube-shadow");c&&(c.style.transitionDuration=`${l}ms`)}},recreateShadows:()=>{const l=e.isHorizontal();e.slides.forEach(u=>{const d=Math.max(Math.min(u.progress,1),-1);n(u,d,l)})},getEffectParams:()=>e.params.cubeEffect,perspective:()=>!0,overwriteParams:()=>({slidesPerView:1,slidesPerGroup:1,watchSlidesProgress:!0,resistanceRatio:0,spaceBetween:0,centeredSlides:!1,virtualTranslate:!0})})}function Xe(t,e,i){const r=`swiper-slide-shadow${i?`-${i}`:""}${t?` swiper-slide-shadow-${t}`:""}`,n=Be(e);let s=n.querySelector(`.${r.split(" ").join(".")}`);return s||(s=ie("div",r.split(" ")),n.append(s)),s}function Oc(t){let{swiper:e,extendParams:i,on:r}=t;i({flipEffect:{slideShadows:!0,limitRotation:!0}});const n=(l,u)=>{let d=e.isHorizontal()?l.querySelector(".swiper-slide-shadow-left"):l.querySelector(".swiper-slide-shadow-top"),c=e.isHorizontal()?l.querySelector(".swiper-slide-shadow-right"):l.querySelector(".swiper-slide-shadow-bottom");d||(d=Xe("flip",l,e.isHorizontal()?"left":"top")),c||(c=Xe("flip",l,e.isHorizontal()?"right":"bottom")),d&&(d.style.opacity=Math.max(-u,0)),c&&(c.style.opacity=Math.max(u,0))};Je({effect:"flip",swiper:e,on:r,setTranslate:()=>{const{slides:l,rtlTranslate:u}=e,d=e.params.flipEffect;for(let c=0;c<l.length;c+=1){const f=l[c];let m=f.progress;e.params.flipEffect.limitRotation&&(m=Math.max(Math.min(f.progress,1),-1));const g=f.swiperSlideOffset;let h=-180*m,p=0,b=e.params.cssMode?-g-e.translate:-g,w=0;e.isHorizontal()?u&&(h=-h):(w=b,b=0,p=-h,h=0),e.browser&&e.browser.need3dFix&&(Math.abs(h)/90%2===1&&(h+=.001),Math.abs(p)/90%2===1&&(p+=.001)),f.style.zIndex=-Math.abs(Math.round(m))+l.length,d.slideShadows&&n(f,m);const y=`translate3d(${b}px, ${w}px, 0px) rotateX(${p}deg) rotateY(${h}deg)`,E=vt(d,f);E.style.transform=y}},setTransition:l=>{const u=e.slides.map(d=>Be(d));u.forEach(d=>{d.style.transitionDuration=`${l}ms`,d.querySelectorAll(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").forEach(c=>{c.style.transitionDuration=`${l}ms`})}),Qt({swiper:e,duration:l,transformElements:u})},recreateShadows:()=>{e.params.flipEffect,e.slides.forEach(l=>{let u=l.progress;e.params.flipEffect.limitRotation&&(u=Math.max(Math.min(l.progress,1),-1)),n(l,u)})},getEffectParams:()=>e.params.flipEffect,perspective:()=>!0,overwriteParams:()=>({slidesPerView:1,slidesPerGroup:1,watchSlidesProgress:!0,spaceBetween:0,virtualTranslate:!e.params.cssMode})})}function Dc(t){let{swiper:e,extendParams:i,on:r}=t;i({coverflowEffect:{rotate:50,stretch:0,depth:100,scale:1,modifier:1,slideShadows:!0}}),Je({effect:"coverflow",swiper:e,on:r,setTranslate:()=>{const{width:a,height:o,slides:l,slidesSizesGrid:u}=e,d=e.params.coverflowEffect,c=e.isHorizontal(),f=e.translate,m=c?-f+a/2:-f+o/2,g=c?d.rotate:-d.rotate,v=d.depth;for(let h=0,p=l.length;h<p;h+=1){const b=l[h],w=u[h],y=b.swiperSlideOffset,E=(m-y-w/2)/w,x=typeof d.modifier=="function"?d.modifier(E):E*d.modifier;let A=c?g*x:0,S=c?0:g*x,P=-v*Math.abs(x),C=d.stretch;typeof C=="string"&&C.indexOf("%")!==-1&&(C=parseFloat(d.stretch)/100*w);let O=c?0:C*x,T=c?C*x:0,_=1-(1-d.scale)*Math.abs(x);Math.abs(T)<.001&&(T=0),Math.abs(O)<.001&&(O=0),Math.abs(P)<.001&&(P=0),Math.abs(A)<.001&&(A=0),Math.abs(S)<.001&&(S=0),Math.abs(_)<.001&&(_=0),e.browser&&e.browser.need3dFix&&(Math.abs(A)/90%2===1&&(A+=.001),Math.abs(S)/90%2===1&&(S+=.001));const M=`translate3d(${T}px,${O}px,${P}px)  rotateX(${S}deg) rotateY(${A}deg) scale(${_})`,D=vt(d,b);if(D.style.transform=M,b.style.zIndex=-Math.abs(Math.round(x))+1,d.slideShadows){let k=c?b.querySelector(".swiper-slide-shadow-left"):b.querySelector(".swiper-slide-shadow-top"),L=c?b.querySelector(".swiper-slide-shadow-right"):b.querySelector(".swiper-slide-shadow-bottom");k||(k=Xe("coverflow",b,c?"left":"top")),L||(L=Xe("coverflow",b,c?"right":"bottom")),k&&(k.style.opacity=x>0?x:0),L&&(L.style.opacity=-x>0?-x:0)}}},setTransition:a=>{e.slides.map(l=>Be(l)).forEach(l=>{l.style.transitionDuration=`${a}ms`,l.querySelectorAll(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").forEach(u=>{u.style.transitionDuration=`${a}ms`})})},perspective:()=>!0,overwriteParams:()=>({watchSlidesProgress:!0})})}function $c(t){let{swiper:e,extendParams:i,on:r}=t;i({creativeEffect:{limitProgress:1,shadowPerProgress:!1,progressMultiplier:1,perspective:!0,prev:{translate:[0,0,0],rotate:[0,0,0],opacity:1,scale:1},next:{translate:[0,0,0],rotate:[0,0,0],opacity:1,scale:1}}});const n=o=>typeof o=="string"?o:`${o}px`;Je({effect:"creative",swiper:e,on:r,setTranslate:()=>{const{slides:o,wrapperEl:l,slidesSizesGrid:u}=e,d=e.params.creativeEffect,{progressMultiplier:c}=d,f=e.params.centeredSlides;if(f){const m=u[0]/2-e.params.slidesOffsetBefore||0;l.style.transform=`translateX(calc(50% - ${m}px))`}for(let m=0;m<o.length;m+=1){const g=o[m],v=g.progress,h=Math.min(Math.max(g.progress,-d.limitProgress),d.limitProgress);let p=h;f||(p=Math.min(Math.max(g.originalProgress,-d.limitProgress),d.limitProgress));const b=g.swiperSlideOffset,w=[e.params.cssMode?-b-e.translate:-b,0,0],y=[0,0,0];let E=!1;e.isHorizontal()||(w[1]=w[0],w[0]=0);let x={translate:[0,0,0],rotate:[0,0,0],scale:1,opacity:1};h<0?(x=d.next,E=!0):h>0&&(x=d.prev,E=!0),w.forEach((_,M)=>{w[M]=`calc(${_}px + (${n(x.translate[M])} * ${Math.abs(h*c)}))`}),y.forEach((_,M)=>{let D=x.rotate[M]*Math.abs(h*c);e.browser&&e.browser.need3dFix&&Math.abs(D)/90%2===1&&(D+=.001),y[M]=D}),g.style.zIndex=-Math.abs(Math.round(v))+o.length;const A=w.join(", "),S=`rotateX(${y[0]}deg) rotateY(${y[1]}deg) rotateZ(${y[2]}deg)`,P=p<0?`scale(${1+(1-x.scale)*p*c})`:`scale(${1-(1-x.scale)*p*c})`,C=p<0?1+(1-x.opacity)*p*c:1-(1-x.opacity)*p*c,O=`translate3d(${A}) ${S} ${P}`;if(E&&x.shadow||!E){let _=g.querySelector(".swiper-slide-shadow");if(!_&&x.shadow&&(_=Xe("creative",g)),_){const M=d.shadowPerProgress?h*(1/d.limitProgress):h;_.style.opacity=Math.min(Math.max(Math.abs(M),0),1)}}const T=vt(d,g);T.style.transform=O,T.style.opacity=C,x.origin&&(T.style.transformOrigin=x.origin)}},setTransition:o=>{const l=e.slides.map(u=>Be(u));l.forEach(u=>{u.style.transitionDuration=`${o}ms`,u.querySelectorAll(".swiper-slide-shadow").forEach(d=>{d.style.transitionDuration=`${o}ms`})}),Qt({swiper:e,duration:o,transformElements:l,allSlides:!0})},perspective:()=>e.params.creativeEffect.perspective,overwriteParams:()=>({watchSlidesProgress:!0,virtualTranslate:!e.params.cssMode})})}function zc(t){let{swiper:e,extendParams:i,on:r}=t;i({cardsEffect:{slideShadows:!0,rotate:!0,perSlideRotate:2,perSlideOffset:8}}),Je({effect:"cards",swiper:e,on:r,setTranslate:()=>{const{slides:a,activeIndex:o,rtlTranslate:l}=e,u=e.params.cardsEffect,{startTranslate:d,isTouched:c}=e.touchEventsData,f=l?-e.translate:e.translate;for(let m=0;m<a.length;m+=1){const g=a[m],v=g.progress,h=Math.min(Math.max(v,-4),4);let p=g.swiperSlideOffset;e.params.centeredSlides&&!e.params.cssMode&&(e.wrapperEl.style.transform=`translateX(${e.minTranslate()}px)`),e.params.centeredSlides&&e.params.cssMode&&(p-=a[0].swiperSlideOffset);let b=e.params.cssMode?-p-e.translate:-p,w=0;const y=-100*Math.abs(h);let E=1,x=-u.perSlideRotate*h,A=u.perSlideOffset-Math.abs(h)*.75;const S=e.virtual&&e.params.virtual.enabled?e.virtual.from+m:m,P=(S===o||S===o-1)&&h>0&&h<1&&(c||e.params.cssMode)&&f<d,C=(S===o||S===o+1)&&h<0&&h>-1&&(c||e.params.cssMode)&&f>d;if(P||C){const M=(1-Math.abs((Math.abs(h)-.5)/.5))**.5;x+=-28*h*M,E+=-.5*M,A+=96*M,w=`${-25*M*Math.abs(h)}%`}if(h<0?b=`calc(${b}px ${l?"-":"+"} (${A*Math.abs(h)}%))`:h>0?b=`calc(${b}px ${l?"-":"+"} (-${A*Math.abs(h)}%))`:b=`${b}px`,!e.isHorizontal()){const M=w;w=b,b=M}const O=h<0?`${1+(1-E)*h}`:`${1-(1-E)*h}`,T=`
        translate3d(${b}, ${w}, ${y}px)
        rotateZ(${u.rotate?l?-x:x:0}deg)
        scale(${O})
      `;if(u.slideShadows){let M=g.querySelector(".swiper-slide-shadow");M||(M=Xe("cards",g)),M&&(M.style.opacity=Math.min(Math.max((Math.abs(h)-.5)/.5,0),1))}g.style.zIndex=-Math.abs(Math.round(v))+a.length;const _=vt(u,g);_.style.transform=T}},setTransition:a=>{const o=e.slides.map(l=>Be(l));o.forEach(l=>{l.style.transitionDuration=`${a}ms`,l.querySelectorAll(".swiper-slide-shadow").forEach(u=>{u.style.transitionDuration=`${a}ms`})}),Qt({swiper:e,duration:a,transformElements:o})},perspective:()=>!0,overwriteParams:()=>({watchSlidesProgress:!0,virtualTranslate:!e.params.cssMode})})}const Rc=[lc,cc,dc,uc,fc,pc,mc,hc,gc,vc,wc,bc,yc,xc,Sc,Ec,Pc,Lc,Ic,Oc,Dc,$c,zc];ee.use(Rc);var ys=["input","select","textarea","a[href]","button","[tabindex]:not(slot)","audio[controls]","video[controls]",'[contenteditable]:not([contenteditable="false"])',"details>summary:first-of-type","details"],Bt=ys.join(","),xs=typeof Element>"u",Re=xs?function(){}:Element.prototype.matches||Element.prototype.msMatchesSelector||Element.prototype.webkitMatchesSelector,Hi=!xs&&Element.prototype.getRootNode?function(t){return t.getRootNode()}:function(t){return t.ownerDocument},Ss=function(e,i,r){var n=Array.prototype.slice.apply(e.querySelectorAll(Bt));return i&&Re.call(e,Bt)&&n.unshift(e),n=n.filter(r),n},Es=function t(e,i,r){for(var n=[],s=Array.from(e);s.length;){var a=s.shift();if(a.tagName==="SLOT"){var o=a.assignedElements(),l=o.length?o:a.children,u=t(l,!0,r);r.flatten?n.push.apply(n,u):n.push({scope:a,candidates:u})}else{var d=Re.call(a,Bt);d&&r.filter(a)&&(i||!e.includes(a))&&n.push(a);var c=a.shadowRoot||typeof r.getShadowRoot=="function"&&r.getShadowRoot(a),f=!r.shadowRootFilter||r.shadowRootFilter(a);if(c&&f){var m=t(c===!0?a.children:c.children,!0,r);r.flatten?n.push.apply(n,m):n.push({scope:a,candidates:m})}else s.unshift.apply(s,a.children)}}return n},Ts=function(e,i){return e.tabIndex<0&&(i||/^(AUDIO|VIDEO|DETAILS)$/.test(e.tagName)||e.isContentEditable)&&isNaN(parseInt(e.getAttribute("tabindex"),10))?0:e.tabIndex},kc=function(e,i){return e.tabIndex===i.tabIndex?e.documentOrder-i.documentOrder:e.tabIndex-i.tabIndex},_s=function(e){return e.tagName==="INPUT"},Fc=function(e){return _s(e)&&e.type==="hidden"},Nc=function(e){var i=e.tagName==="DETAILS"&&Array.prototype.slice.apply(e.children).some(function(r){return r.tagName==="SUMMARY"});return i},Bc=function(e,i){for(var r=0;r<e.length;r++)if(e[r].checked&&e[r].form===i)return e[r]},Hc=function(e){if(!e.name)return!0;var i=e.form||Hi(e),r=function(o){return i.querySelectorAll('input[type="radio"][name="'+o+'"]')},n;if(typeof window<"u"&&typeof window.CSS<"u"&&typeof window.CSS.escape=="function")n=r(window.CSS.escape(e.name));else try{n=r(e.name)}catch(a){return console.error("Looks like you have a radio button with a name attribute containing invalid CSS selector characters and need the CSS.escape polyfill: %s",a.message),!1}var s=Bc(n,e.form);return!s||s===e},Gc=function(e){return _s(e)&&e.type==="radio"},jc=function(e){return Gc(e)&&!Hc(e)},Br=function(e){var i=e.getBoundingClientRect(),r=i.width,n=i.height;return r===0&&n===0},Vc=function(e,i){var r=i.displayCheck,n=i.getShadowRoot;if(getComputedStyle(e).visibility==="hidden")return!0;var s=Re.call(e,"details>summary:first-of-type"),a=s?e.parentElement:e;if(Re.call(a,"details:not([open]) *"))return!0;var o=Hi(e).host,l=(o==null?void 0:o.ownerDocument.contains(o))||e.ownerDocument.contains(e);if(!r||r==="full"){if(typeof n=="function"){for(var u=e;e;){var d=e.parentElement,c=Hi(e);if(d&&!d.shadowRoot&&n(d)===!0)return Br(e);e.assignedSlot?e=e.assignedSlot:!d&&c!==e.ownerDocument?e=c.host:e=d}e=u}if(l)return!e.getClientRects().length}else if(r==="non-zero-area")return Br(e);return!1},Wc=function(e){if(/^(INPUT|BUTTON|SELECT|TEXTAREA)$/.test(e.tagName))for(var i=e.parentElement;i;){if(i.tagName==="FIELDSET"&&i.disabled){for(var r=0;r<i.children.length;r++){var n=i.children.item(r);if(n.tagName==="LEGEND")return Re.call(i,"fieldset[disabled] *")?!0:!n.contains(e)}return!0}i=i.parentElement}return!1},Ht=function(e,i){return!(i.disabled||Fc(i)||Vc(i,e)||Nc(i)||Wc(i))},Gi=function(e,i){return!(jc(i)||Ts(i)<0||!Ht(e,i))},Xc=function(e){var i=parseInt(e.getAttribute("tabindex"),10);return!!(isNaN(i)||i>=0)},qc=function t(e){var i=[],r=[];return e.forEach(function(n,s){var a=!!n.scope,o=a?n.scope:n,l=Ts(o,a),u=a?t(n.candidates):o;l===0?a?i.push.apply(i,u):i.push(o):r.push({documentOrder:s,tabIndex:l,item:n,isScope:a,content:u})}),r.sort(kc).reduce(function(n,s){return s.isScope?n.push.apply(n,s.content):n.push(s.content),n},[]).concat(i)},Yc=function(e,i){i=i||{};var r;return i.getShadowRoot?r=Es([e],i.includeContainer,{filter:Gi.bind(null,i),flatten:!1,getShadowRoot:i.getShadowRoot,shadowRootFilter:Xc}):r=Ss(e,i.includeContainer,Gi.bind(null,i)),qc(r)},Cs=function(e,i){i=i||{};var r;return i.getShadowRoot?r=Es([e],i.includeContainer,{filter:Ht.bind(null,i),flatten:!0,getShadowRoot:i.getShadowRoot}):r=Ss(e,i.includeContainer,Ht.bind(null,i)),r},Mt=function(e,i){if(i=i||{},!e)throw new Error("No node provided");return Re.call(e,Bt)===!1?!1:Gi(i,e)},Uc=ys.concat("iframe").join(","),Dt=function(e,i){if(i=i||{},!e)throw new Error("No node provided");return Re.call(e,Uc)===!1?!1:Ht(i,e)};function Hr(t,e){var i=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter(function(n){return Object.getOwnPropertyDescriptor(t,n).enumerable})),i.push.apply(i,r)}return i}function Gr(t){for(var e=1;e<arguments.length;e++){var i=arguments[e]!=null?arguments[e]:{};e%2?Hr(Object(i),!0).forEach(function(r){Kc(t,r,i[r])}):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(i)):Hr(Object(i)).forEach(function(r){Object.defineProperty(t,r,Object.getOwnPropertyDescriptor(i,r))})}return t}function Kc(t,e,i){return e in t?Object.defineProperty(t,e,{value:i,enumerable:!0,configurable:!0,writable:!0}):t[e]=i,t}var jr=function(){var t=[];return{activateTrap:function(i){if(t.length>0){var r=t[t.length-1];r!==i&&r.pause()}var n=t.indexOf(i);n===-1||t.splice(n,1),t.push(i)},deactivateTrap:function(i){var r=t.indexOf(i);r!==-1&&t.splice(r,1),t.length>0&&t[t.length-1].unpause()}}}(),Jc=function(e){return e.tagName&&e.tagName.toLowerCase()==="input"&&typeof e.select=="function"},Zc=function(e){return e.key==="Escape"||e.key==="Esc"||e.keyCode===27},Qc=function(e){return e.key==="Tab"||e.keyCode===9},Vr=function(e){return setTimeout(e,0)},Wr=function(e,i){var r=-1;return e.every(function(n,s){return i(n)?(r=s,!1):!0}),r},rt=function(e){for(var i=arguments.length,r=new Array(i>1?i-1:0),n=1;n<i;n++)r[n-1]=arguments[n];return typeof e=="function"?e.apply(void 0,r):e},At=function(e){return e.target.shadowRoot&&typeof e.composedPath=="function"?e.composedPath()[0]:e.target},ed=function(e,i){var r=(i==null?void 0:i.document)||document,n=Gr({returnFocusOnDeactivate:!0,escapeDeactivates:!0,delayInitialFocus:!0},i),s={containers:[],containerGroups:[],tabbableGroups:[],nodeFocusedBeforeActivation:null,mostRecentlyFocusedNode:null,active:!1,paused:!1,delayInitialFocusTimer:void 0},a,o=function(x,A,S){return x&&x[A]!==void 0?x[A]:n[S||A]},l=function(x){return s.containerGroups.findIndex(function(A){var S=A.container,P=A.tabbableNodes;return S.contains(x)||P.find(function(C){return C===x})})},u=function(x){var A=n[x];if(typeof A=="function"){for(var S=arguments.length,P=new Array(S>1?S-1:0),C=1;C<S;C++)P[C-1]=arguments[C];A=A.apply(void 0,P)}if(A===!0&&(A=void 0),!A){if(A===void 0||A===!1)return A;throw new Error("`".concat(x,"` was specified but was not a node, or did not return a node"))}var O=A;if(typeof A=="string"&&(O=r.querySelector(A),!O))throw new Error("`".concat(x,"` as selector refers to no known node"));return O},d=function(){var x=u("initialFocus");if(x===!1)return!1;if(x===void 0)if(l(r.activeElement)>=0)x=r.activeElement;else{var A=s.tabbableGroups[0],S=A&&A.firstTabbableNode;x=S||u("fallbackFocus")}if(!x)throw new Error("Your focus-trap needs to have at least one focusable element");return x},c=function(){if(s.containerGroups=s.containers.map(function(x){var A=Yc(x,n.tabbableOptions),S=Cs(x,n.tabbableOptions);return{container:x,tabbableNodes:A,focusableNodes:S,firstTabbableNode:A.length>0?A[0]:null,lastTabbableNode:A.length>0?A[A.length-1]:null,nextTabbableNode:function(C){var O=arguments.length>1&&arguments[1]!==void 0?arguments[1]:!0,T=S.findIndex(function(_){return _===C});if(!(T<0))return O?S.slice(T+1).find(function(_){return Mt(_,n.tabbableOptions)}):S.slice(0,T).reverse().find(function(_){return Mt(_,n.tabbableOptions)})}}}),s.tabbableGroups=s.containerGroups.filter(function(x){return x.tabbableNodes.length>0}),s.tabbableGroups.length<=0&&!u("fallbackFocus"))throw new Error("Your focus-trap must have at least one container with at least one tabbable node in it at all times")},f=function E(x){if(x!==!1&&x!==r.activeElement){if(!x||!x.focus){E(d());return}x.focus({preventScroll:!!n.preventScroll}),s.mostRecentlyFocusedNode=x,Jc(x)&&x.select()}},m=function(x){var A=u("setReturnFocus",x);return A||(A===!1?!1:x)},g=function(x){var A=At(x);if(!(l(A)>=0)){if(rt(n.clickOutsideDeactivates,x)){a.deactivate({returnFocus:n.returnFocusOnDeactivate&&!Dt(A,n.tabbableOptions)});return}rt(n.allowOutsideClick,x)||x.preventDefault()}},v=function(x){var A=At(x),S=l(A)>=0;S||A instanceof Document?S&&(s.mostRecentlyFocusedNode=A):(x.stopImmediatePropagation(),f(s.mostRecentlyFocusedNode||d()))},h=function(x){var A=At(x);c();var S=null;if(s.tabbableGroups.length>0){var P=l(A),C=P>=0?s.containerGroups[P]:void 0;if(P<0)x.shiftKey?S=s.tabbableGroups[s.tabbableGroups.length-1].lastTabbableNode:S=s.tabbableGroups[0].firstTabbableNode;else if(x.shiftKey){var O=Wr(s.tabbableGroups,function(L){var I=L.firstTabbableNode;return A===I});if(O<0&&(C.container===A||Dt(A,n.tabbableOptions)&&!Mt(A,n.tabbableOptions)&&!C.nextTabbableNode(A,!1))&&(O=P),O>=0){var T=O===0?s.tabbableGroups.length-1:O-1,_=s.tabbableGroups[T];S=_.lastTabbableNode}}else{var M=Wr(s.tabbableGroups,function(L){var I=L.lastTabbableNode;return A===I});if(M<0&&(C.container===A||Dt(A,n.tabbableOptions)&&!Mt(A,n.tabbableOptions)&&!C.nextTabbableNode(A))&&(M=P),M>=0){var D=M===s.tabbableGroups.length-1?0:M+1,k=s.tabbableGroups[D];S=k.firstTabbableNode}}}else S=u("fallbackFocus");S&&(x.preventDefault(),f(S))},p=function(x){if(Zc(x)&&rt(n.escapeDeactivates,x)!==!1){x.preventDefault(),a.deactivate();return}if(Qc(x)){h(x);return}},b=function(x){var A=At(x);l(A)>=0||rt(n.clickOutsideDeactivates,x)||rt(n.allowOutsideClick,x)||(x.preventDefault(),x.stopImmediatePropagation())},w=function(){if(s.active)return jr.activateTrap(a),s.delayInitialFocusTimer=n.delayInitialFocus?Vr(function(){f(d())}):f(d()),r.addEventListener("focusin",v,!0),r.addEventListener("mousedown",g,{capture:!0,passive:!1}),r.addEventListener("touchstart",g,{capture:!0,passive:!1}),r.addEventListener("click",b,{capture:!0,passive:!1}),r.addEventListener("keydown",p,{capture:!0,passive:!1}),a},y=function(){if(s.active)return r.removeEventListener("focusin",v,!0),r.removeEventListener("mousedown",g,!0),r.removeEventListener("touchstart",g,!0),r.removeEventListener("click",b,!0),r.removeEventListener("keydown",p,!0),a};return a={get active(){return s.active},get paused(){return s.paused},activate:function(x){if(s.active)return this;var A=o(x,"onActivate"),S=o(x,"onPostActivate"),P=o(x,"checkCanFocusTrap");P||c(),s.active=!0,s.paused=!1,s.nodeFocusedBeforeActivation=r.activeElement,A&&A();var C=function(){P&&c(),w(),S&&S()};return P?(P(s.containers.concat()).then(C,C),this):(C(),this)},deactivate:function(x){if(!s.active)return this;var A=Gr({onDeactivate:n.onDeactivate,onPostDeactivate:n.onPostDeactivate,checkCanReturnFocus:n.checkCanReturnFocus},x);clearTimeout(s.delayInitialFocusTimer),s.delayInitialFocusTimer=void 0,y(),s.active=!1,s.paused=!1,jr.deactivateTrap(a);var S=o(A,"onDeactivate"),P=o(A,"onPostDeactivate"),C=o(A,"checkCanReturnFocus"),O=o(A,"returnFocus","returnFocusOnDeactivate");S&&S();var T=function(){Vr(function(){O&&f(m(s.nodeFocusedBeforeActivation)),P&&P()})};return O&&C?(C(m(s.nodeFocusedBeforeActivation)).then(T,T),this):(T(),this)},pause:function(){return s.paused||!s.active?this:(s.paused=!0,y(),this)},unpause:function(){return!s.paused||!s.active?this:(s.paused=!1,c(),w(),this)},updateContainerElements:function(x){var A=[].concat(x).filter(Boolean);return s.containers=A.map(function(S){return typeof S=="string"?r.querySelector(S):S}),s.active&&c(),this}},a.updateContainerElements(e),a};function td(t){let e,i;window.addEventListener("focusin",()=>{e=i,i=document.activeElement}),t.magic("focus",r=>{let n=r;return{__noscroll:!1,__wrapAround:!1,within(s){return n=s,this},withoutScrolling(){return this.__noscroll=!0,this},noscroll(){return this.__noscroll=!0,this},withWrapAround(){return this.__wrapAround=!0,this},wrap(){return this.withWrapAround()},focusable(s){return Dt(s)},previouslyFocused(){return e},lastFocused(){return e},focused(){return i},focusables(){return Array.isArray(n)?n:Cs(n,{displayCheck:"none"})},all(){return this.focusables()},isFirst(s){let a=this.all();return a[0]&&a[0].isSameNode(s)},isLast(s){let a=this.all();return a.length&&a.slice(-1)[0].isSameNode(s)},getFirst(){return this.all()[0]},getLast(){return this.all().slice(-1)[0]},getNext(){let s=this.all(),a=document.activeElement;if(s.indexOf(a)!==-1)return this.__wrapAround&&s.indexOf(a)===s.length-1?s[0]:s[s.indexOf(a)+1]},getPrevious(){let s=this.all(),a=document.activeElement;if(s.indexOf(a)!==-1)return this.__wrapAround&&s.indexOf(a)===0?s.slice(-1)[0]:s[s.indexOf(a)-1]},first(){this.focus(this.getFirst())},last(){this.focus(this.getLast())},next(){this.focus(this.getNext())},previous(){this.focus(this.getPrevious())},prev(){return this.previous()},focus(s){s&&setTimeout(()=>{s.hasAttribute("tabindex")||s.setAttribute("tabindex","0"),s.focus({preventScroll:this.__noscroll})})}}}),t.directive("trap",t.skipDuringClone((r,{expression:n,modifiers:s},{effect:a,evaluateLater:o,cleanup:l})=>{let u=o(n),d=!1,c={escapeDeactivates:!1,allowOutsideClick:!0,fallbackFocus:()=>r};if(s.includes("noautofocus"))c.initialFocus=!1;else{let h=r.querySelector("[autofocus]");h&&(c.initialFocus=h)}let f=ed(r,c),m=()=>{},g=()=>{};const v=()=>{m(),m=()=>{},g(),g=()=>{},f.deactivate({returnFocus:!s.includes("noreturn")})};a(()=>u(h=>{d!==h&&(h&&!d&&(s.includes("noscroll")&&(g=id()),s.includes("inert")&&(m=Xr(r)),setTimeout(()=>{f.activate()},15)),!h&&d&&v(),d=!!h)})),l(v)},(r,{expression:n,modifiers:s},{evaluate:a})=>{s.includes("inert")&&a(n)&&Xr(r)}))}function Xr(t){let e=[];return Ms(t,i=>{let r=i.hasAttribute("aria-hidden");i.setAttribute("aria-hidden","true"),e.push(()=>r||i.removeAttribute("aria-hidden"))}),()=>{for(;e.length;)e.pop()()}}function Ms(t,e){t.isSameNode(document.body)||!t.parentNode||Array.from(t.parentNode.children).forEach(i=>{i.isSameNode(t)?Ms(t.parentNode,e):e(i)})}function id(){let t=document.documentElement.style.overflow,e=document.documentElement.style.paddingRight,i=window.innerWidth-document.documentElement.clientWidth;return document.documentElement.style.overflow="hidden",document.documentElement.style.paddingRight=`${i}px`,()=>{document.documentElement.style.overflow=t,document.documentElement.style.paddingRight=e}}var rd=td;/*! Bundled license information:

tabbable/dist/index.esm.js:
  (*!
  * tabbable 5.3.3
  * @license MIT, https://github.com/focus-trap/tabbable/blob/master/LICENSE
  *)

focus-trap/dist/focus-trap.esm.js:
  (*!
  * focus-trap 6.9.4
  * @license MIT, https://github.com/focus-trap/focus-trap/blob/master/LICENSE
  *)
*/function nd(t){t.directive("collapse",e),e.inline=(i,{modifiers:r})=>{r.includes("min")&&(i._x_doShow=()=>{},i._x_doHide=()=>{})};function e(i,{modifiers:r}){let n=qr(r,"duration",250)/1e3,s=qr(r,"min",0),a=!r.includes("min");i._x_isShown||(i.style.height=`${s}px`),!i._x_isShown&&a&&(i.hidden=!0),i._x_isShown||(i.style.overflow="hidden");let o=(u,d)=>{let c=t.setStyles(u,d);return d.height?()=>{}:c},l={transitionProperty:"height",transitionDuration:`${n}s`,transitionTimingFunction:"cubic-bezier(0.4, 0.0, 0.2, 1)"};i._x_transition={in(u=()=>{},d=()=>{}){a&&(i.hidden=!1),a&&(i.style.display=null);let c=i.getBoundingClientRect().height;i.style.height="auto";let f=i.getBoundingClientRect().height;c===f&&(c=s),t.transition(i,t.setStyles,{during:l,start:{height:c+"px"},end:{height:f+"px"}},()=>i._x_isShown=!0,()=>{Math.abs(i.getBoundingClientRect().height-f)<1&&(i.style.overflow=null)})},out(u=()=>{},d=()=>{}){let c=i.getBoundingClientRect().height;t.transition(i,o,{during:l,start:{height:c+"px"},end:{height:s+"px"}},()=>i.style.overflow="hidden",()=>{i._x_isShown=!1,i.style.height==`${s}px`&&a&&(i.style.display="none",i.hidden=!0)})}}}}function qr(t,e,i){if(t.indexOf(e)===-1)return i;const r=t[t.indexOf(e)+1];if(!r)return i;if(e==="duration"){let n=r.match(/([0-9]+)ms/);if(n)return n[1]}if(e==="min"){let n=r.match(/([0-9]+)px/);if(n)return n[1]}return r}var sd=nd,Gt=Math.min,$e=Math.max,jt=Math.round,Pt=Math.floor,Ee=t=>({x:t,y:t}),ad={left:"right",right:"left",bottom:"top",top:"bottom"},od={start:"end",end:"start"};function Yr(t,e,i){return $e(t,Gt(e,i))}function ei(t,e){return typeof t=="function"?t(e):t}function ke(t){return t.split("-")[0]}function ti(t){return t.split("-")[1]}function As(t){return t==="x"?"y":"x"}function Ps(t){return t==="y"?"height":"width"}function ii(t){return["top","bottom"].includes(ke(t))?"y":"x"}function Ls(t){return As(ii(t))}function ld(t,e,i){i===void 0&&(i=!1);const r=ti(t),n=Ls(t),s=Ps(n);let a=n==="x"?r===(i?"end":"start")?"right":"left":r==="start"?"bottom":"top";return e.reference[s]>e.floating[s]&&(a=Vt(a)),[a,Vt(a)]}function cd(t){const e=Vt(t);return[ji(t),e,ji(e)]}function ji(t){return t.replace(/start|end/g,e=>od[e])}function dd(t,e,i){const r=["left","right"],n=["right","left"],s=["top","bottom"],a=["bottom","top"];switch(t){case"top":case"bottom":return i?e?n:r:e?r:n;case"left":case"right":return e?s:a;default:return[]}}function ud(t,e,i,r){const n=ti(t);let s=dd(ke(t),i==="start",r);return n&&(s=s.map(a=>a+"-"+n),e&&(s=s.concat(s.map(ji)))),s}function Vt(t){return t.replace(/left|right|bottom|top/g,e=>ad[e])}function fd(t){return{top:0,right:0,bottom:0,left:0,...t}}function pd(t){return typeof t!="number"?fd(t):{top:t,right:t,bottom:t,left:t}}function Wt(t){return{...t,top:t.y,left:t.x,right:t.x+t.width,bottom:t.y+t.height}}function Ur(t,e,i){let{reference:r,floating:n}=t;const s=ii(e),a=Ls(e),o=Ps(a),l=ke(e),u=s==="y",d=r.x+r.width/2-n.width/2,c=r.y+r.height/2-n.height/2,f=r[o]/2-n[o]/2;let m;switch(l){case"top":m={x:d,y:r.y-n.height};break;case"bottom":m={x:d,y:r.y+r.height};break;case"right":m={x:r.x+r.width,y:c};break;case"left":m={x:r.x-n.width,y:c};break;default:m={x:r.x,y:r.y}}switch(ti(e)){case"start":m[a]-=f*(i&&u?-1:1);break;case"end":m[a]+=f*(i&&u?-1:1);break}return m}var md=async(t,e,i)=>{const{placement:r="bottom",strategy:n="absolute",middleware:s=[],platform:a}=i,o=s.filter(Boolean),l=await(a.isRTL==null?void 0:a.isRTL(e));let u=await a.getElementRects({reference:t,floating:e,strategy:n}),{x:d,y:c}=Ur(u,r,l),f=r,m={},g=0;for(let v=0;v<o.length;v++){const{name:h,fn:p}=o[v],{x:b,y:w,data:y,reset:E}=await p({x:d,y:c,initialPlacement:r,placement:f,strategy:n,middlewareData:m,rects:u,platform:a,elements:{reference:t,floating:e}});if(d=b??d,c=w??c,m={...m,[h]:{...m[h],...y}},E&&g<=50){g++,typeof E=="object"&&(E.placement&&(f=E.placement),E.rects&&(u=E.rects===!0?await a.getElementRects({reference:t,floating:e,strategy:n}):E.rects),{x:d,y:c}=Ur(u,f,l)),v=-1;continue}}return{x:d,y:c,placement:f,strategy:n,middlewareData:m}};async function Is(t,e){var i;e===void 0&&(e={});const{x:r,y:n,platform:s,rects:a,elements:o,strategy:l}=t,{boundary:u="clippingAncestors",rootBoundary:d="viewport",elementContext:c="floating",altBoundary:f=!1,padding:m=0}=ei(e,t),g=pd(m),h=o[f?c==="floating"?"reference":"floating":c],p=Wt(await s.getClippingRect({element:(i=await(s.isElement==null?void 0:s.isElement(h)))==null||i?h:h.contextElement||await(s.getDocumentElement==null?void 0:s.getDocumentElement(o.floating)),boundary:u,rootBoundary:d,strategy:l})),b=c==="floating"?{...a.floating,x:r,y:n}:a.reference,w=await(s.getOffsetParent==null?void 0:s.getOffsetParent(o.floating)),y=await(s.isElement==null?void 0:s.isElement(w))?await(s.getScale==null?void 0:s.getScale(w))||{x:1,y:1}:{x:1,y:1},E=Wt(s.convertOffsetParentRelativeRectToViewportRelativeRect?await s.convertOffsetParentRelativeRectToViewportRelativeRect({rect:b,offsetParent:w,strategy:l}):b);return{top:(p.top-E.top+g.top)/y.y,bottom:(E.bottom-p.bottom+g.bottom)/y.y,left:(p.left-E.left+g.left)/y.x,right:(E.right-p.right+g.right)/y.x}}var hd=function(t){return t===void 0&&(t={}),{name:"flip",options:t,async fn(e){var i,r;const{placement:n,middlewareData:s,rects:a,initialPlacement:o,platform:l,elements:u}=e,{mainAxis:d=!0,crossAxis:c=!0,fallbackPlacements:f,fallbackStrategy:m="bestFit",fallbackAxisSideDirection:g="none",flipAlignment:v=!0,...h}=ei(t,e);if((i=s.arrow)!=null&&i.alignmentOffset)return{};const p=ke(n),b=ke(o)===o,w=await(l.isRTL==null?void 0:l.isRTL(u.floating)),y=f||(b||!v?[Vt(o)]:cd(o));!f&&g!=="none"&&y.push(...ud(o,v,g,w));const E=[o,...y],x=await Is(e,h),A=[];let S=((r=s.flip)==null?void 0:r.overflows)||[];if(d&&A.push(x[p]),c){const T=ld(n,a,w);A.push(x[T[0]],x[T[1]])}if(S=[...S,{placement:n,overflows:A}],!A.every(T=>T<=0)){var P,C;const T=(((P=s.flip)==null?void 0:P.index)||0)+1,_=E[T];if(_)return{data:{index:T,overflows:S},reset:{placement:_}};let M=(C=S.filter(D=>D.overflows[0]<=0).sort((D,k)=>D.overflows[1]-k.overflows[1])[0])==null?void 0:C.placement;if(!M)switch(m){case"bestFit":{var O;const D=(O=S.map(k=>[k.placement,k.overflows.filter(L=>L>0).reduce((L,I)=>L+I,0)]).sort((k,L)=>k[1]-L[1])[0])==null?void 0:O[0];D&&(M=D);break}case"initialPlacement":M=o;break}if(n!==M)return{reset:{placement:M}}}return{}}}};async function gd(t,e){const{placement:i,platform:r,elements:n}=t,s=await(r.isRTL==null?void 0:r.isRTL(n.floating)),a=ke(i),o=ti(i),l=ii(i)==="y",u=["left","top"].includes(a)?-1:1,d=s&&l?-1:1,c=ei(e,t);let{mainAxis:f,crossAxis:m,alignmentAxis:g}=typeof c=="number"?{mainAxis:c,crossAxis:0,alignmentAxis:null}:{mainAxis:0,crossAxis:0,alignmentAxis:null,...c};return o&&typeof g=="number"&&(m=o==="end"?g*-1:g),l?{x:m*d,y:f*u}:{x:f*u,y:m*d}}var vd=function(t){return t===void 0&&(t=0),{name:"offset",options:t,async fn(e){const{x:i,y:r}=e,n=await gd(e,t);return{x:i+n.x,y:r+n.y,data:n}}}},wd=function(t){return t===void 0&&(t={}),{name:"shift",options:t,async fn(e){const{x:i,y:r,placement:n}=e,{mainAxis:s=!0,crossAxis:a=!1,limiter:o={fn:h=>{let{x:p,y:b}=h;return{x:p,y:b}}},...l}=ei(t,e),u={x:i,y:r},d=await Is(e,l),c=ii(ke(n)),f=As(c);let m=u[f],g=u[c];if(s){const h=f==="y"?"top":"left",p=f==="y"?"bottom":"right",b=m+d[h],w=m-d[p];m=Yr(b,m,w)}if(a){const h=c==="y"?"top":"left",p=c==="y"?"bottom":"right",b=g+d[h],w=g-d[p];g=Yr(b,g,w)}const v=o.fn({...e,[f]:m,[c]:g});return{...v,data:{x:v.x-i,y:v.y-r}}}}};function Te(t){return Os(t)?(t.nodeName||"").toLowerCase():"#document"}function re(t){var e;return(t==null||(e=t.ownerDocument)==null?void 0:e.defaultView)||window}function ge(t){var e;return(e=(Os(t)?t.ownerDocument:t.document)||window.document)==null?void 0:e.documentElement}function Os(t){return t instanceof Node||t instanceof re(t).Node}function he(t){return t instanceof Element||t instanceof re(t).Element}function ue(t){return t instanceof HTMLElement||t instanceof re(t).HTMLElement}function Kr(t){return typeof ShadowRoot>"u"?!1:t instanceof ShadowRoot||t instanceof re(t).ShadowRoot}function wt(t){const{overflow:e,overflowX:i,overflowY:r,display:n}=ae(t);return/auto|scroll|overlay|hidden|clip/.test(e+r+i)&&!["inline","contents"].includes(n)}function bd(t){return["table","td","th"].includes(Te(t))}function fr(t){const e=pr(),i=ae(t);return i.transform!=="none"||i.perspective!=="none"||(i.containerType?i.containerType!=="normal":!1)||!e&&(i.backdropFilter?i.backdropFilter!=="none":!1)||!e&&(i.filter?i.filter!=="none":!1)||["transform","perspective","filter"].some(r=>(i.willChange||"").includes(r))||["paint","layout","strict","content"].some(r=>(i.contain||"").includes(r))}function yd(t){let e=qe(t);for(;ue(e)&&!ri(e);){if(fr(e))return e;e=qe(e)}return null}function pr(){return typeof CSS>"u"||!CSS.supports?!1:CSS.supports("-webkit-backdrop-filter","none")}function ri(t){return["html","body","#document"].includes(Te(t))}function ae(t){return re(t).getComputedStyle(t)}function ni(t){return he(t)?{scrollLeft:t.scrollLeft,scrollTop:t.scrollTop}:{scrollLeft:t.pageXOffset,scrollTop:t.pageYOffset}}function qe(t){if(Te(t)==="html")return t;const e=t.assignedSlot||t.parentNode||Kr(t)&&t.host||ge(t);return Kr(e)?e.host:e}function Ds(t){const e=qe(t);return ri(e)?t.ownerDocument?t.ownerDocument.body:t.body:ue(e)&&wt(e)?e:Ds(e)}function ft(t,e,i){var r;e===void 0&&(e=[]),i===void 0&&(i=!0);const n=Ds(t),s=n===((r=t.ownerDocument)==null?void 0:r.body),a=re(n);return s?e.concat(a,a.visualViewport||[],wt(n)?n:[],a.frameElement&&i?ft(a.frameElement):[]):e.concat(n,ft(n,[],i))}function $s(t){const e=ae(t);let i=parseFloat(e.width)||0,r=parseFloat(e.height)||0;const n=ue(t),s=n?t.offsetWidth:i,a=n?t.offsetHeight:r,o=jt(i)!==s||jt(r)!==a;return o&&(i=s,r=a),{width:i,height:r,$:o}}function mr(t){return he(t)?t:t.contextElement}function je(t){const e=mr(t);if(!ue(e))return Ee(1);const i=e.getBoundingClientRect(),{width:r,height:n,$:s}=$s(e);let a=(s?jt(i.width):i.width)/r,o=(s?jt(i.height):i.height)/n;return(!a||!Number.isFinite(a))&&(a=1),(!o||!Number.isFinite(o))&&(o=1),{x:a,y:o}}var xd=Ee(0);function zs(t){const e=re(t);return!pr()||!e.visualViewport?xd:{x:e.visualViewport.offsetLeft,y:e.visualViewport.offsetTop}}function Sd(t,e,i){return e===void 0&&(e=!1),!i||e&&i!==re(t)?!1:e}function Fe(t,e,i,r){e===void 0&&(e=!1),i===void 0&&(i=!1);const n=t.getBoundingClientRect(),s=mr(t);let a=Ee(1);e&&(r?he(r)&&(a=je(r)):a=je(t));const o=Sd(s,i,r)?zs(s):Ee(0);let l=(n.left+o.x)/a.x,u=(n.top+o.y)/a.y,d=n.width/a.x,c=n.height/a.y;if(s){const f=re(s),m=r&&he(r)?re(r):r;let g=f.frameElement;for(;g&&r&&m!==f;){const v=je(g),h=g.getBoundingClientRect(),p=ae(g),b=h.left+(g.clientLeft+parseFloat(p.paddingLeft))*v.x,w=h.top+(g.clientTop+parseFloat(p.paddingTop))*v.y;l*=v.x,u*=v.y,d*=v.x,c*=v.y,l+=b,u+=w,g=re(g).frameElement}}return Wt({width:d,height:c,x:l,y:u})}function Ed(t){let{rect:e,offsetParent:i,strategy:r}=t;const n=ue(i),s=ge(i);if(i===s)return e;let a={scrollLeft:0,scrollTop:0},o=Ee(1);const l=Ee(0);if((n||!n&&r!=="fixed")&&((Te(i)!=="body"||wt(s))&&(a=ni(i)),ue(i))){const u=Fe(i);o=je(i),l.x=u.x+i.clientLeft,l.y=u.y+i.clientTop}return{width:e.width*o.x,height:e.height*o.y,x:e.x*o.x-a.scrollLeft*o.x+l.x,y:e.y*o.y-a.scrollTop*o.y+l.y}}function Td(t){return Array.from(t.getClientRects())}function Rs(t){return Fe(ge(t)).left+ni(t).scrollLeft}function _d(t){const e=ge(t),i=ni(t),r=t.ownerDocument.body,n=$e(e.scrollWidth,e.clientWidth,r.scrollWidth,r.clientWidth),s=$e(e.scrollHeight,e.clientHeight,r.scrollHeight,r.clientHeight);let a=-i.scrollLeft+Rs(t);const o=-i.scrollTop;return ae(r).direction==="rtl"&&(a+=$e(e.clientWidth,r.clientWidth)-n),{width:n,height:s,x:a,y:o}}function Cd(t,e){const i=re(t),r=ge(t),n=i.visualViewport;let s=r.clientWidth,a=r.clientHeight,o=0,l=0;if(n){s=n.width,a=n.height;const u=pr();(!u||u&&e==="fixed")&&(o=n.offsetLeft,l=n.offsetTop)}return{width:s,height:a,x:o,y:l}}function Md(t,e){const i=Fe(t,!0,e==="fixed"),r=i.top+t.clientTop,n=i.left+t.clientLeft,s=ue(t)?je(t):Ee(1),a=t.clientWidth*s.x,o=t.clientHeight*s.y,l=n*s.x,u=r*s.y;return{width:a,height:o,x:l,y:u}}function Jr(t,e,i){let r;if(e==="viewport")r=Cd(t,i);else if(e==="document")r=_d(ge(t));else if(he(e))r=Md(e,i);else{const n=zs(t);r={...e,x:e.x-n.x,y:e.y-n.y}}return Wt(r)}function ks(t,e){const i=qe(t);return i===e||!he(i)||ri(i)?!1:ae(i).position==="fixed"||ks(i,e)}function Ad(t,e){const i=e.get(t);if(i)return i;let r=ft(t,[],!1).filter(o=>he(o)&&Te(o)!=="body"),n=null;const s=ae(t).position==="fixed";let a=s?qe(t):t;for(;he(a)&&!ri(a);){const o=ae(a),l=fr(a);!l&&o.position==="fixed"&&(n=null),(s?!l&&!n:!l&&o.position==="static"&&!!n&&["absolute","fixed"].includes(n.position)||wt(a)&&!l&&ks(t,a))?r=r.filter(d=>d!==a):n=o,a=qe(a)}return e.set(t,r),r}function Pd(t){let{element:e,boundary:i,rootBoundary:r,strategy:n}=t;const a=[...i==="clippingAncestors"?Ad(e,this._c):[].concat(i),r],o=a[0],l=a.reduce((u,d)=>{const c=Jr(e,d,n);return u.top=$e(c.top,u.top),u.right=Gt(c.right,u.right),u.bottom=Gt(c.bottom,u.bottom),u.left=$e(c.left,u.left),u},Jr(e,o,n));return{width:l.right-l.left,height:l.bottom-l.top,x:l.left,y:l.top}}function Ld(t){return $s(t)}function Id(t,e,i){const r=ue(e),n=ge(e),s=i==="fixed",a=Fe(t,!0,s,e);let o={scrollLeft:0,scrollTop:0};const l=Ee(0);if(r||!r&&!s)if((Te(e)!=="body"||wt(n))&&(o=ni(e)),r){const u=Fe(e,!0,s,e);l.x=u.x+e.clientLeft,l.y=u.y+e.clientTop}else n&&(l.x=Rs(n));return{x:a.left+o.scrollLeft-l.x,y:a.top+o.scrollTop-l.y,width:a.width,height:a.height}}function Zr(t,e){return!ue(t)||ae(t).position==="fixed"?null:e?e(t):t.offsetParent}function Fs(t,e){const i=re(t);if(!ue(t))return i;let r=Zr(t,e);for(;r&&bd(r)&&ae(r).position==="static";)r=Zr(r,e);return r&&(Te(r)==="html"||Te(r)==="body"&&ae(r).position==="static"&&!fr(r))?i:r||yd(t)||i}var Od=async function(t){let{reference:e,floating:i,strategy:r}=t;const n=this.getOffsetParent||Fs,s=this.getDimensions;return{reference:Id(e,await n(i),r),floating:{x:0,y:0,...await s(i)}}};function Dd(t){return ae(t).direction==="rtl"}var $d={convertOffsetParentRelativeRectToViewportRelativeRect:Ed,getDocumentElement:ge,getClippingRect:Pd,getOffsetParent:Fs,getElementRects:Od,getClientRects:Td,getDimensions:Ld,getScale:je,isElement:he,isRTL:Dd};function zd(t,e){let i=null,r;const n=ge(t);function s(){clearTimeout(r),i&&i.disconnect(),i=null}function a(o,l){o===void 0&&(o=!1),l===void 0&&(l=1),s();const{left:u,top:d,width:c,height:f}=t.getBoundingClientRect();if(o||e(),!c||!f)return;const m=Pt(d),g=Pt(n.clientWidth-(u+c)),v=Pt(n.clientHeight-(d+f)),h=Pt(u),b={rootMargin:-m+"px "+-g+"px "+-v+"px "+-h+"px",threshold:$e(0,Gt(1,l))||1};let w=!0;function y(E){const x=E[0].intersectionRatio;if(x!==l){if(!w)return a();x?a(!1,x):r=setTimeout(()=>{a(!1,1e-7)},100)}w=!1}try{i=new IntersectionObserver(y,{...b,root:n.ownerDocument})}catch{i=new IntersectionObserver(y,b)}i.observe(t)}return a(!0),s}function Rd(t,e,i,r){r===void 0&&(r={});const{ancestorScroll:n=!0,ancestorResize:s=!0,elementResize:a=typeof ResizeObserver=="function",layoutShift:o=typeof IntersectionObserver=="function",animationFrame:l=!1}=r,u=mr(t),d=n||s?[...u?ft(u):[],...ft(e)]:[];d.forEach(p=>{n&&p.addEventListener("scroll",i,{passive:!0}),s&&p.addEventListener("resize",i)});const c=u&&o?zd(u,i):null;let f=-1,m=null;a&&(m=new ResizeObserver(p=>{let[b]=p;b&&b.target===u&&m&&(m.unobserve(e),cancelAnimationFrame(f),f=requestAnimationFrame(()=>{m&&m.observe(e)})),i()}),u&&!l&&m.observe(u),m.observe(e));let g,v=l?Fe(t):null;l&&h();function h(){const p=Fe(t);v&&(p.x!==v.x||p.y!==v.y||p.width!==v.width||p.height!==v.height)&&i(),v=p,g=requestAnimationFrame(h)}return i(),()=>{d.forEach(p=>{n&&p.removeEventListener("scroll",i),s&&p.removeEventListener("resize",i)}),c&&c(),m&&m.disconnect(),m=null,l&&cancelAnimationFrame(g)}}var kd=(t,e,i)=>{const r=new Map,n={platform:$d,...i},s={...n.platform,_c:r};return md(t,e,{...n,platform:s})};function Fd(t){t.magic("anchor",e=>{if(!e._x_anchor)throw"Alpine: No x-anchor directive found on element using $anchor...";return e._x_anchor}),t.interceptClone((e,i)=>{e&&e._x_anchor&&!i._x_anchor&&(i._x_anchor=e._x_anchor)}),t.directive("anchor",t.skipDuringClone((e,{expression:i,modifiers:r,value:n},{cleanup:s,evaluate:a})=>{let{placement:o,offsetValue:l,unstyled:u}=en(r);e._x_anchor=t.reactive({x:0,y:0});let d=a(i);if(!d)throw"Alpine: no element provided to x-anchor...";let c=()=>{let m;kd(d,e,{placement:o,middleware:[hd(),wd({padding:5}),vd(l)]}).then(({x:g,y:v})=>{u||Qr(e,g,v),JSON.stringify({x:g,y:v})!==m&&(e._x_anchor.x=g,e._x_anchor.y=v),m=JSON.stringify({x:g,y:v})})},f=Rd(d,e,()=>c());s(()=>f())},(e,{expression:i,modifiers:r,value:n},{cleanup:s,evaluate:a})=>{let{placement:o,offsetValue:l,unstyled:u}=en(r);e._x_anchor&&(u||Qr(e,e._x_anchor.x,e._x_anchor.y))}))}function Qr(t,e,i){Object.assign(t.style,{left:e+"px",top:i+"px",position:"absolute"})}function en(t){let i=["top","top-start","top-end","right","right-start","right-end","bottom","bottom-start","bottom-end","left","left-start","left-end"].find(s=>t.includes(s)),r=0;if(t.includes("offset")){let s=t.findIndex(a=>a==="offset");r=t[s+1]!==void 0?Number(t[s+1]):r}let n=t.includes("no-style");return{placement:i,offsetValue:r,unstyled:n}}var Nd=Fd;de.data("product_gallery",()=>({swiperReference:null,init(){this.initSlider();let t=this;window.productGalleryGoToSlide=e=>t.goToSlide(e)},initSlider(){this.swiperReference=new ee(this.$refs.swiperContainer,{slidesPerView:1,spaceBetween:10,pagination:{el:this.$refs.pagination,clickable:!0},navigation:{nextEl:this.$refs.next_arrow,prevEl:this.$refs.prev_arrow}})},goToSlide(t){let e=parseInt(t)-1;this.swiperReference.slideTo(e)}}));function Bd(t){return t&&t.__esModule&&Object.prototype.hasOwnProperty.call(t,"default")?t.default:t}var Hd=/^(?:submit|button|image|reset|file)$/i,Gd=/^(?:input|select|textarea|keygen)/i,Ns=/(\[[^\[\]]*\])/g;function jd(t,e){typeof e!="object"?e={hash:!!e}:e.hash===void 0&&(e.hash=!0);for(var i=e.hash?{}:"",r=e.serializer||(e.hash?Wd:Xd),n=t&&t.elements?t.elements:[],s=Object.create(null),a=0;a<n.length;++a){var o=n[a];if(!(!e.disabled&&o.disabled||!o.name)&&!(!Gd.test(o.nodeName)||Hd.test(o.type))){var l=o.name,u=o.value;if((o.type==="checkbox"||o.type==="radio")&&!o.checked&&(u=void 0),e.empty){if(o.type==="checkbox"&&!o.checked&&(u=""),o.type==="radio"&&(!s[o.name]&&!o.checked?s[o.name]=!1:o.checked&&(s[o.name]=!0)),u==null&&o.type=="radio")continue}else if(!u)continue;if(o.type==="select-multiple"){u=[];for(var d=o.options,c=!1,f=0;f<d.length;++f){var m=d[f],g=e.empty&&!m.value,v=m.value||g;m.selected&&v&&(c=!0,e.hash&&l.slice(l.length-2)!=="[]"?i=r(i,l+"[]",m.value):i=r(i,l,m.value))}!c&&e.empty&&(i=r(i,l,""));continue}i=r(i,l,u)}}if(e.empty)for(var l in s)s[l]||(i=r(i,l,""));return i}function Vd(t){var e=[],i=/^([^\[\]]*)/,r=new RegExp(Ns),n=i.exec(t);for(n[1]&&e.push(n[1]);(n=r.exec(t))!==null;)e.push(n[1]);return e}function Ge(t,e,i){if(e.length===0)return t=i,t;var r=e.shift(),n=r.match(/^\[(.+?)\]$/);if(r==="[]")return t=t||[],Array.isArray(t)?t.push(Ge(null,e,i)):(t._values=t._values||[],t._values.push(Ge(null,e,i))),t;if(!n)t[r]=Ge(t[r],e,i);else{var s=n[1],a=+s;isNaN(a)?(t=t||{},t[s]=Ge(t[s],e,i)):(t=t||[],t[a]=Ge(t[a],e,i))}return t}function Wd(t,e,i){var r=e.match(Ns);if(r){var n=Vd(e);Ge(t,n,i)}else{var s=t[e];s?(Array.isArray(s)||(t[e]=[s]),t[e].push(i)):t[e]=i}return t}function Xd(t,e,i){return i=i.replace(/(\r)?\n/g,`\r
`),i=encodeURIComponent(i),i=i.replace(/%20/g,"+"),t+(t?"&":"")+encodeURIComponent(e)+"="+i}var qd=jd;const Yd=Bd(qd),U={addToCartButton:".js-add-to-cart",cartDrawer:"#cart-drawer",cartDrawerItems:"#cart-drawer-items",cartDrawerFooter:"#cart-drawer-footer",cartDrawerOverlay:".cart-drawer-overlay",cartDrawerTrigger:".js-cart-drawer-trigger",cartDrawerClose:".js-cart-drawer-close",cartDrawerCartJson:"#ajax-cart-drawer-json",cartCount:".cart-count",lineItem:".cart-line-item",lineItemUpdate:".js-cart-line-item-update",lineItemQuantity:".js-cart-line-item-input-quantity",moneyFormat:Shopify.currency.default_money_format};class X{static removeItemAnimation(e){e.classList.add("is-invisible")}static openCartDrawer(){document.documentElement.style.overflow="hidden",de.store("cart").drawerIsOpen=!0,this.openCartOverlay()}static closeCartDrawer(){document.documentElement.style.overflow="auto",de.store("cart").drawerIsOpen=!1,this.closeCartOverlay()}static openCartOverlay(){document.querySelector(U.cartDrawerOverlay).classList.add("is-open")}static closeCartOverlay(){document.querySelector(U.cartDrawerOverlay).classList.remove("is-open")}static updateCartItemCount(e){e.item_count==0?document.body.classList.add("cart-is-empty"):document.body.classList.remove("cart-is-empty"),document.querySelectorAll(U.cartCount).forEach(i=>{i.innerHTML=e.item_count})}static setLoadingButton(e,i=!0){i?(e.disabled=!0,e.classList.add("processing-spinner")):(e.disabled=!1,e.classList.remove("processing-spinner"))}static updateSections(e){e.sections&&X.getSectionsToRender().forEach(i=>{const r=new DOMParser().parseFromString(e.sections[i.section],"text/html");i.selectors.forEach(n=>{document.querySelector(n).innerHTML=r.querySelector(n).innerHTML})})}static getSectionsToRender(){let e=[{section:document.getElementById("cart-drawer").dataset.sectionId,selectors:[U.cartDrawerItems,U.cartDrawerFooter]}];return window.location.pathname.includes(Shopify.routes.cart_url)&&e.push({section:document.getElementById("main-cart").dataset.sectionId,selectors:["#main-cart"]}),e}}de.store("cart",{cart:Shopify.cart||{},cartIsUpdating:!1,drawerIsOpen:!1,init(){this.initClickListeners(),this.initEventListeners(),de.effect(()=>{X.updateCartItemCount(this.cart)})},async addJS(t){return this.cartIsUpdating=!0,fetch(Shopify.routes.root+"cart/add.js",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)}).then(async e=>{if(e.status!=200){const r=(await e.json()).message||"An error has occurred! Please try again.";throw alert(r),new Error}return e.json()}).catch(e=>{throw new Error(e)}).finally(()=>{this.cartIsUpdating=!1})},async changeJS(t){return this.cartIsUpdating=!0,fetch(Shopify.routes.root+"cart/change.js",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)}).then(async e=>{if(e.status!=200){const r=(await e.json()).message||"An error has occurred! Please try again.";throw alert(r),new Error}return e.json()}).catch(e=>{throw new Error(e)}).finally(()=>{this.cartIsUpdating=!1})},async addToCart(t){if(this.cartIsUpdating)return;let e=t.closest("form"),n={items:[Yd(e,{hash:!0})],sections:X.getSectionsToRender().map(a=>a.section),sections_url:window.location.pathname+"?request_type=ajax"};X.setLoadingButton(t);let s=await this.addJS(n).finally(()=>{X.setLoadingButton(t,!1)});X.updateSections(s),X.openCartDrawer(),this.updateCartJson(s)},async updateCart(t){if(this.cartIsUpdating)return;const e=t.dataset.type,i=t.dataset.line,r=t.closest(U.lineItem).querySelector(U.lineItemQuantity),n=Number(r.step||1);let s=Number(r.value||0);switch(e){case"plus":s+=n;break;case"minus":s-=n;break;case"remove":s=0;break}s===0&&X.removeItemAnimation(t.closest(U.lineItem));let a={line:i,quantity:s,sections:X.getSectionsToRender().map(l=>l.section),sections_url:window.location.pathname+"?request_type=ajax"};X.setLoadingButton(t);let o=await this.changeJS(a).finally(()=>{X.setLoadingButton(t,!1)});X.updateSections(o),this.updateCartJson(o)},async getDrawerUpdated(){const t=X.getSectionsToRender().map(n=>n.section).join(",");let e=Shopify.routes.root+"?request_type=ajax&sections="+t;const r={sections:await fetch(e).then(n=>n.json()).catch(n=>{throw new Error(n)})};X.updateSections(r),X.openCartDrawer(),this.updateCartJson(r)},async updateCartJson(t){const e=X.getSectionsToRender()[0].section,i=new DOMParser().parseFromString(t.sections[e],"text/html");this.cart=JSON.parse(i.querySelector(U.cartDrawerCartJson).textContent)},initClickListeners(){document.addEventListener("click",t=>{const e=t.target;e.closest(U.addToCartButton)&&(t.preventDefault(),this.addToCart(e.closest(U.addToCartButton))),e.closest(U.lineItemUpdate)&&this.updateCart(e.closest(U.lineItemUpdate)),e.closest(U.cartDrawerTrigger)&&(t.preventDefault(),X.openCartDrawer()),(e.closest(U.cartDrawerOverlay)||e.closest(U.cartDrawerClose))&&X.closeCartDrawer()})},initEventListeners(){window.addEventListener("keydown",function(t){t.key==="Escape"&&document.querySelector(U.cartDrawer).classList.contains("is-open")&&X.closeCartDrawer()})}});window.Alpine=de;window.Swiper=ee;de.plugin(rd);de.plugin(sd);de.plugin(Nd);de.start();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZXMiOlsiLi4vZXh0ZXJuYWwvbm9kZV9tb2R1bGVzL2FscGluZWpzL2Rpc3QvbW9kdWxlLmVzbS5qcyIsIi4uL2V4dGVybmFsL25vZGVfbW9kdWxlcy9zd2lwZXIvc2hhcmVkL3Nzci13aW5kb3cuZXNtLm1qcyIsIi4uL2V4dGVybmFsL25vZGVfbW9kdWxlcy9zd2lwZXIvc2hhcmVkL3V0aWxzLm1qcyIsIi4uL2V4dGVybmFsL25vZGVfbW9kdWxlcy9zd2lwZXIvc2hhcmVkL3N3aXBlci1jb3JlLm1qcyIsIi4uL2V4dGVybmFsL25vZGVfbW9kdWxlcy9zd2lwZXIvbW9kdWxlcy92aXJ0dWFsLm1qcyIsIi4uL2V4dGVybmFsL25vZGVfbW9kdWxlcy9zd2lwZXIvbW9kdWxlcy9rZXlib2FyZC5tanMiLCIuLi9leHRlcm5hbC9ub2RlX21vZHVsZXMvc3dpcGVyL21vZHVsZXMvbW91c2V3aGVlbC5tanMiLCIuLi9leHRlcm5hbC9ub2RlX21vZHVsZXMvc3dpcGVyL3NoYXJlZC9jcmVhdGUtZWxlbWVudC1pZi1ub3QtZGVmaW5lZC5tanMiLCIuLi9leHRlcm5hbC9ub2RlX21vZHVsZXMvc3dpcGVyL21vZHVsZXMvbmF2aWdhdGlvbi5tanMiLCIuLi9leHRlcm5hbC9ub2RlX21vZHVsZXMvc3dpcGVyL3NoYXJlZC9jbGFzc2VzLXRvLXNlbGVjdG9yLm1qcyIsIi4uL2V4dGVybmFsL25vZGVfbW9kdWxlcy9zd2lwZXIvbW9kdWxlcy9wYWdpbmF0aW9uLm1qcyIsIi4uL2V4dGVybmFsL25vZGVfbW9kdWxlcy9zd2lwZXIvbW9kdWxlcy9zY3JvbGxiYXIubWpzIiwiLi4vZXh0ZXJuYWwvbm9kZV9tb2R1bGVzL3N3aXBlci9tb2R1bGVzL3BhcmFsbGF4Lm1qcyIsIi4uL2V4dGVybmFsL25vZGVfbW9kdWxlcy9zd2lwZXIvbW9kdWxlcy96b29tLm1qcyIsIi4uL2V4dGVybmFsL25vZGVfbW9kdWxlcy9zd2lwZXIvbW9kdWxlcy9jb250cm9sbGVyLm1qcyIsIi4uL2V4dGVybmFsL25vZGVfbW9kdWxlcy9zd2lwZXIvbW9kdWxlcy9hMTF5Lm1qcyIsIi4uL2V4dGVybmFsL25vZGVfbW9kdWxlcy9zd2lwZXIvbW9kdWxlcy9oaXN0b3J5Lm1qcyIsIi4uL2V4dGVybmFsL25vZGVfbW9kdWxlcy9zd2lwZXIvbW9kdWxlcy9oYXNoLW5hdmlnYXRpb24ubWpzIiwiLi4vZXh0ZXJuYWwvbm9kZV9tb2R1bGVzL3N3aXBlci9tb2R1bGVzL2F1dG9wbGF5Lm1qcyIsIi4uL2V4dGVybmFsL25vZGVfbW9kdWxlcy9zd2lwZXIvbW9kdWxlcy90aHVtYnMubWpzIiwiLi4vZXh0ZXJuYWwvbm9kZV9tb2R1bGVzL3N3aXBlci9tb2R1bGVzL2ZyZWUtbW9kZS5tanMiLCIuLi9leHRlcm5hbC9ub2RlX21vZHVsZXMvc3dpcGVyL21vZHVsZXMvZ3JpZC5tanMiLCIuLi9leHRlcm5hbC9ub2RlX21vZHVsZXMvc3dpcGVyL21vZHVsZXMvbWFuaXB1bGF0aW9uLm1qcyIsIi4uL2V4dGVybmFsL25vZGVfbW9kdWxlcy9zd2lwZXIvc2hhcmVkL2VmZmVjdC1pbml0Lm1qcyIsIi4uL2V4dGVybmFsL25vZGVfbW9kdWxlcy9zd2lwZXIvc2hhcmVkL2VmZmVjdC10YXJnZXQubWpzIiwiLi4vZXh0ZXJuYWwvbm9kZV9tb2R1bGVzL3N3aXBlci9zaGFyZWQvZWZmZWN0LXZpcnR1YWwtdHJhbnNpdGlvbi1lbmQubWpzIiwiLi4vZXh0ZXJuYWwvbm9kZV9tb2R1bGVzL3N3aXBlci9tb2R1bGVzL2VmZmVjdC1mYWRlLm1qcyIsIi4uL2V4dGVybmFsL25vZGVfbW9kdWxlcy9zd2lwZXIvbW9kdWxlcy9lZmZlY3QtY3ViZS5tanMiLCIuLi9leHRlcm5hbC9ub2RlX21vZHVsZXMvc3dpcGVyL3NoYXJlZC9jcmVhdGUtc2hhZG93Lm1qcyIsIi4uL2V4dGVybmFsL25vZGVfbW9kdWxlcy9zd2lwZXIvbW9kdWxlcy9lZmZlY3QtZmxpcC5tanMiLCIuLi9leHRlcm5hbC9ub2RlX21vZHVsZXMvc3dpcGVyL21vZHVsZXMvZWZmZWN0LWNvdmVyZmxvdy5tanMiLCIuLi9leHRlcm5hbC9ub2RlX21vZHVsZXMvc3dpcGVyL21vZHVsZXMvZWZmZWN0LWNyZWF0aXZlLm1qcyIsIi4uL2V4dGVybmFsL25vZGVfbW9kdWxlcy9zd2lwZXIvbW9kdWxlcy9lZmZlY3QtY2FyZHMubWpzIiwiLi4vZXh0ZXJuYWwvbm9kZV9tb2R1bGVzL3N3aXBlci9zd2lwZXItYnVuZGxlLm1qcyIsIi4uL2V4dGVybmFsL25vZGVfbW9kdWxlcy9AYWxwaW5lanMvZm9jdXMvZGlzdC9tb2R1bGUuZXNtLmpzIiwiLi4vZXh0ZXJuYWwvbm9kZV9tb2R1bGVzL0BhbHBpbmVqcy9jb2xsYXBzZS9kaXN0L21vZHVsZS5lc20uanMiLCIuLi9leHRlcm5hbC9ub2RlX21vZHVsZXMvQGFscGluZWpzL2FuY2hvci9kaXN0L21vZHVsZS5lc20uanMiLCIuLi9leHRlcm5hbC9zcmMvanMvcHJvZHVjdC5qcyIsIi4uL2V4dGVybmFsL25vZGVfbW9kdWxlcy9mb3JtLXNlcmlhbGl6ZS9pbmRleC5qcyIsIi4uL2V4dGVybmFsL3NyYy9qcy9jYXJ0LmpzIiwiLi4vZXh0ZXJuYWwvc3JjL21haW4uanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gcGFja2FnZXMvYWxwaW5lanMvc3JjL3NjaGVkdWxlci5qc1xudmFyIGZsdXNoUGVuZGluZyA9IGZhbHNlO1xudmFyIGZsdXNoaW5nID0gZmFsc2U7XG52YXIgcXVldWUgPSBbXTtcbnZhciBsYXN0Rmx1c2hlZEluZGV4ID0gLTE7XG5mdW5jdGlvbiBzY2hlZHVsZXIoY2FsbGJhY2spIHtcbiAgcXVldWVKb2IoY2FsbGJhY2spO1xufVxuZnVuY3Rpb24gcXVldWVKb2Ioam9iKSB7XG4gIGlmICghcXVldWUuaW5jbHVkZXMoam9iKSlcbiAgICBxdWV1ZS5wdXNoKGpvYik7XG4gIHF1ZXVlRmx1c2goKTtcbn1cbmZ1bmN0aW9uIGRlcXVldWVKb2Ioam9iKSB7XG4gIGxldCBpbmRleCA9IHF1ZXVlLmluZGV4T2Yoam9iKTtcbiAgaWYgKGluZGV4ICE9PSAtMSAmJiBpbmRleCA+IGxhc3RGbHVzaGVkSW5kZXgpXG4gICAgcXVldWUuc3BsaWNlKGluZGV4LCAxKTtcbn1cbmZ1bmN0aW9uIHF1ZXVlRmx1c2goKSB7XG4gIGlmICghZmx1c2hpbmcgJiYgIWZsdXNoUGVuZGluZykge1xuICAgIGZsdXNoUGVuZGluZyA9IHRydWU7XG4gICAgcXVldWVNaWNyb3Rhc2soZmx1c2hKb2JzKTtcbiAgfVxufVxuZnVuY3Rpb24gZmx1c2hKb2JzKCkge1xuICBmbHVzaFBlbmRpbmcgPSBmYWxzZTtcbiAgZmx1c2hpbmcgPSB0cnVlO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHF1ZXVlLmxlbmd0aDsgaSsrKSB7XG4gICAgcXVldWVbaV0oKTtcbiAgICBsYXN0Rmx1c2hlZEluZGV4ID0gaTtcbiAgfVxuICBxdWV1ZS5sZW5ndGggPSAwO1xuICBsYXN0Rmx1c2hlZEluZGV4ID0gLTE7XG4gIGZsdXNoaW5nID0gZmFsc2U7XG59XG5cbi8vIHBhY2thZ2VzL2FscGluZWpzL3NyYy9yZWFjdGl2aXR5LmpzXG52YXIgcmVhY3RpdmU7XG52YXIgZWZmZWN0O1xudmFyIHJlbGVhc2U7XG52YXIgcmF3O1xudmFyIHNob3VsZFNjaGVkdWxlID0gdHJ1ZTtcbmZ1bmN0aW9uIGRpc2FibGVFZmZlY3RTY2hlZHVsaW5nKGNhbGxiYWNrKSB7XG4gIHNob3VsZFNjaGVkdWxlID0gZmFsc2U7XG4gIGNhbGxiYWNrKCk7XG4gIHNob3VsZFNjaGVkdWxlID0gdHJ1ZTtcbn1cbmZ1bmN0aW9uIHNldFJlYWN0aXZpdHlFbmdpbmUoZW5naW5lKSB7XG4gIHJlYWN0aXZlID0gZW5naW5lLnJlYWN0aXZlO1xuICByZWxlYXNlID0gZW5naW5lLnJlbGVhc2U7XG4gIGVmZmVjdCA9IChjYWxsYmFjaykgPT4gZW5naW5lLmVmZmVjdChjYWxsYmFjaywgeyBzY2hlZHVsZXI6ICh0YXNrKSA9PiB7XG4gICAgaWYgKHNob3VsZFNjaGVkdWxlKSB7XG4gICAgICBzY2hlZHVsZXIodGFzayk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRhc2soKTtcbiAgICB9XG4gIH0gfSk7XG4gIHJhdyA9IGVuZ2luZS5yYXc7XG59XG5mdW5jdGlvbiBvdmVycmlkZUVmZmVjdChvdmVycmlkZSkge1xuICBlZmZlY3QgPSBvdmVycmlkZTtcbn1cbmZ1bmN0aW9uIGVsZW1lbnRCb3VuZEVmZmVjdChlbCkge1xuICBsZXQgY2xlYW51cDIgPSAoKSA9PiB7XG4gIH07XG4gIGxldCB3cmFwcGVkRWZmZWN0ID0gKGNhbGxiYWNrKSA9PiB7XG4gICAgbGV0IGVmZmVjdFJlZmVyZW5jZSA9IGVmZmVjdChjYWxsYmFjayk7XG4gICAgaWYgKCFlbC5feF9lZmZlY3RzKSB7XG4gICAgICBlbC5feF9lZmZlY3RzID0gLyogQF9fUFVSRV9fICovIG5ldyBTZXQoKTtcbiAgICAgIGVsLl94X3J1bkVmZmVjdHMgPSAoKSA9PiB7XG4gICAgICAgIGVsLl94X2VmZmVjdHMuZm9yRWFjaCgoaSkgPT4gaSgpKTtcbiAgICAgIH07XG4gICAgfVxuICAgIGVsLl94X2VmZmVjdHMuYWRkKGVmZmVjdFJlZmVyZW5jZSk7XG4gICAgY2xlYW51cDIgPSAoKSA9PiB7XG4gICAgICBpZiAoZWZmZWN0UmVmZXJlbmNlID09PSB2b2lkIDApXG4gICAgICAgIHJldHVybjtcbiAgICAgIGVsLl94X2VmZmVjdHMuZGVsZXRlKGVmZmVjdFJlZmVyZW5jZSk7XG4gICAgICByZWxlYXNlKGVmZmVjdFJlZmVyZW5jZSk7XG4gICAgfTtcbiAgICByZXR1cm4gZWZmZWN0UmVmZXJlbmNlO1xuICB9O1xuICByZXR1cm4gW3dyYXBwZWRFZmZlY3QsICgpID0+IHtcbiAgICBjbGVhbnVwMigpO1xuICB9XTtcbn1cbmZ1bmN0aW9uIHdhdGNoKGdldHRlciwgY2FsbGJhY2spIHtcbiAgbGV0IGZpcnN0VGltZSA9IHRydWU7XG4gIGxldCBvbGRWYWx1ZTtcbiAgbGV0IGVmZmVjdFJlZmVyZW5jZSA9IGVmZmVjdCgoKSA9PiB7XG4gICAgbGV0IHZhbHVlID0gZ2V0dGVyKCk7XG4gICAgSlNPTi5zdHJpbmdpZnkodmFsdWUpO1xuICAgIGlmICghZmlyc3RUaW1lKSB7XG4gICAgICBxdWV1ZU1pY3JvdGFzaygoKSA9PiB7XG4gICAgICAgIGNhbGxiYWNrKHZhbHVlLCBvbGRWYWx1ZSk7XG4gICAgICAgIG9sZFZhbHVlID0gdmFsdWU7XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgb2xkVmFsdWUgPSB2YWx1ZTtcbiAgICB9XG4gICAgZmlyc3RUaW1lID0gZmFsc2U7XG4gIH0pO1xuICByZXR1cm4gKCkgPT4gcmVsZWFzZShlZmZlY3RSZWZlcmVuY2UpO1xufVxuXG4vLyBwYWNrYWdlcy9hbHBpbmVqcy9zcmMvbXV0YXRpb24uanNcbnZhciBvbkF0dHJpYnV0ZUFkZGVkcyA9IFtdO1xudmFyIG9uRWxSZW1vdmVkcyA9IFtdO1xudmFyIG9uRWxBZGRlZHMgPSBbXTtcbmZ1bmN0aW9uIG9uRWxBZGRlZChjYWxsYmFjaykge1xuICBvbkVsQWRkZWRzLnB1c2goY2FsbGJhY2spO1xufVxuZnVuY3Rpb24gb25FbFJlbW92ZWQoZWwsIGNhbGxiYWNrKSB7XG4gIGlmICh0eXBlb2YgY2FsbGJhY2sgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIGlmICghZWwuX3hfY2xlYW51cHMpXG4gICAgICBlbC5feF9jbGVhbnVwcyA9IFtdO1xuICAgIGVsLl94X2NsZWFudXBzLnB1c2goY2FsbGJhY2spO1xuICB9IGVsc2Uge1xuICAgIGNhbGxiYWNrID0gZWw7XG4gICAgb25FbFJlbW92ZWRzLnB1c2goY2FsbGJhY2spO1xuICB9XG59XG5mdW5jdGlvbiBvbkF0dHJpYnV0ZXNBZGRlZChjYWxsYmFjaykge1xuICBvbkF0dHJpYnV0ZUFkZGVkcy5wdXNoKGNhbGxiYWNrKTtcbn1cbmZ1bmN0aW9uIG9uQXR0cmlidXRlUmVtb3ZlZChlbCwgbmFtZSwgY2FsbGJhY2spIHtcbiAgaWYgKCFlbC5feF9hdHRyaWJ1dGVDbGVhbnVwcylcbiAgICBlbC5feF9hdHRyaWJ1dGVDbGVhbnVwcyA9IHt9O1xuICBpZiAoIWVsLl94X2F0dHJpYnV0ZUNsZWFudXBzW25hbWVdKVxuICAgIGVsLl94X2F0dHJpYnV0ZUNsZWFudXBzW25hbWVdID0gW107XG4gIGVsLl94X2F0dHJpYnV0ZUNsZWFudXBzW25hbWVdLnB1c2goY2FsbGJhY2spO1xufVxuZnVuY3Rpb24gY2xlYW51cEF0dHJpYnV0ZXMoZWwsIG5hbWVzKSB7XG4gIGlmICghZWwuX3hfYXR0cmlidXRlQ2xlYW51cHMpXG4gICAgcmV0dXJuO1xuICBPYmplY3QuZW50cmllcyhlbC5feF9hdHRyaWJ1dGVDbGVhbnVwcykuZm9yRWFjaCgoW25hbWUsIHZhbHVlXSkgPT4ge1xuICAgIGlmIChuYW1lcyA9PT0gdm9pZCAwIHx8IG5hbWVzLmluY2x1ZGVzKG5hbWUpKSB7XG4gICAgICB2YWx1ZS5mb3JFYWNoKChpKSA9PiBpKCkpO1xuICAgICAgZGVsZXRlIGVsLl94X2F0dHJpYnV0ZUNsZWFudXBzW25hbWVdO1xuICAgIH1cbiAgfSk7XG59XG5mdW5jdGlvbiBjbGVhbnVwRWxlbWVudChlbCkge1xuICBpZiAoZWwuX3hfY2xlYW51cHMpIHtcbiAgICB3aGlsZSAoZWwuX3hfY2xlYW51cHMubGVuZ3RoKVxuICAgICAgZWwuX3hfY2xlYW51cHMucG9wKCkoKTtcbiAgfVxufVxudmFyIG9ic2VydmVyID0gbmV3IE11dGF0aW9uT2JzZXJ2ZXIob25NdXRhdGUpO1xudmFyIGN1cnJlbnRseU9ic2VydmluZyA9IGZhbHNlO1xuZnVuY3Rpb24gc3RhcnRPYnNlcnZpbmdNdXRhdGlvbnMoKSB7XG4gIG9ic2VydmVyLm9ic2VydmUoZG9jdW1lbnQsIHsgc3VidHJlZTogdHJ1ZSwgY2hpbGRMaXN0OiB0cnVlLCBhdHRyaWJ1dGVzOiB0cnVlLCBhdHRyaWJ1dGVPbGRWYWx1ZTogdHJ1ZSB9KTtcbiAgY3VycmVudGx5T2JzZXJ2aW5nID0gdHJ1ZTtcbn1cbmZ1bmN0aW9uIHN0b3BPYnNlcnZpbmdNdXRhdGlvbnMoKSB7XG4gIGZsdXNoT2JzZXJ2ZXIoKTtcbiAgb2JzZXJ2ZXIuZGlzY29ubmVjdCgpO1xuICBjdXJyZW50bHlPYnNlcnZpbmcgPSBmYWxzZTtcbn1cbnZhciBxdWV1ZWRNdXRhdGlvbnMgPSBbXTtcbmZ1bmN0aW9uIGZsdXNoT2JzZXJ2ZXIoKSB7XG4gIGxldCByZWNvcmRzID0gb2JzZXJ2ZXIudGFrZVJlY29yZHMoKTtcbiAgcXVldWVkTXV0YXRpb25zLnB1c2goKCkgPT4gcmVjb3Jkcy5sZW5ndGggPiAwICYmIG9uTXV0YXRlKHJlY29yZHMpKTtcbiAgbGV0IHF1ZXVlTGVuZ3RoV2hlblRyaWdnZXJlZCA9IHF1ZXVlZE11dGF0aW9ucy5sZW5ndGg7XG4gIHF1ZXVlTWljcm90YXNrKCgpID0+IHtcbiAgICBpZiAocXVldWVkTXV0YXRpb25zLmxlbmd0aCA9PT0gcXVldWVMZW5ndGhXaGVuVHJpZ2dlcmVkKSB7XG4gICAgICB3aGlsZSAocXVldWVkTXV0YXRpb25zLmxlbmd0aCA+IDApXG4gICAgICAgIHF1ZXVlZE11dGF0aW9ucy5zaGlmdCgpKCk7XG4gICAgfVxuICB9KTtcbn1cbmZ1bmN0aW9uIG11dGF0ZURvbShjYWxsYmFjaykge1xuICBpZiAoIWN1cnJlbnRseU9ic2VydmluZylcbiAgICByZXR1cm4gY2FsbGJhY2soKTtcbiAgc3RvcE9ic2VydmluZ011dGF0aW9ucygpO1xuICBsZXQgcmVzdWx0ID0gY2FsbGJhY2soKTtcbiAgc3RhcnRPYnNlcnZpbmdNdXRhdGlvbnMoKTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cbnZhciBpc0NvbGxlY3RpbmcgPSBmYWxzZTtcbnZhciBkZWZlcnJlZE11dGF0aW9ucyA9IFtdO1xuZnVuY3Rpb24gZGVmZXJNdXRhdGlvbnMoKSB7XG4gIGlzQ29sbGVjdGluZyA9IHRydWU7XG59XG5mdW5jdGlvbiBmbHVzaEFuZFN0b3BEZWZlcnJpbmdNdXRhdGlvbnMoKSB7XG4gIGlzQ29sbGVjdGluZyA9IGZhbHNlO1xuICBvbk11dGF0ZShkZWZlcnJlZE11dGF0aW9ucyk7XG4gIGRlZmVycmVkTXV0YXRpb25zID0gW107XG59XG5mdW5jdGlvbiBvbk11dGF0ZShtdXRhdGlvbnMpIHtcbiAgaWYgKGlzQ29sbGVjdGluZykge1xuICAgIGRlZmVycmVkTXV0YXRpb25zID0gZGVmZXJyZWRNdXRhdGlvbnMuY29uY2F0KG11dGF0aW9ucyk7XG4gICAgcmV0dXJuO1xuICB9XG4gIGxldCBhZGRlZE5vZGVzID0gLyogQF9fUFVSRV9fICovIG5ldyBTZXQoKTtcbiAgbGV0IHJlbW92ZWROb2RlcyA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgU2V0KCk7XG4gIGxldCBhZGRlZEF0dHJpYnV0ZXMgPSAvKiBAX19QVVJFX18gKi8gbmV3IE1hcCgpO1xuICBsZXQgcmVtb3ZlZEF0dHJpYnV0ZXMgPSAvKiBAX19QVVJFX18gKi8gbmV3IE1hcCgpO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IG11dGF0aW9ucy5sZW5ndGg7IGkrKykge1xuICAgIGlmIChtdXRhdGlvbnNbaV0udGFyZ2V0Ll94X2lnbm9yZU11dGF0aW9uT2JzZXJ2ZXIpXG4gICAgICBjb250aW51ZTtcbiAgICBpZiAobXV0YXRpb25zW2ldLnR5cGUgPT09IFwiY2hpbGRMaXN0XCIpIHtcbiAgICAgIG11dGF0aW9uc1tpXS5hZGRlZE5vZGVzLmZvckVhY2goKG5vZGUpID0+IG5vZGUubm9kZVR5cGUgPT09IDEgJiYgYWRkZWROb2Rlcy5hZGQobm9kZSkpO1xuICAgICAgbXV0YXRpb25zW2ldLnJlbW92ZWROb2Rlcy5mb3JFYWNoKChub2RlKSA9PiBub2RlLm5vZGVUeXBlID09PSAxICYmIHJlbW92ZWROb2Rlcy5hZGQobm9kZSkpO1xuICAgIH1cbiAgICBpZiAobXV0YXRpb25zW2ldLnR5cGUgPT09IFwiYXR0cmlidXRlc1wiKSB7XG4gICAgICBsZXQgZWwgPSBtdXRhdGlvbnNbaV0udGFyZ2V0O1xuICAgICAgbGV0IG5hbWUgPSBtdXRhdGlvbnNbaV0uYXR0cmlidXRlTmFtZTtcbiAgICAgIGxldCBvbGRWYWx1ZSA9IG11dGF0aW9uc1tpXS5vbGRWYWx1ZTtcbiAgICAgIGxldCBhZGQyID0gKCkgPT4ge1xuICAgICAgICBpZiAoIWFkZGVkQXR0cmlidXRlcy5oYXMoZWwpKVxuICAgICAgICAgIGFkZGVkQXR0cmlidXRlcy5zZXQoZWwsIFtdKTtcbiAgICAgICAgYWRkZWRBdHRyaWJ1dGVzLmdldChlbCkucHVzaCh7IG5hbWUsIHZhbHVlOiBlbC5nZXRBdHRyaWJ1dGUobmFtZSkgfSk7XG4gICAgICB9O1xuICAgICAgbGV0IHJlbW92ZSA9ICgpID0+IHtcbiAgICAgICAgaWYgKCFyZW1vdmVkQXR0cmlidXRlcy5oYXMoZWwpKVxuICAgICAgICAgIHJlbW92ZWRBdHRyaWJ1dGVzLnNldChlbCwgW10pO1xuICAgICAgICByZW1vdmVkQXR0cmlidXRlcy5nZXQoZWwpLnB1c2gobmFtZSk7XG4gICAgICB9O1xuICAgICAgaWYgKGVsLmhhc0F0dHJpYnV0ZShuYW1lKSAmJiBvbGRWYWx1ZSA9PT0gbnVsbCkge1xuICAgICAgICBhZGQyKCk7XG4gICAgICB9IGVsc2UgaWYgKGVsLmhhc0F0dHJpYnV0ZShuYW1lKSkge1xuICAgICAgICByZW1vdmUoKTtcbiAgICAgICAgYWRkMigpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVtb3ZlKCk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJlbW92ZWRBdHRyaWJ1dGVzLmZvckVhY2goKGF0dHJzLCBlbCkgPT4ge1xuICAgIGNsZWFudXBBdHRyaWJ1dGVzKGVsLCBhdHRycyk7XG4gIH0pO1xuICBhZGRlZEF0dHJpYnV0ZXMuZm9yRWFjaCgoYXR0cnMsIGVsKSA9PiB7XG4gICAgb25BdHRyaWJ1dGVBZGRlZHMuZm9yRWFjaCgoaSkgPT4gaShlbCwgYXR0cnMpKTtcbiAgfSk7XG4gIGZvciAobGV0IG5vZGUgb2YgcmVtb3ZlZE5vZGVzKSB7XG4gICAgaWYgKGFkZGVkTm9kZXMuaGFzKG5vZGUpKVxuICAgICAgY29udGludWU7XG4gICAgb25FbFJlbW92ZWRzLmZvckVhY2goKGkpID0+IGkobm9kZSkpO1xuICB9XG4gIGFkZGVkTm9kZXMuZm9yRWFjaCgobm9kZSkgPT4ge1xuICAgIG5vZGUuX3hfaWdub3JlU2VsZiA9IHRydWU7XG4gICAgbm9kZS5feF9pZ25vcmUgPSB0cnVlO1xuICB9KTtcbiAgZm9yIChsZXQgbm9kZSBvZiBhZGRlZE5vZGVzKSB7XG4gICAgaWYgKHJlbW92ZWROb2Rlcy5oYXMobm9kZSkpXG4gICAgICBjb250aW51ZTtcbiAgICBpZiAoIW5vZGUuaXNDb25uZWN0ZWQpXG4gICAgICBjb250aW51ZTtcbiAgICBkZWxldGUgbm9kZS5feF9pZ25vcmVTZWxmO1xuICAgIGRlbGV0ZSBub2RlLl94X2lnbm9yZTtcbiAgICBvbkVsQWRkZWRzLmZvckVhY2goKGkpID0+IGkobm9kZSkpO1xuICAgIG5vZGUuX3hfaWdub3JlID0gdHJ1ZTtcbiAgICBub2RlLl94X2lnbm9yZVNlbGYgPSB0cnVlO1xuICB9XG4gIGFkZGVkTm9kZXMuZm9yRWFjaCgobm9kZSkgPT4ge1xuICAgIGRlbGV0ZSBub2RlLl94X2lnbm9yZVNlbGY7XG4gICAgZGVsZXRlIG5vZGUuX3hfaWdub3JlO1xuICB9KTtcbiAgYWRkZWROb2RlcyA9IG51bGw7XG4gIHJlbW92ZWROb2RlcyA9IG51bGw7XG4gIGFkZGVkQXR0cmlidXRlcyA9IG51bGw7XG4gIHJlbW92ZWRBdHRyaWJ1dGVzID0gbnVsbDtcbn1cblxuLy8gcGFja2FnZXMvYWxwaW5lanMvc3JjL3Njb3BlLmpzXG5mdW5jdGlvbiBzY29wZShub2RlKSB7XG4gIHJldHVybiBtZXJnZVByb3hpZXMoY2xvc2VzdERhdGFTdGFjayhub2RlKSk7XG59XG5mdW5jdGlvbiBhZGRTY29wZVRvTm9kZShub2RlLCBkYXRhMiwgcmVmZXJlbmNlTm9kZSkge1xuICBub2RlLl94X2RhdGFTdGFjayA9IFtkYXRhMiwgLi4uY2xvc2VzdERhdGFTdGFjayhyZWZlcmVuY2VOb2RlIHx8IG5vZGUpXTtcbiAgcmV0dXJuICgpID0+IHtcbiAgICBub2RlLl94X2RhdGFTdGFjayA9IG5vZGUuX3hfZGF0YVN0YWNrLmZpbHRlcigoaSkgPT4gaSAhPT0gZGF0YTIpO1xuICB9O1xufVxuZnVuY3Rpb24gY2xvc2VzdERhdGFTdGFjayhub2RlKSB7XG4gIGlmIChub2RlLl94X2RhdGFTdGFjaylcbiAgICByZXR1cm4gbm9kZS5feF9kYXRhU3RhY2s7XG4gIGlmICh0eXBlb2YgU2hhZG93Um9vdCA9PT0gXCJmdW5jdGlvblwiICYmIG5vZGUgaW5zdGFuY2VvZiBTaGFkb3dSb290KSB7XG4gICAgcmV0dXJuIGNsb3Nlc3REYXRhU3RhY2sobm9kZS5ob3N0KTtcbiAgfVxuICBpZiAoIW5vZGUucGFyZW50Tm9kZSkge1xuICAgIHJldHVybiBbXTtcbiAgfVxuICByZXR1cm4gY2xvc2VzdERhdGFTdGFjayhub2RlLnBhcmVudE5vZGUpO1xufVxuZnVuY3Rpb24gbWVyZ2VQcm94aWVzKG9iamVjdHMpIHtcbiAgcmV0dXJuIG5ldyBQcm94eSh7IG9iamVjdHMgfSwgbWVyZ2VQcm94eVRyYXApO1xufVxudmFyIG1lcmdlUHJveHlUcmFwID0ge1xuICBvd25LZXlzKHsgb2JqZWN0cyB9KSB7XG4gICAgcmV0dXJuIEFycmF5LmZyb20oXG4gICAgICBuZXcgU2V0KG9iamVjdHMuZmxhdE1hcCgoaSkgPT4gT2JqZWN0LmtleXMoaSkpKVxuICAgICk7XG4gIH0sXG4gIGhhcyh7IG9iamVjdHMgfSwgbmFtZSkge1xuICAgIGlmIChuYW1lID09IFN5bWJvbC51bnNjb3BhYmxlcylcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICByZXR1cm4gb2JqZWN0cy5zb21lKFxuICAgICAgKG9iaikgPT4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgbmFtZSkgfHwgUmVmbGVjdC5oYXMob2JqLCBuYW1lKVxuICAgICk7XG4gIH0sXG4gIGdldCh7IG9iamVjdHMgfSwgbmFtZSwgdGhpc1Byb3h5KSB7XG4gICAgaWYgKG5hbWUgPT0gXCJ0b0pTT05cIilcbiAgICAgIHJldHVybiBjb2xsYXBzZVByb3hpZXM7XG4gICAgcmV0dXJuIFJlZmxlY3QuZ2V0KFxuICAgICAgb2JqZWN0cy5maW5kKFxuICAgICAgICAob2JqKSA9PiBSZWZsZWN0LmhhcyhvYmosIG5hbWUpXG4gICAgICApIHx8IHt9LFxuICAgICAgbmFtZSxcbiAgICAgIHRoaXNQcm94eVxuICAgICk7XG4gIH0sXG4gIHNldCh7IG9iamVjdHMgfSwgbmFtZSwgdmFsdWUsIHRoaXNQcm94eSkge1xuICAgIGNvbnN0IHRhcmdldCA9IG9iamVjdHMuZmluZChcbiAgICAgIChvYmopID0+IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIG5hbWUpXG4gICAgKSB8fCBvYmplY3RzW29iamVjdHMubGVuZ3RoIC0gMV07XG4gICAgY29uc3QgZGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBuYW1lKTtcbiAgICBpZiAoZGVzY3JpcHRvcj8uc2V0ICYmIGRlc2NyaXB0b3I/LmdldClcbiAgICAgIHJldHVybiBSZWZsZWN0LnNldCh0YXJnZXQsIG5hbWUsIHZhbHVlLCB0aGlzUHJveHkpO1xuICAgIHJldHVybiBSZWZsZWN0LnNldCh0YXJnZXQsIG5hbWUsIHZhbHVlKTtcbiAgfVxufTtcbmZ1bmN0aW9uIGNvbGxhcHNlUHJveGllcygpIHtcbiAgbGV0IGtleXMgPSBSZWZsZWN0Lm93bktleXModGhpcyk7XG4gIHJldHVybiBrZXlzLnJlZHVjZSgoYWNjLCBrZXkpID0+IHtcbiAgICBhY2Nba2V5XSA9IFJlZmxlY3QuZ2V0KHRoaXMsIGtleSk7XG4gICAgcmV0dXJuIGFjYztcbiAgfSwge30pO1xufVxuXG4vLyBwYWNrYWdlcy9hbHBpbmVqcy9zcmMvaW50ZXJjZXB0b3IuanNcbmZ1bmN0aW9uIGluaXRJbnRlcmNlcHRvcnMoZGF0YTIpIHtcbiAgbGV0IGlzT2JqZWN0MiA9ICh2YWwpID0+IHR5cGVvZiB2YWwgPT09IFwib2JqZWN0XCIgJiYgIUFycmF5LmlzQXJyYXkodmFsKSAmJiB2YWwgIT09IG51bGw7XG4gIGxldCByZWN1cnNlID0gKG9iaiwgYmFzZVBhdGggPSBcIlwiKSA9PiB7XG4gICAgT2JqZWN0LmVudHJpZXMoT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMob2JqKSkuZm9yRWFjaCgoW2tleSwgeyB2YWx1ZSwgZW51bWVyYWJsZSB9XSkgPT4ge1xuICAgICAgaWYgKGVudW1lcmFibGUgPT09IGZhbHNlIHx8IHZhbHVlID09PSB2b2lkIDApXG4gICAgICAgIHJldHVybjtcbiAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09IFwib2JqZWN0XCIgJiYgdmFsdWUgIT09IG51bGwgJiYgdmFsdWUuX192X3NraXApXG4gICAgICAgIHJldHVybjtcbiAgICAgIGxldCBwYXRoID0gYmFzZVBhdGggPT09IFwiXCIgPyBrZXkgOiBgJHtiYXNlUGF0aH0uJHtrZXl9YDtcbiAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09IFwib2JqZWN0XCIgJiYgdmFsdWUgIT09IG51bGwgJiYgdmFsdWUuX3hfaW50ZXJjZXB0b3IpIHtcbiAgICAgICAgb2JqW2tleV0gPSB2YWx1ZS5pbml0aWFsaXplKGRhdGEyLCBwYXRoLCBrZXkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGlzT2JqZWN0Mih2YWx1ZSkgJiYgdmFsdWUgIT09IG9iaiAmJiAhKHZhbHVlIGluc3RhbmNlb2YgRWxlbWVudCkpIHtcbiAgICAgICAgICByZWN1cnNlKHZhbHVlLCBwYXRoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICB9O1xuICByZXR1cm4gcmVjdXJzZShkYXRhMik7XG59XG5mdW5jdGlvbiBpbnRlcmNlcHRvcihjYWxsYmFjaywgbXV0YXRlT2JqID0gKCkgPT4ge1xufSkge1xuICBsZXQgb2JqID0ge1xuICAgIGluaXRpYWxWYWx1ZTogdm9pZCAwLFxuICAgIF94X2ludGVyY2VwdG9yOiB0cnVlLFxuICAgIGluaXRpYWxpemUoZGF0YTIsIHBhdGgsIGtleSkge1xuICAgICAgcmV0dXJuIGNhbGxiYWNrKHRoaXMuaW5pdGlhbFZhbHVlLCAoKSA9PiBnZXQoZGF0YTIsIHBhdGgpLCAodmFsdWUpID0+IHNldChkYXRhMiwgcGF0aCwgdmFsdWUpLCBwYXRoLCBrZXkpO1xuICAgIH1cbiAgfTtcbiAgbXV0YXRlT2JqKG9iaik7XG4gIHJldHVybiAoaW5pdGlhbFZhbHVlKSA9PiB7XG4gICAgaWYgKHR5cGVvZiBpbml0aWFsVmFsdWUgPT09IFwib2JqZWN0XCIgJiYgaW5pdGlhbFZhbHVlICE9PSBudWxsICYmIGluaXRpYWxWYWx1ZS5feF9pbnRlcmNlcHRvcikge1xuICAgICAgbGV0IGluaXRpYWxpemUgPSBvYmouaW5pdGlhbGl6ZS5iaW5kKG9iaik7XG4gICAgICBvYmouaW5pdGlhbGl6ZSA9IChkYXRhMiwgcGF0aCwga2V5KSA9PiB7XG4gICAgICAgIGxldCBpbm5lclZhbHVlID0gaW5pdGlhbFZhbHVlLmluaXRpYWxpemUoZGF0YTIsIHBhdGgsIGtleSk7XG4gICAgICAgIG9iai5pbml0aWFsVmFsdWUgPSBpbm5lclZhbHVlO1xuICAgICAgICByZXR1cm4gaW5pdGlhbGl6ZShkYXRhMiwgcGF0aCwga2V5KTtcbiAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgIG9iai5pbml0aWFsVmFsdWUgPSBpbml0aWFsVmFsdWU7XG4gICAgfVxuICAgIHJldHVybiBvYmo7XG4gIH07XG59XG5mdW5jdGlvbiBnZXQob2JqLCBwYXRoKSB7XG4gIHJldHVybiBwYXRoLnNwbGl0KFwiLlwiKS5yZWR1Y2UoKGNhcnJ5LCBzZWdtZW50KSA9PiBjYXJyeVtzZWdtZW50XSwgb2JqKTtcbn1cbmZ1bmN0aW9uIHNldChvYmosIHBhdGgsIHZhbHVlKSB7XG4gIGlmICh0eXBlb2YgcGF0aCA9PT0gXCJzdHJpbmdcIilcbiAgICBwYXRoID0gcGF0aC5zcGxpdChcIi5cIik7XG4gIGlmIChwYXRoLmxlbmd0aCA9PT0gMSlcbiAgICBvYmpbcGF0aFswXV0gPSB2YWx1ZTtcbiAgZWxzZSBpZiAocGF0aC5sZW5ndGggPT09IDApXG4gICAgdGhyb3cgZXJyb3I7XG4gIGVsc2Uge1xuICAgIGlmIChvYmpbcGF0aFswXV0pXG4gICAgICByZXR1cm4gc2V0KG9ialtwYXRoWzBdXSwgcGF0aC5zbGljZSgxKSwgdmFsdWUpO1xuICAgIGVsc2Uge1xuICAgICAgb2JqW3BhdGhbMF1dID0ge307XG4gICAgICByZXR1cm4gc2V0KG9ialtwYXRoWzBdXSwgcGF0aC5zbGljZSgxKSwgdmFsdWUpO1xuICAgIH1cbiAgfVxufVxuXG4vLyBwYWNrYWdlcy9hbHBpbmVqcy9zcmMvbWFnaWNzLmpzXG52YXIgbWFnaWNzID0ge307XG5mdW5jdGlvbiBtYWdpYyhuYW1lLCBjYWxsYmFjaykge1xuICBtYWdpY3NbbmFtZV0gPSBjYWxsYmFjaztcbn1cbmZ1bmN0aW9uIGluamVjdE1hZ2ljcyhvYmosIGVsKSB7XG4gIE9iamVjdC5lbnRyaWVzKG1hZ2ljcykuZm9yRWFjaCgoW25hbWUsIGNhbGxiYWNrXSkgPT4ge1xuICAgIGxldCBtZW1vaXplZFV0aWxpdGllcyA9IG51bGw7XG4gICAgZnVuY3Rpb24gZ2V0VXRpbGl0aWVzKCkge1xuICAgICAgaWYgKG1lbW9pemVkVXRpbGl0aWVzKSB7XG4gICAgICAgIHJldHVybiBtZW1vaXplZFV0aWxpdGllcztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxldCBbdXRpbGl0aWVzLCBjbGVhbnVwMl0gPSBnZXRFbGVtZW50Qm91bmRVdGlsaXRpZXMoZWwpO1xuICAgICAgICBtZW1vaXplZFV0aWxpdGllcyA9IHsgaW50ZXJjZXB0b3IsIC4uLnV0aWxpdGllcyB9O1xuICAgICAgICBvbkVsUmVtb3ZlZChlbCwgY2xlYW51cDIpO1xuICAgICAgICByZXR1cm4gbWVtb2l6ZWRVdGlsaXRpZXM7XG4gICAgICB9XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGAkJHtuYW1lfWAsIHtcbiAgICAgIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIGNhbGxiYWNrKGVsLCBnZXRVdGlsaXRpZXMoKSk7XG4gICAgICB9LFxuICAgICAgZW51bWVyYWJsZTogZmFsc2VcbiAgICB9KTtcbiAgfSk7XG4gIHJldHVybiBvYmo7XG59XG5cbi8vIHBhY2thZ2VzL2FscGluZWpzL3NyYy91dGlscy9lcnJvci5qc1xuZnVuY3Rpb24gdHJ5Q2F0Y2goZWwsIGV4cHJlc3Npb24sIGNhbGxiYWNrLCAuLi5hcmdzKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGNhbGxiYWNrKC4uLmFyZ3MpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgaGFuZGxlRXJyb3IoZSwgZWwsIGV4cHJlc3Npb24pO1xuICB9XG59XG5mdW5jdGlvbiBoYW5kbGVFcnJvcihlcnJvcjIsIGVsLCBleHByZXNzaW9uID0gdm9pZCAwKSB7XG4gIGVycm9yMiA9IE9iamVjdC5hc3NpZ24oXG4gICAgZXJyb3IyID8/IHsgbWVzc2FnZTogXCJObyBlcnJvciBtZXNzYWdlIGdpdmVuLlwiIH0sXG4gICAgeyBlbCwgZXhwcmVzc2lvbiB9XG4gICk7XG4gIGNvbnNvbGUud2FybihgQWxwaW5lIEV4cHJlc3Npb24gRXJyb3I6ICR7ZXJyb3IyLm1lc3NhZ2V9XG5cbiR7ZXhwcmVzc2lvbiA/ICdFeHByZXNzaW9uOiBcIicgKyBleHByZXNzaW9uICsgJ1wiXFxuXFxuJyA6IFwiXCJ9YCwgZWwpO1xuICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICB0aHJvdyBlcnJvcjI7XG4gIH0sIDApO1xufVxuXG4vLyBwYWNrYWdlcy9hbHBpbmVqcy9zcmMvZXZhbHVhdG9yLmpzXG52YXIgc2hvdWxkQXV0b0V2YWx1YXRlRnVuY3Rpb25zID0gdHJ1ZTtcbmZ1bmN0aW9uIGRvbnRBdXRvRXZhbHVhdGVGdW5jdGlvbnMoY2FsbGJhY2spIHtcbiAgbGV0IGNhY2hlID0gc2hvdWxkQXV0b0V2YWx1YXRlRnVuY3Rpb25zO1xuICBzaG91bGRBdXRvRXZhbHVhdGVGdW5jdGlvbnMgPSBmYWxzZTtcbiAgbGV0IHJlc3VsdCA9IGNhbGxiYWNrKCk7XG4gIHNob3VsZEF1dG9FdmFsdWF0ZUZ1bmN0aW9ucyA9IGNhY2hlO1xuICByZXR1cm4gcmVzdWx0O1xufVxuZnVuY3Rpb24gZXZhbHVhdGUoZWwsIGV4cHJlc3Npb24sIGV4dHJhcyA9IHt9KSB7XG4gIGxldCByZXN1bHQ7XG4gIGV2YWx1YXRlTGF0ZXIoZWwsIGV4cHJlc3Npb24pKCh2YWx1ZSkgPT4gcmVzdWx0ID0gdmFsdWUsIGV4dHJhcyk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5mdW5jdGlvbiBldmFsdWF0ZUxhdGVyKC4uLmFyZ3MpIHtcbiAgcmV0dXJuIHRoZUV2YWx1YXRvckZ1bmN0aW9uKC4uLmFyZ3MpO1xufVxudmFyIHRoZUV2YWx1YXRvckZ1bmN0aW9uID0gbm9ybWFsRXZhbHVhdG9yO1xuZnVuY3Rpb24gc2V0RXZhbHVhdG9yKG5ld0V2YWx1YXRvcikge1xuICB0aGVFdmFsdWF0b3JGdW5jdGlvbiA9IG5ld0V2YWx1YXRvcjtcbn1cbmZ1bmN0aW9uIG5vcm1hbEV2YWx1YXRvcihlbCwgZXhwcmVzc2lvbikge1xuICBsZXQgb3ZlcnJpZGRlbk1hZ2ljcyA9IHt9O1xuICBpbmplY3RNYWdpY3Mob3ZlcnJpZGRlbk1hZ2ljcywgZWwpO1xuICBsZXQgZGF0YVN0YWNrID0gW292ZXJyaWRkZW5NYWdpY3MsIC4uLmNsb3Nlc3REYXRhU3RhY2soZWwpXTtcbiAgbGV0IGV2YWx1YXRvciA9IHR5cGVvZiBleHByZXNzaW9uID09PSBcImZ1bmN0aW9uXCIgPyBnZW5lcmF0ZUV2YWx1YXRvckZyb21GdW5jdGlvbihkYXRhU3RhY2ssIGV4cHJlc3Npb24pIDogZ2VuZXJhdGVFdmFsdWF0b3JGcm9tU3RyaW5nKGRhdGFTdGFjaywgZXhwcmVzc2lvbiwgZWwpO1xuICByZXR1cm4gdHJ5Q2F0Y2guYmluZChudWxsLCBlbCwgZXhwcmVzc2lvbiwgZXZhbHVhdG9yKTtcbn1cbmZ1bmN0aW9uIGdlbmVyYXRlRXZhbHVhdG9yRnJvbUZ1bmN0aW9uKGRhdGFTdGFjaywgZnVuYykge1xuICByZXR1cm4gKHJlY2VpdmVyID0gKCkgPT4ge1xuICB9LCB7IHNjb3BlOiBzY29wZTIgPSB7fSwgcGFyYW1zID0gW10gfSA9IHt9KSA9PiB7XG4gICAgbGV0IHJlc3VsdCA9IGZ1bmMuYXBwbHkobWVyZ2VQcm94aWVzKFtzY29wZTIsIC4uLmRhdGFTdGFja10pLCBwYXJhbXMpO1xuICAgIHJ1bklmVHlwZU9mRnVuY3Rpb24ocmVjZWl2ZXIsIHJlc3VsdCk7XG4gIH07XG59XG52YXIgZXZhbHVhdG9yTWVtbyA9IHt9O1xuZnVuY3Rpb24gZ2VuZXJhdGVGdW5jdGlvbkZyb21TdHJpbmcoZXhwcmVzc2lvbiwgZWwpIHtcbiAgaWYgKGV2YWx1YXRvck1lbW9bZXhwcmVzc2lvbl0pIHtcbiAgICByZXR1cm4gZXZhbHVhdG9yTWVtb1tleHByZXNzaW9uXTtcbiAgfVxuICBsZXQgQXN5bmNGdW5jdGlvbiA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihhc3luYyBmdW5jdGlvbigpIHtcbiAgfSkuY29uc3RydWN0b3I7XG4gIGxldCByaWdodFNpZGVTYWZlRXhwcmVzc2lvbiA9IC9eW1xcblxcc10qaWYuKlxcKC4qXFwpLy50ZXN0KGV4cHJlc3Npb24udHJpbSgpKSB8fCAvXihsZXR8Y29uc3QpXFxzLy50ZXN0KGV4cHJlc3Npb24udHJpbSgpKSA/IGAoYXN5bmMoKT0+eyAke2V4cHJlc3Npb259IH0pKClgIDogZXhwcmVzc2lvbjtcbiAgY29uc3Qgc2FmZUFzeW5jRnVuY3Rpb24gPSAoKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGxldCBmdW5jMiA9IG5ldyBBc3luY0Z1bmN0aW9uKFxuICAgICAgICBbXCJfX3NlbGZcIiwgXCJzY29wZVwiXSxcbiAgICAgICAgYHdpdGggKHNjb3BlKSB7IF9fc2VsZi5yZXN1bHQgPSAke3JpZ2h0U2lkZVNhZmVFeHByZXNzaW9ufSB9OyBfX3NlbGYuZmluaXNoZWQgPSB0cnVlOyByZXR1cm4gX19zZWxmLnJlc3VsdDtgXG4gICAgICApO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGZ1bmMyLCBcIm5hbWVcIiwge1xuICAgICAgICB2YWx1ZTogYFtBbHBpbmVdICR7ZXhwcmVzc2lvbn1gXG4gICAgICB9KTtcbiAgICAgIHJldHVybiBmdW5jMjtcbiAgICB9IGNhdGNoIChlcnJvcjIpIHtcbiAgICAgIGhhbmRsZUVycm9yKGVycm9yMiwgZWwsIGV4cHJlc3Npb24pO1xuICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuICAgIH1cbiAgfTtcbiAgbGV0IGZ1bmMgPSBzYWZlQXN5bmNGdW5jdGlvbigpO1xuICBldmFsdWF0b3JNZW1vW2V4cHJlc3Npb25dID0gZnVuYztcbiAgcmV0dXJuIGZ1bmM7XG59XG5mdW5jdGlvbiBnZW5lcmF0ZUV2YWx1YXRvckZyb21TdHJpbmcoZGF0YVN0YWNrLCBleHByZXNzaW9uLCBlbCkge1xuICBsZXQgZnVuYyA9IGdlbmVyYXRlRnVuY3Rpb25Gcm9tU3RyaW5nKGV4cHJlc3Npb24sIGVsKTtcbiAgcmV0dXJuIChyZWNlaXZlciA9ICgpID0+IHtcbiAgfSwgeyBzY29wZTogc2NvcGUyID0ge30sIHBhcmFtcyA9IFtdIH0gPSB7fSkgPT4ge1xuICAgIGZ1bmMucmVzdWx0ID0gdm9pZCAwO1xuICAgIGZ1bmMuZmluaXNoZWQgPSBmYWxzZTtcbiAgICBsZXQgY29tcGxldGVTY29wZSA9IG1lcmdlUHJveGllcyhbc2NvcGUyLCAuLi5kYXRhU3RhY2tdKTtcbiAgICBpZiAodHlwZW9mIGZ1bmMgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgbGV0IHByb21pc2UgPSBmdW5jKGZ1bmMsIGNvbXBsZXRlU2NvcGUpLmNhdGNoKChlcnJvcjIpID0+IGhhbmRsZUVycm9yKGVycm9yMiwgZWwsIGV4cHJlc3Npb24pKTtcbiAgICAgIGlmIChmdW5jLmZpbmlzaGVkKSB7XG4gICAgICAgIHJ1bklmVHlwZU9mRnVuY3Rpb24ocmVjZWl2ZXIsIGZ1bmMucmVzdWx0LCBjb21wbGV0ZVNjb3BlLCBwYXJhbXMsIGVsKTtcbiAgICAgICAgZnVuYy5yZXN1bHQgPSB2b2lkIDA7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwcm9taXNlLnRoZW4oKHJlc3VsdCkgPT4ge1xuICAgICAgICAgIHJ1bklmVHlwZU9mRnVuY3Rpb24ocmVjZWl2ZXIsIHJlc3VsdCwgY29tcGxldGVTY29wZSwgcGFyYW1zLCBlbCk7XG4gICAgICAgIH0pLmNhdGNoKChlcnJvcjIpID0+IGhhbmRsZUVycm9yKGVycm9yMiwgZWwsIGV4cHJlc3Npb24pKS5maW5hbGx5KCgpID0+IGZ1bmMucmVzdWx0ID0gdm9pZCAwKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG59XG5mdW5jdGlvbiBydW5JZlR5cGVPZkZ1bmN0aW9uKHJlY2VpdmVyLCB2YWx1ZSwgc2NvcGUyLCBwYXJhbXMsIGVsKSB7XG4gIGlmIChzaG91bGRBdXRvRXZhbHVhdGVGdW5jdGlvbnMgJiYgdHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICBsZXQgcmVzdWx0ID0gdmFsdWUuYXBwbHkoc2NvcGUyLCBwYXJhbXMpO1xuICAgIGlmIChyZXN1bHQgaW5zdGFuY2VvZiBQcm9taXNlKSB7XG4gICAgICByZXN1bHQudGhlbigoaSkgPT4gcnVuSWZUeXBlT2ZGdW5jdGlvbihyZWNlaXZlciwgaSwgc2NvcGUyLCBwYXJhbXMpKS5jYXRjaCgoZXJyb3IyKSA9PiBoYW5kbGVFcnJvcihlcnJvcjIsIGVsLCB2YWx1ZSkpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZWNlaXZlcihyZXN1bHQpO1xuICAgIH1cbiAgfSBlbHNlIGlmICh0eXBlb2YgdmFsdWUgPT09IFwib2JqZWN0XCIgJiYgdmFsdWUgaW5zdGFuY2VvZiBQcm9taXNlKSB7XG4gICAgdmFsdWUudGhlbigoaSkgPT4gcmVjZWl2ZXIoaSkpO1xuICB9IGVsc2Uge1xuICAgIHJlY2VpdmVyKHZhbHVlKTtcbiAgfVxufVxuXG4vLyBwYWNrYWdlcy9hbHBpbmVqcy9zcmMvZGlyZWN0aXZlcy5qc1xudmFyIHByZWZpeEFzU3RyaW5nID0gXCJ4LVwiO1xuZnVuY3Rpb24gcHJlZml4KHN1YmplY3QgPSBcIlwiKSB7XG4gIHJldHVybiBwcmVmaXhBc1N0cmluZyArIHN1YmplY3Q7XG59XG5mdW5jdGlvbiBzZXRQcmVmaXgobmV3UHJlZml4KSB7XG4gIHByZWZpeEFzU3RyaW5nID0gbmV3UHJlZml4O1xufVxudmFyIGRpcmVjdGl2ZUhhbmRsZXJzID0ge307XG5mdW5jdGlvbiBkaXJlY3RpdmUobmFtZSwgY2FsbGJhY2spIHtcbiAgZGlyZWN0aXZlSGFuZGxlcnNbbmFtZV0gPSBjYWxsYmFjaztcbiAgcmV0dXJuIHtcbiAgICBiZWZvcmUoZGlyZWN0aXZlMikge1xuICAgICAgaWYgKCFkaXJlY3RpdmVIYW5kbGVyc1tkaXJlY3RpdmUyXSkge1xuICAgICAgICBjb25zb2xlLndhcm4oU3RyaW5nLnJhd2BDYW5ub3QgZmluZCBkaXJlY3RpdmUgXFxgJHtkaXJlY3RpdmUyfVxcYC4gXFxgJHtuYW1lfVxcYCB3aWxsIHVzZSB0aGUgZGVmYXVsdCBvcmRlciBvZiBleGVjdXRpb25gKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgY29uc3QgcG9zID0gZGlyZWN0aXZlT3JkZXIuaW5kZXhPZihkaXJlY3RpdmUyKTtcbiAgICAgIGRpcmVjdGl2ZU9yZGVyLnNwbGljZShwb3MgPj0gMCA/IHBvcyA6IGRpcmVjdGl2ZU9yZGVyLmluZGV4T2YoXCJERUZBVUxUXCIpLCAwLCBuYW1lKTtcbiAgICB9XG4gIH07XG59XG5mdW5jdGlvbiBkaXJlY3RpdmVFeGlzdHMobmFtZSkge1xuICByZXR1cm4gT2JqZWN0LmtleXMoZGlyZWN0aXZlSGFuZGxlcnMpLmluY2x1ZGVzKG5hbWUpO1xufVxuZnVuY3Rpb24gZGlyZWN0aXZlcyhlbCwgYXR0cmlidXRlcywgb3JpZ2luYWxBdHRyaWJ1dGVPdmVycmlkZSkge1xuICBhdHRyaWJ1dGVzID0gQXJyYXkuZnJvbShhdHRyaWJ1dGVzKTtcbiAgaWYgKGVsLl94X3ZpcnR1YWxEaXJlY3RpdmVzKSB7XG4gICAgbGV0IHZBdHRyaWJ1dGVzID0gT2JqZWN0LmVudHJpZXMoZWwuX3hfdmlydHVhbERpcmVjdGl2ZXMpLm1hcCgoW25hbWUsIHZhbHVlXSkgPT4gKHsgbmFtZSwgdmFsdWUgfSkpO1xuICAgIGxldCBzdGF0aWNBdHRyaWJ1dGVzID0gYXR0cmlidXRlc09ubHkodkF0dHJpYnV0ZXMpO1xuICAgIHZBdHRyaWJ1dGVzID0gdkF0dHJpYnV0ZXMubWFwKChhdHRyaWJ1dGUpID0+IHtcbiAgICAgIGlmIChzdGF0aWNBdHRyaWJ1dGVzLmZpbmQoKGF0dHIpID0+IGF0dHIubmFtZSA9PT0gYXR0cmlidXRlLm5hbWUpKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgbmFtZTogYHgtYmluZDoke2F0dHJpYnV0ZS5uYW1lfWAsXG4gICAgICAgICAgdmFsdWU6IGBcIiR7YXR0cmlidXRlLnZhbHVlfVwiYFxuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgcmV0dXJuIGF0dHJpYnV0ZTtcbiAgICB9KTtcbiAgICBhdHRyaWJ1dGVzID0gYXR0cmlidXRlcy5jb25jYXQodkF0dHJpYnV0ZXMpO1xuICB9XG4gIGxldCB0cmFuc2Zvcm1lZEF0dHJpYnV0ZU1hcCA9IHt9O1xuICBsZXQgZGlyZWN0aXZlczIgPSBhdHRyaWJ1dGVzLm1hcCh0b1RyYW5zZm9ybWVkQXR0cmlidXRlcygobmV3TmFtZSwgb2xkTmFtZSkgPT4gdHJhbnNmb3JtZWRBdHRyaWJ1dGVNYXBbbmV3TmFtZV0gPSBvbGROYW1lKSkuZmlsdGVyKG91dE5vbkFscGluZUF0dHJpYnV0ZXMpLm1hcCh0b1BhcnNlZERpcmVjdGl2ZXModHJhbnNmb3JtZWRBdHRyaWJ1dGVNYXAsIG9yaWdpbmFsQXR0cmlidXRlT3ZlcnJpZGUpKS5zb3J0KGJ5UHJpb3JpdHkpO1xuICByZXR1cm4gZGlyZWN0aXZlczIubWFwKChkaXJlY3RpdmUyKSA9PiB7XG4gICAgcmV0dXJuIGdldERpcmVjdGl2ZUhhbmRsZXIoZWwsIGRpcmVjdGl2ZTIpO1xuICB9KTtcbn1cbmZ1bmN0aW9uIGF0dHJpYnV0ZXNPbmx5KGF0dHJpYnV0ZXMpIHtcbiAgcmV0dXJuIEFycmF5LmZyb20oYXR0cmlidXRlcykubWFwKHRvVHJhbnNmb3JtZWRBdHRyaWJ1dGVzKCkpLmZpbHRlcigoYXR0cikgPT4gIW91dE5vbkFscGluZUF0dHJpYnV0ZXMoYXR0cikpO1xufVxudmFyIGlzRGVmZXJyaW5nSGFuZGxlcnMgPSBmYWxzZTtcbnZhciBkaXJlY3RpdmVIYW5kbGVyU3RhY2tzID0gLyogQF9fUFVSRV9fICovIG5ldyBNYXAoKTtcbnZhciBjdXJyZW50SGFuZGxlclN0YWNrS2V5ID0gU3ltYm9sKCk7XG5mdW5jdGlvbiBkZWZlckhhbmRsaW5nRGlyZWN0aXZlcyhjYWxsYmFjaykge1xuICBpc0RlZmVycmluZ0hhbmRsZXJzID0gdHJ1ZTtcbiAgbGV0IGtleSA9IFN5bWJvbCgpO1xuICBjdXJyZW50SGFuZGxlclN0YWNrS2V5ID0ga2V5O1xuICBkaXJlY3RpdmVIYW5kbGVyU3RhY2tzLnNldChrZXksIFtdKTtcbiAgbGV0IGZsdXNoSGFuZGxlcnMgPSAoKSA9PiB7XG4gICAgd2hpbGUgKGRpcmVjdGl2ZUhhbmRsZXJTdGFja3MuZ2V0KGtleSkubGVuZ3RoKVxuICAgICAgZGlyZWN0aXZlSGFuZGxlclN0YWNrcy5nZXQoa2V5KS5zaGlmdCgpKCk7XG4gICAgZGlyZWN0aXZlSGFuZGxlclN0YWNrcy5kZWxldGUoa2V5KTtcbiAgfTtcbiAgbGV0IHN0b3BEZWZlcnJpbmcgPSAoKSA9PiB7XG4gICAgaXNEZWZlcnJpbmdIYW5kbGVycyA9IGZhbHNlO1xuICAgIGZsdXNoSGFuZGxlcnMoKTtcbiAgfTtcbiAgY2FsbGJhY2soZmx1c2hIYW5kbGVycyk7XG4gIHN0b3BEZWZlcnJpbmcoKTtcbn1cbmZ1bmN0aW9uIGdldEVsZW1lbnRCb3VuZFV0aWxpdGllcyhlbCkge1xuICBsZXQgY2xlYW51cHMgPSBbXTtcbiAgbGV0IGNsZWFudXAyID0gKGNhbGxiYWNrKSA9PiBjbGVhbnVwcy5wdXNoKGNhbGxiYWNrKTtcbiAgbGV0IFtlZmZlY3QzLCBjbGVhbnVwRWZmZWN0XSA9IGVsZW1lbnRCb3VuZEVmZmVjdChlbCk7XG4gIGNsZWFudXBzLnB1c2goY2xlYW51cEVmZmVjdCk7XG4gIGxldCB1dGlsaXRpZXMgPSB7XG4gICAgQWxwaW5lOiBhbHBpbmVfZGVmYXVsdCxcbiAgICBlZmZlY3Q6IGVmZmVjdDMsXG4gICAgY2xlYW51cDogY2xlYW51cDIsXG4gICAgZXZhbHVhdGVMYXRlcjogZXZhbHVhdGVMYXRlci5iaW5kKGV2YWx1YXRlTGF0ZXIsIGVsKSxcbiAgICBldmFsdWF0ZTogZXZhbHVhdGUuYmluZChldmFsdWF0ZSwgZWwpXG4gIH07XG4gIGxldCBkb0NsZWFudXAgPSAoKSA9PiBjbGVhbnVwcy5mb3JFYWNoKChpKSA9PiBpKCkpO1xuICByZXR1cm4gW3V0aWxpdGllcywgZG9DbGVhbnVwXTtcbn1cbmZ1bmN0aW9uIGdldERpcmVjdGl2ZUhhbmRsZXIoZWwsIGRpcmVjdGl2ZTIpIHtcbiAgbGV0IG5vb3AgPSAoKSA9PiB7XG4gIH07XG4gIGxldCBoYW5kbGVyNCA9IGRpcmVjdGl2ZUhhbmRsZXJzW2RpcmVjdGl2ZTIudHlwZV0gfHwgbm9vcDtcbiAgbGV0IFt1dGlsaXRpZXMsIGNsZWFudXAyXSA9IGdldEVsZW1lbnRCb3VuZFV0aWxpdGllcyhlbCk7XG4gIG9uQXR0cmlidXRlUmVtb3ZlZChlbCwgZGlyZWN0aXZlMi5vcmlnaW5hbCwgY2xlYW51cDIpO1xuICBsZXQgZnVsbEhhbmRsZXIgPSAoKSA9PiB7XG4gICAgaWYgKGVsLl94X2lnbm9yZSB8fCBlbC5feF9pZ25vcmVTZWxmKVxuICAgICAgcmV0dXJuO1xuICAgIGhhbmRsZXI0LmlubGluZSAmJiBoYW5kbGVyNC5pbmxpbmUoZWwsIGRpcmVjdGl2ZTIsIHV0aWxpdGllcyk7XG4gICAgaGFuZGxlcjQgPSBoYW5kbGVyNC5iaW5kKGhhbmRsZXI0LCBlbCwgZGlyZWN0aXZlMiwgdXRpbGl0aWVzKTtcbiAgICBpc0RlZmVycmluZ0hhbmRsZXJzID8gZGlyZWN0aXZlSGFuZGxlclN0YWNrcy5nZXQoY3VycmVudEhhbmRsZXJTdGFja0tleSkucHVzaChoYW5kbGVyNCkgOiBoYW5kbGVyNCgpO1xuICB9O1xuICBmdWxsSGFuZGxlci5ydW5DbGVhbnVwcyA9IGNsZWFudXAyO1xuICByZXR1cm4gZnVsbEhhbmRsZXI7XG59XG52YXIgc3RhcnRpbmdXaXRoID0gKHN1YmplY3QsIHJlcGxhY2VtZW50KSA9PiAoeyBuYW1lLCB2YWx1ZSB9KSA9PiB7XG4gIGlmIChuYW1lLnN0YXJ0c1dpdGgoc3ViamVjdCkpXG4gICAgbmFtZSA9IG5hbWUucmVwbGFjZShzdWJqZWN0LCByZXBsYWNlbWVudCk7XG4gIHJldHVybiB7IG5hbWUsIHZhbHVlIH07XG59O1xudmFyIGludG8gPSAoaSkgPT4gaTtcbmZ1bmN0aW9uIHRvVHJhbnNmb3JtZWRBdHRyaWJ1dGVzKGNhbGxiYWNrID0gKCkgPT4ge1xufSkge1xuICByZXR1cm4gKHsgbmFtZSwgdmFsdWUgfSkgPT4ge1xuICAgIGxldCB7IG5hbWU6IG5ld05hbWUsIHZhbHVlOiBuZXdWYWx1ZSB9ID0gYXR0cmlidXRlVHJhbnNmb3JtZXJzLnJlZHVjZSgoY2FycnksIHRyYW5zZm9ybSkgPT4ge1xuICAgICAgcmV0dXJuIHRyYW5zZm9ybShjYXJyeSk7XG4gICAgfSwgeyBuYW1lLCB2YWx1ZSB9KTtcbiAgICBpZiAobmV3TmFtZSAhPT0gbmFtZSlcbiAgICAgIGNhbGxiYWNrKG5ld05hbWUsIG5hbWUpO1xuICAgIHJldHVybiB7IG5hbWU6IG5ld05hbWUsIHZhbHVlOiBuZXdWYWx1ZSB9O1xuICB9O1xufVxudmFyIGF0dHJpYnV0ZVRyYW5zZm9ybWVycyA9IFtdO1xuZnVuY3Rpb24gbWFwQXR0cmlidXRlcyhjYWxsYmFjaykge1xuICBhdHRyaWJ1dGVUcmFuc2Zvcm1lcnMucHVzaChjYWxsYmFjayk7XG59XG5mdW5jdGlvbiBvdXROb25BbHBpbmVBdHRyaWJ1dGVzKHsgbmFtZSB9KSB7XG4gIHJldHVybiBhbHBpbmVBdHRyaWJ1dGVSZWdleCgpLnRlc3QobmFtZSk7XG59XG52YXIgYWxwaW5lQXR0cmlidXRlUmVnZXggPSAoKSA9PiBuZXcgUmVnRXhwKGBeJHtwcmVmaXhBc1N0cmluZ30oW146Xi5dKylcXFxcYmApO1xuZnVuY3Rpb24gdG9QYXJzZWREaXJlY3RpdmVzKHRyYW5zZm9ybWVkQXR0cmlidXRlTWFwLCBvcmlnaW5hbEF0dHJpYnV0ZU92ZXJyaWRlKSB7XG4gIHJldHVybiAoeyBuYW1lLCB2YWx1ZSB9KSA9PiB7XG4gICAgbGV0IHR5cGVNYXRjaCA9IG5hbWUubWF0Y2goYWxwaW5lQXR0cmlidXRlUmVnZXgoKSk7XG4gICAgbGV0IHZhbHVlTWF0Y2ggPSBuYW1lLm1hdGNoKC86KFthLXpBLVowLTlcXC1fOl0rKS8pO1xuICAgIGxldCBtb2RpZmllcnMgPSBuYW1lLm1hdGNoKC9cXC5bXi5cXF1dKyg/PVteXFxdXSokKS9nKSB8fCBbXTtcbiAgICBsZXQgb3JpZ2luYWwgPSBvcmlnaW5hbEF0dHJpYnV0ZU92ZXJyaWRlIHx8IHRyYW5zZm9ybWVkQXR0cmlidXRlTWFwW25hbWVdIHx8IG5hbWU7XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6IHR5cGVNYXRjaCA/IHR5cGVNYXRjaFsxXSA6IG51bGwsXG4gICAgICB2YWx1ZTogdmFsdWVNYXRjaCA/IHZhbHVlTWF0Y2hbMV0gOiBudWxsLFxuICAgICAgbW9kaWZpZXJzOiBtb2RpZmllcnMubWFwKChpKSA9PiBpLnJlcGxhY2UoXCIuXCIsIFwiXCIpKSxcbiAgICAgIGV4cHJlc3Npb246IHZhbHVlLFxuICAgICAgb3JpZ2luYWxcbiAgICB9O1xuICB9O1xufVxudmFyIERFRkFVTFQgPSBcIkRFRkFVTFRcIjtcbnZhciBkaXJlY3RpdmVPcmRlciA9IFtcbiAgXCJpZ25vcmVcIixcbiAgXCJyZWZcIixcbiAgXCJkYXRhXCIsXG4gIFwiaWRcIixcbiAgXCJhbmNob3JcIixcbiAgXCJiaW5kXCIsXG4gIFwiaW5pdFwiLFxuICBcImZvclwiLFxuICBcIm1vZGVsXCIsXG4gIFwibW9kZWxhYmxlXCIsXG4gIFwidHJhbnNpdGlvblwiLFxuICBcInNob3dcIixcbiAgXCJpZlwiLFxuICBERUZBVUxULFxuICBcInRlbGVwb3J0XCJcbl07XG5mdW5jdGlvbiBieVByaW9yaXR5KGEsIGIpIHtcbiAgbGV0IHR5cGVBID0gZGlyZWN0aXZlT3JkZXIuaW5kZXhPZihhLnR5cGUpID09PSAtMSA/IERFRkFVTFQgOiBhLnR5cGU7XG4gIGxldCB0eXBlQiA9IGRpcmVjdGl2ZU9yZGVyLmluZGV4T2YoYi50eXBlKSA9PT0gLTEgPyBERUZBVUxUIDogYi50eXBlO1xuICByZXR1cm4gZGlyZWN0aXZlT3JkZXIuaW5kZXhPZih0eXBlQSkgLSBkaXJlY3RpdmVPcmRlci5pbmRleE9mKHR5cGVCKTtcbn1cblxuLy8gcGFja2FnZXMvYWxwaW5lanMvc3JjL3V0aWxzL2Rpc3BhdGNoLmpzXG5mdW5jdGlvbiBkaXNwYXRjaChlbCwgbmFtZSwgZGV0YWlsID0ge30pIHtcbiAgZWwuZGlzcGF0Y2hFdmVudChcbiAgICBuZXcgQ3VzdG9tRXZlbnQobmFtZSwge1xuICAgICAgZGV0YWlsLFxuICAgICAgYnViYmxlczogdHJ1ZSxcbiAgICAgIC8vIEFsbG93cyBldmVudHMgdG8gcGFzcyB0aGUgc2hhZG93IERPTSBiYXJyaWVyLlxuICAgICAgY29tcG9zZWQ6IHRydWUsXG4gICAgICBjYW5jZWxhYmxlOiB0cnVlXG4gICAgfSlcbiAgKTtcbn1cblxuLy8gcGFja2FnZXMvYWxwaW5lanMvc3JjL3V0aWxzL3dhbGsuanNcbmZ1bmN0aW9uIHdhbGsoZWwsIGNhbGxiYWNrKSB7XG4gIGlmICh0eXBlb2YgU2hhZG93Um9vdCA9PT0gXCJmdW5jdGlvblwiICYmIGVsIGluc3RhbmNlb2YgU2hhZG93Um9vdCkge1xuICAgIEFycmF5LmZyb20oZWwuY2hpbGRyZW4pLmZvckVhY2goKGVsMikgPT4gd2FsayhlbDIsIGNhbGxiYWNrKSk7XG4gICAgcmV0dXJuO1xuICB9XG4gIGxldCBza2lwID0gZmFsc2U7XG4gIGNhbGxiYWNrKGVsLCAoKSA9PiBza2lwID0gdHJ1ZSk7XG4gIGlmIChza2lwKVxuICAgIHJldHVybjtcbiAgbGV0IG5vZGUgPSBlbC5maXJzdEVsZW1lbnRDaGlsZDtcbiAgd2hpbGUgKG5vZGUpIHtcbiAgICB3YWxrKG5vZGUsIGNhbGxiYWNrLCBmYWxzZSk7XG4gICAgbm9kZSA9IG5vZGUubmV4dEVsZW1lbnRTaWJsaW5nO1xuICB9XG59XG5cbi8vIHBhY2thZ2VzL2FscGluZWpzL3NyYy91dGlscy93YXJuLmpzXG5mdW5jdGlvbiB3YXJuKG1lc3NhZ2UsIC4uLmFyZ3MpIHtcbiAgY29uc29sZS53YXJuKGBBbHBpbmUgV2FybmluZzogJHttZXNzYWdlfWAsIC4uLmFyZ3MpO1xufVxuXG4vLyBwYWNrYWdlcy9hbHBpbmVqcy9zcmMvbGlmZWN5Y2xlLmpzXG52YXIgc3RhcnRlZCA9IGZhbHNlO1xuZnVuY3Rpb24gc3RhcnQoKSB7XG4gIGlmIChzdGFydGVkKVxuICAgIHdhcm4oXCJBbHBpbmUgaGFzIGFscmVhZHkgYmVlbiBpbml0aWFsaXplZCBvbiB0aGlzIHBhZ2UuIENhbGxpbmcgQWxwaW5lLnN0YXJ0KCkgbW9yZSB0aGFuIG9uY2UgY2FuIGNhdXNlIHByb2JsZW1zLlwiKTtcbiAgc3RhcnRlZCA9IHRydWU7XG4gIGlmICghZG9jdW1lbnQuYm9keSlcbiAgICB3YXJuKFwiVW5hYmxlIHRvIGluaXRpYWxpemUuIFRyeWluZyB0byBsb2FkIEFscGluZSBiZWZvcmUgYDxib2R5PmAgaXMgYXZhaWxhYmxlLiBEaWQgeW91IGZvcmdldCB0byBhZGQgYGRlZmVyYCBpbiBBbHBpbmUncyBgPHNjcmlwdD5gIHRhZz9cIik7XG4gIGRpc3BhdGNoKGRvY3VtZW50LCBcImFscGluZTppbml0XCIpO1xuICBkaXNwYXRjaChkb2N1bWVudCwgXCJhbHBpbmU6aW5pdGlhbGl6aW5nXCIpO1xuICBzdGFydE9ic2VydmluZ011dGF0aW9ucygpO1xuICBvbkVsQWRkZWQoKGVsKSA9PiBpbml0VHJlZShlbCwgd2FsaykpO1xuICBvbkVsUmVtb3ZlZCgoZWwpID0+IGRlc3Ryb3lUcmVlKGVsKSk7XG4gIG9uQXR0cmlidXRlc0FkZGVkKChlbCwgYXR0cnMpID0+IHtcbiAgICBkaXJlY3RpdmVzKGVsLCBhdHRycykuZm9yRWFjaCgoaGFuZGxlKSA9PiBoYW5kbGUoKSk7XG4gIH0pO1xuICBsZXQgb3V0TmVzdGVkQ29tcG9uZW50cyA9IChlbCkgPT4gIWNsb3Nlc3RSb290KGVsLnBhcmVudEVsZW1lbnQsIHRydWUpO1xuICBBcnJheS5mcm9tKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoYWxsU2VsZWN0b3JzKCkuam9pbihcIixcIikpKS5maWx0ZXIob3V0TmVzdGVkQ29tcG9uZW50cykuZm9yRWFjaCgoZWwpID0+IHtcbiAgICBpbml0VHJlZShlbCk7XG4gIH0pO1xuICBkaXNwYXRjaChkb2N1bWVudCwgXCJhbHBpbmU6aW5pdGlhbGl6ZWRcIik7XG4gIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgIHdhcm5BYm91dE1pc3NpbmdQbHVnaW5zKCk7XG4gIH0pO1xufVxudmFyIHJvb3RTZWxlY3RvckNhbGxiYWNrcyA9IFtdO1xudmFyIGluaXRTZWxlY3RvckNhbGxiYWNrcyA9IFtdO1xuZnVuY3Rpb24gcm9vdFNlbGVjdG9ycygpIHtcbiAgcmV0dXJuIHJvb3RTZWxlY3RvckNhbGxiYWNrcy5tYXAoKGZuKSA9PiBmbigpKTtcbn1cbmZ1bmN0aW9uIGFsbFNlbGVjdG9ycygpIHtcbiAgcmV0dXJuIHJvb3RTZWxlY3RvckNhbGxiYWNrcy5jb25jYXQoaW5pdFNlbGVjdG9yQ2FsbGJhY2tzKS5tYXAoKGZuKSA9PiBmbigpKTtcbn1cbmZ1bmN0aW9uIGFkZFJvb3RTZWxlY3RvcihzZWxlY3RvckNhbGxiYWNrKSB7XG4gIHJvb3RTZWxlY3RvckNhbGxiYWNrcy5wdXNoKHNlbGVjdG9yQ2FsbGJhY2spO1xufVxuZnVuY3Rpb24gYWRkSW5pdFNlbGVjdG9yKHNlbGVjdG9yQ2FsbGJhY2spIHtcbiAgaW5pdFNlbGVjdG9yQ2FsbGJhY2tzLnB1c2goc2VsZWN0b3JDYWxsYmFjayk7XG59XG5mdW5jdGlvbiBjbG9zZXN0Um9vdChlbCwgaW5jbHVkZUluaXRTZWxlY3RvcnMgPSBmYWxzZSkge1xuICByZXR1cm4gZmluZENsb3Nlc3QoZWwsIChlbGVtZW50KSA9PiB7XG4gICAgY29uc3Qgc2VsZWN0b3JzID0gaW5jbHVkZUluaXRTZWxlY3RvcnMgPyBhbGxTZWxlY3RvcnMoKSA6IHJvb3RTZWxlY3RvcnMoKTtcbiAgICBpZiAoc2VsZWN0b3JzLnNvbWUoKHNlbGVjdG9yKSA9PiBlbGVtZW50Lm1hdGNoZXMoc2VsZWN0b3IpKSlcbiAgICAgIHJldHVybiB0cnVlO1xuICB9KTtcbn1cbmZ1bmN0aW9uIGZpbmRDbG9zZXN0KGVsLCBjYWxsYmFjaykge1xuICBpZiAoIWVsKVxuICAgIHJldHVybjtcbiAgaWYgKGNhbGxiYWNrKGVsKSlcbiAgICByZXR1cm4gZWw7XG4gIGlmIChlbC5feF90ZWxlcG9ydEJhY2spXG4gICAgZWwgPSBlbC5feF90ZWxlcG9ydEJhY2s7XG4gIGlmICghZWwucGFyZW50RWxlbWVudClcbiAgICByZXR1cm47XG4gIHJldHVybiBmaW5kQ2xvc2VzdChlbC5wYXJlbnRFbGVtZW50LCBjYWxsYmFjayk7XG59XG5mdW5jdGlvbiBpc1Jvb3QoZWwpIHtcbiAgcmV0dXJuIHJvb3RTZWxlY3RvcnMoKS5zb21lKChzZWxlY3RvcikgPT4gZWwubWF0Y2hlcyhzZWxlY3RvcikpO1xufVxudmFyIGluaXRJbnRlcmNlcHRvcnMyID0gW107XG5mdW5jdGlvbiBpbnRlcmNlcHRJbml0KGNhbGxiYWNrKSB7XG4gIGluaXRJbnRlcmNlcHRvcnMyLnB1c2goY2FsbGJhY2spO1xufVxuZnVuY3Rpb24gaW5pdFRyZWUoZWwsIHdhbGtlciA9IHdhbGssIGludGVyY2VwdCA9ICgpID0+IHtcbn0pIHtcbiAgZGVmZXJIYW5kbGluZ0RpcmVjdGl2ZXMoKCkgPT4ge1xuICAgIHdhbGtlcihlbCwgKGVsMiwgc2tpcCkgPT4ge1xuICAgICAgaW50ZXJjZXB0KGVsMiwgc2tpcCk7XG4gICAgICBpbml0SW50ZXJjZXB0b3JzMi5mb3JFYWNoKChpKSA9PiBpKGVsMiwgc2tpcCkpO1xuICAgICAgZGlyZWN0aXZlcyhlbDIsIGVsMi5hdHRyaWJ1dGVzKS5mb3JFYWNoKChoYW5kbGUpID0+IGhhbmRsZSgpKTtcbiAgICAgIGVsMi5feF9pZ25vcmUgJiYgc2tpcCgpO1xuICAgIH0pO1xuICB9KTtcbn1cbmZ1bmN0aW9uIGRlc3Ryb3lUcmVlKHJvb3QsIHdhbGtlciA9IHdhbGspIHtcbiAgd2Fsa2VyKHJvb3QsIChlbCkgPT4ge1xuICAgIGNsZWFudXBBdHRyaWJ1dGVzKGVsKTtcbiAgICBjbGVhbnVwRWxlbWVudChlbCk7XG4gIH0pO1xufVxuZnVuY3Rpb24gd2FybkFib3V0TWlzc2luZ1BsdWdpbnMoKSB7XG4gIGxldCBwbHVnaW5EaXJlY3RpdmVzID0gW1xuICAgIFtcInVpXCIsIFwiZGlhbG9nXCIsIFtcIlt4LWRpYWxvZ10sIFt4LXBvcG92ZXJdXCJdXSxcbiAgICBbXCJhbmNob3JcIiwgXCJhbmNob3JcIiwgW1wiW3gtYW5jaG9yXVwiXV0sXG4gICAgW1wic29ydFwiLCBcInNvcnRcIiwgW1wiW3gtc29ydF1cIl1dXG4gIF07XG4gIHBsdWdpbkRpcmVjdGl2ZXMuZm9yRWFjaCgoW3BsdWdpbjIsIGRpcmVjdGl2ZTIsIHNlbGVjdG9yc10pID0+IHtcbiAgICBpZiAoZGlyZWN0aXZlRXhpc3RzKGRpcmVjdGl2ZTIpKVxuICAgICAgcmV0dXJuO1xuICAgIHNlbGVjdG9ycy5zb21lKChzZWxlY3RvcikgPT4ge1xuICAgICAgaWYgKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3IpKSB7XG4gICAgICAgIHdhcm4oYGZvdW5kIFwiJHtzZWxlY3Rvcn1cIiwgYnV0IG1pc3NpbmcgJHtwbHVnaW4yfSBwbHVnaW5gKTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgfSk7XG4gIH0pO1xufVxuXG4vLyBwYWNrYWdlcy9hbHBpbmVqcy9zcmMvbmV4dFRpY2suanNcbnZhciB0aWNrU3RhY2sgPSBbXTtcbnZhciBpc0hvbGRpbmcgPSBmYWxzZTtcbmZ1bmN0aW9uIG5leHRUaWNrKGNhbGxiYWNrID0gKCkgPT4ge1xufSkge1xuICBxdWV1ZU1pY3JvdGFzaygoKSA9PiB7XG4gICAgaXNIb2xkaW5nIHx8IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgcmVsZWFzZU5leHRUaWNrcygpO1xuICAgIH0pO1xuICB9KTtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXMpID0+IHtcbiAgICB0aWNrU3RhY2sucHVzaCgoKSA9PiB7XG4gICAgICBjYWxsYmFjaygpO1xuICAgICAgcmVzKCk7XG4gICAgfSk7XG4gIH0pO1xufVxuZnVuY3Rpb24gcmVsZWFzZU5leHRUaWNrcygpIHtcbiAgaXNIb2xkaW5nID0gZmFsc2U7XG4gIHdoaWxlICh0aWNrU3RhY2subGVuZ3RoKVxuICAgIHRpY2tTdGFjay5zaGlmdCgpKCk7XG59XG5mdW5jdGlvbiBob2xkTmV4dFRpY2tzKCkge1xuICBpc0hvbGRpbmcgPSB0cnVlO1xufVxuXG4vLyBwYWNrYWdlcy9hbHBpbmVqcy9zcmMvdXRpbHMvY2xhc3Nlcy5qc1xuZnVuY3Rpb24gc2V0Q2xhc3NlcyhlbCwgdmFsdWUpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgcmV0dXJuIHNldENsYXNzZXNGcm9tU3RyaW5nKGVsLCB2YWx1ZS5qb2luKFwiIFwiKSk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIHZhbHVlID09PSBcIm9iamVjdFwiICYmIHZhbHVlICE9PSBudWxsKSB7XG4gICAgcmV0dXJuIHNldENsYXNzZXNGcm9tT2JqZWN0KGVsLCB2YWx1ZSk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICByZXR1cm4gc2V0Q2xhc3NlcyhlbCwgdmFsdWUoKSk7XG4gIH1cbiAgcmV0dXJuIHNldENsYXNzZXNGcm9tU3RyaW5nKGVsLCB2YWx1ZSk7XG59XG5mdW5jdGlvbiBzZXRDbGFzc2VzRnJvbVN0cmluZyhlbCwgY2xhc3NTdHJpbmcpIHtcbiAgbGV0IHNwbGl0ID0gKGNsYXNzU3RyaW5nMikgPT4gY2xhc3NTdHJpbmcyLnNwbGl0KFwiIFwiKS5maWx0ZXIoQm9vbGVhbik7XG4gIGxldCBtaXNzaW5nQ2xhc3NlcyA9IChjbGFzc1N0cmluZzIpID0+IGNsYXNzU3RyaW5nMi5zcGxpdChcIiBcIikuZmlsdGVyKChpKSA9PiAhZWwuY2xhc3NMaXN0LmNvbnRhaW5zKGkpKS5maWx0ZXIoQm9vbGVhbik7XG4gIGxldCBhZGRDbGFzc2VzQW5kUmV0dXJuVW5kbyA9IChjbGFzc2VzKSA9PiB7XG4gICAgZWwuY2xhc3NMaXN0LmFkZCguLi5jbGFzc2VzKTtcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgZWwuY2xhc3NMaXN0LnJlbW92ZSguLi5jbGFzc2VzKTtcbiAgICB9O1xuICB9O1xuICBjbGFzc1N0cmluZyA9IGNsYXNzU3RyaW5nID09PSB0cnVlID8gY2xhc3NTdHJpbmcgPSBcIlwiIDogY2xhc3NTdHJpbmcgfHwgXCJcIjtcbiAgcmV0dXJuIGFkZENsYXNzZXNBbmRSZXR1cm5VbmRvKG1pc3NpbmdDbGFzc2VzKGNsYXNzU3RyaW5nKSk7XG59XG5mdW5jdGlvbiBzZXRDbGFzc2VzRnJvbU9iamVjdChlbCwgY2xhc3NPYmplY3QpIHtcbiAgbGV0IHNwbGl0ID0gKGNsYXNzU3RyaW5nKSA9PiBjbGFzc1N0cmluZy5zcGxpdChcIiBcIikuZmlsdGVyKEJvb2xlYW4pO1xuICBsZXQgZm9yQWRkID0gT2JqZWN0LmVudHJpZXMoY2xhc3NPYmplY3QpLmZsYXRNYXAoKFtjbGFzc1N0cmluZywgYm9vbF0pID0+IGJvb2wgPyBzcGxpdChjbGFzc1N0cmluZykgOiBmYWxzZSkuZmlsdGVyKEJvb2xlYW4pO1xuICBsZXQgZm9yUmVtb3ZlID0gT2JqZWN0LmVudHJpZXMoY2xhc3NPYmplY3QpLmZsYXRNYXAoKFtjbGFzc1N0cmluZywgYm9vbF0pID0+ICFib29sID8gc3BsaXQoY2xhc3NTdHJpbmcpIDogZmFsc2UpLmZpbHRlcihCb29sZWFuKTtcbiAgbGV0IGFkZGVkID0gW107XG4gIGxldCByZW1vdmVkID0gW107XG4gIGZvclJlbW92ZS5mb3JFYWNoKChpKSA9PiB7XG4gICAgaWYgKGVsLmNsYXNzTGlzdC5jb250YWlucyhpKSkge1xuICAgICAgZWwuY2xhc3NMaXN0LnJlbW92ZShpKTtcbiAgICAgIHJlbW92ZWQucHVzaChpKTtcbiAgICB9XG4gIH0pO1xuICBmb3JBZGQuZm9yRWFjaCgoaSkgPT4ge1xuICAgIGlmICghZWwuY2xhc3NMaXN0LmNvbnRhaW5zKGkpKSB7XG4gICAgICBlbC5jbGFzc0xpc3QuYWRkKGkpO1xuICAgICAgYWRkZWQucHVzaChpKTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gKCkgPT4ge1xuICAgIHJlbW92ZWQuZm9yRWFjaCgoaSkgPT4gZWwuY2xhc3NMaXN0LmFkZChpKSk7XG4gICAgYWRkZWQuZm9yRWFjaCgoaSkgPT4gZWwuY2xhc3NMaXN0LnJlbW92ZShpKSk7XG4gIH07XG59XG5cbi8vIHBhY2thZ2VzL2FscGluZWpzL3NyYy91dGlscy9zdHlsZXMuanNcbmZ1bmN0aW9uIHNldFN0eWxlcyhlbCwgdmFsdWUpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJvYmplY3RcIiAmJiB2YWx1ZSAhPT0gbnVsbCkge1xuICAgIHJldHVybiBzZXRTdHlsZXNGcm9tT2JqZWN0KGVsLCB2YWx1ZSk7XG4gIH1cbiAgcmV0dXJuIHNldFN0eWxlc0Zyb21TdHJpbmcoZWwsIHZhbHVlKTtcbn1cbmZ1bmN0aW9uIHNldFN0eWxlc0Zyb21PYmplY3QoZWwsIHZhbHVlKSB7XG4gIGxldCBwcmV2aW91c1N0eWxlcyA9IHt9O1xuICBPYmplY3QuZW50cmllcyh2YWx1ZSkuZm9yRWFjaCgoW2tleSwgdmFsdWUyXSkgPT4ge1xuICAgIHByZXZpb3VzU3R5bGVzW2tleV0gPSBlbC5zdHlsZVtrZXldO1xuICAgIGlmICgha2V5LnN0YXJ0c1dpdGgoXCItLVwiKSkge1xuICAgICAga2V5ID0ga2ViYWJDYXNlKGtleSk7XG4gICAgfVxuICAgIGVsLnN0eWxlLnNldFByb3BlcnR5KGtleSwgdmFsdWUyKTtcbiAgfSk7XG4gIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgIGlmIChlbC5zdHlsZS5sZW5ndGggPT09IDApIHtcbiAgICAgIGVsLnJlbW92ZUF0dHJpYnV0ZShcInN0eWxlXCIpO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiAoKSA9PiB7XG4gICAgc2V0U3R5bGVzKGVsLCBwcmV2aW91c1N0eWxlcyk7XG4gIH07XG59XG5mdW5jdGlvbiBzZXRTdHlsZXNGcm9tU3RyaW5nKGVsLCB2YWx1ZSkge1xuICBsZXQgY2FjaGUgPSBlbC5nZXRBdHRyaWJ1dGUoXCJzdHlsZVwiLCB2YWx1ZSk7XG4gIGVsLnNldEF0dHJpYnV0ZShcInN0eWxlXCIsIHZhbHVlKTtcbiAgcmV0dXJuICgpID0+IHtcbiAgICBlbC5zZXRBdHRyaWJ1dGUoXCJzdHlsZVwiLCBjYWNoZSB8fCBcIlwiKTtcbiAgfTtcbn1cbmZ1bmN0aW9uIGtlYmFiQ2FzZShzdWJqZWN0KSB7XG4gIHJldHVybiBzdWJqZWN0LnJlcGxhY2UoLyhbYS16XSkoW0EtWl0pL2csIFwiJDEtJDJcIikudG9Mb3dlckNhc2UoKTtcbn1cblxuLy8gcGFja2FnZXMvYWxwaW5lanMvc3JjL3V0aWxzL29uY2UuanNcbmZ1bmN0aW9uIG9uY2UoY2FsbGJhY2ssIGZhbGxiYWNrID0gKCkgPT4ge1xufSkge1xuICBsZXQgY2FsbGVkID0gZmFsc2U7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICBpZiAoIWNhbGxlZCkge1xuICAgICAgY2FsbGVkID0gdHJ1ZTtcbiAgICAgIGNhbGxiYWNrLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGZhbGxiYWNrLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgfVxuICB9O1xufVxuXG4vLyBwYWNrYWdlcy9hbHBpbmVqcy9zcmMvZGlyZWN0aXZlcy94LXRyYW5zaXRpb24uanNcbmRpcmVjdGl2ZShcInRyYW5zaXRpb25cIiwgKGVsLCB7IHZhbHVlLCBtb2RpZmllcnMsIGV4cHJlc3Npb24gfSwgeyBldmFsdWF0ZTogZXZhbHVhdGUyIH0pID0+IHtcbiAgaWYgKHR5cGVvZiBleHByZXNzaW9uID09PSBcImZ1bmN0aW9uXCIpXG4gICAgZXhwcmVzc2lvbiA9IGV2YWx1YXRlMihleHByZXNzaW9uKTtcbiAgaWYgKGV4cHJlc3Npb24gPT09IGZhbHNlKVxuICAgIHJldHVybjtcbiAgaWYgKCFleHByZXNzaW9uIHx8IHR5cGVvZiBleHByZXNzaW9uID09PSBcImJvb2xlYW5cIikge1xuICAgIHJlZ2lzdGVyVHJhbnNpdGlvbnNGcm9tSGVscGVyKGVsLCBtb2RpZmllcnMsIHZhbHVlKTtcbiAgfSBlbHNlIHtcbiAgICByZWdpc3RlclRyYW5zaXRpb25zRnJvbUNsYXNzU3RyaW5nKGVsLCBleHByZXNzaW9uLCB2YWx1ZSk7XG4gIH1cbn0pO1xuZnVuY3Rpb24gcmVnaXN0ZXJUcmFuc2l0aW9uc0Zyb21DbGFzc1N0cmluZyhlbCwgY2xhc3NTdHJpbmcsIHN0YWdlKSB7XG4gIHJlZ2lzdGVyVHJhbnNpdGlvbk9iamVjdChlbCwgc2V0Q2xhc3NlcywgXCJcIik7XG4gIGxldCBkaXJlY3RpdmVTdG9yYWdlTWFwID0ge1xuICAgIFwiZW50ZXJcIjogKGNsYXNzZXMpID0+IHtcbiAgICAgIGVsLl94X3RyYW5zaXRpb24uZW50ZXIuZHVyaW5nID0gY2xhc3NlcztcbiAgICB9LFxuICAgIFwiZW50ZXItc3RhcnRcIjogKGNsYXNzZXMpID0+IHtcbiAgICAgIGVsLl94X3RyYW5zaXRpb24uZW50ZXIuc3RhcnQgPSBjbGFzc2VzO1xuICAgIH0sXG4gICAgXCJlbnRlci1lbmRcIjogKGNsYXNzZXMpID0+IHtcbiAgICAgIGVsLl94X3RyYW5zaXRpb24uZW50ZXIuZW5kID0gY2xhc3NlcztcbiAgICB9LFxuICAgIFwibGVhdmVcIjogKGNsYXNzZXMpID0+IHtcbiAgICAgIGVsLl94X3RyYW5zaXRpb24ubGVhdmUuZHVyaW5nID0gY2xhc3NlcztcbiAgICB9LFxuICAgIFwibGVhdmUtc3RhcnRcIjogKGNsYXNzZXMpID0+IHtcbiAgICAgIGVsLl94X3RyYW5zaXRpb24ubGVhdmUuc3RhcnQgPSBjbGFzc2VzO1xuICAgIH0sXG4gICAgXCJsZWF2ZS1lbmRcIjogKGNsYXNzZXMpID0+IHtcbiAgICAgIGVsLl94X3RyYW5zaXRpb24ubGVhdmUuZW5kID0gY2xhc3NlcztcbiAgICB9XG4gIH07XG4gIGRpcmVjdGl2ZVN0b3JhZ2VNYXBbc3RhZ2VdKGNsYXNzU3RyaW5nKTtcbn1cbmZ1bmN0aW9uIHJlZ2lzdGVyVHJhbnNpdGlvbnNGcm9tSGVscGVyKGVsLCBtb2RpZmllcnMsIHN0YWdlKSB7XG4gIHJlZ2lzdGVyVHJhbnNpdGlvbk9iamVjdChlbCwgc2V0U3R5bGVzKTtcbiAgbGV0IGRvZXNudFNwZWNpZnkgPSAhbW9kaWZpZXJzLmluY2x1ZGVzKFwiaW5cIikgJiYgIW1vZGlmaWVycy5pbmNsdWRlcyhcIm91dFwiKSAmJiAhc3RhZ2U7XG4gIGxldCB0cmFuc2l0aW9uaW5nSW4gPSBkb2VzbnRTcGVjaWZ5IHx8IG1vZGlmaWVycy5pbmNsdWRlcyhcImluXCIpIHx8IFtcImVudGVyXCJdLmluY2x1ZGVzKHN0YWdlKTtcbiAgbGV0IHRyYW5zaXRpb25pbmdPdXQgPSBkb2VzbnRTcGVjaWZ5IHx8IG1vZGlmaWVycy5pbmNsdWRlcyhcIm91dFwiKSB8fCBbXCJsZWF2ZVwiXS5pbmNsdWRlcyhzdGFnZSk7XG4gIGlmIChtb2RpZmllcnMuaW5jbHVkZXMoXCJpblwiKSAmJiAhZG9lc250U3BlY2lmeSkge1xuICAgIG1vZGlmaWVycyA9IG1vZGlmaWVycy5maWx0ZXIoKGksIGluZGV4KSA9PiBpbmRleCA8IG1vZGlmaWVycy5pbmRleE9mKFwib3V0XCIpKTtcbiAgfVxuICBpZiAobW9kaWZpZXJzLmluY2x1ZGVzKFwib3V0XCIpICYmICFkb2VzbnRTcGVjaWZ5KSB7XG4gICAgbW9kaWZpZXJzID0gbW9kaWZpZXJzLmZpbHRlcigoaSwgaW5kZXgpID0+IGluZGV4ID4gbW9kaWZpZXJzLmluZGV4T2YoXCJvdXRcIikpO1xuICB9XG4gIGxldCB3YW50c0FsbCA9ICFtb2RpZmllcnMuaW5jbHVkZXMoXCJvcGFjaXR5XCIpICYmICFtb2RpZmllcnMuaW5jbHVkZXMoXCJzY2FsZVwiKTtcbiAgbGV0IHdhbnRzT3BhY2l0eSA9IHdhbnRzQWxsIHx8IG1vZGlmaWVycy5pbmNsdWRlcyhcIm9wYWNpdHlcIik7XG4gIGxldCB3YW50c1NjYWxlID0gd2FudHNBbGwgfHwgbW9kaWZpZXJzLmluY2x1ZGVzKFwic2NhbGVcIik7XG4gIGxldCBvcGFjaXR5VmFsdWUgPSB3YW50c09wYWNpdHkgPyAwIDogMTtcbiAgbGV0IHNjYWxlVmFsdWUgPSB3YW50c1NjYWxlID8gbW9kaWZpZXJWYWx1ZShtb2RpZmllcnMsIFwic2NhbGVcIiwgOTUpIC8gMTAwIDogMTtcbiAgbGV0IGRlbGF5ID0gbW9kaWZpZXJWYWx1ZShtb2RpZmllcnMsIFwiZGVsYXlcIiwgMCkgLyAxZTM7XG4gIGxldCBvcmlnaW4gPSBtb2RpZmllclZhbHVlKG1vZGlmaWVycywgXCJvcmlnaW5cIiwgXCJjZW50ZXJcIik7XG4gIGxldCBwcm9wZXJ0eSA9IFwib3BhY2l0eSwgdHJhbnNmb3JtXCI7XG4gIGxldCBkdXJhdGlvbkluID0gbW9kaWZpZXJWYWx1ZShtb2RpZmllcnMsIFwiZHVyYXRpb25cIiwgMTUwKSAvIDFlMztcbiAgbGV0IGR1cmF0aW9uT3V0ID0gbW9kaWZpZXJWYWx1ZShtb2RpZmllcnMsIFwiZHVyYXRpb25cIiwgNzUpIC8gMWUzO1xuICBsZXQgZWFzaW5nID0gYGN1YmljLWJlemllcigwLjQsIDAuMCwgMC4yLCAxKWA7XG4gIGlmICh0cmFuc2l0aW9uaW5nSW4pIHtcbiAgICBlbC5feF90cmFuc2l0aW9uLmVudGVyLmR1cmluZyA9IHtcbiAgICAgIHRyYW5zZm9ybU9yaWdpbjogb3JpZ2luLFxuICAgICAgdHJhbnNpdGlvbkRlbGF5OiBgJHtkZWxheX1zYCxcbiAgICAgIHRyYW5zaXRpb25Qcm9wZXJ0eTogcHJvcGVydHksXG4gICAgICB0cmFuc2l0aW9uRHVyYXRpb246IGAke2R1cmF0aW9uSW59c2AsXG4gICAgICB0cmFuc2l0aW9uVGltaW5nRnVuY3Rpb246IGVhc2luZ1xuICAgIH07XG4gICAgZWwuX3hfdHJhbnNpdGlvbi5lbnRlci5zdGFydCA9IHtcbiAgICAgIG9wYWNpdHk6IG9wYWNpdHlWYWx1ZSxcbiAgICAgIHRyYW5zZm9ybTogYHNjYWxlKCR7c2NhbGVWYWx1ZX0pYFxuICAgIH07XG4gICAgZWwuX3hfdHJhbnNpdGlvbi5lbnRlci5lbmQgPSB7XG4gICAgICBvcGFjaXR5OiAxLFxuICAgICAgdHJhbnNmb3JtOiBgc2NhbGUoMSlgXG4gICAgfTtcbiAgfVxuICBpZiAodHJhbnNpdGlvbmluZ091dCkge1xuICAgIGVsLl94X3RyYW5zaXRpb24ubGVhdmUuZHVyaW5nID0ge1xuICAgICAgdHJhbnNmb3JtT3JpZ2luOiBvcmlnaW4sXG4gICAgICB0cmFuc2l0aW9uRGVsYXk6IGAke2RlbGF5fXNgLFxuICAgICAgdHJhbnNpdGlvblByb3BlcnR5OiBwcm9wZXJ0eSxcbiAgICAgIHRyYW5zaXRpb25EdXJhdGlvbjogYCR7ZHVyYXRpb25PdXR9c2AsXG4gICAgICB0cmFuc2l0aW9uVGltaW5nRnVuY3Rpb246IGVhc2luZ1xuICAgIH07XG4gICAgZWwuX3hfdHJhbnNpdGlvbi5sZWF2ZS5zdGFydCA9IHtcbiAgICAgIG9wYWNpdHk6IDEsXG4gICAgICB0cmFuc2Zvcm06IGBzY2FsZSgxKWBcbiAgICB9O1xuICAgIGVsLl94X3RyYW5zaXRpb24ubGVhdmUuZW5kID0ge1xuICAgICAgb3BhY2l0eTogb3BhY2l0eVZhbHVlLFxuICAgICAgdHJhbnNmb3JtOiBgc2NhbGUoJHtzY2FsZVZhbHVlfSlgXG4gICAgfTtcbiAgfVxufVxuZnVuY3Rpb24gcmVnaXN0ZXJUcmFuc2l0aW9uT2JqZWN0KGVsLCBzZXRGdW5jdGlvbiwgZGVmYXVsdFZhbHVlID0ge30pIHtcbiAgaWYgKCFlbC5feF90cmFuc2l0aW9uKVxuICAgIGVsLl94X3RyYW5zaXRpb24gPSB7XG4gICAgICBlbnRlcjogeyBkdXJpbmc6IGRlZmF1bHRWYWx1ZSwgc3RhcnQ6IGRlZmF1bHRWYWx1ZSwgZW5kOiBkZWZhdWx0VmFsdWUgfSxcbiAgICAgIGxlYXZlOiB7IGR1cmluZzogZGVmYXVsdFZhbHVlLCBzdGFydDogZGVmYXVsdFZhbHVlLCBlbmQ6IGRlZmF1bHRWYWx1ZSB9LFxuICAgICAgaW4oYmVmb3JlID0gKCkgPT4ge1xuICAgICAgfSwgYWZ0ZXIgPSAoKSA9PiB7XG4gICAgICB9KSB7XG4gICAgICAgIHRyYW5zaXRpb24oZWwsIHNldEZ1bmN0aW9uLCB7XG4gICAgICAgICAgZHVyaW5nOiB0aGlzLmVudGVyLmR1cmluZyxcbiAgICAgICAgICBzdGFydDogdGhpcy5lbnRlci5zdGFydCxcbiAgICAgICAgICBlbmQ6IHRoaXMuZW50ZXIuZW5kXG4gICAgICAgIH0sIGJlZm9yZSwgYWZ0ZXIpO1xuICAgICAgfSxcbiAgICAgIG91dChiZWZvcmUgPSAoKSA9PiB7XG4gICAgICB9LCBhZnRlciA9ICgpID0+IHtcbiAgICAgIH0pIHtcbiAgICAgICAgdHJhbnNpdGlvbihlbCwgc2V0RnVuY3Rpb24sIHtcbiAgICAgICAgICBkdXJpbmc6IHRoaXMubGVhdmUuZHVyaW5nLFxuICAgICAgICAgIHN0YXJ0OiB0aGlzLmxlYXZlLnN0YXJ0LFxuICAgICAgICAgIGVuZDogdGhpcy5sZWF2ZS5lbmRcbiAgICAgICAgfSwgYmVmb3JlLCBhZnRlcik7XG4gICAgICB9XG4gICAgfTtcbn1cbndpbmRvdy5FbGVtZW50LnByb3RvdHlwZS5feF90b2dnbGVBbmRDYXNjYWRlV2l0aFRyYW5zaXRpb25zID0gZnVuY3Rpb24oZWwsIHZhbHVlLCBzaG93LCBoaWRlKSB7XG4gIGNvbnN0IG5leHRUaWNrMiA9IGRvY3VtZW50LnZpc2liaWxpdHlTdGF0ZSA9PT0gXCJ2aXNpYmxlXCIgPyByZXF1ZXN0QW5pbWF0aW9uRnJhbWUgOiBzZXRUaW1lb3V0O1xuICBsZXQgY2xpY2tBd2F5Q29tcGF0aWJsZVNob3cgPSAoKSA9PiBuZXh0VGljazIoc2hvdyk7XG4gIGlmICh2YWx1ZSkge1xuICAgIGlmIChlbC5feF90cmFuc2l0aW9uICYmIChlbC5feF90cmFuc2l0aW9uLmVudGVyIHx8IGVsLl94X3RyYW5zaXRpb24ubGVhdmUpKSB7XG4gICAgICBlbC5feF90cmFuc2l0aW9uLmVudGVyICYmIChPYmplY3QuZW50cmllcyhlbC5feF90cmFuc2l0aW9uLmVudGVyLmR1cmluZykubGVuZ3RoIHx8IE9iamVjdC5lbnRyaWVzKGVsLl94X3RyYW5zaXRpb24uZW50ZXIuc3RhcnQpLmxlbmd0aCB8fCBPYmplY3QuZW50cmllcyhlbC5feF90cmFuc2l0aW9uLmVudGVyLmVuZCkubGVuZ3RoKSA/IGVsLl94X3RyYW5zaXRpb24uaW4oc2hvdykgOiBjbGlja0F3YXlDb21wYXRpYmxlU2hvdygpO1xuICAgIH0gZWxzZSB7XG4gICAgICBlbC5feF90cmFuc2l0aW9uID8gZWwuX3hfdHJhbnNpdGlvbi5pbihzaG93KSA6IGNsaWNrQXdheUNvbXBhdGlibGVTaG93KCk7XG4gICAgfVxuICAgIHJldHVybjtcbiAgfVxuICBlbC5feF9oaWRlUHJvbWlzZSA9IGVsLl94X3RyYW5zaXRpb24gPyBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgZWwuX3hfdHJhbnNpdGlvbi5vdXQoKCkgPT4ge1xuICAgIH0sICgpID0+IHJlc29sdmUoaGlkZSkpO1xuICAgIGVsLl94X3RyYW5zaXRpb25pbmcgJiYgZWwuX3hfdHJhbnNpdGlvbmluZy5iZWZvcmVDYW5jZWwoKCkgPT4gcmVqZWN0KHsgaXNGcm9tQ2FuY2VsbGVkVHJhbnNpdGlvbjogdHJ1ZSB9KSk7XG4gIH0pIDogUHJvbWlzZS5yZXNvbHZlKGhpZGUpO1xuICBxdWV1ZU1pY3JvdGFzaygoKSA9PiB7XG4gICAgbGV0IGNsb3Nlc3QgPSBjbG9zZXN0SGlkZShlbCk7XG4gICAgaWYgKGNsb3Nlc3QpIHtcbiAgICAgIGlmICghY2xvc2VzdC5feF9oaWRlQ2hpbGRyZW4pXG4gICAgICAgIGNsb3Nlc3QuX3hfaGlkZUNoaWxkcmVuID0gW107XG4gICAgICBjbG9zZXN0Ll94X2hpZGVDaGlsZHJlbi5wdXNoKGVsKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbmV4dFRpY2syKCgpID0+IHtcbiAgICAgICAgbGV0IGhpZGVBZnRlckNoaWxkcmVuID0gKGVsMikgPT4ge1xuICAgICAgICAgIGxldCBjYXJyeSA9IFByb21pc2UuYWxsKFtcbiAgICAgICAgICAgIGVsMi5feF9oaWRlUHJvbWlzZSxcbiAgICAgICAgICAgIC4uLihlbDIuX3hfaGlkZUNoaWxkcmVuIHx8IFtdKS5tYXAoaGlkZUFmdGVyQ2hpbGRyZW4pXG4gICAgICAgICAgXSkudGhlbigoW2ldKSA9PiBpPy4oKSk7XG4gICAgICAgICAgZGVsZXRlIGVsMi5feF9oaWRlUHJvbWlzZTtcbiAgICAgICAgICBkZWxldGUgZWwyLl94X2hpZGVDaGlsZHJlbjtcbiAgICAgICAgICByZXR1cm4gY2Fycnk7XG4gICAgICAgIH07XG4gICAgICAgIGhpZGVBZnRlckNoaWxkcmVuKGVsKS5jYXRjaCgoZSkgPT4ge1xuICAgICAgICAgIGlmICghZS5pc0Zyb21DYW5jZWxsZWRUcmFuc2l0aW9uKVxuICAgICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH0pO1xufTtcbmZ1bmN0aW9uIGNsb3Nlc3RIaWRlKGVsKSB7XG4gIGxldCBwYXJlbnQgPSBlbC5wYXJlbnROb2RlO1xuICBpZiAoIXBhcmVudClcbiAgICByZXR1cm47XG4gIHJldHVybiBwYXJlbnQuX3hfaGlkZVByb21pc2UgPyBwYXJlbnQgOiBjbG9zZXN0SGlkZShwYXJlbnQpO1xufVxuZnVuY3Rpb24gdHJhbnNpdGlvbihlbCwgc2V0RnVuY3Rpb24sIHsgZHVyaW5nLCBzdGFydDogc3RhcnQyLCBlbmQgfSA9IHt9LCBiZWZvcmUgPSAoKSA9PiB7XG59LCBhZnRlciA9ICgpID0+IHtcbn0pIHtcbiAgaWYgKGVsLl94X3RyYW5zaXRpb25pbmcpXG4gICAgZWwuX3hfdHJhbnNpdGlvbmluZy5jYW5jZWwoKTtcbiAgaWYgKE9iamVjdC5rZXlzKGR1cmluZykubGVuZ3RoID09PSAwICYmIE9iamVjdC5rZXlzKHN0YXJ0MikubGVuZ3RoID09PSAwICYmIE9iamVjdC5rZXlzKGVuZCkubGVuZ3RoID09PSAwKSB7XG4gICAgYmVmb3JlKCk7XG4gICAgYWZ0ZXIoKTtcbiAgICByZXR1cm47XG4gIH1cbiAgbGV0IHVuZG9TdGFydCwgdW5kb0R1cmluZywgdW5kb0VuZDtcbiAgcGVyZm9ybVRyYW5zaXRpb24oZWwsIHtcbiAgICBzdGFydCgpIHtcbiAgICAgIHVuZG9TdGFydCA9IHNldEZ1bmN0aW9uKGVsLCBzdGFydDIpO1xuICAgIH0sXG4gICAgZHVyaW5nKCkge1xuICAgICAgdW5kb0R1cmluZyA9IHNldEZ1bmN0aW9uKGVsLCBkdXJpbmcpO1xuICAgIH0sXG4gICAgYmVmb3JlLFxuICAgIGVuZCgpIHtcbiAgICAgIHVuZG9TdGFydCgpO1xuICAgICAgdW5kb0VuZCA9IHNldEZ1bmN0aW9uKGVsLCBlbmQpO1xuICAgIH0sXG4gICAgYWZ0ZXIsXG4gICAgY2xlYW51cCgpIHtcbiAgICAgIHVuZG9EdXJpbmcoKTtcbiAgICAgIHVuZG9FbmQoKTtcbiAgICB9XG4gIH0pO1xufVxuZnVuY3Rpb24gcGVyZm9ybVRyYW5zaXRpb24oZWwsIHN0YWdlcykge1xuICBsZXQgaW50ZXJydXB0ZWQsIHJlYWNoZWRCZWZvcmUsIHJlYWNoZWRFbmQ7XG4gIGxldCBmaW5pc2ggPSBvbmNlKCgpID0+IHtcbiAgICBtdXRhdGVEb20oKCkgPT4ge1xuICAgICAgaW50ZXJydXB0ZWQgPSB0cnVlO1xuICAgICAgaWYgKCFyZWFjaGVkQmVmb3JlKVxuICAgICAgICBzdGFnZXMuYmVmb3JlKCk7XG4gICAgICBpZiAoIXJlYWNoZWRFbmQpIHtcbiAgICAgICAgc3RhZ2VzLmVuZCgpO1xuICAgICAgICByZWxlYXNlTmV4dFRpY2tzKCk7XG4gICAgICB9XG4gICAgICBzdGFnZXMuYWZ0ZXIoKTtcbiAgICAgIGlmIChlbC5pc0Nvbm5lY3RlZClcbiAgICAgICAgc3RhZ2VzLmNsZWFudXAoKTtcbiAgICAgIGRlbGV0ZSBlbC5feF90cmFuc2l0aW9uaW5nO1xuICAgIH0pO1xuICB9KTtcbiAgZWwuX3hfdHJhbnNpdGlvbmluZyA9IHtcbiAgICBiZWZvcmVDYW5jZWxzOiBbXSxcbiAgICBiZWZvcmVDYW5jZWwoY2FsbGJhY2spIHtcbiAgICAgIHRoaXMuYmVmb3JlQ2FuY2Vscy5wdXNoKGNhbGxiYWNrKTtcbiAgICB9LFxuICAgIGNhbmNlbDogb25jZShmdW5jdGlvbigpIHtcbiAgICAgIHdoaWxlICh0aGlzLmJlZm9yZUNhbmNlbHMubGVuZ3RoKSB7XG4gICAgICAgIHRoaXMuYmVmb3JlQ2FuY2Vscy5zaGlmdCgpKCk7XG4gICAgICB9XG4gICAgICA7XG4gICAgICBmaW5pc2goKTtcbiAgICB9KSxcbiAgICBmaW5pc2hcbiAgfTtcbiAgbXV0YXRlRG9tKCgpID0+IHtcbiAgICBzdGFnZXMuc3RhcnQoKTtcbiAgICBzdGFnZXMuZHVyaW5nKCk7XG4gIH0pO1xuICBob2xkTmV4dFRpY2tzKCk7XG4gIHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgaWYgKGludGVycnVwdGVkKVxuICAgICAgcmV0dXJuO1xuICAgIGxldCBkdXJhdGlvbiA9IE51bWJlcihnZXRDb21wdXRlZFN0eWxlKGVsKS50cmFuc2l0aW9uRHVyYXRpb24ucmVwbGFjZSgvLC4qLywgXCJcIikucmVwbGFjZShcInNcIiwgXCJcIikpICogMWUzO1xuICAgIGxldCBkZWxheSA9IE51bWJlcihnZXRDb21wdXRlZFN0eWxlKGVsKS50cmFuc2l0aW9uRGVsYXkucmVwbGFjZSgvLC4qLywgXCJcIikucmVwbGFjZShcInNcIiwgXCJcIikpICogMWUzO1xuICAgIGlmIChkdXJhdGlvbiA9PT0gMClcbiAgICAgIGR1cmF0aW9uID0gTnVtYmVyKGdldENvbXB1dGVkU3R5bGUoZWwpLmFuaW1hdGlvbkR1cmF0aW9uLnJlcGxhY2UoXCJzXCIsIFwiXCIpKSAqIDFlMztcbiAgICBtdXRhdGVEb20oKCkgPT4ge1xuICAgICAgc3RhZ2VzLmJlZm9yZSgpO1xuICAgIH0pO1xuICAgIHJlYWNoZWRCZWZvcmUgPSB0cnVlO1xuICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgICBpZiAoaW50ZXJydXB0ZWQpXG4gICAgICAgIHJldHVybjtcbiAgICAgIG11dGF0ZURvbSgoKSA9PiB7XG4gICAgICAgIHN0YWdlcy5lbmQoKTtcbiAgICAgIH0pO1xuICAgICAgcmVsZWFzZU5leHRUaWNrcygpO1xuICAgICAgc2V0VGltZW91dChlbC5feF90cmFuc2l0aW9uaW5nLmZpbmlzaCwgZHVyYXRpb24gKyBkZWxheSk7XG4gICAgICByZWFjaGVkRW5kID0gdHJ1ZTtcbiAgICB9KTtcbiAgfSk7XG59XG5mdW5jdGlvbiBtb2RpZmllclZhbHVlKG1vZGlmaWVycywga2V5LCBmYWxsYmFjaykge1xuICBpZiAobW9kaWZpZXJzLmluZGV4T2Yoa2V5KSA9PT0gLTEpXG4gICAgcmV0dXJuIGZhbGxiYWNrO1xuICBjb25zdCByYXdWYWx1ZSA9IG1vZGlmaWVyc1ttb2RpZmllcnMuaW5kZXhPZihrZXkpICsgMV07XG4gIGlmICghcmF3VmFsdWUpXG4gICAgcmV0dXJuIGZhbGxiYWNrO1xuICBpZiAoa2V5ID09PSBcInNjYWxlXCIpIHtcbiAgICBpZiAoaXNOYU4ocmF3VmFsdWUpKVxuICAgICAgcmV0dXJuIGZhbGxiYWNrO1xuICB9XG4gIGlmIChrZXkgPT09IFwiZHVyYXRpb25cIiB8fCBrZXkgPT09IFwiZGVsYXlcIikge1xuICAgIGxldCBtYXRjaCA9IHJhd1ZhbHVlLm1hdGNoKC8oWzAtOV0rKW1zLyk7XG4gICAgaWYgKG1hdGNoKVxuICAgICAgcmV0dXJuIG1hdGNoWzFdO1xuICB9XG4gIGlmIChrZXkgPT09IFwib3JpZ2luXCIpIHtcbiAgICBpZiAoW1widG9wXCIsIFwicmlnaHRcIiwgXCJsZWZ0XCIsIFwiY2VudGVyXCIsIFwiYm90dG9tXCJdLmluY2x1ZGVzKG1vZGlmaWVyc1ttb2RpZmllcnMuaW5kZXhPZihrZXkpICsgMl0pKSB7XG4gICAgICByZXR1cm4gW3Jhd1ZhbHVlLCBtb2RpZmllcnNbbW9kaWZpZXJzLmluZGV4T2Yoa2V5KSArIDJdXS5qb2luKFwiIFwiKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJhd1ZhbHVlO1xufVxuXG4vLyBwYWNrYWdlcy9hbHBpbmVqcy9zcmMvY2xvbmUuanNcbnZhciBpc0Nsb25pbmcgPSBmYWxzZTtcbmZ1bmN0aW9uIHNraXBEdXJpbmdDbG9uZShjYWxsYmFjaywgZmFsbGJhY2sgPSAoKSA9PiB7XG59KSB7XG4gIHJldHVybiAoLi4uYXJncykgPT4gaXNDbG9uaW5nID8gZmFsbGJhY2soLi4uYXJncykgOiBjYWxsYmFjayguLi5hcmdzKTtcbn1cbmZ1bmN0aW9uIG9ubHlEdXJpbmdDbG9uZShjYWxsYmFjaykge1xuICByZXR1cm4gKC4uLmFyZ3MpID0+IGlzQ2xvbmluZyAmJiBjYWxsYmFjayguLi5hcmdzKTtcbn1cbnZhciBpbnRlcmNlcHRvcnMgPSBbXTtcbmZ1bmN0aW9uIGludGVyY2VwdENsb25lKGNhbGxiYWNrKSB7XG4gIGludGVyY2VwdG9ycy5wdXNoKGNhbGxiYWNrKTtcbn1cbmZ1bmN0aW9uIGNsb25lTm9kZShmcm9tLCB0bykge1xuICBpbnRlcmNlcHRvcnMuZm9yRWFjaCgoaSkgPT4gaShmcm9tLCB0bykpO1xuICBpc0Nsb25pbmcgPSB0cnVlO1xuICBkb250UmVnaXN0ZXJSZWFjdGl2ZVNpZGVFZmZlY3RzKCgpID0+IHtcbiAgICBpbml0VHJlZSh0bywgKGVsLCBjYWxsYmFjaykgPT4ge1xuICAgICAgY2FsbGJhY2soZWwsICgpID0+IHtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9KTtcbiAgaXNDbG9uaW5nID0gZmFsc2U7XG59XG52YXIgaXNDbG9uaW5nTGVnYWN5ID0gZmFsc2U7XG5mdW5jdGlvbiBjbG9uZShvbGRFbCwgbmV3RWwpIHtcbiAgaWYgKCFuZXdFbC5feF9kYXRhU3RhY2spXG4gICAgbmV3RWwuX3hfZGF0YVN0YWNrID0gb2xkRWwuX3hfZGF0YVN0YWNrO1xuICBpc0Nsb25pbmcgPSB0cnVlO1xuICBpc0Nsb25pbmdMZWdhY3kgPSB0cnVlO1xuICBkb250UmVnaXN0ZXJSZWFjdGl2ZVNpZGVFZmZlY3RzKCgpID0+IHtcbiAgICBjbG9uZVRyZWUobmV3RWwpO1xuICB9KTtcbiAgaXNDbG9uaW5nID0gZmFsc2U7XG4gIGlzQ2xvbmluZ0xlZ2FjeSA9IGZhbHNlO1xufVxuZnVuY3Rpb24gY2xvbmVUcmVlKGVsKSB7XG4gIGxldCBoYXNSdW5UaHJvdWdoRmlyc3RFbCA9IGZhbHNlO1xuICBsZXQgc2hhbGxvd1dhbGtlciA9IChlbDIsIGNhbGxiYWNrKSA9PiB7XG4gICAgd2FsayhlbDIsIChlbDMsIHNraXApID0+IHtcbiAgICAgIGlmIChoYXNSdW5UaHJvdWdoRmlyc3RFbCAmJiBpc1Jvb3QoZWwzKSlcbiAgICAgICAgcmV0dXJuIHNraXAoKTtcbiAgICAgIGhhc1J1blRocm91Z2hGaXJzdEVsID0gdHJ1ZTtcbiAgICAgIGNhbGxiYWNrKGVsMywgc2tpcCk7XG4gICAgfSk7XG4gIH07XG4gIGluaXRUcmVlKGVsLCBzaGFsbG93V2Fsa2VyKTtcbn1cbmZ1bmN0aW9uIGRvbnRSZWdpc3RlclJlYWN0aXZlU2lkZUVmZmVjdHMoY2FsbGJhY2spIHtcbiAgbGV0IGNhY2hlID0gZWZmZWN0O1xuICBvdmVycmlkZUVmZmVjdCgoY2FsbGJhY2syLCBlbCkgPT4ge1xuICAgIGxldCBzdG9yZWRFZmZlY3QgPSBjYWNoZShjYWxsYmFjazIpO1xuICAgIHJlbGVhc2Uoc3RvcmVkRWZmZWN0KTtcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgIH07XG4gIH0pO1xuICBjYWxsYmFjaygpO1xuICBvdmVycmlkZUVmZmVjdChjYWNoZSk7XG59XG5cbi8vIHBhY2thZ2VzL2FscGluZWpzL3NyYy91dGlscy9iaW5kLmpzXG5mdW5jdGlvbiBiaW5kKGVsLCBuYW1lLCB2YWx1ZSwgbW9kaWZpZXJzID0gW10pIHtcbiAgaWYgKCFlbC5feF9iaW5kaW5ncylcbiAgICBlbC5feF9iaW5kaW5ncyA9IHJlYWN0aXZlKHt9KTtcbiAgZWwuX3hfYmluZGluZ3NbbmFtZV0gPSB2YWx1ZTtcbiAgbmFtZSA9IG1vZGlmaWVycy5pbmNsdWRlcyhcImNhbWVsXCIpID8gY2FtZWxDYXNlKG5hbWUpIDogbmFtZTtcbiAgc3dpdGNoIChuYW1lKSB7XG4gICAgY2FzZSBcInZhbHVlXCI6XG4gICAgICBiaW5kSW5wdXRWYWx1ZShlbCwgdmFsdWUpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBcInN0eWxlXCI6XG4gICAgICBiaW5kU3R5bGVzKGVsLCB2YWx1ZSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwiY2xhc3NcIjpcbiAgICAgIGJpbmRDbGFzc2VzKGVsLCB2YWx1ZSk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwic2VsZWN0ZWRcIjpcbiAgICBjYXNlIFwiY2hlY2tlZFwiOlxuICAgICAgYmluZEF0dHJpYnV0ZUFuZFByb3BlcnR5KGVsLCBuYW1lLCB2YWx1ZSk7XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgYmluZEF0dHJpYnV0ZShlbCwgbmFtZSwgdmFsdWUpO1xuICAgICAgYnJlYWs7XG4gIH1cbn1cbmZ1bmN0aW9uIGJpbmRJbnB1dFZhbHVlKGVsLCB2YWx1ZSkge1xuICBpZiAoZWwudHlwZSA9PT0gXCJyYWRpb1wiKSB7XG4gICAgaWYgKGVsLmF0dHJpYnV0ZXMudmFsdWUgPT09IHZvaWQgMCkge1xuICAgICAgZWwudmFsdWUgPSB2YWx1ZTtcbiAgICB9XG4gICAgaWYgKHdpbmRvdy5mcm9tTW9kZWwpIHtcbiAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09IFwiYm9vbGVhblwiKSB7XG4gICAgICAgIGVsLmNoZWNrZWQgPSBzYWZlUGFyc2VCb29sZWFuKGVsLnZhbHVlKSA9PT0gdmFsdWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBlbC5jaGVja2VkID0gY2hlY2tlZEF0dHJMb29zZUNvbXBhcmUoZWwudmFsdWUsIHZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSBpZiAoZWwudHlwZSA9PT0gXCJjaGVja2JveFwiKSB7XG4gICAgaWYgKE51bWJlci5pc0ludGVnZXIodmFsdWUpKSB7XG4gICAgICBlbC52YWx1ZSA9IHZhbHVlO1xuICAgIH0gZWxzZSBpZiAoIUFycmF5LmlzQXJyYXkodmFsdWUpICYmIHR5cGVvZiB2YWx1ZSAhPT0gXCJib29sZWFuXCIgJiYgIVtudWxsLCB2b2lkIDBdLmluY2x1ZGVzKHZhbHVlKSkge1xuICAgICAgZWwudmFsdWUgPSBTdHJpbmcodmFsdWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgZWwuY2hlY2tlZCA9IHZhbHVlLnNvbWUoKHZhbCkgPT4gY2hlY2tlZEF0dHJMb29zZUNvbXBhcmUodmFsLCBlbC52YWx1ZSkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZWwuY2hlY2tlZCA9ICEhdmFsdWU7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2UgaWYgKGVsLnRhZ05hbWUgPT09IFwiU0VMRUNUXCIpIHtcbiAgICB1cGRhdGVTZWxlY3QoZWwsIHZhbHVlKTtcbiAgfSBlbHNlIHtcbiAgICBpZiAoZWwudmFsdWUgPT09IHZhbHVlKVxuICAgICAgcmV0dXJuO1xuICAgIGVsLnZhbHVlID0gdmFsdWUgPT09IHZvaWQgMCA/IFwiXCIgOiB2YWx1ZTtcbiAgfVxufVxuZnVuY3Rpb24gYmluZENsYXNzZXMoZWwsIHZhbHVlKSB7XG4gIGlmIChlbC5feF91bmRvQWRkZWRDbGFzc2VzKVxuICAgIGVsLl94X3VuZG9BZGRlZENsYXNzZXMoKTtcbiAgZWwuX3hfdW5kb0FkZGVkQ2xhc3NlcyA9IHNldENsYXNzZXMoZWwsIHZhbHVlKTtcbn1cbmZ1bmN0aW9uIGJpbmRTdHlsZXMoZWwsIHZhbHVlKSB7XG4gIGlmIChlbC5feF91bmRvQWRkZWRTdHlsZXMpXG4gICAgZWwuX3hfdW5kb0FkZGVkU3R5bGVzKCk7XG4gIGVsLl94X3VuZG9BZGRlZFN0eWxlcyA9IHNldFN0eWxlcyhlbCwgdmFsdWUpO1xufVxuZnVuY3Rpb24gYmluZEF0dHJpYnV0ZUFuZFByb3BlcnR5KGVsLCBuYW1lLCB2YWx1ZSkge1xuICBiaW5kQXR0cmlidXRlKGVsLCBuYW1lLCB2YWx1ZSk7XG4gIHNldFByb3BlcnR5SWZDaGFuZ2VkKGVsLCBuYW1lLCB2YWx1ZSk7XG59XG5mdW5jdGlvbiBiaW5kQXR0cmlidXRlKGVsLCBuYW1lLCB2YWx1ZSkge1xuICBpZiAoW251bGwsIHZvaWQgMCwgZmFsc2VdLmluY2x1ZGVzKHZhbHVlKSAmJiBhdHRyaWJ1dGVTaG91bGRudEJlUHJlc2VydmVkSWZGYWxzeShuYW1lKSkge1xuICAgIGVsLnJlbW92ZUF0dHJpYnV0ZShuYW1lKTtcbiAgfSBlbHNlIHtcbiAgICBpZiAoaXNCb29sZWFuQXR0cihuYW1lKSlcbiAgICAgIHZhbHVlID0gbmFtZTtcbiAgICBzZXRJZkNoYW5nZWQoZWwsIG5hbWUsIHZhbHVlKTtcbiAgfVxufVxuZnVuY3Rpb24gc2V0SWZDaGFuZ2VkKGVsLCBhdHRyTmFtZSwgdmFsdWUpIHtcbiAgaWYgKGVsLmdldEF0dHJpYnV0ZShhdHRyTmFtZSkgIT0gdmFsdWUpIHtcbiAgICBlbC5zZXRBdHRyaWJ1dGUoYXR0ck5hbWUsIHZhbHVlKTtcbiAgfVxufVxuZnVuY3Rpb24gc2V0UHJvcGVydHlJZkNoYW5nZWQoZWwsIHByb3BOYW1lLCB2YWx1ZSkge1xuICBpZiAoZWxbcHJvcE5hbWVdICE9PSB2YWx1ZSkge1xuICAgIGVsW3Byb3BOYW1lXSA9IHZhbHVlO1xuICB9XG59XG5mdW5jdGlvbiB1cGRhdGVTZWxlY3QoZWwsIHZhbHVlKSB7XG4gIGNvbnN0IGFycmF5V3JhcHBlZFZhbHVlID0gW10uY29uY2F0KHZhbHVlKS5tYXAoKHZhbHVlMikgPT4ge1xuICAgIHJldHVybiB2YWx1ZTIgKyBcIlwiO1xuICB9KTtcbiAgQXJyYXkuZnJvbShlbC5vcHRpb25zKS5mb3JFYWNoKChvcHRpb24pID0+IHtcbiAgICBvcHRpb24uc2VsZWN0ZWQgPSBhcnJheVdyYXBwZWRWYWx1ZS5pbmNsdWRlcyhvcHRpb24udmFsdWUpO1xuICB9KTtcbn1cbmZ1bmN0aW9uIGNhbWVsQ2FzZShzdWJqZWN0KSB7XG4gIHJldHVybiBzdWJqZWN0LnRvTG93ZXJDYXNlKCkucmVwbGFjZSgvLShcXHcpL2csIChtYXRjaCwgY2hhcikgPT4gY2hhci50b1VwcGVyQ2FzZSgpKTtcbn1cbmZ1bmN0aW9uIGNoZWNrZWRBdHRyTG9vc2VDb21wYXJlKHZhbHVlQSwgdmFsdWVCKSB7XG4gIHJldHVybiB2YWx1ZUEgPT0gdmFsdWVCO1xufVxuZnVuY3Rpb24gc2FmZVBhcnNlQm9vbGVhbihyYXdWYWx1ZSkge1xuICBpZiAoWzEsIFwiMVwiLCBcInRydWVcIiwgXCJvblwiLCBcInllc1wiLCB0cnVlXS5pbmNsdWRlcyhyYXdWYWx1ZSkpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBpZiAoWzAsIFwiMFwiLCBcImZhbHNlXCIsIFwib2ZmXCIsIFwibm9cIiwgZmFsc2VdLmluY2x1ZGVzKHJhd1ZhbHVlKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICByZXR1cm4gcmF3VmFsdWUgPyBCb29sZWFuKHJhd1ZhbHVlKSA6IG51bGw7XG59XG5mdW5jdGlvbiBpc0Jvb2xlYW5BdHRyKGF0dHJOYW1lKSB7XG4gIGNvbnN0IGJvb2xlYW5BdHRyaWJ1dGVzID0gW1xuICAgIFwiZGlzYWJsZWRcIixcbiAgICBcImNoZWNrZWRcIixcbiAgICBcInJlcXVpcmVkXCIsXG4gICAgXCJyZWFkb25seVwiLFxuICAgIFwib3BlblwiLFxuICAgIFwic2VsZWN0ZWRcIixcbiAgICBcImF1dG9mb2N1c1wiLFxuICAgIFwiaXRlbXNjb3BlXCIsXG4gICAgXCJtdWx0aXBsZVwiLFxuICAgIFwibm92YWxpZGF0ZVwiLFxuICAgIFwiYWxsb3dmdWxsc2NyZWVuXCIsXG4gICAgXCJhbGxvd3BheW1lbnRyZXF1ZXN0XCIsXG4gICAgXCJmb3Jtbm92YWxpZGF0ZVwiLFxuICAgIFwiYXV0b3BsYXlcIixcbiAgICBcImNvbnRyb2xzXCIsXG4gICAgXCJsb29wXCIsXG4gICAgXCJtdXRlZFwiLFxuICAgIFwicGxheXNpbmxpbmVcIixcbiAgICBcImRlZmF1bHRcIixcbiAgICBcImlzbWFwXCIsXG4gICAgXCJyZXZlcnNlZFwiLFxuICAgIFwiYXN5bmNcIixcbiAgICBcImRlZmVyXCIsXG4gICAgXCJub21vZHVsZVwiXG4gIF07XG4gIHJldHVybiBib29sZWFuQXR0cmlidXRlcy5pbmNsdWRlcyhhdHRyTmFtZSk7XG59XG5mdW5jdGlvbiBhdHRyaWJ1dGVTaG91bGRudEJlUHJlc2VydmVkSWZGYWxzeShuYW1lKSB7XG4gIHJldHVybiAhW1wiYXJpYS1wcmVzc2VkXCIsIFwiYXJpYS1jaGVja2VkXCIsIFwiYXJpYS1leHBhbmRlZFwiLCBcImFyaWEtc2VsZWN0ZWRcIl0uaW5jbHVkZXMobmFtZSk7XG59XG5mdW5jdGlvbiBnZXRCaW5kaW5nKGVsLCBuYW1lLCBmYWxsYmFjaykge1xuICBpZiAoZWwuX3hfYmluZGluZ3MgJiYgZWwuX3hfYmluZGluZ3NbbmFtZV0gIT09IHZvaWQgMClcbiAgICByZXR1cm4gZWwuX3hfYmluZGluZ3NbbmFtZV07XG4gIHJldHVybiBnZXRBdHRyaWJ1dGVCaW5kaW5nKGVsLCBuYW1lLCBmYWxsYmFjayk7XG59XG5mdW5jdGlvbiBleHRyYWN0UHJvcChlbCwgbmFtZSwgZmFsbGJhY2ssIGV4dHJhY3QgPSB0cnVlKSB7XG4gIGlmIChlbC5feF9iaW5kaW5ncyAmJiBlbC5feF9iaW5kaW5nc1tuYW1lXSAhPT0gdm9pZCAwKVxuICAgIHJldHVybiBlbC5feF9iaW5kaW5nc1tuYW1lXTtcbiAgaWYgKGVsLl94X2lubGluZUJpbmRpbmdzICYmIGVsLl94X2lubGluZUJpbmRpbmdzW25hbWVdICE9PSB2b2lkIDApIHtcbiAgICBsZXQgYmluZGluZyA9IGVsLl94X2lubGluZUJpbmRpbmdzW25hbWVdO1xuICAgIGJpbmRpbmcuZXh0cmFjdCA9IGV4dHJhY3Q7XG4gICAgcmV0dXJuIGRvbnRBdXRvRXZhbHVhdGVGdW5jdGlvbnMoKCkgPT4ge1xuICAgICAgcmV0dXJuIGV2YWx1YXRlKGVsLCBiaW5kaW5nLmV4cHJlc3Npb24pO1xuICAgIH0pO1xuICB9XG4gIHJldHVybiBnZXRBdHRyaWJ1dGVCaW5kaW5nKGVsLCBuYW1lLCBmYWxsYmFjayk7XG59XG5mdW5jdGlvbiBnZXRBdHRyaWJ1dGVCaW5kaW5nKGVsLCBuYW1lLCBmYWxsYmFjaykge1xuICBsZXQgYXR0ciA9IGVsLmdldEF0dHJpYnV0ZShuYW1lKTtcbiAgaWYgKGF0dHIgPT09IG51bGwpXG4gICAgcmV0dXJuIHR5cGVvZiBmYWxsYmFjayA9PT0gXCJmdW5jdGlvblwiID8gZmFsbGJhY2soKSA6IGZhbGxiYWNrO1xuICBpZiAoYXR0ciA9PT0gXCJcIilcbiAgICByZXR1cm4gdHJ1ZTtcbiAgaWYgKGlzQm9vbGVhbkF0dHIobmFtZSkpIHtcbiAgICByZXR1cm4gISFbbmFtZSwgXCJ0cnVlXCJdLmluY2x1ZGVzKGF0dHIpO1xuICB9XG4gIHJldHVybiBhdHRyO1xufVxuXG4vLyBwYWNrYWdlcy9hbHBpbmVqcy9zcmMvdXRpbHMvZGVib3VuY2UuanNcbmZ1bmN0aW9uIGRlYm91bmNlKGZ1bmMsIHdhaXQpIHtcbiAgdmFyIHRpbWVvdXQ7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICB2YXIgY29udGV4dCA9IHRoaXMsIGFyZ3MgPSBhcmd1bWVudHM7XG4gICAgdmFyIGxhdGVyID0gZnVuY3Rpb24oKSB7XG4gICAgICB0aW1lb3V0ID0gbnVsbDtcbiAgICAgIGZ1bmMuYXBwbHkoY29udGV4dCwgYXJncyk7XG4gICAgfTtcbiAgICBjbGVhclRpbWVvdXQodGltZW91dCk7XG4gICAgdGltZW91dCA9IHNldFRpbWVvdXQobGF0ZXIsIHdhaXQpO1xuICB9O1xufVxuXG4vLyBwYWNrYWdlcy9hbHBpbmVqcy9zcmMvdXRpbHMvdGhyb3R0bGUuanNcbmZ1bmN0aW9uIHRocm90dGxlKGZ1bmMsIGxpbWl0KSB7XG4gIGxldCBpblRocm90dGxlO1xuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgbGV0IGNvbnRleHQgPSB0aGlzLCBhcmdzID0gYXJndW1lbnRzO1xuICAgIGlmICghaW5UaHJvdHRsZSkge1xuICAgICAgZnVuYy5hcHBseShjb250ZXh0LCBhcmdzKTtcbiAgICAgIGluVGhyb3R0bGUgPSB0cnVlO1xuICAgICAgc2V0VGltZW91dCgoKSA9PiBpblRocm90dGxlID0gZmFsc2UsIGxpbWl0KTtcbiAgICB9XG4gIH07XG59XG5cbi8vIHBhY2thZ2VzL2FscGluZWpzL3NyYy9lbnRhbmdsZS5qc1xuZnVuY3Rpb24gZW50YW5nbGUoeyBnZXQ6IG91dGVyR2V0LCBzZXQ6IG91dGVyU2V0IH0sIHsgZ2V0OiBpbm5lckdldCwgc2V0OiBpbm5lclNldCB9KSB7XG4gIGxldCBmaXJzdFJ1biA9IHRydWU7XG4gIGxldCBvdXRlckhhc2g7XG4gIGxldCBpbm5lckhhc2g7XG4gIGxldCByZWZlcmVuY2UgPSBlZmZlY3QoKCkgPT4ge1xuICAgIGxldCBvdXRlciA9IG91dGVyR2V0KCk7XG4gICAgbGV0IGlubmVyID0gaW5uZXJHZXQoKTtcbiAgICBpZiAoZmlyc3RSdW4pIHtcbiAgICAgIGlubmVyU2V0KGNsb25lSWZPYmplY3Qob3V0ZXIpKTtcbiAgICAgIGZpcnN0UnVuID0gZmFsc2U7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxldCBvdXRlckhhc2hMYXRlc3QgPSBKU09OLnN0cmluZ2lmeShvdXRlcik7XG4gICAgICBsZXQgaW5uZXJIYXNoTGF0ZXN0ID0gSlNPTi5zdHJpbmdpZnkoaW5uZXIpO1xuICAgICAgaWYgKG91dGVySGFzaExhdGVzdCAhPT0gb3V0ZXJIYXNoKSB7XG4gICAgICAgIGlubmVyU2V0KGNsb25lSWZPYmplY3Qob3V0ZXIpKTtcbiAgICAgIH0gZWxzZSBpZiAob3V0ZXJIYXNoTGF0ZXN0ICE9PSBpbm5lckhhc2hMYXRlc3QpIHtcbiAgICAgICAgb3V0ZXJTZXQoY2xvbmVJZk9iamVjdChpbm5lcikpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgIH1cbiAgICB9XG4gICAgb3V0ZXJIYXNoID0gSlNPTi5zdHJpbmdpZnkob3V0ZXJHZXQoKSk7XG4gICAgaW5uZXJIYXNoID0gSlNPTi5zdHJpbmdpZnkoaW5uZXJHZXQoKSk7XG4gIH0pO1xuICByZXR1cm4gKCkgPT4ge1xuICAgIHJlbGVhc2UocmVmZXJlbmNlKTtcbiAgfTtcbn1cbmZ1bmN0aW9uIGNsb25lSWZPYmplY3QodmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gXCJvYmplY3RcIiA/IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkodmFsdWUpKSA6IHZhbHVlO1xufVxuXG4vLyBwYWNrYWdlcy9hbHBpbmVqcy9zcmMvcGx1Z2luLmpzXG5mdW5jdGlvbiBwbHVnaW4oY2FsbGJhY2spIHtcbiAgbGV0IGNhbGxiYWNrcyA9IEFycmF5LmlzQXJyYXkoY2FsbGJhY2spID8gY2FsbGJhY2sgOiBbY2FsbGJhY2tdO1xuICBjYWxsYmFja3MuZm9yRWFjaCgoaSkgPT4gaShhbHBpbmVfZGVmYXVsdCkpO1xufVxuXG4vLyBwYWNrYWdlcy9hbHBpbmVqcy9zcmMvc3RvcmUuanNcbnZhciBzdG9yZXMgPSB7fTtcbnZhciBpc1JlYWN0aXZlID0gZmFsc2U7XG5mdW5jdGlvbiBzdG9yZShuYW1lLCB2YWx1ZSkge1xuICBpZiAoIWlzUmVhY3RpdmUpIHtcbiAgICBzdG9yZXMgPSByZWFjdGl2ZShzdG9yZXMpO1xuICAgIGlzUmVhY3RpdmUgPSB0cnVlO1xuICB9XG4gIGlmICh2YWx1ZSA9PT0gdm9pZCAwKSB7XG4gICAgcmV0dXJuIHN0b3Jlc1tuYW1lXTtcbiAgfVxuICBzdG9yZXNbbmFtZV0gPSB2YWx1ZTtcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJvYmplY3RcIiAmJiB2YWx1ZSAhPT0gbnVsbCAmJiB2YWx1ZS5oYXNPd25Qcm9wZXJ0eShcImluaXRcIikgJiYgdHlwZW9mIHZhbHVlLmluaXQgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIHN0b3Jlc1tuYW1lXS5pbml0KCk7XG4gIH1cbiAgaW5pdEludGVyY2VwdG9ycyhzdG9yZXNbbmFtZV0pO1xufVxuZnVuY3Rpb24gZ2V0U3RvcmVzKCkge1xuICByZXR1cm4gc3RvcmVzO1xufVxuXG4vLyBwYWNrYWdlcy9hbHBpbmVqcy9zcmMvYmluZHMuanNcbnZhciBiaW5kcyA9IHt9O1xuZnVuY3Rpb24gYmluZDIobmFtZSwgYmluZGluZ3MpIHtcbiAgbGV0IGdldEJpbmRpbmdzID0gdHlwZW9mIGJpbmRpbmdzICE9PSBcImZ1bmN0aW9uXCIgPyAoKSA9PiBiaW5kaW5ncyA6IGJpbmRpbmdzO1xuICBpZiAobmFtZSBpbnN0YW5jZW9mIEVsZW1lbnQpIHtcbiAgICByZXR1cm4gYXBwbHlCaW5kaW5nc09iamVjdChuYW1lLCBnZXRCaW5kaW5ncygpKTtcbiAgfSBlbHNlIHtcbiAgICBiaW5kc1tuYW1lXSA9IGdldEJpbmRpbmdzO1xuICB9XG4gIHJldHVybiAoKSA9PiB7XG4gIH07XG59XG5mdW5jdGlvbiBpbmplY3RCaW5kaW5nUHJvdmlkZXJzKG9iaikge1xuICBPYmplY3QuZW50cmllcyhiaW5kcykuZm9yRWFjaCgoW25hbWUsIGNhbGxiYWNrXSkgPT4ge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIG5hbWUsIHtcbiAgICAgIGdldCgpIHtcbiAgICAgICAgcmV0dXJuICguLi5hcmdzKSA9PiB7XG4gICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKC4uLmFyZ3MpO1xuICAgICAgICB9O1xuICAgICAgfVxuICAgIH0pO1xuICB9KTtcbiAgcmV0dXJuIG9iajtcbn1cbmZ1bmN0aW9uIGFwcGx5QmluZGluZ3NPYmplY3QoZWwsIG9iaiwgb3JpZ2luYWwpIHtcbiAgbGV0IGNsZWFudXBSdW5uZXJzID0gW107XG4gIHdoaWxlIChjbGVhbnVwUnVubmVycy5sZW5ndGgpXG4gICAgY2xlYW51cFJ1bm5lcnMucG9wKCkoKTtcbiAgbGV0IGF0dHJpYnV0ZXMgPSBPYmplY3QuZW50cmllcyhvYmopLm1hcCgoW25hbWUsIHZhbHVlXSkgPT4gKHsgbmFtZSwgdmFsdWUgfSkpO1xuICBsZXQgc3RhdGljQXR0cmlidXRlcyA9IGF0dHJpYnV0ZXNPbmx5KGF0dHJpYnV0ZXMpO1xuICBhdHRyaWJ1dGVzID0gYXR0cmlidXRlcy5tYXAoKGF0dHJpYnV0ZSkgPT4ge1xuICAgIGlmIChzdGF0aWNBdHRyaWJ1dGVzLmZpbmQoKGF0dHIpID0+IGF0dHIubmFtZSA9PT0gYXR0cmlidXRlLm5hbWUpKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBuYW1lOiBgeC1iaW5kOiR7YXR0cmlidXRlLm5hbWV9YCxcbiAgICAgICAgdmFsdWU6IGBcIiR7YXR0cmlidXRlLnZhbHVlfVwiYFxuICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIGF0dHJpYnV0ZTtcbiAgfSk7XG4gIGRpcmVjdGl2ZXMoZWwsIGF0dHJpYnV0ZXMsIG9yaWdpbmFsKS5tYXAoKGhhbmRsZSkgPT4ge1xuICAgIGNsZWFudXBSdW5uZXJzLnB1c2goaGFuZGxlLnJ1bkNsZWFudXBzKTtcbiAgICBoYW5kbGUoKTtcbiAgfSk7XG4gIHJldHVybiAoKSA9PiB7XG4gICAgd2hpbGUgKGNsZWFudXBSdW5uZXJzLmxlbmd0aClcbiAgICAgIGNsZWFudXBSdW5uZXJzLnBvcCgpKCk7XG4gIH07XG59XG5cbi8vIHBhY2thZ2VzL2FscGluZWpzL3NyYy9kYXRhcy5qc1xudmFyIGRhdGFzID0ge307XG5mdW5jdGlvbiBkYXRhKG5hbWUsIGNhbGxiYWNrKSB7XG4gIGRhdGFzW25hbWVdID0gY2FsbGJhY2s7XG59XG5mdW5jdGlvbiBpbmplY3REYXRhUHJvdmlkZXJzKG9iaiwgY29udGV4dCkge1xuICBPYmplY3QuZW50cmllcyhkYXRhcykuZm9yRWFjaCgoW25hbWUsIGNhbGxiYWNrXSkgPT4ge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIG5hbWUsIHtcbiAgICAgIGdldCgpIHtcbiAgICAgICAgcmV0dXJuICguLi5hcmdzKSA9PiB7XG4gICAgICAgICAgcmV0dXJuIGNhbGxiYWNrLmJpbmQoY29udGV4dCkoLi4uYXJncyk7XG4gICAgICAgIH07XG4gICAgICB9LFxuICAgICAgZW51bWVyYWJsZTogZmFsc2VcbiAgICB9KTtcbiAgfSk7XG4gIHJldHVybiBvYmo7XG59XG5cbi8vIHBhY2thZ2VzL2FscGluZWpzL3NyYy9hbHBpbmUuanNcbnZhciBBbHBpbmUgPSB7XG4gIGdldCByZWFjdGl2ZSgpIHtcbiAgICByZXR1cm4gcmVhY3RpdmU7XG4gIH0sXG4gIGdldCByZWxlYXNlKCkge1xuICAgIHJldHVybiByZWxlYXNlO1xuICB9LFxuICBnZXQgZWZmZWN0KCkge1xuICAgIHJldHVybiBlZmZlY3Q7XG4gIH0sXG4gIGdldCByYXcoKSB7XG4gICAgcmV0dXJuIHJhdztcbiAgfSxcbiAgdmVyc2lvbjogXCIzLjE0LjBcIixcbiAgZmx1c2hBbmRTdG9wRGVmZXJyaW5nTXV0YXRpb25zLFxuICBkb250QXV0b0V2YWx1YXRlRnVuY3Rpb25zLFxuICBkaXNhYmxlRWZmZWN0U2NoZWR1bGluZyxcbiAgc3RhcnRPYnNlcnZpbmdNdXRhdGlvbnMsXG4gIHN0b3BPYnNlcnZpbmdNdXRhdGlvbnMsXG4gIHNldFJlYWN0aXZpdHlFbmdpbmUsXG4gIG9uQXR0cmlidXRlUmVtb3ZlZCxcbiAgb25BdHRyaWJ1dGVzQWRkZWQsXG4gIGNsb3Nlc3REYXRhU3RhY2ssXG4gIHNraXBEdXJpbmdDbG9uZSxcbiAgb25seUR1cmluZ0Nsb25lLFxuICBhZGRSb290U2VsZWN0b3IsXG4gIGFkZEluaXRTZWxlY3RvcixcbiAgaW50ZXJjZXB0Q2xvbmUsXG4gIGFkZFNjb3BlVG9Ob2RlLFxuICBkZWZlck11dGF0aW9ucyxcbiAgbWFwQXR0cmlidXRlcyxcbiAgZXZhbHVhdGVMYXRlcixcbiAgaW50ZXJjZXB0SW5pdCxcbiAgc2V0RXZhbHVhdG9yLFxuICBtZXJnZVByb3hpZXMsXG4gIGV4dHJhY3RQcm9wLFxuICBmaW5kQ2xvc2VzdCxcbiAgb25FbFJlbW92ZWQsXG4gIGNsb3Nlc3RSb290LFxuICBkZXN0cm95VHJlZSxcbiAgaW50ZXJjZXB0b3IsXG4gIC8vIElOVEVSTkFMOiBub3QgcHVibGljIEFQSSBhbmQgaXMgc3ViamVjdCB0byBjaGFuZ2Ugd2l0aG91dCBtYWpvciByZWxlYXNlLlxuICB0cmFuc2l0aW9uLFxuICAvLyBJTlRFUk5BTFxuICBzZXRTdHlsZXMsXG4gIC8vIElOVEVSTkFMXG4gIG11dGF0ZURvbSxcbiAgZGlyZWN0aXZlLFxuICBlbnRhbmdsZSxcbiAgdGhyb3R0bGUsXG4gIGRlYm91bmNlLFxuICBldmFsdWF0ZSxcbiAgaW5pdFRyZWUsXG4gIG5leHRUaWNrLFxuICBwcmVmaXhlZDogcHJlZml4LFxuICBwcmVmaXg6IHNldFByZWZpeCxcbiAgcGx1Z2luLFxuICBtYWdpYyxcbiAgc3RvcmUsXG4gIHN0YXJ0LFxuICBjbG9uZSxcbiAgLy8gSU5URVJOQUxcbiAgY2xvbmVOb2RlLFxuICAvLyBJTlRFUk5BTFxuICBib3VuZDogZ2V0QmluZGluZyxcbiAgJGRhdGE6IHNjb3BlLFxuICB3YXRjaCxcbiAgd2FsayxcbiAgZGF0YSxcbiAgYmluZDogYmluZDJcbn07XG52YXIgYWxwaW5lX2RlZmF1bHQgPSBBbHBpbmU7XG5cbi8vIG5vZGVfbW9kdWxlcy9AdnVlL3NoYXJlZC9kaXN0L3NoYXJlZC5lc20tYnVuZGxlci5qc1xuZnVuY3Rpb24gbWFrZU1hcChzdHIsIGV4cGVjdHNMb3dlckNhc2UpIHtcbiAgY29uc3QgbWFwID0gLyogQF9fUFVSRV9fICovIE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIGNvbnN0IGxpc3QgPSBzdHIuc3BsaXQoXCIsXCIpO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICBtYXBbbGlzdFtpXV0gPSB0cnVlO1xuICB9XG4gIHJldHVybiBleHBlY3RzTG93ZXJDYXNlID8gKHZhbCkgPT4gISFtYXBbdmFsLnRvTG93ZXJDYXNlKCldIDogKHZhbCkgPT4gISFtYXBbdmFsXTtcbn1cbnZhciBzcGVjaWFsQm9vbGVhbkF0dHJzID0gYGl0ZW1zY29wZSxhbGxvd2Z1bGxzY3JlZW4sZm9ybW5vdmFsaWRhdGUsaXNtYXAsbm9tb2R1bGUsbm92YWxpZGF0ZSxyZWFkb25seWA7XG52YXIgaXNCb29sZWFuQXR0cjIgPSAvKiBAX19QVVJFX18gKi8gbWFrZU1hcChzcGVjaWFsQm9vbGVhbkF0dHJzICsgYCxhc3luYyxhdXRvZm9jdXMsYXV0b3BsYXksY29udHJvbHMsZGVmYXVsdCxkZWZlcixkaXNhYmxlZCxoaWRkZW4sbG9vcCxvcGVuLHJlcXVpcmVkLHJldmVyc2VkLHNjb3BlZCxzZWFtbGVzcyxjaGVja2VkLG11dGVkLG11bHRpcGxlLHNlbGVjdGVkYCk7XG52YXIgRU1QVFlfT0JKID0gdHJ1ZSA/IE9iamVjdC5mcmVlemUoe30pIDoge307XG52YXIgRU1QVFlfQVJSID0gdHJ1ZSA/IE9iamVjdC5mcmVlemUoW10pIDogW107XG52YXIgaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIGhhc093biA9ICh2YWwsIGtleSkgPT4gaGFzT3duUHJvcGVydHkuY2FsbCh2YWwsIGtleSk7XG52YXIgaXNBcnJheSA9IEFycmF5LmlzQXJyYXk7XG52YXIgaXNNYXAgPSAodmFsKSA9PiB0b1R5cGVTdHJpbmcodmFsKSA9PT0gXCJbb2JqZWN0IE1hcF1cIjtcbnZhciBpc1N0cmluZyA9ICh2YWwpID0+IHR5cGVvZiB2YWwgPT09IFwic3RyaW5nXCI7XG52YXIgaXNTeW1ib2wgPSAodmFsKSA9PiB0eXBlb2YgdmFsID09PSBcInN5bWJvbFwiO1xudmFyIGlzT2JqZWN0ID0gKHZhbCkgPT4gdmFsICE9PSBudWxsICYmIHR5cGVvZiB2YWwgPT09IFwib2JqZWN0XCI7XG52YXIgb2JqZWN0VG9TdHJpbmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xudmFyIHRvVHlwZVN0cmluZyA9ICh2YWx1ZSkgPT4gb2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSk7XG52YXIgdG9SYXdUeXBlID0gKHZhbHVlKSA9PiB7XG4gIHJldHVybiB0b1R5cGVTdHJpbmcodmFsdWUpLnNsaWNlKDgsIC0xKTtcbn07XG52YXIgaXNJbnRlZ2VyS2V5ID0gKGtleSkgPT4gaXNTdHJpbmcoa2V5KSAmJiBrZXkgIT09IFwiTmFOXCIgJiYga2V5WzBdICE9PSBcIi1cIiAmJiBcIlwiICsgcGFyc2VJbnQoa2V5LCAxMCkgPT09IGtleTtcbnZhciBjYWNoZVN0cmluZ0Z1bmN0aW9uID0gKGZuKSA9PiB7XG4gIGNvbnN0IGNhY2hlID0gLyogQF9fUFVSRV9fICovIE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIHJldHVybiAoc3RyKSA9PiB7XG4gICAgY29uc3QgaGl0ID0gY2FjaGVbc3RyXTtcbiAgICByZXR1cm4gaGl0IHx8IChjYWNoZVtzdHJdID0gZm4oc3RyKSk7XG4gIH07XG59O1xudmFyIGNhbWVsaXplUkUgPSAvLShcXHcpL2c7XG52YXIgY2FtZWxpemUgPSBjYWNoZVN0cmluZ0Z1bmN0aW9uKChzdHIpID0+IHtcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKGNhbWVsaXplUkUsIChfLCBjKSA9PiBjID8gYy50b1VwcGVyQ2FzZSgpIDogXCJcIik7XG59KTtcbnZhciBoeXBoZW5hdGVSRSA9IC9cXEIoW0EtWl0pL2c7XG52YXIgaHlwaGVuYXRlID0gY2FjaGVTdHJpbmdGdW5jdGlvbigoc3RyKSA9PiBzdHIucmVwbGFjZShoeXBoZW5hdGVSRSwgXCItJDFcIikudG9Mb3dlckNhc2UoKSk7XG52YXIgY2FwaXRhbGl6ZSA9IGNhY2hlU3RyaW5nRnVuY3Rpb24oKHN0cikgPT4gc3RyLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgc3RyLnNsaWNlKDEpKTtcbnZhciB0b0hhbmRsZXJLZXkgPSBjYWNoZVN0cmluZ0Z1bmN0aW9uKChzdHIpID0+IHN0ciA/IGBvbiR7Y2FwaXRhbGl6ZShzdHIpfWAgOiBgYCk7XG52YXIgaGFzQ2hhbmdlZCA9ICh2YWx1ZSwgb2xkVmFsdWUpID0+IHZhbHVlICE9PSBvbGRWYWx1ZSAmJiAodmFsdWUgPT09IHZhbHVlIHx8IG9sZFZhbHVlID09PSBvbGRWYWx1ZSk7XG5cbi8vIG5vZGVfbW9kdWxlcy9AdnVlL3JlYWN0aXZpdHkvZGlzdC9yZWFjdGl2aXR5LmVzbS1idW5kbGVyLmpzXG52YXIgdGFyZ2V0TWFwID0gLyogQF9fUFVSRV9fICovIG5ldyBXZWFrTWFwKCk7XG52YXIgZWZmZWN0U3RhY2sgPSBbXTtcbnZhciBhY3RpdmVFZmZlY3Q7XG52YXIgSVRFUkFURV9LRVkgPSBTeW1ib2wodHJ1ZSA/IFwiaXRlcmF0ZVwiIDogXCJcIik7XG52YXIgTUFQX0tFWV9JVEVSQVRFX0tFWSA9IFN5bWJvbCh0cnVlID8gXCJNYXAga2V5IGl0ZXJhdGVcIiA6IFwiXCIpO1xuZnVuY3Rpb24gaXNFZmZlY3QoZm4pIHtcbiAgcmV0dXJuIGZuICYmIGZuLl9pc0VmZmVjdCA9PT0gdHJ1ZTtcbn1cbmZ1bmN0aW9uIGVmZmVjdDIoZm4sIG9wdGlvbnMgPSBFTVBUWV9PQkopIHtcbiAgaWYgKGlzRWZmZWN0KGZuKSkge1xuICAgIGZuID0gZm4ucmF3O1xuICB9XG4gIGNvbnN0IGVmZmVjdDMgPSBjcmVhdGVSZWFjdGl2ZUVmZmVjdChmbiwgb3B0aW9ucyk7XG4gIGlmICghb3B0aW9ucy5sYXp5KSB7XG4gICAgZWZmZWN0MygpO1xuICB9XG4gIHJldHVybiBlZmZlY3QzO1xufVxuZnVuY3Rpb24gc3RvcChlZmZlY3QzKSB7XG4gIGlmIChlZmZlY3QzLmFjdGl2ZSkge1xuICAgIGNsZWFudXAoZWZmZWN0Myk7XG4gICAgaWYgKGVmZmVjdDMub3B0aW9ucy5vblN0b3ApIHtcbiAgICAgIGVmZmVjdDMub3B0aW9ucy5vblN0b3AoKTtcbiAgICB9XG4gICAgZWZmZWN0My5hY3RpdmUgPSBmYWxzZTtcbiAgfVxufVxudmFyIHVpZCA9IDA7XG5mdW5jdGlvbiBjcmVhdGVSZWFjdGl2ZUVmZmVjdChmbiwgb3B0aW9ucykge1xuICBjb25zdCBlZmZlY3QzID0gZnVuY3Rpb24gcmVhY3RpdmVFZmZlY3QoKSB7XG4gICAgaWYgKCFlZmZlY3QzLmFjdGl2ZSkge1xuICAgICAgcmV0dXJuIGZuKCk7XG4gICAgfVxuICAgIGlmICghZWZmZWN0U3RhY2suaW5jbHVkZXMoZWZmZWN0MykpIHtcbiAgICAgIGNsZWFudXAoZWZmZWN0Myk7XG4gICAgICB0cnkge1xuICAgICAgICBlbmFibGVUcmFja2luZygpO1xuICAgICAgICBlZmZlY3RTdGFjay5wdXNoKGVmZmVjdDMpO1xuICAgICAgICBhY3RpdmVFZmZlY3QgPSBlZmZlY3QzO1xuICAgICAgICByZXR1cm4gZm4oKTtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIGVmZmVjdFN0YWNrLnBvcCgpO1xuICAgICAgICByZXNldFRyYWNraW5nKCk7XG4gICAgICAgIGFjdGl2ZUVmZmVjdCA9IGVmZmVjdFN0YWNrW2VmZmVjdFN0YWNrLmxlbmd0aCAtIDFdO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbiAgZWZmZWN0My5pZCA9IHVpZCsrO1xuICBlZmZlY3QzLmFsbG93UmVjdXJzZSA9ICEhb3B0aW9ucy5hbGxvd1JlY3Vyc2U7XG4gIGVmZmVjdDMuX2lzRWZmZWN0ID0gdHJ1ZTtcbiAgZWZmZWN0My5hY3RpdmUgPSB0cnVlO1xuICBlZmZlY3QzLnJhdyA9IGZuO1xuICBlZmZlY3QzLmRlcHMgPSBbXTtcbiAgZWZmZWN0My5vcHRpb25zID0gb3B0aW9ucztcbiAgcmV0dXJuIGVmZmVjdDM7XG59XG5mdW5jdGlvbiBjbGVhbnVwKGVmZmVjdDMpIHtcbiAgY29uc3QgeyBkZXBzIH0gPSBlZmZlY3QzO1xuICBpZiAoZGVwcy5sZW5ndGgpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGRlcHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGRlcHNbaV0uZGVsZXRlKGVmZmVjdDMpO1xuICAgIH1cbiAgICBkZXBzLmxlbmd0aCA9IDA7XG4gIH1cbn1cbnZhciBzaG91bGRUcmFjayA9IHRydWU7XG52YXIgdHJhY2tTdGFjayA9IFtdO1xuZnVuY3Rpb24gcGF1c2VUcmFja2luZygpIHtcbiAgdHJhY2tTdGFjay5wdXNoKHNob3VsZFRyYWNrKTtcbiAgc2hvdWxkVHJhY2sgPSBmYWxzZTtcbn1cbmZ1bmN0aW9uIGVuYWJsZVRyYWNraW5nKCkge1xuICB0cmFja1N0YWNrLnB1c2goc2hvdWxkVHJhY2spO1xuICBzaG91bGRUcmFjayA9IHRydWU7XG59XG5mdW5jdGlvbiByZXNldFRyYWNraW5nKCkge1xuICBjb25zdCBsYXN0ID0gdHJhY2tTdGFjay5wb3AoKTtcbiAgc2hvdWxkVHJhY2sgPSBsYXN0ID09PSB2b2lkIDAgPyB0cnVlIDogbGFzdDtcbn1cbmZ1bmN0aW9uIHRyYWNrKHRhcmdldCwgdHlwZSwga2V5KSB7XG4gIGlmICghc2hvdWxkVHJhY2sgfHwgYWN0aXZlRWZmZWN0ID09PSB2b2lkIDApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgbGV0IGRlcHNNYXAgPSB0YXJnZXRNYXAuZ2V0KHRhcmdldCk7XG4gIGlmICghZGVwc01hcCkge1xuICAgIHRhcmdldE1hcC5zZXQodGFyZ2V0LCBkZXBzTWFwID0gLyogQF9fUFVSRV9fICovIG5ldyBNYXAoKSk7XG4gIH1cbiAgbGV0IGRlcCA9IGRlcHNNYXAuZ2V0KGtleSk7XG4gIGlmICghZGVwKSB7XG4gICAgZGVwc01hcC5zZXQoa2V5LCBkZXAgPSAvKiBAX19QVVJFX18gKi8gbmV3IFNldCgpKTtcbiAgfVxuICBpZiAoIWRlcC5oYXMoYWN0aXZlRWZmZWN0KSkge1xuICAgIGRlcC5hZGQoYWN0aXZlRWZmZWN0KTtcbiAgICBhY3RpdmVFZmZlY3QuZGVwcy5wdXNoKGRlcCk7XG4gICAgaWYgKGFjdGl2ZUVmZmVjdC5vcHRpb25zLm9uVHJhY2spIHtcbiAgICAgIGFjdGl2ZUVmZmVjdC5vcHRpb25zLm9uVHJhY2soe1xuICAgICAgICBlZmZlY3Q6IGFjdGl2ZUVmZmVjdCxcbiAgICAgICAgdGFyZ2V0LFxuICAgICAgICB0eXBlLFxuICAgICAgICBrZXlcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxufVxuZnVuY3Rpb24gdHJpZ2dlcih0YXJnZXQsIHR5cGUsIGtleSwgbmV3VmFsdWUsIG9sZFZhbHVlLCBvbGRUYXJnZXQpIHtcbiAgY29uc3QgZGVwc01hcCA9IHRhcmdldE1hcC5nZXQodGFyZ2V0KTtcbiAgaWYgKCFkZXBzTWFwKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGNvbnN0IGVmZmVjdHMgPSAvKiBAX19QVVJFX18gKi8gbmV3IFNldCgpO1xuICBjb25zdCBhZGQyID0gKGVmZmVjdHNUb0FkZCkgPT4ge1xuICAgIGlmIChlZmZlY3RzVG9BZGQpIHtcbiAgICAgIGVmZmVjdHNUb0FkZC5mb3JFYWNoKChlZmZlY3QzKSA9PiB7XG4gICAgICAgIGlmIChlZmZlY3QzICE9PSBhY3RpdmVFZmZlY3QgfHwgZWZmZWN0My5hbGxvd1JlY3Vyc2UpIHtcbiAgICAgICAgICBlZmZlY3RzLmFkZChlZmZlY3QzKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9O1xuICBpZiAodHlwZSA9PT0gXCJjbGVhclwiKSB7XG4gICAgZGVwc01hcC5mb3JFYWNoKGFkZDIpO1xuICB9IGVsc2UgaWYgKGtleSA9PT0gXCJsZW5ndGhcIiAmJiBpc0FycmF5KHRhcmdldCkpIHtcbiAgICBkZXBzTWFwLmZvckVhY2goKGRlcCwga2V5MikgPT4ge1xuICAgICAgaWYgKGtleTIgPT09IFwibGVuZ3RoXCIgfHwga2V5MiA+PSBuZXdWYWx1ZSkge1xuICAgICAgICBhZGQyKGRlcCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgaWYgKGtleSAhPT0gdm9pZCAwKSB7XG4gICAgICBhZGQyKGRlcHNNYXAuZ2V0KGtleSkpO1xuICAgIH1cbiAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgIGNhc2UgXCJhZGRcIjpcbiAgICAgICAgaWYgKCFpc0FycmF5KHRhcmdldCkpIHtcbiAgICAgICAgICBhZGQyKGRlcHNNYXAuZ2V0KElURVJBVEVfS0VZKSk7XG4gICAgICAgICAgaWYgKGlzTWFwKHRhcmdldCkpIHtcbiAgICAgICAgICAgIGFkZDIoZGVwc01hcC5nZXQoTUFQX0tFWV9JVEVSQVRFX0tFWSkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChpc0ludGVnZXJLZXkoa2V5KSkge1xuICAgICAgICAgIGFkZDIoZGVwc01hcC5nZXQoXCJsZW5ndGhcIikpO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcImRlbGV0ZVwiOlxuICAgICAgICBpZiAoIWlzQXJyYXkodGFyZ2V0KSkge1xuICAgICAgICAgIGFkZDIoZGVwc01hcC5nZXQoSVRFUkFURV9LRVkpKTtcbiAgICAgICAgICBpZiAoaXNNYXAodGFyZ2V0KSkge1xuICAgICAgICAgICAgYWRkMihkZXBzTWFwLmdldChNQVBfS0VZX0lURVJBVEVfS0VZKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcInNldFwiOlxuICAgICAgICBpZiAoaXNNYXAodGFyZ2V0KSkge1xuICAgICAgICAgIGFkZDIoZGVwc01hcC5nZXQoSVRFUkFURV9LRVkpKTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgY29uc3QgcnVuID0gKGVmZmVjdDMpID0+IHtcbiAgICBpZiAoZWZmZWN0My5vcHRpb25zLm9uVHJpZ2dlcikge1xuICAgICAgZWZmZWN0My5vcHRpb25zLm9uVHJpZ2dlcih7XG4gICAgICAgIGVmZmVjdDogZWZmZWN0MyxcbiAgICAgICAgdGFyZ2V0LFxuICAgICAgICBrZXksXG4gICAgICAgIHR5cGUsXG4gICAgICAgIG5ld1ZhbHVlLFxuICAgICAgICBvbGRWYWx1ZSxcbiAgICAgICAgb2xkVGFyZ2V0XG4gICAgICB9KTtcbiAgICB9XG4gICAgaWYgKGVmZmVjdDMub3B0aW9ucy5zY2hlZHVsZXIpIHtcbiAgICAgIGVmZmVjdDMub3B0aW9ucy5zY2hlZHVsZXIoZWZmZWN0Myk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVmZmVjdDMoKTtcbiAgICB9XG4gIH07XG4gIGVmZmVjdHMuZm9yRWFjaChydW4pO1xufVxudmFyIGlzTm9uVHJhY2thYmxlS2V5cyA9IC8qIEBfX1BVUkVfXyAqLyBtYWtlTWFwKGBfX3Byb3RvX18sX192X2lzUmVmLF9faXNWdWVgKTtcbnZhciBidWlsdEluU3ltYm9scyA9IG5ldyBTZXQoT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoU3ltYm9sKS5tYXAoKGtleSkgPT4gU3ltYm9sW2tleV0pLmZpbHRlcihpc1N5bWJvbCkpO1xudmFyIGdldDIgPSAvKiBAX19QVVJFX18gKi8gY3JlYXRlR2V0dGVyKCk7XG52YXIgcmVhZG9ubHlHZXQgPSAvKiBAX19QVVJFX18gKi8gY3JlYXRlR2V0dGVyKHRydWUpO1xudmFyIGFycmF5SW5zdHJ1bWVudGF0aW9ucyA9IC8qIEBfX1BVUkVfXyAqLyBjcmVhdGVBcnJheUluc3RydW1lbnRhdGlvbnMoKTtcbmZ1bmN0aW9uIGNyZWF0ZUFycmF5SW5zdHJ1bWVudGF0aW9ucygpIHtcbiAgY29uc3QgaW5zdHJ1bWVudGF0aW9ucyA9IHt9O1xuICBbXCJpbmNsdWRlc1wiLCBcImluZGV4T2ZcIiwgXCJsYXN0SW5kZXhPZlwiXS5mb3JFYWNoKChrZXkpID0+IHtcbiAgICBpbnN0cnVtZW50YXRpb25zW2tleV0gPSBmdW5jdGlvbiguLi5hcmdzKSB7XG4gICAgICBjb25zdCBhcnIgPSB0b1Jhdyh0aGlzKTtcbiAgICAgIGZvciAobGV0IGkgPSAwLCBsID0gdGhpcy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgdHJhY2soYXJyLCBcImdldFwiLCBpICsgXCJcIik7XG4gICAgICB9XG4gICAgICBjb25zdCByZXMgPSBhcnJba2V5XSguLi5hcmdzKTtcbiAgICAgIGlmIChyZXMgPT09IC0xIHx8IHJlcyA9PT0gZmFsc2UpIHtcbiAgICAgICAgcmV0dXJuIGFycltrZXldKC4uLmFyZ3MubWFwKHRvUmF3KSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gcmVzO1xuICAgICAgfVxuICAgIH07XG4gIH0pO1xuICBbXCJwdXNoXCIsIFwicG9wXCIsIFwic2hpZnRcIiwgXCJ1bnNoaWZ0XCIsIFwic3BsaWNlXCJdLmZvckVhY2goKGtleSkgPT4ge1xuICAgIGluc3RydW1lbnRhdGlvbnNba2V5XSA9IGZ1bmN0aW9uKC4uLmFyZ3MpIHtcbiAgICAgIHBhdXNlVHJhY2tpbmcoKTtcbiAgICAgIGNvbnN0IHJlcyA9IHRvUmF3KHRoaXMpW2tleV0uYXBwbHkodGhpcywgYXJncyk7XG4gICAgICByZXNldFRyYWNraW5nKCk7XG4gICAgICByZXR1cm4gcmVzO1xuICAgIH07XG4gIH0pO1xuICByZXR1cm4gaW5zdHJ1bWVudGF0aW9ucztcbn1cbmZ1bmN0aW9uIGNyZWF0ZUdldHRlcihpc1JlYWRvbmx5ID0gZmFsc2UsIHNoYWxsb3cgPSBmYWxzZSkge1xuICByZXR1cm4gZnVuY3Rpb24gZ2V0Myh0YXJnZXQsIGtleSwgcmVjZWl2ZXIpIHtcbiAgICBpZiAoa2V5ID09PSBcIl9fdl9pc1JlYWN0aXZlXCIpIHtcbiAgICAgIHJldHVybiAhaXNSZWFkb25seTtcbiAgICB9IGVsc2UgaWYgKGtleSA9PT0gXCJfX3ZfaXNSZWFkb25seVwiKSB7XG4gICAgICByZXR1cm4gaXNSZWFkb25seTtcbiAgICB9IGVsc2UgaWYgKGtleSA9PT0gXCJfX3ZfcmF3XCIgJiYgcmVjZWl2ZXIgPT09IChpc1JlYWRvbmx5ID8gc2hhbGxvdyA/IHNoYWxsb3dSZWFkb25seU1hcCA6IHJlYWRvbmx5TWFwIDogc2hhbGxvdyA/IHNoYWxsb3dSZWFjdGl2ZU1hcCA6IHJlYWN0aXZlTWFwKS5nZXQodGFyZ2V0KSkge1xuICAgICAgcmV0dXJuIHRhcmdldDtcbiAgICB9XG4gICAgY29uc3QgdGFyZ2V0SXNBcnJheSA9IGlzQXJyYXkodGFyZ2V0KTtcbiAgICBpZiAoIWlzUmVhZG9ubHkgJiYgdGFyZ2V0SXNBcnJheSAmJiBoYXNPd24oYXJyYXlJbnN0cnVtZW50YXRpb25zLCBrZXkpKSB7XG4gICAgICByZXR1cm4gUmVmbGVjdC5nZXQoYXJyYXlJbnN0cnVtZW50YXRpb25zLCBrZXksIHJlY2VpdmVyKTtcbiAgICB9XG4gICAgY29uc3QgcmVzID0gUmVmbGVjdC5nZXQodGFyZ2V0LCBrZXksIHJlY2VpdmVyKTtcbiAgICBpZiAoaXNTeW1ib2woa2V5KSA/IGJ1aWx0SW5TeW1ib2xzLmhhcyhrZXkpIDogaXNOb25UcmFja2FibGVLZXlzKGtleSkpIHtcbiAgICAgIHJldHVybiByZXM7XG4gICAgfVxuICAgIGlmICghaXNSZWFkb25seSkge1xuICAgICAgdHJhY2sodGFyZ2V0LCBcImdldFwiLCBrZXkpO1xuICAgIH1cbiAgICBpZiAoc2hhbGxvdykge1xuICAgICAgcmV0dXJuIHJlcztcbiAgICB9XG4gICAgaWYgKGlzUmVmKHJlcykpIHtcbiAgICAgIGNvbnN0IHNob3VsZFVud3JhcCA9ICF0YXJnZXRJc0FycmF5IHx8ICFpc0ludGVnZXJLZXkoa2V5KTtcbiAgICAgIHJldHVybiBzaG91bGRVbndyYXAgPyByZXMudmFsdWUgOiByZXM7XG4gICAgfVxuICAgIGlmIChpc09iamVjdChyZXMpKSB7XG4gICAgICByZXR1cm4gaXNSZWFkb25seSA/IHJlYWRvbmx5KHJlcykgOiByZWFjdGl2ZTIocmVzKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlcztcbiAgfTtcbn1cbnZhciBzZXQyID0gLyogQF9fUFVSRV9fICovIGNyZWF0ZVNldHRlcigpO1xuZnVuY3Rpb24gY3JlYXRlU2V0dGVyKHNoYWxsb3cgPSBmYWxzZSkge1xuICByZXR1cm4gZnVuY3Rpb24gc2V0Myh0YXJnZXQsIGtleSwgdmFsdWUsIHJlY2VpdmVyKSB7XG4gICAgbGV0IG9sZFZhbHVlID0gdGFyZ2V0W2tleV07XG4gICAgaWYgKCFzaGFsbG93KSB7XG4gICAgICB2YWx1ZSA9IHRvUmF3KHZhbHVlKTtcbiAgICAgIG9sZFZhbHVlID0gdG9SYXcob2xkVmFsdWUpO1xuICAgICAgaWYgKCFpc0FycmF5KHRhcmdldCkgJiYgaXNSZWYob2xkVmFsdWUpICYmICFpc1JlZih2YWx1ZSkpIHtcbiAgICAgICAgb2xkVmFsdWUudmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgfVxuICAgIGNvbnN0IGhhZEtleSA9IGlzQXJyYXkodGFyZ2V0KSAmJiBpc0ludGVnZXJLZXkoa2V5KSA/IE51bWJlcihrZXkpIDwgdGFyZ2V0Lmxlbmd0aCA6IGhhc093bih0YXJnZXQsIGtleSk7XG4gICAgY29uc3QgcmVzdWx0ID0gUmVmbGVjdC5zZXQodGFyZ2V0LCBrZXksIHZhbHVlLCByZWNlaXZlcik7XG4gICAgaWYgKHRhcmdldCA9PT0gdG9SYXcocmVjZWl2ZXIpKSB7XG4gICAgICBpZiAoIWhhZEtleSkge1xuICAgICAgICB0cmlnZ2VyKHRhcmdldCwgXCJhZGRcIiwga2V5LCB2YWx1ZSk7XG4gICAgICB9IGVsc2UgaWYgKGhhc0NoYW5nZWQodmFsdWUsIG9sZFZhbHVlKSkge1xuICAgICAgICB0cmlnZ2VyKHRhcmdldCwgXCJzZXRcIiwga2V5LCB2YWx1ZSwgb2xkVmFsdWUpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xufVxuZnVuY3Rpb24gZGVsZXRlUHJvcGVydHkodGFyZ2V0LCBrZXkpIHtcbiAgY29uc3QgaGFkS2V5ID0gaGFzT3duKHRhcmdldCwga2V5KTtcbiAgY29uc3Qgb2xkVmFsdWUgPSB0YXJnZXRba2V5XTtcbiAgY29uc3QgcmVzdWx0ID0gUmVmbGVjdC5kZWxldGVQcm9wZXJ0eSh0YXJnZXQsIGtleSk7XG4gIGlmIChyZXN1bHQgJiYgaGFkS2V5KSB7XG4gICAgdHJpZ2dlcih0YXJnZXQsIFwiZGVsZXRlXCIsIGtleSwgdm9pZCAwLCBvbGRWYWx1ZSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIGhhcyh0YXJnZXQsIGtleSkge1xuICBjb25zdCByZXN1bHQgPSBSZWZsZWN0Lmhhcyh0YXJnZXQsIGtleSk7XG4gIGlmICghaXNTeW1ib2woa2V5KSB8fCAhYnVpbHRJblN5bWJvbHMuaGFzKGtleSkpIHtcbiAgICB0cmFjayh0YXJnZXQsIFwiaGFzXCIsIGtleSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIG93bktleXModGFyZ2V0KSB7XG4gIHRyYWNrKHRhcmdldCwgXCJpdGVyYXRlXCIsIGlzQXJyYXkodGFyZ2V0KSA/IFwibGVuZ3RoXCIgOiBJVEVSQVRFX0tFWSk7XG4gIHJldHVybiBSZWZsZWN0Lm93bktleXModGFyZ2V0KTtcbn1cbnZhciBtdXRhYmxlSGFuZGxlcnMgPSB7XG4gIGdldDogZ2V0MixcbiAgc2V0OiBzZXQyLFxuICBkZWxldGVQcm9wZXJ0eSxcbiAgaGFzLFxuICBvd25LZXlzXG59O1xudmFyIHJlYWRvbmx5SGFuZGxlcnMgPSB7XG4gIGdldDogcmVhZG9ubHlHZXQsXG4gIHNldCh0YXJnZXQsIGtleSkge1xuICAgIGlmICh0cnVlKSB7XG4gICAgICBjb25zb2xlLndhcm4oYFNldCBvcGVyYXRpb24gb24ga2V5IFwiJHtTdHJpbmcoa2V5KX1cIiBmYWlsZWQ6IHRhcmdldCBpcyByZWFkb25seS5gLCB0YXJnZXQpO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSxcbiAgZGVsZXRlUHJvcGVydHkodGFyZ2V0LCBrZXkpIHtcbiAgICBpZiAodHJ1ZSkge1xuICAgICAgY29uc29sZS53YXJuKGBEZWxldGUgb3BlcmF0aW9uIG9uIGtleSBcIiR7U3RyaW5nKGtleSl9XCIgZmFpbGVkOiB0YXJnZXQgaXMgcmVhZG9ubHkuYCwgdGFyZ2V0KTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbn07XG52YXIgdG9SZWFjdGl2ZSA9ICh2YWx1ZSkgPT4gaXNPYmplY3QodmFsdWUpID8gcmVhY3RpdmUyKHZhbHVlKSA6IHZhbHVlO1xudmFyIHRvUmVhZG9ubHkgPSAodmFsdWUpID0+IGlzT2JqZWN0KHZhbHVlKSA/IHJlYWRvbmx5KHZhbHVlKSA6IHZhbHVlO1xudmFyIHRvU2hhbGxvdyA9ICh2YWx1ZSkgPT4gdmFsdWU7XG52YXIgZ2V0UHJvdG8gPSAodikgPT4gUmVmbGVjdC5nZXRQcm90b3R5cGVPZih2KTtcbmZ1bmN0aW9uIGdldCQxKHRhcmdldCwga2V5LCBpc1JlYWRvbmx5ID0gZmFsc2UsIGlzU2hhbGxvdyA9IGZhbHNlKSB7XG4gIHRhcmdldCA9IHRhcmdldFtcbiAgICBcIl9fdl9yYXdcIlxuICAgIC8qIFJBVyAqL1xuICBdO1xuICBjb25zdCByYXdUYXJnZXQgPSB0b1Jhdyh0YXJnZXQpO1xuICBjb25zdCByYXdLZXkgPSB0b1JhdyhrZXkpO1xuICBpZiAoa2V5ICE9PSByYXdLZXkpIHtcbiAgICAhaXNSZWFkb25seSAmJiB0cmFjayhyYXdUYXJnZXQsIFwiZ2V0XCIsIGtleSk7XG4gIH1cbiAgIWlzUmVhZG9ubHkgJiYgdHJhY2socmF3VGFyZ2V0LCBcImdldFwiLCByYXdLZXkpO1xuICBjb25zdCB7IGhhczogaGFzMiB9ID0gZ2V0UHJvdG8ocmF3VGFyZ2V0KTtcbiAgY29uc3Qgd3JhcCA9IGlzU2hhbGxvdyA/IHRvU2hhbGxvdyA6IGlzUmVhZG9ubHkgPyB0b1JlYWRvbmx5IDogdG9SZWFjdGl2ZTtcbiAgaWYgKGhhczIuY2FsbChyYXdUYXJnZXQsIGtleSkpIHtcbiAgICByZXR1cm4gd3JhcCh0YXJnZXQuZ2V0KGtleSkpO1xuICB9IGVsc2UgaWYgKGhhczIuY2FsbChyYXdUYXJnZXQsIHJhd0tleSkpIHtcbiAgICByZXR1cm4gd3JhcCh0YXJnZXQuZ2V0KHJhd0tleSkpO1xuICB9IGVsc2UgaWYgKHRhcmdldCAhPT0gcmF3VGFyZ2V0KSB7XG4gICAgdGFyZ2V0LmdldChrZXkpO1xuICB9XG59XG5mdW5jdGlvbiBoYXMkMShrZXksIGlzUmVhZG9ubHkgPSBmYWxzZSkge1xuICBjb25zdCB0YXJnZXQgPSB0aGlzW1xuICAgIFwiX192X3Jhd1wiXG4gICAgLyogUkFXICovXG4gIF07XG4gIGNvbnN0IHJhd1RhcmdldCA9IHRvUmF3KHRhcmdldCk7XG4gIGNvbnN0IHJhd0tleSA9IHRvUmF3KGtleSk7XG4gIGlmIChrZXkgIT09IHJhd0tleSkge1xuICAgICFpc1JlYWRvbmx5ICYmIHRyYWNrKHJhd1RhcmdldCwgXCJoYXNcIiwga2V5KTtcbiAgfVxuICAhaXNSZWFkb25seSAmJiB0cmFjayhyYXdUYXJnZXQsIFwiaGFzXCIsIHJhd0tleSk7XG4gIHJldHVybiBrZXkgPT09IHJhd0tleSA/IHRhcmdldC5oYXMoa2V5KSA6IHRhcmdldC5oYXMoa2V5KSB8fCB0YXJnZXQuaGFzKHJhd0tleSk7XG59XG5mdW5jdGlvbiBzaXplKHRhcmdldCwgaXNSZWFkb25seSA9IGZhbHNlKSB7XG4gIHRhcmdldCA9IHRhcmdldFtcbiAgICBcIl9fdl9yYXdcIlxuICAgIC8qIFJBVyAqL1xuICBdO1xuICAhaXNSZWFkb25seSAmJiB0cmFjayh0b1Jhdyh0YXJnZXQpLCBcIml0ZXJhdGVcIiwgSVRFUkFURV9LRVkpO1xuICByZXR1cm4gUmVmbGVjdC5nZXQodGFyZ2V0LCBcInNpemVcIiwgdGFyZ2V0KTtcbn1cbmZ1bmN0aW9uIGFkZCh2YWx1ZSkge1xuICB2YWx1ZSA9IHRvUmF3KHZhbHVlKTtcbiAgY29uc3QgdGFyZ2V0ID0gdG9SYXcodGhpcyk7XG4gIGNvbnN0IHByb3RvID0gZ2V0UHJvdG8odGFyZ2V0KTtcbiAgY29uc3QgaGFkS2V5ID0gcHJvdG8uaGFzLmNhbGwodGFyZ2V0LCB2YWx1ZSk7XG4gIGlmICghaGFkS2V5KSB7XG4gICAgdGFyZ2V0LmFkZCh2YWx1ZSk7XG4gICAgdHJpZ2dlcih0YXJnZXQsIFwiYWRkXCIsIHZhbHVlLCB2YWx1ZSk7XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59XG5mdW5jdGlvbiBzZXQkMShrZXksIHZhbHVlKSB7XG4gIHZhbHVlID0gdG9SYXcodmFsdWUpO1xuICBjb25zdCB0YXJnZXQgPSB0b1Jhdyh0aGlzKTtcbiAgY29uc3QgeyBoYXM6IGhhczIsIGdldDogZ2V0MyB9ID0gZ2V0UHJvdG8odGFyZ2V0KTtcbiAgbGV0IGhhZEtleSA9IGhhczIuY2FsbCh0YXJnZXQsIGtleSk7XG4gIGlmICghaGFkS2V5KSB7XG4gICAga2V5ID0gdG9SYXcoa2V5KTtcbiAgICBoYWRLZXkgPSBoYXMyLmNhbGwodGFyZ2V0LCBrZXkpO1xuICB9IGVsc2UgaWYgKHRydWUpIHtcbiAgICBjaGVja0lkZW50aXR5S2V5cyh0YXJnZXQsIGhhczIsIGtleSk7XG4gIH1cbiAgY29uc3Qgb2xkVmFsdWUgPSBnZXQzLmNhbGwodGFyZ2V0LCBrZXkpO1xuICB0YXJnZXQuc2V0KGtleSwgdmFsdWUpO1xuICBpZiAoIWhhZEtleSkge1xuICAgIHRyaWdnZXIodGFyZ2V0LCBcImFkZFwiLCBrZXksIHZhbHVlKTtcbiAgfSBlbHNlIGlmIChoYXNDaGFuZ2VkKHZhbHVlLCBvbGRWYWx1ZSkpIHtcbiAgICB0cmlnZ2VyKHRhcmdldCwgXCJzZXRcIiwga2V5LCB2YWx1ZSwgb2xkVmFsdWUpO1xuICB9XG4gIHJldHVybiB0aGlzO1xufVxuZnVuY3Rpb24gZGVsZXRlRW50cnkoa2V5KSB7XG4gIGNvbnN0IHRhcmdldCA9IHRvUmF3KHRoaXMpO1xuICBjb25zdCB7IGhhczogaGFzMiwgZ2V0OiBnZXQzIH0gPSBnZXRQcm90byh0YXJnZXQpO1xuICBsZXQgaGFkS2V5ID0gaGFzMi5jYWxsKHRhcmdldCwga2V5KTtcbiAgaWYgKCFoYWRLZXkpIHtcbiAgICBrZXkgPSB0b1JhdyhrZXkpO1xuICAgIGhhZEtleSA9IGhhczIuY2FsbCh0YXJnZXQsIGtleSk7XG4gIH0gZWxzZSBpZiAodHJ1ZSkge1xuICAgIGNoZWNrSWRlbnRpdHlLZXlzKHRhcmdldCwgaGFzMiwga2V5KTtcbiAgfVxuICBjb25zdCBvbGRWYWx1ZSA9IGdldDMgPyBnZXQzLmNhbGwodGFyZ2V0LCBrZXkpIDogdm9pZCAwO1xuICBjb25zdCByZXN1bHQgPSB0YXJnZXQuZGVsZXRlKGtleSk7XG4gIGlmIChoYWRLZXkpIHtcbiAgICB0cmlnZ2VyKHRhcmdldCwgXCJkZWxldGVcIiwga2V5LCB2b2lkIDAsIG9sZFZhbHVlKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuZnVuY3Rpb24gY2xlYXIoKSB7XG4gIGNvbnN0IHRhcmdldCA9IHRvUmF3KHRoaXMpO1xuICBjb25zdCBoYWRJdGVtcyA9IHRhcmdldC5zaXplICE9PSAwO1xuICBjb25zdCBvbGRUYXJnZXQgPSB0cnVlID8gaXNNYXAodGFyZ2V0KSA/IG5ldyBNYXAodGFyZ2V0KSA6IG5ldyBTZXQodGFyZ2V0KSA6IHZvaWQgMDtcbiAgY29uc3QgcmVzdWx0ID0gdGFyZ2V0LmNsZWFyKCk7XG4gIGlmIChoYWRJdGVtcykge1xuICAgIHRyaWdnZXIodGFyZ2V0LCBcImNsZWFyXCIsIHZvaWQgMCwgdm9pZCAwLCBvbGRUYXJnZXQpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5mdW5jdGlvbiBjcmVhdGVGb3JFYWNoKGlzUmVhZG9ubHksIGlzU2hhbGxvdykge1xuICByZXR1cm4gZnVuY3Rpb24gZm9yRWFjaChjYWxsYmFjaywgdGhpc0FyZykge1xuICAgIGNvbnN0IG9ic2VydmVkID0gdGhpcztcbiAgICBjb25zdCB0YXJnZXQgPSBvYnNlcnZlZFtcbiAgICAgIFwiX192X3Jhd1wiXG4gICAgICAvKiBSQVcgKi9cbiAgICBdO1xuICAgIGNvbnN0IHJhd1RhcmdldCA9IHRvUmF3KHRhcmdldCk7XG4gICAgY29uc3Qgd3JhcCA9IGlzU2hhbGxvdyA/IHRvU2hhbGxvdyA6IGlzUmVhZG9ubHkgPyB0b1JlYWRvbmx5IDogdG9SZWFjdGl2ZTtcbiAgICAhaXNSZWFkb25seSAmJiB0cmFjayhyYXdUYXJnZXQsIFwiaXRlcmF0ZVwiLCBJVEVSQVRFX0tFWSk7XG4gICAgcmV0dXJuIHRhcmdldC5mb3JFYWNoKCh2YWx1ZSwga2V5KSA9PiB7XG4gICAgICByZXR1cm4gY2FsbGJhY2suY2FsbCh0aGlzQXJnLCB3cmFwKHZhbHVlKSwgd3JhcChrZXkpLCBvYnNlcnZlZCk7XG4gICAgfSk7XG4gIH07XG59XG5mdW5jdGlvbiBjcmVhdGVJdGVyYWJsZU1ldGhvZChtZXRob2QsIGlzUmVhZG9ubHksIGlzU2hhbGxvdykge1xuICByZXR1cm4gZnVuY3Rpb24oLi4uYXJncykge1xuICAgIGNvbnN0IHRhcmdldCA9IHRoaXNbXG4gICAgICBcIl9fdl9yYXdcIlxuICAgICAgLyogUkFXICovXG4gICAgXTtcbiAgICBjb25zdCByYXdUYXJnZXQgPSB0b1Jhdyh0YXJnZXQpO1xuICAgIGNvbnN0IHRhcmdldElzTWFwID0gaXNNYXAocmF3VGFyZ2V0KTtcbiAgICBjb25zdCBpc1BhaXIgPSBtZXRob2QgPT09IFwiZW50cmllc1wiIHx8IG1ldGhvZCA9PT0gU3ltYm9sLml0ZXJhdG9yICYmIHRhcmdldElzTWFwO1xuICAgIGNvbnN0IGlzS2V5T25seSA9IG1ldGhvZCA9PT0gXCJrZXlzXCIgJiYgdGFyZ2V0SXNNYXA7XG4gICAgY29uc3QgaW5uZXJJdGVyYXRvciA9IHRhcmdldFttZXRob2RdKC4uLmFyZ3MpO1xuICAgIGNvbnN0IHdyYXAgPSBpc1NoYWxsb3cgPyB0b1NoYWxsb3cgOiBpc1JlYWRvbmx5ID8gdG9SZWFkb25seSA6IHRvUmVhY3RpdmU7XG4gICAgIWlzUmVhZG9ubHkgJiYgdHJhY2socmF3VGFyZ2V0LCBcIml0ZXJhdGVcIiwgaXNLZXlPbmx5ID8gTUFQX0tFWV9JVEVSQVRFX0tFWSA6IElURVJBVEVfS0VZKTtcbiAgICByZXR1cm4ge1xuICAgICAgLy8gaXRlcmF0b3IgcHJvdG9jb2xcbiAgICAgIG5leHQoKSB7XG4gICAgICAgIGNvbnN0IHsgdmFsdWUsIGRvbmUgfSA9IGlubmVySXRlcmF0b3IubmV4dCgpO1xuICAgICAgICByZXR1cm4gZG9uZSA/IHsgdmFsdWUsIGRvbmUgfSA6IHtcbiAgICAgICAgICB2YWx1ZTogaXNQYWlyID8gW3dyYXAodmFsdWVbMF0pLCB3cmFwKHZhbHVlWzFdKV0gOiB3cmFwKHZhbHVlKSxcbiAgICAgICAgICBkb25lXG4gICAgICAgIH07XG4gICAgICB9LFxuICAgICAgLy8gaXRlcmFibGUgcHJvdG9jb2xcbiAgICAgIFtTeW1ib2wuaXRlcmF0b3JdKCkge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cbiAgICB9O1xuICB9O1xufVxuZnVuY3Rpb24gY3JlYXRlUmVhZG9ubHlNZXRob2QodHlwZSkge1xuICByZXR1cm4gZnVuY3Rpb24oLi4uYXJncykge1xuICAgIGlmICh0cnVlKSB7XG4gICAgICBjb25zdCBrZXkgPSBhcmdzWzBdID8gYG9uIGtleSBcIiR7YXJnc1swXX1cIiBgIDogYGA7XG4gICAgICBjb25zb2xlLndhcm4oYCR7Y2FwaXRhbGl6ZSh0eXBlKX0gb3BlcmF0aW9uICR7a2V5fWZhaWxlZDogdGFyZ2V0IGlzIHJlYWRvbmx5LmAsIHRvUmF3KHRoaXMpKTtcbiAgICB9XG4gICAgcmV0dXJuIHR5cGUgPT09IFwiZGVsZXRlXCIgPyBmYWxzZSA6IHRoaXM7XG4gIH07XG59XG5mdW5jdGlvbiBjcmVhdGVJbnN0cnVtZW50YXRpb25zKCkge1xuICBjb25zdCBtdXRhYmxlSW5zdHJ1bWVudGF0aW9uczIgPSB7XG4gICAgZ2V0KGtleSkge1xuICAgICAgcmV0dXJuIGdldCQxKHRoaXMsIGtleSk7XG4gICAgfSxcbiAgICBnZXQgc2l6ZSgpIHtcbiAgICAgIHJldHVybiBzaXplKHRoaXMpO1xuICAgIH0sXG4gICAgaGFzOiBoYXMkMSxcbiAgICBhZGQsXG4gICAgc2V0OiBzZXQkMSxcbiAgICBkZWxldGU6IGRlbGV0ZUVudHJ5LFxuICAgIGNsZWFyLFxuICAgIGZvckVhY2g6IGNyZWF0ZUZvckVhY2goZmFsc2UsIGZhbHNlKVxuICB9O1xuICBjb25zdCBzaGFsbG93SW5zdHJ1bWVudGF0aW9uczIgPSB7XG4gICAgZ2V0KGtleSkge1xuICAgICAgcmV0dXJuIGdldCQxKHRoaXMsIGtleSwgZmFsc2UsIHRydWUpO1xuICAgIH0sXG4gICAgZ2V0IHNpemUoKSB7XG4gICAgICByZXR1cm4gc2l6ZSh0aGlzKTtcbiAgICB9LFxuICAgIGhhczogaGFzJDEsXG4gICAgYWRkLFxuICAgIHNldDogc2V0JDEsXG4gICAgZGVsZXRlOiBkZWxldGVFbnRyeSxcbiAgICBjbGVhcixcbiAgICBmb3JFYWNoOiBjcmVhdGVGb3JFYWNoKGZhbHNlLCB0cnVlKVxuICB9O1xuICBjb25zdCByZWFkb25seUluc3RydW1lbnRhdGlvbnMyID0ge1xuICAgIGdldChrZXkpIHtcbiAgICAgIHJldHVybiBnZXQkMSh0aGlzLCBrZXksIHRydWUpO1xuICAgIH0sXG4gICAgZ2V0IHNpemUoKSB7XG4gICAgICByZXR1cm4gc2l6ZSh0aGlzLCB0cnVlKTtcbiAgICB9LFxuICAgIGhhcyhrZXkpIHtcbiAgICAgIHJldHVybiBoYXMkMS5jYWxsKHRoaXMsIGtleSwgdHJ1ZSk7XG4gICAgfSxcbiAgICBhZGQ6IGNyZWF0ZVJlYWRvbmx5TWV0aG9kKFxuICAgICAgXCJhZGRcIlxuICAgICAgLyogQUREICovXG4gICAgKSxcbiAgICBzZXQ6IGNyZWF0ZVJlYWRvbmx5TWV0aG9kKFxuICAgICAgXCJzZXRcIlxuICAgICAgLyogU0VUICovXG4gICAgKSxcbiAgICBkZWxldGU6IGNyZWF0ZVJlYWRvbmx5TWV0aG9kKFxuICAgICAgXCJkZWxldGVcIlxuICAgICAgLyogREVMRVRFICovXG4gICAgKSxcbiAgICBjbGVhcjogY3JlYXRlUmVhZG9ubHlNZXRob2QoXG4gICAgICBcImNsZWFyXCJcbiAgICAgIC8qIENMRUFSICovXG4gICAgKSxcbiAgICBmb3JFYWNoOiBjcmVhdGVGb3JFYWNoKHRydWUsIGZhbHNlKVxuICB9O1xuICBjb25zdCBzaGFsbG93UmVhZG9ubHlJbnN0cnVtZW50YXRpb25zMiA9IHtcbiAgICBnZXQoa2V5KSB7XG4gICAgICByZXR1cm4gZ2V0JDEodGhpcywga2V5LCB0cnVlLCB0cnVlKTtcbiAgICB9LFxuICAgIGdldCBzaXplKCkge1xuICAgICAgcmV0dXJuIHNpemUodGhpcywgdHJ1ZSk7XG4gICAgfSxcbiAgICBoYXMoa2V5KSB7XG4gICAgICByZXR1cm4gaGFzJDEuY2FsbCh0aGlzLCBrZXksIHRydWUpO1xuICAgIH0sXG4gICAgYWRkOiBjcmVhdGVSZWFkb25seU1ldGhvZChcbiAgICAgIFwiYWRkXCJcbiAgICAgIC8qIEFERCAqL1xuICAgICksXG4gICAgc2V0OiBjcmVhdGVSZWFkb25seU1ldGhvZChcbiAgICAgIFwic2V0XCJcbiAgICAgIC8qIFNFVCAqL1xuICAgICksXG4gICAgZGVsZXRlOiBjcmVhdGVSZWFkb25seU1ldGhvZChcbiAgICAgIFwiZGVsZXRlXCJcbiAgICAgIC8qIERFTEVURSAqL1xuICAgICksXG4gICAgY2xlYXI6IGNyZWF0ZVJlYWRvbmx5TWV0aG9kKFxuICAgICAgXCJjbGVhclwiXG4gICAgICAvKiBDTEVBUiAqL1xuICAgICksXG4gICAgZm9yRWFjaDogY3JlYXRlRm9yRWFjaCh0cnVlLCB0cnVlKVxuICB9O1xuICBjb25zdCBpdGVyYXRvck1ldGhvZHMgPSBbXCJrZXlzXCIsIFwidmFsdWVzXCIsIFwiZW50cmllc1wiLCBTeW1ib2wuaXRlcmF0b3JdO1xuICBpdGVyYXRvck1ldGhvZHMuZm9yRWFjaCgobWV0aG9kKSA9PiB7XG4gICAgbXV0YWJsZUluc3RydW1lbnRhdGlvbnMyW21ldGhvZF0gPSBjcmVhdGVJdGVyYWJsZU1ldGhvZChtZXRob2QsIGZhbHNlLCBmYWxzZSk7XG4gICAgcmVhZG9ubHlJbnN0cnVtZW50YXRpb25zMlttZXRob2RdID0gY3JlYXRlSXRlcmFibGVNZXRob2QobWV0aG9kLCB0cnVlLCBmYWxzZSk7XG4gICAgc2hhbGxvd0luc3RydW1lbnRhdGlvbnMyW21ldGhvZF0gPSBjcmVhdGVJdGVyYWJsZU1ldGhvZChtZXRob2QsIGZhbHNlLCB0cnVlKTtcbiAgICBzaGFsbG93UmVhZG9ubHlJbnN0cnVtZW50YXRpb25zMlttZXRob2RdID0gY3JlYXRlSXRlcmFibGVNZXRob2QobWV0aG9kLCB0cnVlLCB0cnVlKTtcbiAgfSk7XG4gIHJldHVybiBbXG4gICAgbXV0YWJsZUluc3RydW1lbnRhdGlvbnMyLFxuICAgIHJlYWRvbmx5SW5zdHJ1bWVudGF0aW9uczIsXG4gICAgc2hhbGxvd0luc3RydW1lbnRhdGlvbnMyLFxuICAgIHNoYWxsb3dSZWFkb25seUluc3RydW1lbnRhdGlvbnMyXG4gIF07XG59XG52YXIgW211dGFibGVJbnN0cnVtZW50YXRpb25zLCByZWFkb25seUluc3RydW1lbnRhdGlvbnMsIHNoYWxsb3dJbnN0cnVtZW50YXRpb25zLCBzaGFsbG93UmVhZG9ubHlJbnN0cnVtZW50YXRpb25zXSA9IC8qIEBfX1BVUkVfXyAqLyBjcmVhdGVJbnN0cnVtZW50YXRpb25zKCk7XG5mdW5jdGlvbiBjcmVhdGVJbnN0cnVtZW50YXRpb25HZXR0ZXIoaXNSZWFkb25seSwgc2hhbGxvdykge1xuICBjb25zdCBpbnN0cnVtZW50YXRpb25zID0gc2hhbGxvdyA/IGlzUmVhZG9ubHkgPyBzaGFsbG93UmVhZG9ubHlJbnN0cnVtZW50YXRpb25zIDogc2hhbGxvd0luc3RydW1lbnRhdGlvbnMgOiBpc1JlYWRvbmx5ID8gcmVhZG9ubHlJbnN0cnVtZW50YXRpb25zIDogbXV0YWJsZUluc3RydW1lbnRhdGlvbnM7XG4gIHJldHVybiAodGFyZ2V0LCBrZXksIHJlY2VpdmVyKSA9PiB7XG4gICAgaWYgKGtleSA9PT0gXCJfX3ZfaXNSZWFjdGl2ZVwiKSB7XG4gICAgICByZXR1cm4gIWlzUmVhZG9ubHk7XG4gICAgfSBlbHNlIGlmIChrZXkgPT09IFwiX192X2lzUmVhZG9ubHlcIikge1xuICAgICAgcmV0dXJuIGlzUmVhZG9ubHk7XG4gICAgfSBlbHNlIGlmIChrZXkgPT09IFwiX192X3Jhd1wiKSB7XG4gICAgICByZXR1cm4gdGFyZ2V0O1xuICAgIH1cbiAgICByZXR1cm4gUmVmbGVjdC5nZXQoaGFzT3duKGluc3RydW1lbnRhdGlvbnMsIGtleSkgJiYga2V5IGluIHRhcmdldCA/IGluc3RydW1lbnRhdGlvbnMgOiB0YXJnZXQsIGtleSwgcmVjZWl2ZXIpO1xuICB9O1xufVxudmFyIG11dGFibGVDb2xsZWN0aW9uSGFuZGxlcnMgPSB7XG4gIGdldDogLyogQF9fUFVSRV9fICovIGNyZWF0ZUluc3RydW1lbnRhdGlvbkdldHRlcihmYWxzZSwgZmFsc2UpXG59O1xudmFyIHJlYWRvbmx5Q29sbGVjdGlvbkhhbmRsZXJzID0ge1xuICBnZXQ6IC8qIEBfX1BVUkVfXyAqLyBjcmVhdGVJbnN0cnVtZW50YXRpb25HZXR0ZXIodHJ1ZSwgZmFsc2UpXG59O1xuZnVuY3Rpb24gY2hlY2tJZGVudGl0eUtleXModGFyZ2V0LCBoYXMyLCBrZXkpIHtcbiAgY29uc3QgcmF3S2V5ID0gdG9SYXcoa2V5KTtcbiAgaWYgKHJhd0tleSAhPT0ga2V5ICYmIGhhczIuY2FsbCh0YXJnZXQsIHJhd0tleSkpIHtcbiAgICBjb25zdCB0eXBlID0gdG9SYXdUeXBlKHRhcmdldCk7XG4gICAgY29uc29sZS53YXJuKGBSZWFjdGl2ZSAke3R5cGV9IGNvbnRhaW5zIGJvdGggdGhlIHJhdyBhbmQgcmVhY3RpdmUgdmVyc2lvbnMgb2YgdGhlIHNhbWUgb2JqZWN0JHt0eXBlID09PSBgTWFwYCA/IGAgYXMga2V5c2AgOiBgYH0sIHdoaWNoIGNhbiBsZWFkIHRvIGluY29uc2lzdGVuY2llcy4gQXZvaWQgZGlmZmVyZW50aWF0aW5nIGJldHdlZW4gdGhlIHJhdyBhbmQgcmVhY3RpdmUgdmVyc2lvbnMgb2YgYW4gb2JqZWN0IGFuZCBvbmx5IHVzZSB0aGUgcmVhY3RpdmUgdmVyc2lvbiBpZiBwb3NzaWJsZS5gKTtcbiAgfVxufVxudmFyIHJlYWN0aXZlTWFwID0gLyogQF9fUFVSRV9fICovIG5ldyBXZWFrTWFwKCk7XG52YXIgc2hhbGxvd1JlYWN0aXZlTWFwID0gLyogQF9fUFVSRV9fICovIG5ldyBXZWFrTWFwKCk7XG52YXIgcmVhZG9ubHlNYXAgPSAvKiBAX19QVVJFX18gKi8gbmV3IFdlYWtNYXAoKTtcbnZhciBzaGFsbG93UmVhZG9ubHlNYXAgPSAvKiBAX19QVVJFX18gKi8gbmV3IFdlYWtNYXAoKTtcbmZ1bmN0aW9uIHRhcmdldFR5cGVNYXAocmF3VHlwZSkge1xuICBzd2l0Y2ggKHJhd1R5cGUpIHtcbiAgICBjYXNlIFwiT2JqZWN0XCI6XG4gICAgY2FzZSBcIkFycmF5XCI6XG4gICAgICByZXR1cm4gMTtcbiAgICBjYXNlIFwiTWFwXCI6XG4gICAgY2FzZSBcIlNldFwiOlxuICAgIGNhc2UgXCJXZWFrTWFwXCI6XG4gICAgY2FzZSBcIldlYWtTZXRcIjpcbiAgICAgIHJldHVybiAyO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gMDtcbiAgfVxufVxuZnVuY3Rpb24gZ2V0VGFyZ2V0VHlwZSh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWVbXG4gICAgXCJfX3Zfc2tpcFwiXG4gICAgLyogU0tJUCAqL1xuICBdIHx8ICFPYmplY3QuaXNFeHRlbnNpYmxlKHZhbHVlKSA/IDAgOiB0YXJnZXRUeXBlTWFwKHRvUmF3VHlwZSh2YWx1ZSkpO1xufVxuZnVuY3Rpb24gcmVhY3RpdmUyKHRhcmdldCkge1xuICBpZiAodGFyZ2V0ICYmIHRhcmdldFtcbiAgICBcIl9fdl9pc1JlYWRvbmx5XCJcbiAgICAvKiBJU19SRUFET05MWSAqL1xuICBdKSB7XG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfVxuICByZXR1cm4gY3JlYXRlUmVhY3RpdmVPYmplY3QodGFyZ2V0LCBmYWxzZSwgbXV0YWJsZUhhbmRsZXJzLCBtdXRhYmxlQ29sbGVjdGlvbkhhbmRsZXJzLCByZWFjdGl2ZU1hcCk7XG59XG5mdW5jdGlvbiByZWFkb25seSh0YXJnZXQpIHtcbiAgcmV0dXJuIGNyZWF0ZVJlYWN0aXZlT2JqZWN0KHRhcmdldCwgdHJ1ZSwgcmVhZG9ubHlIYW5kbGVycywgcmVhZG9ubHlDb2xsZWN0aW9uSGFuZGxlcnMsIHJlYWRvbmx5TWFwKTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZVJlYWN0aXZlT2JqZWN0KHRhcmdldCwgaXNSZWFkb25seSwgYmFzZUhhbmRsZXJzLCBjb2xsZWN0aW9uSGFuZGxlcnMsIHByb3h5TWFwKSB7XG4gIGlmICghaXNPYmplY3QodGFyZ2V0KSkge1xuICAgIGlmICh0cnVlKSB7XG4gICAgICBjb25zb2xlLndhcm4oYHZhbHVlIGNhbm5vdCBiZSBtYWRlIHJlYWN0aXZlOiAke1N0cmluZyh0YXJnZXQpfWApO1xuICAgIH1cbiAgICByZXR1cm4gdGFyZ2V0O1xuICB9XG4gIGlmICh0YXJnZXRbXG4gICAgXCJfX3ZfcmF3XCJcbiAgICAvKiBSQVcgKi9cbiAgXSAmJiAhKGlzUmVhZG9ubHkgJiYgdGFyZ2V0W1xuICAgIFwiX192X2lzUmVhY3RpdmVcIlxuICAgIC8qIElTX1JFQUNUSVZFICovXG4gIF0pKSB7XG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfVxuICBjb25zdCBleGlzdGluZ1Byb3h5ID0gcHJveHlNYXAuZ2V0KHRhcmdldCk7XG4gIGlmIChleGlzdGluZ1Byb3h5KSB7XG4gICAgcmV0dXJuIGV4aXN0aW5nUHJveHk7XG4gIH1cbiAgY29uc3QgdGFyZ2V0VHlwZSA9IGdldFRhcmdldFR5cGUodGFyZ2V0KTtcbiAgaWYgKHRhcmdldFR5cGUgPT09IDApIHtcbiAgICByZXR1cm4gdGFyZ2V0O1xuICB9XG4gIGNvbnN0IHByb3h5ID0gbmV3IFByb3h5KHRhcmdldCwgdGFyZ2V0VHlwZSA9PT0gMiA/IGNvbGxlY3Rpb25IYW5kbGVycyA6IGJhc2VIYW5kbGVycyk7XG4gIHByb3h5TWFwLnNldCh0YXJnZXQsIHByb3h5KTtcbiAgcmV0dXJuIHByb3h5O1xufVxuZnVuY3Rpb24gdG9SYXcob2JzZXJ2ZWQpIHtcbiAgcmV0dXJuIG9ic2VydmVkICYmIHRvUmF3KG9ic2VydmVkW1xuICAgIFwiX192X3Jhd1wiXG4gICAgLyogUkFXICovXG4gIF0pIHx8IG9ic2VydmVkO1xufVxuZnVuY3Rpb24gaXNSZWYocikge1xuICByZXR1cm4gQm9vbGVhbihyICYmIHIuX192X2lzUmVmID09PSB0cnVlKTtcbn1cblxuLy8gcGFja2FnZXMvYWxwaW5lanMvc3JjL21hZ2ljcy8kbmV4dFRpY2suanNcbm1hZ2ljKFwibmV4dFRpY2tcIiwgKCkgPT4gbmV4dFRpY2spO1xuXG4vLyBwYWNrYWdlcy9hbHBpbmVqcy9zcmMvbWFnaWNzLyRkaXNwYXRjaC5qc1xubWFnaWMoXCJkaXNwYXRjaFwiLCAoZWwpID0+IGRpc3BhdGNoLmJpbmQoZGlzcGF0Y2gsIGVsKSk7XG5cbi8vIHBhY2thZ2VzL2FscGluZWpzL3NyYy9tYWdpY3MvJHdhdGNoLmpzXG5tYWdpYyhcIndhdGNoXCIsIChlbCwgeyBldmFsdWF0ZUxhdGVyOiBldmFsdWF0ZUxhdGVyMiwgY2xlYW51cDogY2xlYW51cDIgfSkgPT4gKGtleSwgY2FsbGJhY2spID0+IHtcbiAgbGV0IGV2YWx1YXRlMiA9IGV2YWx1YXRlTGF0ZXIyKGtleSk7XG4gIGxldCBnZXR0ZXIgPSAoKSA9PiB7XG4gICAgbGV0IHZhbHVlO1xuICAgIGV2YWx1YXRlMigoaSkgPT4gdmFsdWUgPSBpKTtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH07XG4gIGxldCB1bndhdGNoID0gd2F0Y2goZ2V0dGVyLCBjYWxsYmFjayk7XG4gIGNsZWFudXAyKHVud2F0Y2gpO1xufSk7XG5cbi8vIHBhY2thZ2VzL2FscGluZWpzL3NyYy9tYWdpY3MvJHN0b3JlLmpzXG5tYWdpYyhcInN0b3JlXCIsIGdldFN0b3Jlcyk7XG5cbi8vIHBhY2thZ2VzL2FscGluZWpzL3NyYy9tYWdpY3MvJGRhdGEuanNcbm1hZ2ljKFwiZGF0YVwiLCAoZWwpID0+IHNjb3BlKGVsKSk7XG5cbi8vIHBhY2thZ2VzL2FscGluZWpzL3NyYy9tYWdpY3MvJHJvb3QuanNcbm1hZ2ljKFwicm9vdFwiLCAoZWwpID0+IGNsb3Nlc3RSb290KGVsKSk7XG5cbi8vIHBhY2thZ2VzL2FscGluZWpzL3NyYy9tYWdpY3MvJHJlZnMuanNcbm1hZ2ljKFwicmVmc1wiLCAoZWwpID0+IHtcbiAgaWYgKGVsLl94X3JlZnNfcHJveHkpXG4gICAgcmV0dXJuIGVsLl94X3JlZnNfcHJveHk7XG4gIGVsLl94X3JlZnNfcHJveHkgPSBtZXJnZVByb3hpZXMoZ2V0QXJyYXlPZlJlZk9iamVjdChlbCkpO1xuICByZXR1cm4gZWwuX3hfcmVmc19wcm94eTtcbn0pO1xuZnVuY3Rpb24gZ2V0QXJyYXlPZlJlZk9iamVjdChlbCkge1xuICBsZXQgcmVmT2JqZWN0cyA9IFtdO1xuICBmaW5kQ2xvc2VzdChlbCwgKGkpID0+IHtcbiAgICBpZiAoaS5feF9yZWZzKVxuICAgICAgcmVmT2JqZWN0cy5wdXNoKGkuX3hfcmVmcyk7XG4gIH0pO1xuICByZXR1cm4gcmVmT2JqZWN0cztcbn1cblxuLy8gcGFja2FnZXMvYWxwaW5lanMvc3JjL2lkcy5qc1xudmFyIGdsb2JhbElkTWVtbyA9IHt9O1xuZnVuY3Rpb24gZmluZEFuZEluY3JlbWVudElkKG5hbWUpIHtcbiAgaWYgKCFnbG9iYWxJZE1lbW9bbmFtZV0pXG4gICAgZ2xvYmFsSWRNZW1vW25hbWVdID0gMDtcbiAgcmV0dXJuICsrZ2xvYmFsSWRNZW1vW25hbWVdO1xufVxuZnVuY3Rpb24gY2xvc2VzdElkUm9vdChlbCwgbmFtZSkge1xuICByZXR1cm4gZmluZENsb3Nlc3QoZWwsIChlbGVtZW50KSA9PiB7XG4gICAgaWYgKGVsZW1lbnQuX3hfaWRzICYmIGVsZW1lbnQuX3hfaWRzW25hbWVdKVxuICAgICAgcmV0dXJuIHRydWU7XG4gIH0pO1xufVxuZnVuY3Rpb24gc2V0SWRSb290KGVsLCBuYW1lKSB7XG4gIGlmICghZWwuX3hfaWRzKVxuICAgIGVsLl94X2lkcyA9IHt9O1xuICBpZiAoIWVsLl94X2lkc1tuYW1lXSlcbiAgICBlbC5feF9pZHNbbmFtZV0gPSBmaW5kQW5kSW5jcmVtZW50SWQobmFtZSk7XG59XG5cbi8vIHBhY2thZ2VzL2FscGluZWpzL3NyYy9tYWdpY3MvJGlkLmpzXG5tYWdpYyhcImlkXCIsIChlbCwgeyBjbGVhbnVwOiBjbGVhbnVwMiB9KSA9PiAobmFtZSwga2V5ID0gbnVsbCkgPT4ge1xuICBsZXQgY2FjaGVLZXkgPSBgJHtuYW1lfSR7a2V5ID8gYC0ke2tleX1gIDogXCJcIn1gO1xuICByZXR1cm4gY2FjaGVJZEJ5TmFtZU9uRWxlbWVudChlbCwgY2FjaGVLZXksIGNsZWFudXAyLCAoKSA9PiB7XG4gICAgbGV0IHJvb3QgPSBjbG9zZXN0SWRSb290KGVsLCBuYW1lKTtcbiAgICBsZXQgaWQgPSByb290ID8gcm9vdC5feF9pZHNbbmFtZV0gOiBmaW5kQW5kSW5jcmVtZW50SWQobmFtZSk7XG4gICAgcmV0dXJuIGtleSA/IGAke25hbWV9LSR7aWR9LSR7a2V5fWAgOiBgJHtuYW1lfS0ke2lkfWA7XG4gIH0pO1xufSk7XG5pbnRlcmNlcHRDbG9uZSgoZnJvbSwgdG8pID0+IHtcbiAgaWYgKGZyb20uX3hfaWQpIHtcbiAgICB0by5feF9pZCA9IGZyb20uX3hfaWQ7XG4gIH1cbn0pO1xuZnVuY3Rpb24gY2FjaGVJZEJ5TmFtZU9uRWxlbWVudChlbCwgY2FjaGVLZXksIGNsZWFudXAyLCBjYWxsYmFjaykge1xuICBpZiAoIWVsLl94X2lkKVxuICAgIGVsLl94X2lkID0ge307XG4gIGlmIChlbC5feF9pZFtjYWNoZUtleV0pXG4gICAgcmV0dXJuIGVsLl94X2lkW2NhY2hlS2V5XTtcbiAgbGV0IG91dHB1dCA9IGNhbGxiYWNrKCk7XG4gIGVsLl94X2lkW2NhY2hlS2V5XSA9IG91dHB1dDtcbiAgY2xlYW51cDIoKCkgPT4ge1xuICAgIGRlbGV0ZSBlbC5feF9pZFtjYWNoZUtleV07XG4gIH0pO1xuICByZXR1cm4gb3V0cHV0O1xufVxuXG4vLyBwYWNrYWdlcy9hbHBpbmVqcy9zcmMvbWFnaWNzLyRlbC5qc1xubWFnaWMoXCJlbFwiLCAoZWwpID0+IGVsKTtcblxuLy8gcGFja2FnZXMvYWxwaW5lanMvc3JjL21hZ2ljcy9pbmRleC5qc1xud2Fybk1pc3NpbmdQbHVnaW5NYWdpYyhcIkZvY3VzXCIsIFwiZm9jdXNcIiwgXCJmb2N1c1wiKTtcbndhcm5NaXNzaW5nUGx1Z2luTWFnaWMoXCJQZXJzaXN0XCIsIFwicGVyc2lzdFwiLCBcInBlcnNpc3RcIik7XG5mdW5jdGlvbiB3YXJuTWlzc2luZ1BsdWdpbk1hZ2ljKG5hbWUsIG1hZ2ljTmFtZSwgc2x1Zykge1xuICBtYWdpYyhtYWdpY05hbWUsIChlbCkgPT4gd2FybihgWW91IGNhbid0IHVzZSBbJCR7bWFnaWNOYW1lfV0gd2l0aG91dCBmaXJzdCBpbnN0YWxsaW5nIHRoZSBcIiR7bmFtZX1cIiBwbHVnaW4gaGVyZTogaHR0cHM6Ly9hbHBpbmVqcy5kZXYvcGx1Z2lucy8ke3NsdWd9YCwgZWwpKTtcbn1cblxuLy8gcGFja2FnZXMvYWxwaW5lanMvc3JjL2RpcmVjdGl2ZXMveC1tb2RlbGFibGUuanNcbmRpcmVjdGl2ZShcIm1vZGVsYWJsZVwiLCAoZWwsIHsgZXhwcmVzc2lvbiB9LCB7IGVmZmVjdDogZWZmZWN0MywgZXZhbHVhdGVMYXRlcjogZXZhbHVhdGVMYXRlcjIsIGNsZWFudXA6IGNsZWFudXAyIH0pID0+IHtcbiAgbGV0IGZ1bmMgPSBldmFsdWF0ZUxhdGVyMihleHByZXNzaW9uKTtcbiAgbGV0IGlubmVyR2V0ID0gKCkgPT4ge1xuICAgIGxldCByZXN1bHQ7XG4gICAgZnVuYygoaSkgPT4gcmVzdWx0ID0gaSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcbiAgbGV0IGV2YWx1YXRlSW5uZXJTZXQgPSBldmFsdWF0ZUxhdGVyMihgJHtleHByZXNzaW9ufSA9IF9fcGxhY2Vob2xkZXJgKTtcbiAgbGV0IGlubmVyU2V0ID0gKHZhbCkgPT4gZXZhbHVhdGVJbm5lclNldCgoKSA9PiB7XG4gIH0sIHsgc2NvcGU6IHsgXCJfX3BsYWNlaG9sZGVyXCI6IHZhbCB9IH0pO1xuICBsZXQgaW5pdGlhbFZhbHVlID0gaW5uZXJHZXQoKTtcbiAgaW5uZXJTZXQoaW5pdGlhbFZhbHVlKTtcbiAgcXVldWVNaWNyb3Rhc2soKCkgPT4ge1xuICAgIGlmICghZWwuX3hfbW9kZWwpXG4gICAgICByZXR1cm47XG4gICAgZWwuX3hfcmVtb3ZlTW9kZWxMaXN0ZW5lcnNbXCJkZWZhdWx0XCJdKCk7XG4gICAgbGV0IG91dGVyR2V0ID0gZWwuX3hfbW9kZWwuZ2V0O1xuICAgIGxldCBvdXRlclNldCA9IGVsLl94X21vZGVsLnNldDtcbiAgICBsZXQgcmVsZWFzZUVudGFuZ2xlbWVudCA9IGVudGFuZ2xlKFxuICAgICAge1xuICAgICAgICBnZXQoKSB7XG4gICAgICAgICAgcmV0dXJuIG91dGVyR2V0KCk7XG4gICAgICAgIH0sXG4gICAgICAgIHNldCh2YWx1ZSkge1xuICAgICAgICAgIG91dGVyU2V0KHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgZ2V0KCkge1xuICAgICAgICAgIHJldHVybiBpbm5lckdldCgpO1xuICAgICAgICB9LFxuICAgICAgICBzZXQodmFsdWUpIHtcbiAgICAgICAgICBpbm5lclNldCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICApO1xuICAgIGNsZWFudXAyKHJlbGVhc2VFbnRhbmdsZW1lbnQpO1xuICB9KTtcbn0pO1xuXG4vLyBwYWNrYWdlcy9hbHBpbmVqcy9zcmMvZGlyZWN0aXZlcy94LXRlbGVwb3J0LmpzXG5kaXJlY3RpdmUoXCJ0ZWxlcG9ydFwiLCAoZWwsIHsgbW9kaWZpZXJzLCBleHByZXNzaW9uIH0sIHsgY2xlYW51cDogY2xlYW51cDIgfSkgPT4ge1xuICBpZiAoZWwudGFnTmFtZS50b0xvd2VyQ2FzZSgpICE9PSBcInRlbXBsYXRlXCIpXG4gICAgd2FybihcIngtdGVsZXBvcnQgY2FuIG9ubHkgYmUgdXNlZCBvbiBhIDx0ZW1wbGF0ZT4gdGFnXCIsIGVsKTtcbiAgbGV0IHRhcmdldCA9IGdldFRhcmdldChleHByZXNzaW9uKTtcbiAgbGV0IGNsb25lMiA9IGVsLmNvbnRlbnQuY2xvbmVOb2RlKHRydWUpLmZpcnN0RWxlbWVudENoaWxkO1xuICBlbC5feF90ZWxlcG9ydCA9IGNsb25lMjtcbiAgY2xvbmUyLl94X3RlbGVwb3J0QmFjayA9IGVsO1xuICBlbC5zZXRBdHRyaWJ1dGUoXCJkYXRhLXRlbGVwb3J0LXRlbXBsYXRlXCIsIHRydWUpO1xuICBjbG9uZTIuc2V0QXR0cmlidXRlKFwiZGF0YS10ZWxlcG9ydC10YXJnZXRcIiwgdHJ1ZSk7XG4gIGlmIChlbC5feF9mb3J3YXJkRXZlbnRzKSB7XG4gICAgZWwuX3hfZm9yd2FyZEV2ZW50cy5mb3JFYWNoKChldmVudE5hbWUpID0+IHtcbiAgICAgIGNsb25lMi5hZGRFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgKGUpID0+IHtcbiAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgZWwuZGlzcGF0Y2hFdmVudChuZXcgZS5jb25zdHJ1Y3RvcihlLnR5cGUsIGUpKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG4gIGFkZFNjb3BlVG9Ob2RlKGNsb25lMiwge30sIGVsKTtcbiAgbGV0IHBsYWNlSW5Eb20gPSAoY2xvbmUzLCB0YXJnZXQyLCBtb2RpZmllcnMyKSA9PiB7XG4gICAgaWYgKG1vZGlmaWVyczIuaW5jbHVkZXMoXCJwcmVwZW5kXCIpKSB7XG4gICAgICB0YXJnZXQyLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGNsb25lMywgdGFyZ2V0Mik7XG4gICAgfSBlbHNlIGlmIChtb2RpZmllcnMyLmluY2x1ZGVzKFwiYXBwZW5kXCIpKSB7XG4gICAgICB0YXJnZXQyLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGNsb25lMywgdGFyZ2V0Mi5uZXh0U2libGluZyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRhcmdldDIuYXBwZW5kQ2hpbGQoY2xvbmUzKTtcbiAgICB9XG4gIH07XG4gIG11dGF0ZURvbSgoKSA9PiB7XG4gICAgcGxhY2VJbkRvbShjbG9uZTIsIHRhcmdldCwgbW9kaWZpZXJzKTtcbiAgICBza2lwRHVyaW5nQ2xvbmUoKCkgPT4ge1xuICAgICAgaW5pdFRyZWUoY2xvbmUyKTtcbiAgICAgIGNsb25lMi5feF9pZ25vcmUgPSB0cnVlO1xuICAgIH0pKCk7XG4gIH0pO1xuICBlbC5feF90ZWxlcG9ydFB1dEJhY2sgPSAoKSA9PiB7XG4gICAgbGV0IHRhcmdldDIgPSBnZXRUYXJnZXQoZXhwcmVzc2lvbik7XG4gICAgbXV0YXRlRG9tKCgpID0+IHtcbiAgICAgIHBsYWNlSW5Eb20oZWwuX3hfdGVsZXBvcnQsIHRhcmdldDIsIG1vZGlmaWVycyk7XG4gICAgfSk7XG4gIH07XG4gIGNsZWFudXAyKCgpID0+IGNsb25lMi5yZW1vdmUoKSk7XG59KTtcbnZhciB0ZWxlcG9ydENvbnRhaW5lckR1cmluZ0Nsb25lID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbmZ1bmN0aW9uIGdldFRhcmdldChleHByZXNzaW9uKSB7XG4gIGxldCB0YXJnZXQgPSBza2lwRHVyaW5nQ2xvbmUoKCkgPT4ge1xuICAgIHJldHVybiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGV4cHJlc3Npb24pO1xuICB9LCAoKSA9PiB7XG4gICAgcmV0dXJuIHRlbGVwb3J0Q29udGFpbmVyRHVyaW5nQ2xvbmU7XG4gIH0pKCk7XG4gIGlmICghdGFyZ2V0KVxuICAgIHdhcm4oYENhbm5vdCBmaW5kIHgtdGVsZXBvcnQgZWxlbWVudCBmb3Igc2VsZWN0b3I6IFwiJHtleHByZXNzaW9ufVwiYCk7XG4gIHJldHVybiB0YXJnZXQ7XG59XG5cbi8vIHBhY2thZ2VzL2FscGluZWpzL3NyYy9kaXJlY3RpdmVzL3gtaWdub3JlLmpzXG52YXIgaGFuZGxlciA9ICgpID0+IHtcbn07XG5oYW5kbGVyLmlubGluZSA9IChlbCwgeyBtb2RpZmllcnMgfSwgeyBjbGVhbnVwOiBjbGVhbnVwMiB9KSA9PiB7XG4gIG1vZGlmaWVycy5pbmNsdWRlcyhcInNlbGZcIikgPyBlbC5feF9pZ25vcmVTZWxmID0gdHJ1ZSA6IGVsLl94X2lnbm9yZSA9IHRydWU7XG4gIGNsZWFudXAyKCgpID0+IHtcbiAgICBtb2RpZmllcnMuaW5jbHVkZXMoXCJzZWxmXCIpID8gZGVsZXRlIGVsLl94X2lnbm9yZVNlbGYgOiBkZWxldGUgZWwuX3hfaWdub3JlO1xuICB9KTtcbn07XG5kaXJlY3RpdmUoXCJpZ25vcmVcIiwgaGFuZGxlcik7XG5cbi8vIHBhY2thZ2VzL2FscGluZWpzL3NyYy9kaXJlY3RpdmVzL3gtZWZmZWN0LmpzXG5kaXJlY3RpdmUoXCJlZmZlY3RcIiwgc2tpcER1cmluZ0Nsb25lKChlbCwgeyBleHByZXNzaW9uIH0sIHsgZWZmZWN0OiBlZmZlY3QzIH0pID0+IHtcbiAgZWZmZWN0MyhldmFsdWF0ZUxhdGVyKGVsLCBleHByZXNzaW9uKSk7XG59KSk7XG5cbi8vIHBhY2thZ2VzL2FscGluZWpzL3NyYy91dGlscy9vbi5qc1xuZnVuY3Rpb24gb24oZWwsIGV2ZW50LCBtb2RpZmllcnMsIGNhbGxiYWNrKSB7XG4gIGxldCBsaXN0ZW5lclRhcmdldCA9IGVsO1xuICBsZXQgaGFuZGxlcjQgPSAoZSkgPT4gY2FsbGJhY2soZSk7XG4gIGxldCBvcHRpb25zID0ge307XG4gIGxldCB3cmFwSGFuZGxlciA9IChjYWxsYmFjazIsIHdyYXBwZXIpID0+IChlKSA9PiB3cmFwcGVyKGNhbGxiYWNrMiwgZSk7XG4gIGlmIChtb2RpZmllcnMuaW5jbHVkZXMoXCJkb3RcIikpXG4gICAgZXZlbnQgPSBkb3RTeW50YXgoZXZlbnQpO1xuICBpZiAobW9kaWZpZXJzLmluY2x1ZGVzKFwiY2FtZWxcIikpXG4gICAgZXZlbnQgPSBjYW1lbENhc2UyKGV2ZW50KTtcbiAgaWYgKG1vZGlmaWVycy5pbmNsdWRlcyhcInBhc3NpdmVcIikpXG4gICAgb3B0aW9ucy5wYXNzaXZlID0gdHJ1ZTtcbiAgaWYgKG1vZGlmaWVycy5pbmNsdWRlcyhcImNhcHR1cmVcIikpXG4gICAgb3B0aW9ucy5jYXB0dXJlID0gdHJ1ZTtcbiAgaWYgKG1vZGlmaWVycy5pbmNsdWRlcyhcIndpbmRvd1wiKSlcbiAgICBsaXN0ZW5lclRhcmdldCA9IHdpbmRvdztcbiAgaWYgKG1vZGlmaWVycy5pbmNsdWRlcyhcImRvY3VtZW50XCIpKVxuICAgIGxpc3RlbmVyVGFyZ2V0ID0gZG9jdW1lbnQ7XG4gIGlmIChtb2RpZmllcnMuaW5jbHVkZXMoXCJkZWJvdW5jZVwiKSkge1xuICAgIGxldCBuZXh0TW9kaWZpZXIgPSBtb2RpZmllcnNbbW9kaWZpZXJzLmluZGV4T2YoXCJkZWJvdW5jZVwiKSArIDFdIHx8IFwiaW52YWxpZC13YWl0XCI7XG4gICAgbGV0IHdhaXQgPSBpc051bWVyaWMobmV4dE1vZGlmaWVyLnNwbGl0KFwibXNcIilbMF0pID8gTnVtYmVyKG5leHRNb2RpZmllci5zcGxpdChcIm1zXCIpWzBdKSA6IDI1MDtcbiAgICBoYW5kbGVyNCA9IGRlYm91bmNlKGhhbmRsZXI0LCB3YWl0KTtcbiAgfVxuICBpZiAobW9kaWZpZXJzLmluY2x1ZGVzKFwidGhyb3R0bGVcIikpIHtcbiAgICBsZXQgbmV4dE1vZGlmaWVyID0gbW9kaWZpZXJzW21vZGlmaWVycy5pbmRleE9mKFwidGhyb3R0bGVcIikgKyAxXSB8fCBcImludmFsaWQtd2FpdFwiO1xuICAgIGxldCB3YWl0ID0gaXNOdW1lcmljKG5leHRNb2RpZmllci5zcGxpdChcIm1zXCIpWzBdKSA/IE51bWJlcihuZXh0TW9kaWZpZXIuc3BsaXQoXCJtc1wiKVswXSkgOiAyNTA7XG4gICAgaGFuZGxlcjQgPSB0aHJvdHRsZShoYW5kbGVyNCwgd2FpdCk7XG4gIH1cbiAgaWYgKG1vZGlmaWVycy5pbmNsdWRlcyhcInByZXZlbnRcIikpXG4gICAgaGFuZGxlcjQgPSB3cmFwSGFuZGxlcihoYW5kbGVyNCwgKG5leHQsIGUpID0+IHtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgIG5leHQoZSk7XG4gICAgfSk7XG4gIGlmIChtb2RpZmllcnMuaW5jbHVkZXMoXCJzdG9wXCIpKVxuICAgIGhhbmRsZXI0ID0gd3JhcEhhbmRsZXIoaGFuZGxlcjQsIChuZXh0LCBlKSA9PiB7XG4gICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgbmV4dChlKTtcbiAgICB9KTtcbiAgaWYgKG1vZGlmaWVycy5pbmNsdWRlcyhcIm9uY2VcIikpIHtcbiAgICBoYW5kbGVyNCA9IHdyYXBIYW5kbGVyKGhhbmRsZXI0LCAobmV4dCwgZSkgPT4ge1xuICAgICAgbmV4dChlKTtcbiAgICAgIGxpc3RlbmVyVGFyZ2V0LnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnQsIGhhbmRsZXI0LCBvcHRpb25zKTtcbiAgICB9KTtcbiAgfVxuICBpZiAobW9kaWZpZXJzLmluY2x1ZGVzKFwiYXdheVwiKSB8fCBtb2RpZmllcnMuaW5jbHVkZXMoXCJvdXRzaWRlXCIpKSB7XG4gICAgbGlzdGVuZXJUYXJnZXQgPSBkb2N1bWVudDtcbiAgICBoYW5kbGVyNCA9IHdyYXBIYW5kbGVyKGhhbmRsZXI0LCAobmV4dCwgZSkgPT4ge1xuICAgICAgaWYgKGVsLmNvbnRhaW5zKGUudGFyZ2V0KSlcbiAgICAgICAgcmV0dXJuO1xuICAgICAgaWYgKGUudGFyZ2V0LmlzQ29ubmVjdGVkID09PSBmYWxzZSlcbiAgICAgICAgcmV0dXJuO1xuICAgICAgaWYgKGVsLm9mZnNldFdpZHRoIDwgMSAmJiBlbC5vZmZzZXRIZWlnaHQgPCAxKVxuICAgICAgICByZXR1cm47XG4gICAgICBpZiAoZWwuX3hfaXNTaG93biA9PT0gZmFsc2UpXG4gICAgICAgIHJldHVybjtcbiAgICAgIG5leHQoZSk7XG4gICAgfSk7XG4gIH1cbiAgaWYgKG1vZGlmaWVycy5pbmNsdWRlcyhcInNlbGZcIikpXG4gICAgaGFuZGxlcjQgPSB3cmFwSGFuZGxlcihoYW5kbGVyNCwgKG5leHQsIGUpID0+IHtcbiAgICAgIGUudGFyZ2V0ID09PSBlbCAmJiBuZXh0KGUpO1xuICAgIH0pO1xuICBpZiAoaXNLZXlFdmVudChldmVudCkgfHwgaXNDbGlja0V2ZW50KGV2ZW50KSkge1xuICAgIGhhbmRsZXI0ID0gd3JhcEhhbmRsZXIoaGFuZGxlcjQsIChuZXh0LCBlKSA9PiB7XG4gICAgICBpZiAoaXNMaXN0ZW5pbmdGb3JBU3BlY2lmaWNLZXlUaGF0SGFzbnRCZWVuUHJlc3NlZChlLCBtb2RpZmllcnMpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIG5leHQoZSk7XG4gICAgfSk7XG4gIH1cbiAgbGlzdGVuZXJUYXJnZXQuYWRkRXZlbnRMaXN0ZW5lcihldmVudCwgaGFuZGxlcjQsIG9wdGlvbnMpO1xuICByZXR1cm4gKCkgPT4ge1xuICAgIGxpc3RlbmVyVGFyZ2V0LnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnQsIGhhbmRsZXI0LCBvcHRpb25zKTtcbiAgfTtcbn1cbmZ1bmN0aW9uIGRvdFN5bnRheChzdWJqZWN0KSB7XG4gIHJldHVybiBzdWJqZWN0LnJlcGxhY2UoLy0vZywgXCIuXCIpO1xufVxuZnVuY3Rpb24gY2FtZWxDYXNlMihzdWJqZWN0KSB7XG4gIHJldHVybiBzdWJqZWN0LnRvTG93ZXJDYXNlKCkucmVwbGFjZSgvLShcXHcpL2csIChtYXRjaCwgY2hhcikgPT4gY2hhci50b1VwcGVyQ2FzZSgpKTtcbn1cbmZ1bmN0aW9uIGlzTnVtZXJpYyhzdWJqZWN0KSB7XG4gIHJldHVybiAhQXJyYXkuaXNBcnJheShzdWJqZWN0KSAmJiAhaXNOYU4oc3ViamVjdCk7XG59XG5mdW5jdGlvbiBrZWJhYkNhc2UyKHN1YmplY3QpIHtcbiAgaWYgKFtcIiBcIiwgXCJfXCJdLmluY2x1ZGVzKFxuICAgIHN1YmplY3RcbiAgKSlcbiAgICByZXR1cm4gc3ViamVjdDtcbiAgcmV0dXJuIHN1YmplY3QucmVwbGFjZSgvKFthLXpdKShbQS1aXSkvZywgXCIkMS0kMlwiKS5yZXBsYWNlKC9bX1xcc10vLCBcIi1cIikudG9Mb3dlckNhc2UoKTtcbn1cbmZ1bmN0aW9uIGlzS2V5RXZlbnQoZXZlbnQpIHtcbiAgcmV0dXJuIFtcImtleWRvd25cIiwgXCJrZXl1cFwiXS5pbmNsdWRlcyhldmVudCk7XG59XG5mdW5jdGlvbiBpc0NsaWNrRXZlbnQoZXZlbnQpIHtcbiAgcmV0dXJuIFtcImNvbnRleHRtZW51XCIsIFwiY2xpY2tcIiwgXCJtb3VzZVwiXS5zb21lKChpKSA9PiBldmVudC5pbmNsdWRlcyhpKSk7XG59XG5mdW5jdGlvbiBpc0xpc3RlbmluZ0ZvckFTcGVjaWZpY0tleVRoYXRIYXNudEJlZW5QcmVzc2VkKGUsIG1vZGlmaWVycykge1xuICBsZXQga2V5TW9kaWZpZXJzID0gbW9kaWZpZXJzLmZpbHRlcigoaSkgPT4ge1xuICAgIHJldHVybiAhW1wid2luZG93XCIsIFwiZG9jdW1lbnRcIiwgXCJwcmV2ZW50XCIsIFwic3RvcFwiLCBcIm9uY2VcIiwgXCJjYXB0dXJlXCIsIFwic2VsZlwiLCBcImF3YXlcIiwgXCJvdXRzaWRlXCIsIFwicGFzc2l2ZVwiXS5pbmNsdWRlcyhpKTtcbiAgfSk7XG4gIGlmIChrZXlNb2RpZmllcnMuaW5jbHVkZXMoXCJkZWJvdW5jZVwiKSkge1xuICAgIGxldCBkZWJvdW5jZUluZGV4ID0ga2V5TW9kaWZpZXJzLmluZGV4T2YoXCJkZWJvdW5jZVwiKTtcbiAgICBrZXlNb2RpZmllcnMuc3BsaWNlKGRlYm91bmNlSW5kZXgsIGlzTnVtZXJpYygoa2V5TW9kaWZpZXJzW2RlYm91bmNlSW5kZXggKyAxXSB8fCBcImludmFsaWQtd2FpdFwiKS5zcGxpdChcIm1zXCIpWzBdKSA/IDIgOiAxKTtcbiAgfVxuICBpZiAoa2V5TW9kaWZpZXJzLmluY2x1ZGVzKFwidGhyb3R0bGVcIikpIHtcbiAgICBsZXQgZGVib3VuY2VJbmRleCA9IGtleU1vZGlmaWVycy5pbmRleE9mKFwidGhyb3R0bGVcIik7XG4gICAga2V5TW9kaWZpZXJzLnNwbGljZShkZWJvdW5jZUluZGV4LCBpc051bWVyaWMoKGtleU1vZGlmaWVyc1tkZWJvdW5jZUluZGV4ICsgMV0gfHwgXCJpbnZhbGlkLXdhaXRcIikuc3BsaXQoXCJtc1wiKVswXSkgPyAyIDogMSk7XG4gIH1cbiAgaWYgKGtleU1vZGlmaWVycy5sZW5ndGggPT09IDApXG4gICAgcmV0dXJuIGZhbHNlO1xuICBpZiAoa2V5TW9kaWZpZXJzLmxlbmd0aCA9PT0gMSAmJiBrZXlUb01vZGlmaWVycyhlLmtleSkuaW5jbHVkZXMoa2V5TW9kaWZpZXJzWzBdKSlcbiAgICByZXR1cm4gZmFsc2U7XG4gIGNvbnN0IHN5c3RlbUtleU1vZGlmaWVycyA9IFtcImN0cmxcIiwgXCJzaGlmdFwiLCBcImFsdFwiLCBcIm1ldGFcIiwgXCJjbWRcIiwgXCJzdXBlclwiXTtcbiAgY29uc3Qgc2VsZWN0ZWRTeXN0ZW1LZXlNb2RpZmllcnMgPSBzeXN0ZW1LZXlNb2RpZmllcnMuZmlsdGVyKChtb2RpZmllcikgPT4ga2V5TW9kaWZpZXJzLmluY2x1ZGVzKG1vZGlmaWVyKSk7XG4gIGtleU1vZGlmaWVycyA9IGtleU1vZGlmaWVycy5maWx0ZXIoKGkpID0+ICFzZWxlY3RlZFN5c3RlbUtleU1vZGlmaWVycy5pbmNsdWRlcyhpKSk7XG4gIGlmIChzZWxlY3RlZFN5c3RlbUtleU1vZGlmaWVycy5sZW5ndGggPiAwKSB7XG4gICAgY29uc3QgYWN0aXZlbHlQcmVzc2VkS2V5TW9kaWZpZXJzID0gc2VsZWN0ZWRTeXN0ZW1LZXlNb2RpZmllcnMuZmlsdGVyKChtb2RpZmllcikgPT4ge1xuICAgICAgaWYgKG1vZGlmaWVyID09PSBcImNtZFwiIHx8IG1vZGlmaWVyID09PSBcInN1cGVyXCIpXG4gICAgICAgIG1vZGlmaWVyID0gXCJtZXRhXCI7XG4gICAgICByZXR1cm4gZVtgJHttb2RpZmllcn1LZXlgXTtcbiAgICB9KTtcbiAgICBpZiAoYWN0aXZlbHlQcmVzc2VkS2V5TW9kaWZpZXJzLmxlbmd0aCA9PT0gc2VsZWN0ZWRTeXN0ZW1LZXlNb2RpZmllcnMubGVuZ3RoKSB7XG4gICAgICBpZiAoaXNDbGlja0V2ZW50KGUudHlwZSkpXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIGlmIChrZXlUb01vZGlmaWVycyhlLmtleSkuaW5jbHVkZXMoa2V5TW9kaWZpZXJzWzBdKSlcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn1cbmZ1bmN0aW9uIGtleVRvTW9kaWZpZXJzKGtleSkge1xuICBpZiAoIWtleSlcbiAgICByZXR1cm4gW107XG4gIGtleSA9IGtlYmFiQ2FzZTIoa2V5KTtcbiAgbGV0IG1vZGlmaWVyVG9LZXlNYXAgPSB7XG4gICAgXCJjdHJsXCI6IFwiY29udHJvbFwiLFxuICAgIFwic2xhc2hcIjogXCIvXCIsXG4gICAgXCJzcGFjZVwiOiBcIiBcIixcbiAgICBcInNwYWNlYmFyXCI6IFwiIFwiLFxuICAgIFwiY21kXCI6IFwibWV0YVwiLFxuICAgIFwiZXNjXCI6IFwiZXNjYXBlXCIsXG4gICAgXCJ1cFwiOiBcImFycm93LXVwXCIsXG4gICAgXCJkb3duXCI6IFwiYXJyb3ctZG93blwiLFxuICAgIFwibGVmdFwiOiBcImFycm93LWxlZnRcIixcbiAgICBcInJpZ2h0XCI6IFwiYXJyb3ctcmlnaHRcIixcbiAgICBcInBlcmlvZFwiOiBcIi5cIixcbiAgICBcImNvbW1hXCI6IFwiLFwiLFxuICAgIFwiZXF1YWxcIjogXCI9XCIsXG4gICAgXCJtaW51c1wiOiBcIi1cIixcbiAgICBcInVuZGVyc2NvcmVcIjogXCJfXCJcbiAgfTtcbiAgbW9kaWZpZXJUb0tleU1hcFtrZXldID0ga2V5O1xuICByZXR1cm4gT2JqZWN0LmtleXMobW9kaWZpZXJUb0tleU1hcCkubWFwKChtb2RpZmllcikgPT4ge1xuICAgIGlmIChtb2RpZmllclRvS2V5TWFwW21vZGlmaWVyXSA9PT0ga2V5KVxuICAgICAgcmV0dXJuIG1vZGlmaWVyO1xuICB9KS5maWx0ZXIoKG1vZGlmaWVyKSA9PiBtb2RpZmllcik7XG59XG5cbi8vIHBhY2thZ2VzL2FscGluZWpzL3NyYy9kaXJlY3RpdmVzL3gtbW9kZWwuanNcbmRpcmVjdGl2ZShcIm1vZGVsXCIsIChlbCwgeyBtb2RpZmllcnMsIGV4cHJlc3Npb24gfSwgeyBlZmZlY3Q6IGVmZmVjdDMsIGNsZWFudXA6IGNsZWFudXAyIH0pID0+IHtcbiAgbGV0IHNjb3BlVGFyZ2V0ID0gZWw7XG4gIGlmIChtb2RpZmllcnMuaW5jbHVkZXMoXCJwYXJlbnRcIikpIHtcbiAgICBzY29wZVRhcmdldCA9IGVsLnBhcmVudE5vZGU7XG4gIH1cbiAgbGV0IGV2YWx1YXRlR2V0ID0gZXZhbHVhdGVMYXRlcihzY29wZVRhcmdldCwgZXhwcmVzc2lvbik7XG4gIGxldCBldmFsdWF0ZVNldDtcbiAgaWYgKHR5cGVvZiBleHByZXNzaW9uID09PSBcInN0cmluZ1wiKSB7XG4gICAgZXZhbHVhdGVTZXQgPSBldmFsdWF0ZUxhdGVyKHNjb3BlVGFyZ2V0LCBgJHtleHByZXNzaW9ufSA9IF9fcGxhY2Vob2xkZXJgKTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgZXhwcmVzc2lvbiA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBleHByZXNzaW9uKCkgPT09IFwic3RyaW5nXCIpIHtcbiAgICBldmFsdWF0ZVNldCA9IGV2YWx1YXRlTGF0ZXIoc2NvcGVUYXJnZXQsIGAke2V4cHJlc3Npb24oKX0gPSBfX3BsYWNlaG9sZGVyYCk7XG4gIH0gZWxzZSB7XG4gICAgZXZhbHVhdGVTZXQgPSAoKSA9PiB7XG4gICAgfTtcbiAgfVxuICBsZXQgZ2V0VmFsdWUgPSAoKSA9PiB7XG4gICAgbGV0IHJlc3VsdDtcbiAgICBldmFsdWF0ZUdldCgodmFsdWUpID0+IHJlc3VsdCA9IHZhbHVlKTtcbiAgICByZXR1cm4gaXNHZXR0ZXJTZXR0ZXIocmVzdWx0KSA/IHJlc3VsdC5nZXQoKSA6IHJlc3VsdDtcbiAgfTtcbiAgbGV0IHNldFZhbHVlID0gKHZhbHVlKSA9PiB7XG4gICAgbGV0IHJlc3VsdDtcbiAgICBldmFsdWF0ZUdldCgodmFsdWUyKSA9PiByZXN1bHQgPSB2YWx1ZTIpO1xuICAgIGlmIChpc0dldHRlclNldHRlcihyZXN1bHQpKSB7XG4gICAgICByZXN1bHQuc2V0KHZhbHVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZXZhbHVhdGVTZXQoKCkgPT4ge1xuICAgICAgfSwge1xuICAgICAgICBzY29wZTogeyBcIl9fcGxhY2Vob2xkZXJcIjogdmFsdWUgfVxuICAgICAgfSk7XG4gICAgfVxuICB9O1xuICBpZiAodHlwZW9mIGV4cHJlc3Npb24gPT09IFwic3RyaW5nXCIgJiYgZWwudHlwZSA9PT0gXCJyYWRpb1wiKSB7XG4gICAgbXV0YXRlRG9tKCgpID0+IHtcbiAgICAgIGlmICghZWwuaGFzQXR0cmlidXRlKFwibmFtZVwiKSlcbiAgICAgICAgZWwuc2V0QXR0cmlidXRlKFwibmFtZVwiLCBleHByZXNzaW9uKTtcbiAgICB9KTtcbiAgfVxuICB2YXIgZXZlbnQgPSBlbC50YWdOYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwic2VsZWN0XCIgfHwgW1wiY2hlY2tib3hcIiwgXCJyYWRpb1wiXS5pbmNsdWRlcyhlbC50eXBlKSB8fCBtb2RpZmllcnMuaW5jbHVkZXMoXCJsYXp5XCIpID8gXCJjaGFuZ2VcIiA6IFwiaW5wdXRcIjtcbiAgbGV0IHJlbW92ZUxpc3RlbmVyID0gaXNDbG9uaW5nID8gKCkgPT4ge1xuICB9IDogb24oZWwsIGV2ZW50LCBtb2RpZmllcnMsIChlKSA9PiB7XG4gICAgc2V0VmFsdWUoZ2V0SW5wdXRWYWx1ZShlbCwgbW9kaWZpZXJzLCBlLCBnZXRWYWx1ZSgpKSk7XG4gIH0pO1xuICBpZiAobW9kaWZpZXJzLmluY2x1ZGVzKFwiZmlsbFwiKSkge1xuICAgIGlmIChbdm9pZCAwLCBudWxsLCBcIlwiXS5pbmNsdWRlcyhnZXRWYWx1ZSgpKSB8fCBlbC50eXBlID09PSBcImNoZWNrYm94XCIgJiYgQXJyYXkuaXNBcnJheShnZXRWYWx1ZSgpKSB8fCBlbC50YWdOYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwic2VsZWN0XCIgJiYgZWwubXVsdGlwbGUpIHtcbiAgICAgIHNldFZhbHVlKFxuICAgICAgICBnZXRJbnB1dFZhbHVlKGVsLCBtb2RpZmllcnMsIHsgdGFyZ2V0OiBlbCB9LCBnZXRWYWx1ZSgpKVxuICAgICAgKTtcbiAgICB9XG4gIH1cbiAgaWYgKCFlbC5feF9yZW1vdmVNb2RlbExpc3RlbmVycylcbiAgICBlbC5feF9yZW1vdmVNb2RlbExpc3RlbmVycyA9IHt9O1xuICBlbC5feF9yZW1vdmVNb2RlbExpc3RlbmVyc1tcImRlZmF1bHRcIl0gPSByZW1vdmVMaXN0ZW5lcjtcbiAgY2xlYW51cDIoKCkgPT4gZWwuX3hfcmVtb3ZlTW9kZWxMaXN0ZW5lcnNbXCJkZWZhdWx0XCJdKCkpO1xuICBpZiAoZWwuZm9ybSkge1xuICAgIGxldCByZW1vdmVSZXNldExpc3RlbmVyID0gb24oZWwuZm9ybSwgXCJyZXNldFwiLCBbXSwgKGUpID0+IHtcbiAgICAgIG5leHRUaWNrKCgpID0+IGVsLl94X21vZGVsICYmIGVsLl94X21vZGVsLnNldChnZXRJbnB1dFZhbHVlKGVsLCBtb2RpZmllcnMsIHsgdGFyZ2V0OiBlbCB9LCBnZXRWYWx1ZSgpKSkpO1xuICAgIH0pO1xuICAgIGNsZWFudXAyKCgpID0+IHJlbW92ZVJlc2V0TGlzdGVuZXIoKSk7XG4gIH1cbiAgZWwuX3hfbW9kZWwgPSB7XG4gICAgZ2V0KCkge1xuICAgICAgcmV0dXJuIGdldFZhbHVlKCk7XG4gICAgfSxcbiAgICBzZXQodmFsdWUpIHtcbiAgICAgIHNldFZhbHVlKHZhbHVlKTtcbiAgICB9XG4gIH07XG4gIGVsLl94X2ZvcmNlTW9kZWxVcGRhdGUgPSAodmFsdWUpID0+IHtcbiAgICBpZiAodmFsdWUgPT09IHZvaWQgMCAmJiB0eXBlb2YgZXhwcmVzc2lvbiA9PT0gXCJzdHJpbmdcIiAmJiBleHByZXNzaW9uLm1hdGNoKC9cXC4vKSlcbiAgICAgIHZhbHVlID0gXCJcIjtcbiAgICB3aW5kb3cuZnJvbU1vZGVsID0gdHJ1ZTtcbiAgICBtdXRhdGVEb20oKCkgPT4gYmluZChlbCwgXCJ2YWx1ZVwiLCB2YWx1ZSkpO1xuICAgIGRlbGV0ZSB3aW5kb3cuZnJvbU1vZGVsO1xuICB9O1xuICBlZmZlY3QzKCgpID0+IHtcbiAgICBsZXQgdmFsdWUgPSBnZXRWYWx1ZSgpO1xuICAgIGlmIChtb2RpZmllcnMuaW5jbHVkZXMoXCJ1bmludHJ1c2l2ZVwiKSAmJiBkb2N1bWVudC5hY3RpdmVFbGVtZW50LmlzU2FtZU5vZGUoZWwpKVxuICAgICAgcmV0dXJuO1xuICAgIGVsLl94X2ZvcmNlTW9kZWxVcGRhdGUodmFsdWUpO1xuICB9KTtcbn0pO1xuZnVuY3Rpb24gZ2V0SW5wdXRWYWx1ZShlbCwgbW9kaWZpZXJzLCBldmVudCwgY3VycmVudFZhbHVlKSB7XG4gIHJldHVybiBtdXRhdGVEb20oKCkgPT4ge1xuICAgIGlmIChldmVudCBpbnN0YW5jZW9mIEN1c3RvbUV2ZW50ICYmIGV2ZW50LmRldGFpbCAhPT0gdm9pZCAwKVxuICAgICAgcmV0dXJuIGV2ZW50LmRldGFpbCAhPT0gbnVsbCAmJiBldmVudC5kZXRhaWwgIT09IHZvaWQgMCA/IGV2ZW50LmRldGFpbCA6IGV2ZW50LnRhcmdldC52YWx1ZTtcbiAgICBlbHNlIGlmIChlbC50eXBlID09PSBcImNoZWNrYm94XCIpIHtcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KGN1cnJlbnRWYWx1ZSkpIHtcbiAgICAgICAgbGV0IG5ld1ZhbHVlID0gbnVsbDtcbiAgICAgICAgaWYgKG1vZGlmaWVycy5pbmNsdWRlcyhcIm51bWJlclwiKSkge1xuICAgICAgICAgIG5ld1ZhbHVlID0gc2FmZVBhcnNlTnVtYmVyKGV2ZW50LnRhcmdldC52YWx1ZSk7XG4gICAgICAgIH0gZWxzZSBpZiAobW9kaWZpZXJzLmluY2x1ZGVzKFwiYm9vbGVhblwiKSkge1xuICAgICAgICAgIG5ld1ZhbHVlID0gc2FmZVBhcnNlQm9vbGVhbihldmVudC50YXJnZXQudmFsdWUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG5ld1ZhbHVlID0gZXZlbnQudGFyZ2V0LnZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBldmVudC50YXJnZXQuY2hlY2tlZCA/IGN1cnJlbnRWYWx1ZS5pbmNsdWRlcyhuZXdWYWx1ZSkgPyBjdXJyZW50VmFsdWUgOiBjdXJyZW50VmFsdWUuY29uY2F0KFtuZXdWYWx1ZV0pIDogY3VycmVudFZhbHVlLmZpbHRlcigoZWwyKSA9PiAhY2hlY2tlZEF0dHJMb29zZUNvbXBhcmUyKGVsMiwgbmV3VmFsdWUpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBldmVudC50YXJnZXQuY2hlY2tlZDtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGVsLnRhZ05hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJzZWxlY3RcIiAmJiBlbC5tdWx0aXBsZSkge1xuICAgICAgaWYgKG1vZGlmaWVycy5pbmNsdWRlcyhcIm51bWJlclwiKSkge1xuICAgICAgICByZXR1cm4gQXJyYXkuZnJvbShldmVudC50YXJnZXQuc2VsZWN0ZWRPcHRpb25zKS5tYXAoKG9wdGlvbikgPT4ge1xuICAgICAgICAgIGxldCByYXdWYWx1ZSA9IG9wdGlvbi52YWx1ZSB8fCBvcHRpb24udGV4dDtcbiAgICAgICAgICByZXR1cm4gc2FmZVBhcnNlTnVtYmVyKHJhd1ZhbHVlKTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2UgaWYgKG1vZGlmaWVycy5pbmNsdWRlcyhcImJvb2xlYW5cIikpIHtcbiAgICAgICAgcmV0dXJuIEFycmF5LmZyb20oZXZlbnQudGFyZ2V0LnNlbGVjdGVkT3B0aW9ucykubWFwKChvcHRpb24pID0+IHtcbiAgICAgICAgICBsZXQgcmF3VmFsdWUgPSBvcHRpb24udmFsdWUgfHwgb3B0aW9uLnRleHQ7XG4gICAgICAgICAgcmV0dXJuIHNhZmVQYXJzZUJvb2xlYW4ocmF3VmFsdWUpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBBcnJheS5mcm9tKGV2ZW50LnRhcmdldC5zZWxlY3RlZE9wdGlvbnMpLm1hcCgob3B0aW9uKSA9PiB7XG4gICAgICAgIHJldHVybiBvcHRpb24udmFsdWUgfHwgb3B0aW9uLnRleHQ7XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgbGV0IG5ld1ZhbHVlO1xuICAgICAgaWYgKGVsLnR5cGUgPT09IFwicmFkaW9cIikge1xuICAgICAgICBpZiAoZXZlbnQudGFyZ2V0LmNoZWNrZWQpIHtcbiAgICAgICAgICBuZXdWYWx1ZSA9IGV2ZW50LnRhcmdldC52YWx1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBuZXdWYWx1ZSA9IGN1cnJlbnRWYWx1ZTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbmV3VmFsdWUgPSBldmVudC50YXJnZXQudmFsdWU7XG4gICAgICB9XG4gICAgICBpZiAobW9kaWZpZXJzLmluY2x1ZGVzKFwibnVtYmVyXCIpKSB7XG4gICAgICAgIHJldHVybiBzYWZlUGFyc2VOdW1iZXIobmV3VmFsdWUpO1xuICAgICAgfSBlbHNlIGlmIChtb2RpZmllcnMuaW5jbHVkZXMoXCJib29sZWFuXCIpKSB7XG4gICAgICAgIHJldHVybiBzYWZlUGFyc2VCb29sZWFuKG5ld1ZhbHVlKTtcbiAgICAgIH0gZWxzZSBpZiAobW9kaWZpZXJzLmluY2x1ZGVzKFwidHJpbVwiKSkge1xuICAgICAgICByZXR1cm4gbmV3VmFsdWUudHJpbSgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIG5ld1ZhbHVlO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG59XG5mdW5jdGlvbiBzYWZlUGFyc2VOdW1iZXIocmF3VmFsdWUpIHtcbiAgbGV0IG51bWJlciA9IHJhd1ZhbHVlID8gcGFyc2VGbG9hdChyYXdWYWx1ZSkgOiBudWxsO1xuICByZXR1cm4gaXNOdW1lcmljMihudW1iZXIpID8gbnVtYmVyIDogcmF3VmFsdWU7XG59XG5mdW5jdGlvbiBjaGVja2VkQXR0ckxvb3NlQ29tcGFyZTIodmFsdWVBLCB2YWx1ZUIpIHtcbiAgcmV0dXJuIHZhbHVlQSA9PSB2YWx1ZUI7XG59XG5mdW5jdGlvbiBpc051bWVyaWMyKHN1YmplY3QpIHtcbiAgcmV0dXJuICFBcnJheS5pc0FycmF5KHN1YmplY3QpICYmICFpc05hTihzdWJqZWN0KTtcbn1cbmZ1bmN0aW9uIGlzR2V0dGVyU2V0dGVyKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSAhPT0gbnVsbCAmJiB0eXBlb2YgdmFsdWUgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIHZhbHVlLmdldCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiB2YWx1ZS5zZXQgPT09IFwiZnVuY3Rpb25cIjtcbn1cblxuLy8gcGFja2FnZXMvYWxwaW5lanMvc3JjL2RpcmVjdGl2ZXMveC1jbG9hay5qc1xuZGlyZWN0aXZlKFwiY2xvYWtcIiwgKGVsKSA9PiBxdWV1ZU1pY3JvdGFzaygoKSA9PiBtdXRhdGVEb20oKCkgPT4gZWwucmVtb3ZlQXR0cmlidXRlKHByZWZpeChcImNsb2FrXCIpKSkpKTtcblxuLy8gcGFja2FnZXMvYWxwaW5lanMvc3JjL2RpcmVjdGl2ZXMveC1pbml0LmpzXG5hZGRJbml0U2VsZWN0b3IoKCkgPT4gYFske3ByZWZpeChcImluaXRcIil9XWApO1xuZGlyZWN0aXZlKFwiaW5pdFwiLCBza2lwRHVyaW5nQ2xvbmUoKGVsLCB7IGV4cHJlc3Npb24gfSwgeyBldmFsdWF0ZTogZXZhbHVhdGUyIH0pID0+IHtcbiAgaWYgKHR5cGVvZiBleHByZXNzaW9uID09PSBcInN0cmluZ1wiKSB7XG4gICAgcmV0dXJuICEhZXhwcmVzc2lvbi50cmltKCkgJiYgZXZhbHVhdGUyKGV4cHJlc3Npb24sIHt9LCBmYWxzZSk7XG4gIH1cbiAgcmV0dXJuIGV2YWx1YXRlMihleHByZXNzaW9uLCB7fSwgZmFsc2UpO1xufSkpO1xuXG4vLyBwYWNrYWdlcy9hbHBpbmVqcy9zcmMvZGlyZWN0aXZlcy94LXRleHQuanNcbmRpcmVjdGl2ZShcInRleHRcIiwgKGVsLCB7IGV4cHJlc3Npb24gfSwgeyBlZmZlY3Q6IGVmZmVjdDMsIGV2YWx1YXRlTGF0ZXI6IGV2YWx1YXRlTGF0ZXIyIH0pID0+IHtcbiAgbGV0IGV2YWx1YXRlMiA9IGV2YWx1YXRlTGF0ZXIyKGV4cHJlc3Npb24pO1xuICBlZmZlY3QzKCgpID0+IHtcbiAgICBldmFsdWF0ZTIoKHZhbHVlKSA9PiB7XG4gICAgICBtdXRhdGVEb20oKCkgPT4ge1xuICAgICAgICBlbC50ZXh0Q29udGVudCA9IHZhbHVlO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH0pO1xufSk7XG5cbi8vIHBhY2thZ2VzL2FscGluZWpzL3NyYy9kaXJlY3RpdmVzL3gtaHRtbC5qc1xuZGlyZWN0aXZlKFwiaHRtbFwiLCAoZWwsIHsgZXhwcmVzc2lvbiB9LCB7IGVmZmVjdDogZWZmZWN0MywgZXZhbHVhdGVMYXRlcjogZXZhbHVhdGVMYXRlcjIgfSkgPT4ge1xuICBsZXQgZXZhbHVhdGUyID0gZXZhbHVhdGVMYXRlcjIoZXhwcmVzc2lvbik7XG4gIGVmZmVjdDMoKCkgPT4ge1xuICAgIGV2YWx1YXRlMigodmFsdWUpID0+IHtcbiAgICAgIG11dGF0ZURvbSgoKSA9PiB7XG4gICAgICAgIGVsLmlubmVySFRNTCA9IHZhbHVlO1xuICAgICAgICBlbC5feF9pZ25vcmVTZWxmID0gdHJ1ZTtcbiAgICAgICAgaW5pdFRyZWUoZWwpO1xuICAgICAgICBkZWxldGUgZWwuX3hfaWdub3JlU2VsZjtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9KTtcbn0pO1xuXG4vLyBwYWNrYWdlcy9hbHBpbmVqcy9zcmMvZGlyZWN0aXZlcy94LWJpbmQuanNcbm1hcEF0dHJpYnV0ZXMoc3RhcnRpbmdXaXRoKFwiOlwiLCBpbnRvKHByZWZpeChcImJpbmQ6XCIpKSkpO1xudmFyIGhhbmRsZXIyID0gKGVsLCB7IHZhbHVlLCBtb2RpZmllcnMsIGV4cHJlc3Npb24sIG9yaWdpbmFsIH0sIHsgZWZmZWN0OiBlZmZlY3QzLCBjbGVhbnVwOiBjbGVhbnVwMiB9KSA9PiB7XG4gIGlmICghdmFsdWUpIHtcbiAgICBsZXQgYmluZGluZ1Byb3ZpZGVycyA9IHt9O1xuICAgIGluamVjdEJpbmRpbmdQcm92aWRlcnMoYmluZGluZ1Byb3ZpZGVycyk7XG4gICAgbGV0IGdldEJpbmRpbmdzID0gZXZhbHVhdGVMYXRlcihlbCwgZXhwcmVzc2lvbik7XG4gICAgZ2V0QmluZGluZ3MoKGJpbmRpbmdzKSA9PiB7XG4gICAgICBhcHBseUJpbmRpbmdzT2JqZWN0KGVsLCBiaW5kaW5ncywgb3JpZ2luYWwpO1xuICAgIH0sIHsgc2NvcGU6IGJpbmRpbmdQcm92aWRlcnMgfSk7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmICh2YWx1ZSA9PT0gXCJrZXlcIilcbiAgICByZXR1cm4gc3RvcmVLZXlGb3JYRm9yKGVsLCBleHByZXNzaW9uKTtcbiAgaWYgKGVsLl94X2lubGluZUJpbmRpbmdzICYmIGVsLl94X2lubGluZUJpbmRpbmdzW3ZhbHVlXSAmJiBlbC5feF9pbmxpbmVCaW5kaW5nc1t2YWx1ZV0uZXh0cmFjdCkge1xuICAgIHJldHVybjtcbiAgfVxuICBsZXQgZXZhbHVhdGUyID0gZXZhbHVhdGVMYXRlcihlbCwgZXhwcmVzc2lvbik7XG4gIGVmZmVjdDMoKCkgPT4gZXZhbHVhdGUyKChyZXN1bHQpID0+IHtcbiAgICBpZiAocmVzdWx0ID09PSB2b2lkIDAgJiYgdHlwZW9mIGV4cHJlc3Npb24gPT09IFwic3RyaW5nXCIgJiYgZXhwcmVzc2lvbi5tYXRjaCgvXFwuLykpIHtcbiAgICAgIHJlc3VsdCA9IFwiXCI7XG4gICAgfVxuICAgIG11dGF0ZURvbSgoKSA9PiBiaW5kKGVsLCB2YWx1ZSwgcmVzdWx0LCBtb2RpZmllcnMpKTtcbiAgfSkpO1xuICBjbGVhbnVwMigoKSA9PiB7XG4gICAgZWwuX3hfdW5kb0FkZGVkQ2xhc3NlcyAmJiBlbC5feF91bmRvQWRkZWRDbGFzc2VzKCk7XG4gICAgZWwuX3hfdW5kb0FkZGVkU3R5bGVzICYmIGVsLl94X3VuZG9BZGRlZFN0eWxlcygpO1xuICB9KTtcbn07XG5oYW5kbGVyMi5pbmxpbmUgPSAoZWwsIHsgdmFsdWUsIG1vZGlmaWVycywgZXhwcmVzc2lvbiB9KSA9PiB7XG4gIGlmICghdmFsdWUpXG4gICAgcmV0dXJuO1xuICBpZiAoIWVsLl94X2lubGluZUJpbmRpbmdzKVxuICAgIGVsLl94X2lubGluZUJpbmRpbmdzID0ge307XG4gIGVsLl94X2lubGluZUJpbmRpbmdzW3ZhbHVlXSA9IHsgZXhwcmVzc2lvbiwgZXh0cmFjdDogZmFsc2UgfTtcbn07XG5kaXJlY3RpdmUoXCJiaW5kXCIsIGhhbmRsZXIyKTtcbmZ1bmN0aW9uIHN0b3JlS2V5Rm9yWEZvcihlbCwgZXhwcmVzc2lvbikge1xuICBlbC5feF9rZXlFeHByZXNzaW9uID0gZXhwcmVzc2lvbjtcbn1cblxuLy8gcGFja2FnZXMvYWxwaW5lanMvc3JjL2RpcmVjdGl2ZXMveC1kYXRhLmpzXG5hZGRSb290U2VsZWN0b3IoKCkgPT4gYFske3ByZWZpeChcImRhdGFcIil9XWApO1xuZGlyZWN0aXZlKFwiZGF0YVwiLCAoZWwsIHsgZXhwcmVzc2lvbiB9LCB7IGNsZWFudXA6IGNsZWFudXAyIH0pID0+IHtcbiAgaWYgKHNob3VsZFNraXBSZWdpc3RlcmluZ0RhdGFEdXJpbmdDbG9uZShlbCkpXG4gICAgcmV0dXJuO1xuICBleHByZXNzaW9uID0gZXhwcmVzc2lvbiA9PT0gXCJcIiA/IFwie31cIiA6IGV4cHJlc3Npb247XG4gIGxldCBtYWdpY0NvbnRleHQgPSB7fTtcbiAgaW5qZWN0TWFnaWNzKG1hZ2ljQ29udGV4dCwgZWwpO1xuICBsZXQgZGF0YVByb3ZpZGVyQ29udGV4dCA9IHt9O1xuICBpbmplY3REYXRhUHJvdmlkZXJzKGRhdGFQcm92aWRlckNvbnRleHQsIG1hZ2ljQ29udGV4dCk7XG4gIGxldCBkYXRhMiA9IGV2YWx1YXRlKGVsLCBleHByZXNzaW9uLCB7IHNjb3BlOiBkYXRhUHJvdmlkZXJDb250ZXh0IH0pO1xuICBpZiAoZGF0YTIgPT09IHZvaWQgMCB8fCBkYXRhMiA9PT0gdHJ1ZSlcbiAgICBkYXRhMiA9IHt9O1xuICBpbmplY3RNYWdpY3MoZGF0YTIsIGVsKTtcbiAgbGV0IHJlYWN0aXZlRGF0YSA9IHJlYWN0aXZlKGRhdGEyKTtcbiAgaW5pdEludGVyY2VwdG9ycyhyZWFjdGl2ZURhdGEpO1xuICBsZXQgdW5kbyA9IGFkZFNjb3BlVG9Ob2RlKGVsLCByZWFjdGl2ZURhdGEpO1xuICByZWFjdGl2ZURhdGFbXCJpbml0XCJdICYmIGV2YWx1YXRlKGVsLCByZWFjdGl2ZURhdGFbXCJpbml0XCJdKTtcbiAgY2xlYW51cDIoKCkgPT4ge1xuICAgIHJlYWN0aXZlRGF0YVtcImRlc3Ryb3lcIl0gJiYgZXZhbHVhdGUoZWwsIHJlYWN0aXZlRGF0YVtcImRlc3Ryb3lcIl0pO1xuICAgIHVuZG8oKTtcbiAgfSk7XG59KTtcbmludGVyY2VwdENsb25lKChmcm9tLCB0bykgPT4ge1xuICBpZiAoZnJvbS5feF9kYXRhU3RhY2spIHtcbiAgICB0by5feF9kYXRhU3RhY2sgPSBmcm9tLl94X2RhdGFTdGFjaztcbiAgICB0by5zZXRBdHRyaWJ1dGUoXCJkYXRhLWhhcy1hbHBpbmUtc3RhdGVcIiwgdHJ1ZSk7XG4gIH1cbn0pO1xuZnVuY3Rpb24gc2hvdWxkU2tpcFJlZ2lzdGVyaW5nRGF0YUR1cmluZ0Nsb25lKGVsKSB7XG4gIGlmICghaXNDbG9uaW5nKVxuICAgIHJldHVybiBmYWxzZTtcbiAgaWYgKGlzQ2xvbmluZ0xlZ2FjeSlcbiAgICByZXR1cm4gdHJ1ZTtcbiAgcmV0dXJuIGVsLmhhc0F0dHJpYnV0ZShcImRhdGEtaGFzLWFscGluZS1zdGF0ZVwiKTtcbn1cblxuLy8gcGFja2FnZXMvYWxwaW5lanMvc3JjL2RpcmVjdGl2ZXMveC1zaG93LmpzXG5kaXJlY3RpdmUoXCJzaG93XCIsIChlbCwgeyBtb2RpZmllcnMsIGV4cHJlc3Npb24gfSwgeyBlZmZlY3Q6IGVmZmVjdDMgfSkgPT4ge1xuICBsZXQgZXZhbHVhdGUyID0gZXZhbHVhdGVMYXRlcihlbCwgZXhwcmVzc2lvbik7XG4gIGlmICghZWwuX3hfZG9IaWRlKVxuICAgIGVsLl94X2RvSGlkZSA9ICgpID0+IHtcbiAgICAgIG11dGF0ZURvbSgoKSA9PiB7XG4gICAgICAgIGVsLnN0eWxlLnNldFByb3BlcnR5KFwiZGlzcGxheVwiLCBcIm5vbmVcIiwgbW9kaWZpZXJzLmluY2x1ZGVzKFwiaW1wb3J0YW50XCIpID8gXCJpbXBvcnRhbnRcIiA6IHZvaWQgMCk7XG4gICAgICB9KTtcbiAgICB9O1xuICBpZiAoIWVsLl94X2RvU2hvdylcbiAgICBlbC5feF9kb1Nob3cgPSAoKSA9PiB7XG4gICAgICBtdXRhdGVEb20oKCkgPT4ge1xuICAgICAgICBpZiAoZWwuc3R5bGUubGVuZ3RoID09PSAxICYmIGVsLnN0eWxlLmRpc3BsYXkgPT09IFwibm9uZVwiKSB7XG4gICAgICAgICAgZWwucmVtb3ZlQXR0cmlidXRlKFwic3R5bGVcIik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZWwuc3R5bGUucmVtb3ZlUHJvcGVydHkoXCJkaXNwbGF5XCIpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9O1xuICBsZXQgaGlkZSA9ICgpID0+IHtcbiAgICBlbC5feF9kb0hpZGUoKTtcbiAgICBlbC5feF9pc1Nob3duID0gZmFsc2U7XG4gIH07XG4gIGxldCBzaG93ID0gKCkgPT4ge1xuICAgIGVsLl94X2RvU2hvdygpO1xuICAgIGVsLl94X2lzU2hvd24gPSB0cnVlO1xuICB9O1xuICBsZXQgY2xpY2tBd2F5Q29tcGF0aWJsZVNob3cgPSAoKSA9PiBzZXRUaW1lb3V0KHNob3cpO1xuICBsZXQgdG9nZ2xlID0gb25jZShcbiAgICAodmFsdWUpID0+IHZhbHVlID8gc2hvdygpIDogaGlkZSgpLFxuICAgICh2YWx1ZSkgPT4ge1xuICAgICAgaWYgKHR5cGVvZiBlbC5feF90b2dnbGVBbmRDYXNjYWRlV2l0aFRyYW5zaXRpb25zID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgZWwuX3hfdG9nZ2xlQW5kQ2FzY2FkZVdpdGhUcmFuc2l0aW9ucyhlbCwgdmFsdWUsIHNob3csIGhpZGUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFsdWUgPyBjbGlja0F3YXlDb21wYXRpYmxlU2hvdygpIDogaGlkZSgpO1xuICAgICAgfVxuICAgIH1cbiAgKTtcbiAgbGV0IG9sZFZhbHVlO1xuICBsZXQgZmlyc3RUaW1lID0gdHJ1ZTtcbiAgZWZmZWN0MygoKSA9PiBldmFsdWF0ZTIoKHZhbHVlKSA9PiB7XG4gICAgaWYgKCFmaXJzdFRpbWUgJiYgdmFsdWUgPT09IG9sZFZhbHVlKVxuICAgICAgcmV0dXJuO1xuICAgIGlmIChtb2RpZmllcnMuaW5jbHVkZXMoXCJpbW1lZGlhdGVcIikpXG4gICAgICB2YWx1ZSA/IGNsaWNrQXdheUNvbXBhdGlibGVTaG93KCkgOiBoaWRlKCk7XG4gICAgdG9nZ2xlKHZhbHVlKTtcbiAgICBvbGRWYWx1ZSA9IHZhbHVlO1xuICAgIGZpcnN0VGltZSA9IGZhbHNlO1xuICB9KSk7XG59KTtcblxuLy8gcGFja2FnZXMvYWxwaW5lanMvc3JjL2RpcmVjdGl2ZXMveC1mb3IuanNcbmRpcmVjdGl2ZShcImZvclwiLCAoZWwsIHsgZXhwcmVzc2lvbiB9LCB7IGVmZmVjdDogZWZmZWN0MywgY2xlYW51cDogY2xlYW51cDIgfSkgPT4ge1xuICBsZXQgaXRlcmF0b3JOYW1lcyA9IHBhcnNlRm9yRXhwcmVzc2lvbihleHByZXNzaW9uKTtcbiAgbGV0IGV2YWx1YXRlSXRlbXMgPSBldmFsdWF0ZUxhdGVyKGVsLCBpdGVyYXRvck5hbWVzLml0ZW1zKTtcbiAgbGV0IGV2YWx1YXRlS2V5ID0gZXZhbHVhdGVMYXRlcihcbiAgICBlbCxcbiAgICAvLyB0aGUgeC1iaW5kOmtleSBleHByZXNzaW9uIGlzIHN0b3JlZCBmb3Igb3VyIHVzZSBpbnN0ZWFkIG9mIGV2YWx1YXRlZC5cbiAgICBlbC5feF9rZXlFeHByZXNzaW9uIHx8IFwiaW5kZXhcIlxuICApO1xuICBlbC5feF9wcmV2S2V5cyA9IFtdO1xuICBlbC5feF9sb29rdXAgPSB7fTtcbiAgZWZmZWN0MygoKSA9PiBsb29wKGVsLCBpdGVyYXRvck5hbWVzLCBldmFsdWF0ZUl0ZW1zLCBldmFsdWF0ZUtleSkpO1xuICBjbGVhbnVwMigoKSA9PiB7XG4gICAgT2JqZWN0LnZhbHVlcyhlbC5feF9sb29rdXApLmZvckVhY2goKGVsMikgPT4gZWwyLnJlbW92ZSgpKTtcbiAgICBkZWxldGUgZWwuX3hfcHJldktleXM7XG4gICAgZGVsZXRlIGVsLl94X2xvb2t1cDtcbiAgfSk7XG59KTtcbmZ1bmN0aW9uIGxvb3AoZWwsIGl0ZXJhdG9yTmFtZXMsIGV2YWx1YXRlSXRlbXMsIGV2YWx1YXRlS2V5KSB7XG4gIGxldCBpc09iamVjdDIgPSAoaSkgPT4gdHlwZW9mIGkgPT09IFwib2JqZWN0XCIgJiYgIUFycmF5LmlzQXJyYXkoaSk7XG4gIGxldCB0ZW1wbGF0ZUVsID0gZWw7XG4gIGV2YWx1YXRlSXRlbXMoKGl0ZW1zKSA9PiB7XG4gICAgaWYgKGlzTnVtZXJpYzMoaXRlbXMpICYmIGl0ZW1zID49IDApIHtcbiAgICAgIGl0ZW1zID0gQXJyYXkuZnJvbShBcnJheShpdGVtcykua2V5cygpLCAoaSkgPT4gaSArIDEpO1xuICAgIH1cbiAgICBpZiAoaXRlbXMgPT09IHZvaWQgMClcbiAgICAgIGl0ZW1zID0gW107XG4gICAgbGV0IGxvb2t1cCA9IGVsLl94X2xvb2t1cDtcbiAgICBsZXQgcHJldktleXMgPSBlbC5feF9wcmV2S2V5cztcbiAgICBsZXQgc2NvcGVzID0gW107XG4gICAgbGV0IGtleXMgPSBbXTtcbiAgICBpZiAoaXNPYmplY3QyKGl0ZW1zKSkge1xuICAgICAgaXRlbXMgPSBPYmplY3QuZW50cmllcyhpdGVtcykubWFwKChba2V5LCB2YWx1ZV0pID0+IHtcbiAgICAgICAgbGV0IHNjb3BlMiA9IGdldEl0ZXJhdGlvblNjb3BlVmFyaWFibGVzKGl0ZXJhdG9yTmFtZXMsIHZhbHVlLCBrZXksIGl0ZW1zKTtcbiAgICAgICAgZXZhbHVhdGVLZXkoKHZhbHVlMikgPT4ge1xuICAgICAgICAgIGlmIChrZXlzLmluY2x1ZGVzKHZhbHVlMikpXG4gICAgICAgICAgICB3YXJuKFwiRHVwbGljYXRlIGtleSBvbiB4LWZvclwiLCBlbCk7XG4gICAgICAgICAga2V5cy5wdXNoKHZhbHVlMik7XG4gICAgICAgIH0sIHsgc2NvcGU6IHsgaW5kZXg6IGtleSwgLi4uc2NvcGUyIH0gfSk7XG4gICAgICAgIHNjb3Blcy5wdXNoKHNjb3BlMik7XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpdGVtcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBsZXQgc2NvcGUyID0gZ2V0SXRlcmF0aW9uU2NvcGVWYXJpYWJsZXMoaXRlcmF0b3JOYW1lcywgaXRlbXNbaV0sIGksIGl0ZW1zKTtcbiAgICAgICAgZXZhbHVhdGVLZXkoKHZhbHVlKSA9PiB7XG4gICAgICAgICAgaWYgKGtleXMuaW5jbHVkZXModmFsdWUpKVxuICAgICAgICAgICAgd2FybihcIkR1cGxpY2F0ZSBrZXkgb24geC1mb3JcIiwgZWwpO1xuICAgICAgICAgIGtleXMucHVzaCh2YWx1ZSk7XG4gICAgICAgIH0sIHsgc2NvcGU6IHsgaW5kZXg6IGksIC4uLnNjb3BlMiB9IH0pO1xuICAgICAgICBzY29wZXMucHVzaChzY29wZTIpO1xuICAgICAgfVxuICAgIH1cbiAgICBsZXQgYWRkcyA9IFtdO1xuICAgIGxldCBtb3ZlcyA9IFtdO1xuICAgIGxldCByZW1vdmVzID0gW107XG4gICAgbGV0IHNhbWVzID0gW107XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwcmV2S2V5cy5sZW5ndGg7IGkrKykge1xuICAgICAgbGV0IGtleSA9IHByZXZLZXlzW2ldO1xuICAgICAgaWYgKGtleXMuaW5kZXhPZihrZXkpID09PSAtMSlcbiAgICAgICAgcmVtb3Zlcy5wdXNoKGtleSk7XG4gICAgfVxuICAgIHByZXZLZXlzID0gcHJldktleXMuZmlsdGVyKChrZXkpID0+ICFyZW1vdmVzLmluY2x1ZGVzKGtleSkpO1xuICAgIGxldCBsYXN0S2V5ID0gXCJ0ZW1wbGF0ZVwiO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuICAgICAgbGV0IGtleSA9IGtleXNbaV07XG4gICAgICBsZXQgcHJldkluZGV4ID0gcHJldktleXMuaW5kZXhPZihrZXkpO1xuICAgICAgaWYgKHByZXZJbmRleCA9PT0gLTEpIHtcbiAgICAgICAgcHJldktleXMuc3BsaWNlKGksIDAsIGtleSk7XG4gICAgICAgIGFkZHMucHVzaChbbGFzdEtleSwgaV0pO1xuICAgICAgfSBlbHNlIGlmIChwcmV2SW5kZXggIT09IGkpIHtcbiAgICAgICAgbGV0IGtleUluU3BvdCA9IHByZXZLZXlzLnNwbGljZShpLCAxKVswXTtcbiAgICAgICAgbGV0IGtleUZvclNwb3QgPSBwcmV2S2V5cy5zcGxpY2UocHJldkluZGV4IC0gMSwgMSlbMF07XG4gICAgICAgIHByZXZLZXlzLnNwbGljZShpLCAwLCBrZXlGb3JTcG90KTtcbiAgICAgICAgcHJldktleXMuc3BsaWNlKHByZXZJbmRleCwgMCwga2V5SW5TcG90KTtcbiAgICAgICAgbW92ZXMucHVzaChba2V5SW5TcG90LCBrZXlGb3JTcG90XSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzYW1lcy5wdXNoKGtleSk7XG4gICAgICB9XG4gICAgICBsYXN0S2V5ID0ga2V5O1xuICAgIH1cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHJlbW92ZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGxldCBrZXkgPSByZW1vdmVzW2ldO1xuICAgICAgaWYgKCEhbG9va3VwW2tleV0uX3hfZWZmZWN0cykge1xuICAgICAgICBsb29rdXBba2V5XS5feF9lZmZlY3RzLmZvckVhY2goZGVxdWV1ZUpvYik7XG4gICAgICB9XG4gICAgICBsb29rdXBba2V5XS5yZW1vdmUoKTtcbiAgICAgIGxvb2t1cFtrZXldID0gbnVsbDtcbiAgICAgIGRlbGV0ZSBsb29rdXBba2V5XTtcbiAgICB9XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBtb3Zlcy5sZW5ndGg7IGkrKykge1xuICAgICAgbGV0IFtrZXlJblNwb3QsIGtleUZvclNwb3RdID0gbW92ZXNbaV07XG4gICAgICBsZXQgZWxJblNwb3QgPSBsb29rdXBba2V5SW5TcG90XTtcbiAgICAgIGxldCBlbEZvclNwb3QgPSBsb29rdXBba2V5Rm9yU3BvdF07XG4gICAgICBsZXQgbWFya2VyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgIG11dGF0ZURvbSgoKSA9PiB7XG4gICAgICAgIGlmICghZWxGb3JTcG90KVxuICAgICAgICAgIHdhcm4oYHgtZm9yIFwiOmtleVwiIGlzIHVuZGVmaW5lZCBvciBpbnZhbGlkYCwgdGVtcGxhdGVFbCwga2V5Rm9yU3BvdCwgbG9va3VwKTtcbiAgICAgICAgZWxGb3JTcG90LmFmdGVyKG1hcmtlcik7XG4gICAgICAgIGVsSW5TcG90LmFmdGVyKGVsRm9yU3BvdCk7XG4gICAgICAgIGVsRm9yU3BvdC5feF9jdXJyZW50SWZFbCAmJiBlbEZvclNwb3QuYWZ0ZXIoZWxGb3JTcG90Ll94X2N1cnJlbnRJZkVsKTtcbiAgICAgICAgbWFya2VyLmJlZm9yZShlbEluU3BvdCk7XG4gICAgICAgIGVsSW5TcG90Ll94X2N1cnJlbnRJZkVsICYmIGVsSW5TcG90LmFmdGVyKGVsSW5TcG90Ll94X2N1cnJlbnRJZkVsKTtcbiAgICAgICAgbWFya2VyLnJlbW92ZSgpO1xuICAgICAgfSk7XG4gICAgICBlbEZvclNwb3QuX3hfcmVmcmVzaFhGb3JTY29wZShzY29wZXNba2V5cy5pbmRleE9mKGtleUZvclNwb3QpXSk7XG4gICAgfVxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYWRkcy5sZW5ndGg7IGkrKykge1xuICAgICAgbGV0IFtsYXN0S2V5MiwgaW5kZXhdID0gYWRkc1tpXTtcbiAgICAgIGxldCBsYXN0RWwgPSBsYXN0S2V5MiA9PT0gXCJ0ZW1wbGF0ZVwiID8gdGVtcGxhdGVFbCA6IGxvb2t1cFtsYXN0S2V5Ml07XG4gICAgICBpZiAobGFzdEVsLl94X2N1cnJlbnRJZkVsKVxuICAgICAgICBsYXN0RWwgPSBsYXN0RWwuX3hfY3VycmVudElmRWw7XG4gICAgICBsZXQgc2NvcGUyID0gc2NvcGVzW2luZGV4XTtcbiAgICAgIGxldCBrZXkgPSBrZXlzW2luZGV4XTtcbiAgICAgIGxldCBjbG9uZTIgPSBkb2N1bWVudC5pbXBvcnROb2RlKHRlbXBsYXRlRWwuY29udGVudCwgdHJ1ZSkuZmlyc3RFbGVtZW50Q2hpbGQ7XG4gICAgICBsZXQgcmVhY3RpdmVTY29wZSA9IHJlYWN0aXZlKHNjb3BlMik7XG4gICAgICBhZGRTY29wZVRvTm9kZShjbG9uZTIsIHJlYWN0aXZlU2NvcGUsIHRlbXBsYXRlRWwpO1xuICAgICAgY2xvbmUyLl94X3JlZnJlc2hYRm9yU2NvcGUgPSAobmV3U2NvcGUpID0+IHtcbiAgICAgICAgT2JqZWN0LmVudHJpZXMobmV3U2NvcGUpLmZvckVhY2goKFtrZXkyLCB2YWx1ZV0pID0+IHtcbiAgICAgICAgICByZWFjdGl2ZVNjb3BlW2tleTJdID0gdmFsdWU7XG4gICAgICAgIH0pO1xuICAgICAgfTtcbiAgICAgIG11dGF0ZURvbSgoKSA9PiB7XG4gICAgICAgIGxhc3RFbC5hZnRlcihjbG9uZTIpO1xuICAgICAgICBza2lwRHVyaW5nQ2xvbmUoKCkgPT4gaW5pdFRyZWUoY2xvbmUyKSkoKTtcbiAgICAgIH0pO1xuICAgICAgaWYgKHR5cGVvZiBrZXkgPT09IFwib2JqZWN0XCIpIHtcbiAgICAgICAgd2FybihcIngtZm9yIGtleSBjYW5ub3QgYmUgYW4gb2JqZWN0LCBpdCBtdXN0IGJlIGEgc3RyaW5nIG9yIGFuIGludGVnZXJcIiwgdGVtcGxhdGVFbCk7XG4gICAgICB9XG4gICAgICBsb29rdXBba2V5XSA9IGNsb25lMjtcbiAgICB9XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzYW1lcy5sZW5ndGg7IGkrKykge1xuICAgICAgbG9va3VwW3NhbWVzW2ldXS5feF9yZWZyZXNoWEZvclNjb3BlKHNjb3Blc1trZXlzLmluZGV4T2Yoc2FtZXNbaV0pXSk7XG4gICAgfVxuICAgIHRlbXBsYXRlRWwuX3hfcHJldktleXMgPSBrZXlzO1xuICB9KTtcbn1cbmZ1bmN0aW9uIHBhcnNlRm9yRXhwcmVzc2lvbihleHByZXNzaW9uKSB7XG4gIGxldCBmb3JJdGVyYXRvclJFID0gLywoW14sXFx9XFxdXSopKD86LChbXixcXH1cXF1dKikpPyQvO1xuICBsZXQgc3RyaXBQYXJlbnNSRSA9IC9eXFxzKlxcKHxcXClcXHMqJC9nO1xuICBsZXQgZm9yQWxpYXNSRSA9IC8oW1xcc1xcU10qPylcXHMrKD86aW58b2YpXFxzKyhbXFxzXFxTXSopLztcbiAgbGV0IGluTWF0Y2ggPSBleHByZXNzaW9uLm1hdGNoKGZvckFsaWFzUkUpO1xuICBpZiAoIWluTWF0Y2gpXG4gICAgcmV0dXJuO1xuICBsZXQgcmVzID0ge307XG4gIHJlcy5pdGVtcyA9IGluTWF0Y2hbMl0udHJpbSgpO1xuICBsZXQgaXRlbSA9IGluTWF0Y2hbMV0ucmVwbGFjZShzdHJpcFBhcmVuc1JFLCBcIlwiKS50cmltKCk7XG4gIGxldCBpdGVyYXRvck1hdGNoID0gaXRlbS5tYXRjaChmb3JJdGVyYXRvclJFKTtcbiAgaWYgKGl0ZXJhdG9yTWF0Y2gpIHtcbiAgICByZXMuaXRlbSA9IGl0ZW0ucmVwbGFjZShmb3JJdGVyYXRvclJFLCBcIlwiKS50cmltKCk7XG4gICAgcmVzLmluZGV4ID0gaXRlcmF0b3JNYXRjaFsxXS50cmltKCk7XG4gICAgaWYgKGl0ZXJhdG9yTWF0Y2hbMl0pIHtcbiAgICAgIHJlcy5jb2xsZWN0aW9uID0gaXRlcmF0b3JNYXRjaFsyXS50cmltKCk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHJlcy5pdGVtID0gaXRlbTtcbiAgfVxuICByZXR1cm4gcmVzO1xufVxuZnVuY3Rpb24gZ2V0SXRlcmF0aW9uU2NvcGVWYXJpYWJsZXMoaXRlcmF0b3JOYW1lcywgaXRlbSwgaW5kZXgsIGl0ZW1zKSB7XG4gIGxldCBzY29wZVZhcmlhYmxlcyA9IHt9O1xuICBpZiAoL15cXFsuKlxcXSQvLnRlc3QoaXRlcmF0b3JOYW1lcy5pdGVtKSAmJiBBcnJheS5pc0FycmF5KGl0ZW0pKSB7XG4gICAgbGV0IG5hbWVzID0gaXRlcmF0b3JOYW1lcy5pdGVtLnJlcGxhY2UoXCJbXCIsIFwiXCIpLnJlcGxhY2UoXCJdXCIsIFwiXCIpLnNwbGl0KFwiLFwiKS5tYXAoKGkpID0+IGkudHJpbSgpKTtcbiAgICBuYW1lcy5mb3JFYWNoKChuYW1lLCBpKSA9PiB7XG4gICAgICBzY29wZVZhcmlhYmxlc1tuYW1lXSA9IGl0ZW1baV07XG4gICAgfSk7XG4gIH0gZWxzZSBpZiAoL15cXHsuKlxcfSQvLnRlc3QoaXRlcmF0b3JOYW1lcy5pdGVtKSAmJiAhQXJyYXkuaXNBcnJheShpdGVtKSAmJiB0eXBlb2YgaXRlbSA9PT0gXCJvYmplY3RcIikge1xuICAgIGxldCBuYW1lcyA9IGl0ZXJhdG9yTmFtZXMuaXRlbS5yZXBsYWNlKFwie1wiLCBcIlwiKS5yZXBsYWNlKFwifVwiLCBcIlwiKS5zcGxpdChcIixcIikubWFwKChpKSA9PiBpLnRyaW0oKSk7XG4gICAgbmFtZXMuZm9yRWFjaCgobmFtZSkgPT4ge1xuICAgICAgc2NvcGVWYXJpYWJsZXNbbmFtZV0gPSBpdGVtW25hbWVdO1xuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIHNjb3BlVmFyaWFibGVzW2l0ZXJhdG9yTmFtZXMuaXRlbV0gPSBpdGVtO1xuICB9XG4gIGlmIChpdGVyYXRvck5hbWVzLmluZGV4KVxuICAgIHNjb3BlVmFyaWFibGVzW2l0ZXJhdG9yTmFtZXMuaW5kZXhdID0gaW5kZXg7XG4gIGlmIChpdGVyYXRvck5hbWVzLmNvbGxlY3Rpb24pXG4gICAgc2NvcGVWYXJpYWJsZXNbaXRlcmF0b3JOYW1lcy5jb2xsZWN0aW9uXSA9IGl0ZW1zO1xuICByZXR1cm4gc2NvcGVWYXJpYWJsZXM7XG59XG5mdW5jdGlvbiBpc051bWVyaWMzKHN1YmplY3QpIHtcbiAgcmV0dXJuICFBcnJheS5pc0FycmF5KHN1YmplY3QpICYmICFpc05hTihzdWJqZWN0KTtcbn1cblxuLy8gcGFja2FnZXMvYWxwaW5lanMvc3JjL2RpcmVjdGl2ZXMveC1yZWYuanNcbmZ1bmN0aW9uIGhhbmRsZXIzKCkge1xufVxuaGFuZGxlcjMuaW5saW5lID0gKGVsLCB7IGV4cHJlc3Npb24gfSwgeyBjbGVhbnVwOiBjbGVhbnVwMiB9KSA9PiB7XG4gIGxldCByb290ID0gY2xvc2VzdFJvb3QoZWwpO1xuICBpZiAoIXJvb3QuX3hfcmVmcylcbiAgICByb290Ll94X3JlZnMgPSB7fTtcbiAgcm9vdC5feF9yZWZzW2V4cHJlc3Npb25dID0gZWw7XG4gIGNsZWFudXAyKCgpID0+IGRlbGV0ZSByb290Ll94X3JlZnNbZXhwcmVzc2lvbl0pO1xufTtcbmRpcmVjdGl2ZShcInJlZlwiLCBoYW5kbGVyMyk7XG5cbi8vIHBhY2thZ2VzL2FscGluZWpzL3NyYy9kaXJlY3RpdmVzL3gtaWYuanNcbmRpcmVjdGl2ZShcImlmXCIsIChlbCwgeyBleHByZXNzaW9uIH0sIHsgZWZmZWN0OiBlZmZlY3QzLCBjbGVhbnVwOiBjbGVhbnVwMiB9KSA9PiB7XG4gIGlmIChlbC50YWdOYW1lLnRvTG93ZXJDYXNlKCkgIT09IFwidGVtcGxhdGVcIilcbiAgICB3YXJuKFwieC1pZiBjYW4gb25seSBiZSB1c2VkIG9uIGEgPHRlbXBsYXRlPiB0YWdcIiwgZWwpO1xuICBsZXQgZXZhbHVhdGUyID0gZXZhbHVhdGVMYXRlcihlbCwgZXhwcmVzc2lvbik7XG4gIGxldCBzaG93ID0gKCkgPT4ge1xuICAgIGlmIChlbC5feF9jdXJyZW50SWZFbClcbiAgICAgIHJldHVybiBlbC5feF9jdXJyZW50SWZFbDtcbiAgICBsZXQgY2xvbmUyID0gZWwuY29udGVudC5jbG9uZU5vZGUodHJ1ZSkuZmlyc3RFbGVtZW50Q2hpbGQ7XG4gICAgYWRkU2NvcGVUb05vZGUoY2xvbmUyLCB7fSwgZWwpO1xuICAgIG11dGF0ZURvbSgoKSA9PiB7XG4gICAgICBlbC5hZnRlcihjbG9uZTIpO1xuICAgICAgc2tpcER1cmluZ0Nsb25lKCgpID0+IGluaXRUcmVlKGNsb25lMikpKCk7XG4gICAgfSk7XG4gICAgZWwuX3hfY3VycmVudElmRWwgPSBjbG9uZTI7XG4gICAgZWwuX3hfdW5kb0lmID0gKCkgPT4ge1xuICAgICAgd2FsayhjbG9uZTIsIChub2RlKSA9PiB7XG4gICAgICAgIGlmICghIW5vZGUuX3hfZWZmZWN0cykge1xuICAgICAgICAgIG5vZGUuX3hfZWZmZWN0cy5mb3JFYWNoKGRlcXVldWVKb2IpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIGNsb25lMi5yZW1vdmUoKTtcbiAgICAgIGRlbGV0ZSBlbC5feF9jdXJyZW50SWZFbDtcbiAgICB9O1xuICAgIHJldHVybiBjbG9uZTI7XG4gIH07XG4gIGxldCBoaWRlID0gKCkgPT4ge1xuICAgIGlmICghZWwuX3hfdW5kb0lmKVxuICAgICAgcmV0dXJuO1xuICAgIGVsLl94X3VuZG9JZigpO1xuICAgIGRlbGV0ZSBlbC5feF91bmRvSWY7XG4gIH07XG4gIGVmZmVjdDMoKCkgPT4gZXZhbHVhdGUyKCh2YWx1ZSkgPT4ge1xuICAgIHZhbHVlID8gc2hvdygpIDogaGlkZSgpO1xuICB9KSk7XG4gIGNsZWFudXAyKCgpID0+IGVsLl94X3VuZG9JZiAmJiBlbC5feF91bmRvSWYoKSk7XG59KTtcblxuLy8gcGFja2FnZXMvYWxwaW5lanMvc3JjL2RpcmVjdGl2ZXMveC1pZC5qc1xuZGlyZWN0aXZlKFwiaWRcIiwgKGVsLCB7IGV4cHJlc3Npb24gfSwgeyBldmFsdWF0ZTogZXZhbHVhdGUyIH0pID0+IHtcbiAgbGV0IG5hbWVzID0gZXZhbHVhdGUyKGV4cHJlc3Npb24pO1xuICBuYW1lcy5mb3JFYWNoKChuYW1lKSA9PiBzZXRJZFJvb3QoZWwsIG5hbWUpKTtcbn0pO1xuaW50ZXJjZXB0Q2xvbmUoKGZyb20sIHRvKSA9PiB7XG4gIGlmIChmcm9tLl94X2lkcykge1xuICAgIHRvLl94X2lkcyA9IGZyb20uX3hfaWRzO1xuICB9XG59KTtcblxuLy8gcGFja2FnZXMvYWxwaW5lanMvc3JjL2RpcmVjdGl2ZXMveC1vbi5qc1xubWFwQXR0cmlidXRlcyhzdGFydGluZ1dpdGgoXCJAXCIsIGludG8ocHJlZml4KFwib246XCIpKSkpO1xuZGlyZWN0aXZlKFwib25cIiwgc2tpcER1cmluZ0Nsb25lKChlbCwgeyB2YWx1ZSwgbW9kaWZpZXJzLCBleHByZXNzaW9uIH0sIHsgY2xlYW51cDogY2xlYW51cDIgfSkgPT4ge1xuICBsZXQgZXZhbHVhdGUyID0gZXhwcmVzc2lvbiA/IGV2YWx1YXRlTGF0ZXIoZWwsIGV4cHJlc3Npb24pIDogKCkgPT4ge1xuICB9O1xuICBpZiAoZWwudGFnTmFtZS50b0xvd2VyQ2FzZSgpID09PSBcInRlbXBsYXRlXCIpIHtcbiAgICBpZiAoIWVsLl94X2ZvcndhcmRFdmVudHMpXG4gICAgICBlbC5feF9mb3J3YXJkRXZlbnRzID0gW107XG4gICAgaWYgKCFlbC5feF9mb3J3YXJkRXZlbnRzLmluY2x1ZGVzKHZhbHVlKSlcbiAgICAgIGVsLl94X2ZvcndhcmRFdmVudHMucHVzaCh2YWx1ZSk7XG4gIH1cbiAgbGV0IHJlbW92ZUxpc3RlbmVyID0gb24oZWwsIHZhbHVlLCBtb2RpZmllcnMsIChlKSA9PiB7XG4gICAgZXZhbHVhdGUyKCgpID0+IHtcbiAgICB9LCB7IHNjb3BlOiB7IFwiJGV2ZW50XCI6IGUgfSwgcGFyYW1zOiBbZV0gfSk7XG4gIH0pO1xuICBjbGVhbnVwMigoKSA9PiByZW1vdmVMaXN0ZW5lcigpKTtcbn0pKTtcblxuLy8gcGFja2FnZXMvYWxwaW5lanMvc3JjL2RpcmVjdGl2ZXMvaW5kZXguanNcbndhcm5NaXNzaW5nUGx1Z2luRGlyZWN0aXZlKFwiQ29sbGFwc2VcIiwgXCJjb2xsYXBzZVwiLCBcImNvbGxhcHNlXCIpO1xud2Fybk1pc3NpbmdQbHVnaW5EaXJlY3RpdmUoXCJJbnRlcnNlY3RcIiwgXCJpbnRlcnNlY3RcIiwgXCJpbnRlcnNlY3RcIik7XG53YXJuTWlzc2luZ1BsdWdpbkRpcmVjdGl2ZShcIkZvY3VzXCIsIFwidHJhcFwiLCBcImZvY3VzXCIpO1xud2Fybk1pc3NpbmdQbHVnaW5EaXJlY3RpdmUoXCJNYXNrXCIsIFwibWFza1wiLCBcIm1hc2tcIik7XG5mdW5jdGlvbiB3YXJuTWlzc2luZ1BsdWdpbkRpcmVjdGl2ZShuYW1lLCBkaXJlY3RpdmVOYW1lLCBzbHVnKSB7XG4gIGRpcmVjdGl2ZShkaXJlY3RpdmVOYW1lLCAoZWwpID0+IHdhcm4oYFlvdSBjYW4ndCB1c2UgW3gtJHtkaXJlY3RpdmVOYW1lfV0gd2l0aG91dCBmaXJzdCBpbnN0YWxsaW5nIHRoZSBcIiR7bmFtZX1cIiBwbHVnaW4gaGVyZTogaHR0cHM6Ly9hbHBpbmVqcy5kZXYvcGx1Z2lucy8ke3NsdWd9YCwgZWwpKTtcbn1cblxuLy8gcGFja2FnZXMvYWxwaW5lanMvc3JjL2luZGV4LmpzXG5hbHBpbmVfZGVmYXVsdC5zZXRFdmFsdWF0b3Iobm9ybWFsRXZhbHVhdG9yKTtcbmFscGluZV9kZWZhdWx0LnNldFJlYWN0aXZpdHlFbmdpbmUoeyByZWFjdGl2ZTogcmVhY3RpdmUyLCBlZmZlY3Q6IGVmZmVjdDIsIHJlbGVhc2U6IHN0b3AsIHJhdzogdG9SYXcgfSk7XG52YXIgc3JjX2RlZmF1bHQgPSBhbHBpbmVfZGVmYXVsdDtcblxuLy8gcGFja2FnZXMvYWxwaW5lanMvYnVpbGRzL21vZHVsZS5qc1xudmFyIG1vZHVsZV9kZWZhdWx0ID0gc3JjX2RlZmF1bHQ7XG5leHBvcnQge1xuICBzcmNfZGVmYXVsdCBhcyBBbHBpbmUsXG4gIG1vZHVsZV9kZWZhdWx0IGFzIGRlZmF1bHRcbn07XG4iLCIvKipcbiAqIFNTUiBXaW5kb3cgNC4wLjJcbiAqIEJldHRlciBoYW5kbGluZyBmb3Igd2luZG93IG9iamVjdCBpbiBTU1IgZW52aXJvbm1lbnRcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9ub2xpbWl0czR3ZWIvc3NyLXdpbmRvd1xuICpcbiAqIENvcHlyaWdodCAyMDIxLCBWbGFkaW1pciBLaGFybGFtcGlkaVxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIE1JVFxuICpcbiAqIFJlbGVhc2VkIG9uOiBEZWNlbWJlciAxMywgMjAyMVxuICovXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1wYXJhbS1yZWFzc2lnbiAqL1xuZnVuY3Rpb24gaXNPYmplY3Qob2JqKSB7XG4gIHJldHVybiBvYmogIT09IG51bGwgJiYgdHlwZW9mIG9iaiA9PT0gJ29iamVjdCcgJiYgJ2NvbnN0cnVjdG9yJyBpbiBvYmogJiYgb2JqLmNvbnN0cnVjdG9yID09PSBPYmplY3Q7XG59XG5mdW5jdGlvbiBleHRlbmQodGFyZ2V0LCBzcmMpIHtcbiAgaWYgKHRhcmdldCA9PT0gdm9pZCAwKSB7XG4gICAgdGFyZ2V0ID0ge307XG4gIH1cbiAgaWYgKHNyYyA9PT0gdm9pZCAwKSB7XG4gICAgc3JjID0ge307XG4gIH1cbiAgT2JqZWN0LmtleXMoc3JjKS5mb3JFYWNoKGtleSA9PiB7XG4gICAgaWYgKHR5cGVvZiB0YXJnZXRba2V5XSA9PT0gJ3VuZGVmaW5lZCcpIHRhcmdldFtrZXldID0gc3JjW2tleV07ZWxzZSBpZiAoaXNPYmplY3Qoc3JjW2tleV0pICYmIGlzT2JqZWN0KHRhcmdldFtrZXldKSAmJiBPYmplY3Qua2V5cyhzcmNba2V5XSkubGVuZ3RoID4gMCkge1xuICAgICAgZXh0ZW5kKHRhcmdldFtrZXldLCBzcmNba2V5XSk7XG4gICAgfVxuICB9KTtcbn1cbmNvbnN0IHNzckRvY3VtZW50ID0ge1xuICBib2R5OiB7fSxcbiAgYWRkRXZlbnRMaXN0ZW5lcigpIHt9LFxuICByZW1vdmVFdmVudExpc3RlbmVyKCkge30sXG4gIGFjdGl2ZUVsZW1lbnQ6IHtcbiAgICBibHVyKCkge30sXG4gICAgbm9kZU5hbWU6ICcnXG4gIH0sXG4gIHF1ZXJ5U2VsZWN0b3IoKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH0sXG4gIHF1ZXJ5U2VsZWN0b3JBbGwoKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9LFxuICBnZXRFbGVtZW50QnlJZCgpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfSxcbiAgY3JlYXRlRXZlbnQoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGluaXRFdmVudCgpIHt9XG4gICAgfTtcbiAgfSxcbiAgY3JlYXRlRWxlbWVudCgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgY2hpbGRyZW46IFtdLFxuICAgICAgY2hpbGROb2RlczogW10sXG4gICAgICBzdHlsZToge30sXG4gICAgICBzZXRBdHRyaWJ1dGUoKSB7fSxcbiAgICAgIGdldEVsZW1lbnRzQnlUYWdOYW1lKCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgfTtcbiAgfSxcbiAgY3JlYXRlRWxlbWVudE5TKCkge1xuICAgIHJldHVybiB7fTtcbiAgfSxcbiAgaW1wb3J0Tm9kZSgpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfSxcbiAgbG9jYXRpb246IHtcbiAgICBoYXNoOiAnJyxcbiAgICBob3N0OiAnJyxcbiAgICBob3N0bmFtZTogJycsXG4gICAgaHJlZjogJycsXG4gICAgb3JpZ2luOiAnJyxcbiAgICBwYXRobmFtZTogJycsXG4gICAgcHJvdG9jb2w6ICcnLFxuICAgIHNlYXJjaDogJydcbiAgfVxufTtcbmZ1bmN0aW9uIGdldERvY3VtZW50KCkge1xuICBjb25zdCBkb2MgPSB0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnID8gZG9jdW1lbnQgOiB7fTtcbiAgZXh0ZW5kKGRvYywgc3NyRG9jdW1lbnQpO1xuICByZXR1cm4gZG9jO1xufVxuY29uc3Qgc3NyV2luZG93ID0ge1xuICBkb2N1bWVudDogc3NyRG9jdW1lbnQsXG4gIG5hdmlnYXRvcjoge1xuICAgIHVzZXJBZ2VudDogJydcbiAgfSxcbiAgbG9jYXRpb246IHtcbiAgICBoYXNoOiAnJyxcbiAgICBob3N0OiAnJyxcbiAgICBob3N0bmFtZTogJycsXG4gICAgaHJlZjogJycsXG4gICAgb3JpZ2luOiAnJyxcbiAgICBwYXRobmFtZTogJycsXG4gICAgcHJvdG9jb2w6ICcnLFxuICAgIHNlYXJjaDogJydcbiAgfSxcbiAgaGlzdG9yeToge1xuICAgIHJlcGxhY2VTdGF0ZSgpIHt9LFxuICAgIHB1c2hTdGF0ZSgpIHt9LFxuICAgIGdvKCkge30sXG4gICAgYmFjaygpIHt9XG4gIH0sXG4gIEN1c3RvbUV2ZW50OiBmdW5jdGlvbiBDdXN0b21FdmVudCgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfSxcbiAgYWRkRXZlbnRMaXN0ZW5lcigpIHt9LFxuICByZW1vdmVFdmVudExpc3RlbmVyKCkge30sXG4gIGdldENvbXB1dGVkU3R5bGUoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGdldFByb3BlcnR5VmFsdWUoKSB7XG4gICAgICAgIHJldHVybiAnJztcbiAgICAgIH1cbiAgICB9O1xuICB9LFxuICBJbWFnZSgpIHt9LFxuICBEYXRlKCkge30sXG4gIHNjcmVlbjoge30sXG4gIHNldFRpbWVvdXQoKSB7fSxcbiAgY2xlYXJUaW1lb3V0KCkge30sXG4gIG1hdGNoTWVkaWEoKSB7XG4gICAgcmV0dXJuIHt9O1xuICB9LFxuICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoY2FsbGJhY2spIHtcbiAgICBpZiAodHlwZW9mIHNldFRpbWVvdXQgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBjYWxsYmFjaygpO1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHJldHVybiBzZXRUaW1lb3V0KGNhbGxiYWNrLCAwKTtcbiAgfSxcbiAgY2FuY2VsQW5pbWF0aW9uRnJhbWUoaWQpIHtcbiAgICBpZiAodHlwZW9mIHNldFRpbWVvdXQgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNsZWFyVGltZW91dChpZCk7XG4gIH1cbn07XG5mdW5jdGlvbiBnZXRXaW5kb3coKSB7XG4gIGNvbnN0IHdpbiA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnID8gd2luZG93IDoge307XG4gIGV4dGVuZCh3aW4sIHNzcldpbmRvdyk7XG4gIHJldHVybiB3aW47XG59XG5cbmV4cG9ydCB7IGdldFdpbmRvdyBhcyBhLCBnZXREb2N1bWVudCBhcyBnIH07XG4iLCJpbXBvcnQgeyBhIGFzIGdldFdpbmRvdywgZyBhcyBnZXREb2N1bWVudCB9IGZyb20gJy4vc3NyLXdpbmRvdy5lc20ubWpzJztcblxuZnVuY3Rpb24gY2xhc3Nlc1RvVG9rZW5zKGNsYXNzZXMpIHtcbiAgaWYgKGNsYXNzZXMgPT09IHZvaWQgMCkge1xuICAgIGNsYXNzZXMgPSAnJztcbiAgfVxuICByZXR1cm4gY2xhc3Nlcy50cmltKCkuc3BsaXQoJyAnKS5maWx0ZXIoYyA9PiAhIWMudHJpbSgpKTtcbn1cblxuZnVuY3Rpb24gZGVsZXRlUHJvcHMob2JqKSB7XG4gIGNvbnN0IG9iamVjdCA9IG9iajtcbiAgT2JqZWN0LmtleXMob2JqZWN0KS5mb3JFYWNoKGtleSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIG9iamVjdFtrZXldID0gbnVsbDtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAvLyBubyBnZXR0ZXIgZm9yIG9iamVjdFxuICAgIH1cbiAgICB0cnkge1xuICAgICAgZGVsZXRlIG9iamVjdFtrZXldO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIC8vIHNvbWV0aGluZyBnb3Qgd3JvbmdcbiAgICB9XG4gIH0pO1xufVxuZnVuY3Rpb24gbmV4dFRpY2soY2FsbGJhY2ssIGRlbGF5KSB7XG4gIGlmIChkZWxheSA9PT0gdm9pZCAwKSB7XG4gICAgZGVsYXkgPSAwO1xuICB9XG4gIHJldHVybiBzZXRUaW1lb3V0KGNhbGxiYWNrLCBkZWxheSk7XG59XG5mdW5jdGlvbiBub3coKSB7XG4gIHJldHVybiBEYXRlLm5vdygpO1xufVxuZnVuY3Rpb24gZ2V0Q29tcHV0ZWRTdHlsZShlbCkge1xuICBjb25zdCB3aW5kb3cgPSBnZXRXaW5kb3coKTtcbiAgbGV0IHN0eWxlO1xuICBpZiAod2luZG93LmdldENvbXB1dGVkU3R5bGUpIHtcbiAgICBzdHlsZSA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGVsLCBudWxsKTtcbiAgfVxuICBpZiAoIXN0eWxlICYmIGVsLmN1cnJlbnRTdHlsZSkge1xuICAgIHN0eWxlID0gZWwuY3VycmVudFN0eWxlO1xuICB9XG4gIGlmICghc3R5bGUpIHtcbiAgICBzdHlsZSA9IGVsLnN0eWxlO1xuICB9XG4gIHJldHVybiBzdHlsZTtcbn1cbmZ1bmN0aW9uIGdldFRyYW5zbGF0ZShlbCwgYXhpcykge1xuICBpZiAoYXhpcyA9PT0gdm9pZCAwKSB7XG4gICAgYXhpcyA9ICd4JztcbiAgfVxuICBjb25zdCB3aW5kb3cgPSBnZXRXaW5kb3coKTtcbiAgbGV0IG1hdHJpeDtcbiAgbGV0IGN1clRyYW5zZm9ybTtcbiAgbGV0IHRyYW5zZm9ybU1hdHJpeDtcbiAgY29uc3QgY3VyU3R5bGUgPSBnZXRDb21wdXRlZFN0eWxlKGVsKTtcbiAgaWYgKHdpbmRvdy5XZWJLaXRDU1NNYXRyaXgpIHtcbiAgICBjdXJUcmFuc2Zvcm0gPSBjdXJTdHlsZS50cmFuc2Zvcm0gfHwgY3VyU3R5bGUud2Via2l0VHJhbnNmb3JtO1xuICAgIGlmIChjdXJUcmFuc2Zvcm0uc3BsaXQoJywnKS5sZW5ndGggPiA2KSB7XG4gICAgICBjdXJUcmFuc2Zvcm0gPSBjdXJUcmFuc2Zvcm0uc3BsaXQoJywgJykubWFwKGEgPT4gYS5yZXBsYWNlKCcsJywgJy4nKSkuam9pbignLCAnKTtcbiAgICB9XG4gICAgLy8gU29tZSBvbGQgdmVyc2lvbnMgb2YgV2Via2l0IGNob2tlIHdoZW4gJ25vbmUnIGlzIHBhc3NlZDsgcGFzc1xuICAgIC8vIGVtcHR5IHN0cmluZyBpbnN0ZWFkIGluIHRoaXMgY2FzZVxuICAgIHRyYW5zZm9ybU1hdHJpeCA9IG5ldyB3aW5kb3cuV2ViS2l0Q1NTTWF0cml4KGN1clRyYW5zZm9ybSA9PT0gJ25vbmUnID8gJycgOiBjdXJUcmFuc2Zvcm0pO1xuICB9IGVsc2Uge1xuICAgIHRyYW5zZm9ybU1hdHJpeCA9IGN1clN0eWxlLk1velRyYW5zZm9ybSB8fCBjdXJTdHlsZS5PVHJhbnNmb3JtIHx8IGN1clN0eWxlLk1zVHJhbnNmb3JtIHx8IGN1clN0eWxlLm1zVHJhbnNmb3JtIHx8IGN1clN0eWxlLnRyYW5zZm9ybSB8fCBjdXJTdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKCd0cmFuc2Zvcm0nKS5yZXBsYWNlKCd0cmFuc2xhdGUoJywgJ21hdHJpeCgxLCAwLCAwLCAxLCcpO1xuICAgIG1hdHJpeCA9IHRyYW5zZm9ybU1hdHJpeC50b1N0cmluZygpLnNwbGl0KCcsJyk7XG4gIH1cbiAgaWYgKGF4aXMgPT09ICd4Jykge1xuICAgIC8vIExhdGVzdCBDaHJvbWUgYW5kIHdlYmtpdHMgRml4XG4gICAgaWYgKHdpbmRvdy5XZWJLaXRDU1NNYXRyaXgpIGN1clRyYW5zZm9ybSA9IHRyYW5zZm9ybU1hdHJpeC5tNDE7XG4gICAgLy8gQ3JhenkgSUUxMCBNYXRyaXhcbiAgICBlbHNlIGlmIChtYXRyaXgubGVuZ3RoID09PSAxNikgY3VyVHJhbnNmb3JtID0gcGFyc2VGbG9hdChtYXRyaXhbMTJdKTtcbiAgICAvLyBOb3JtYWwgQnJvd3NlcnNcbiAgICBlbHNlIGN1clRyYW5zZm9ybSA9IHBhcnNlRmxvYXQobWF0cml4WzRdKTtcbiAgfVxuICBpZiAoYXhpcyA9PT0gJ3knKSB7XG4gICAgLy8gTGF0ZXN0IENocm9tZSBhbmQgd2Via2l0cyBGaXhcbiAgICBpZiAod2luZG93LldlYktpdENTU01hdHJpeCkgY3VyVHJhbnNmb3JtID0gdHJhbnNmb3JtTWF0cml4Lm00MjtcbiAgICAvLyBDcmF6eSBJRTEwIE1hdHJpeFxuICAgIGVsc2UgaWYgKG1hdHJpeC5sZW5ndGggPT09IDE2KSBjdXJUcmFuc2Zvcm0gPSBwYXJzZUZsb2F0KG1hdHJpeFsxM10pO1xuICAgIC8vIE5vcm1hbCBCcm93c2Vyc1xuICAgIGVsc2UgY3VyVHJhbnNmb3JtID0gcGFyc2VGbG9hdChtYXRyaXhbNV0pO1xuICB9XG4gIHJldHVybiBjdXJUcmFuc2Zvcm0gfHwgMDtcbn1cbmZ1bmN0aW9uIGlzT2JqZWN0KG8pIHtcbiAgcmV0dXJuIHR5cGVvZiBvID09PSAnb2JqZWN0JyAmJiBvICE9PSBudWxsICYmIG8uY29uc3RydWN0b3IgJiYgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG8pLnNsaWNlKDgsIC0xKSA9PT0gJ09iamVjdCc7XG59XG5mdW5jdGlvbiBpc05vZGUobm9kZSkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiB3aW5kb3cuSFRNTEVsZW1lbnQgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuIG5vZGUgaW5zdGFuY2VvZiBIVE1MRWxlbWVudDtcbiAgfVxuICByZXR1cm4gbm9kZSAmJiAobm9kZS5ub2RlVHlwZSA9PT0gMSB8fCBub2RlLm5vZGVUeXBlID09PSAxMSk7XG59XG5mdW5jdGlvbiBleHRlbmQoKSB7XG4gIGNvbnN0IHRvID0gT2JqZWN0KGFyZ3VtZW50cy5sZW5ndGggPD0gMCA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1swXSk7XG4gIGNvbnN0IG5vRXh0ZW5kID0gWydfX3Byb3RvX18nLCAnY29uc3RydWN0b3InLCAncHJvdG90eXBlJ107XG4gIGZvciAobGV0IGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgY29uc3QgbmV4dFNvdXJjZSA9IGkgPCAwIHx8IGFyZ3VtZW50cy5sZW5ndGggPD0gaSA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1tpXTtcbiAgICBpZiAobmV4dFNvdXJjZSAhPT0gdW5kZWZpbmVkICYmIG5leHRTb3VyY2UgIT09IG51bGwgJiYgIWlzTm9kZShuZXh0U291cmNlKSkge1xuICAgICAgY29uc3Qga2V5c0FycmF5ID0gT2JqZWN0LmtleXMoT2JqZWN0KG5leHRTb3VyY2UpKS5maWx0ZXIoa2V5ID0+IG5vRXh0ZW5kLmluZGV4T2Yoa2V5KSA8IDApO1xuICAgICAgZm9yIChsZXQgbmV4dEluZGV4ID0gMCwgbGVuID0ga2V5c0FycmF5Lmxlbmd0aDsgbmV4dEluZGV4IDwgbGVuOyBuZXh0SW5kZXggKz0gMSkge1xuICAgICAgICBjb25zdCBuZXh0S2V5ID0ga2V5c0FycmF5W25leHRJbmRleF07XG4gICAgICAgIGNvbnN0IGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG5leHRTb3VyY2UsIG5leHRLZXkpO1xuICAgICAgICBpZiAoZGVzYyAhPT0gdW5kZWZpbmVkICYmIGRlc2MuZW51bWVyYWJsZSkge1xuICAgICAgICAgIGlmIChpc09iamVjdCh0b1tuZXh0S2V5XSkgJiYgaXNPYmplY3QobmV4dFNvdXJjZVtuZXh0S2V5XSkpIHtcbiAgICAgICAgICAgIGlmIChuZXh0U291cmNlW25leHRLZXldLl9fc3dpcGVyX18pIHtcbiAgICAgICAgICAgICAgdG9bbmV4dEtleV0gPSBuZXh0U291cmNlW25leHRLZXldO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgZXh0ZW5kKHRvW25leHRLZXldLCBuZXh0U291cmNlW25leHRLZXldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2UgaWYgKCFpc09iamVjdCh0b1tuZXh0S2V5XSkgJiYgaXNPYmplY3QobmV4dFNvdXJjZVtuZXh0S2V5XSkpIHtcbiAgICAgICAgICAgIHRvW25leHRLZXldID0ge307XG4gICAgICAgICAgICBpZiAobmV4dFNvdXJjZVtuZXh0S2V5XS5fX3N3aXBlcl9fKSB7XG4gICAgICAgICAgICAgIHRvW25leHRLZXldID0gbmV4dFNvdXJjZVtuZXh0S2V5XTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGV4dGVuZCh0b1tuZXh0S2V5XSwgbmV4dFNvdXJjZVtuZXh0S2V5XSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRvW25leHRLZXldID0gbmV4dFNvdXJjZVtuZXh0S2V5XTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRvO1xufVxuZnVuY3Rpb24gc2V0Q1NTUHJvcGVydHkoZWwsIHZhck5hbWUsIHZhclZhbHVlKSB7XG4gIGVsLnN0eWxlLnNldFByb3BlcnR5KHZhck5hbWUsIHZhclZhbHVlKTtcbn1cbmZ1bmN0aW9uIGFuaW1hdGVDU1NNb2RlU2Nyb2xsKF9yZWYpIHtcbiAgbGV0IHtcbiAgICBzd2lwZXIsXG4gICAgdGFyZ2V0UG9zaXRpb24sXG4gICAgc2lkZVxuICB9ID0gX3JlZjtcbiAgY29uc3Qgd2luZG93ID0gZ2V0V2luZG93KCk7XG4gIGNvbnN0IHN0YXJ0UG9zaXRpb24gPSAtc3dpcGVyLnRyYW5zbGF0ZTtcbiAgbGV0IHN0YXJ0VGltZSA9IG51bGw7XG4gIGxldCB0aW1lO1xuICBjb25zdCBkdXJhdGlvbiA9IHN3aXBlci5wYXJhbXMuc3BlZWQ7XG4gIHN3aXBlci53cmFwcGVyRWwuc3R5bGUuc2Nyb2xsU25hcFR5cGUgPSAnbm9uZSc7XG4gIHdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZShzd2lwZXIuY3NzTW9kZUZyYW1lSUQpO1xuICBjb25zdCBkaXIgPSB0YXJnZXRQb3NpdGlvbiA+IHN0YXJ0UG9zaXRpb24gPyAnbmV4dCcgOiAncHJldic7XG4gIGNvbnN0IGlzT3V0T2ZCb3VuZCA9IChjdXJyZW50LCB0YXJnZXQpID0+IHtcbiAgICByZXR1cm4gZGlyID09PSAnbmV4dCcgJiYgY3VycmVudCA+PSB0YXJnZXQgfHwgZGlyID09PSAncHJldicgJiYgY3VycmVudCA8PSB0YXJnZXQ7XG4gIH07XG4gIGNvbnN0IGFuaW1hdGUgPSAoKSA9PiB7XG4gICAgdGltZSA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuICAgIGlmIChzdGFydFRpbWUgPT09IG51bGwpIHtcbiAgICAgIHN0YXJ0VGltZSA9IHRpbWU7XG4gICAgfVxuICAgIGNvbnN0IHByb2dyZXNzID0gTWF0aC5tYXgoTWF0aC5taW4oKHRpbWUgLSBzdGFydFRpbWUpIC8gZHVyYXRpb24sIDEpLCAwKTtcbiAgICBjb25zdCBlYXNlUHJvZ3Jlc3MgPSAwLjUgLSBNYXRoLmNvcyhwcm9ncmVzcyAqIE1hdGguUEkpIC8gMjtcbiAgICBsZXQgY3VycmVudFBvc2l0aW9uID0gc3RhcnRQb3NpdGlvbiArIGVhc2VQcm9ncmVzcyAqICh0YXJnZXRQb3NpdGlvbiAtIHN0YXJ0UG9zaXRpb24pO1xuICAgIGlmIChpc091dE9mQm91bmQoY3VycmVudFBvc2l0aW9uLCB0YXJnZXRQb3NpdGlvbikpIHtcbiAgICAgIGN1cnJlbnRQb3NpdGlvbiA9IHRhcmdldFBvc2l0aW9uO1xuICAgIH1cbiAgICBzd2lwZXIud3JhcHBlckVsLnNjcm9sbFRvKHtcbiAgICAgIFtzaWRlXTogY3VycmVudFBvc2l0aW9uXG4gICAgfSk7XG4gICAgaWYgKGlzT3V0T2ZCb3VuZChjdXJyZW50UG9zaXRpb24sIHRhcmdldFBvc2l0aW9uKSkge1xuICAgICAgc3dpcGVyLndyYXBwZXJFbC5zdHlsZS5vdmVyZmxvdyA9ICdoaWRkZW4nO1xuICAgICAgc3dpcGVyLndyYXBwZXJFbC5zdHlsZS5zY3JvbGxTbmFwVHlwZSA9ICcnO1xuICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIHN3aXBlci53cmFwcGVyRWwuc3R5bGUub3ZlcmZsb3cgPSAnJztcbiAgICAgICAgc3dpcGVyLndyYXBwZXJFbC5zY3JvbGxUbyh7XG4gICAgICAgICAgW3NpZGVdOiBjdXJyZW50UG9zaXRpb25cbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICAgIHdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZShzd2lwZXIuY3NzTW9kZUZyYW1lSUQpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBzd2lwZXIuY3NzTW9kZUZyYW1lSUQgPSB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKGFuaW1hdGUpO1xuICB9O1xuICBhbmltYXRlKCk7XG59XG5mdW5jdGlvbiBnZXRTbGlkZVRyYW5zZm9ybUVsKHNsaWRlRWwpIHtcbiAgcmV0dXJuIHNsaWRlRWwucXVlcnlTZWxlY3RvcignLnN3aXBlci1zbGlkZS10cmFuc2Zvcm0nKSB8fCBzbGlkZUVsLnNoYWRvd1Jvb3QgJiYgc2xpZGVFbC5zaGFkb3dSb290LnF1ZXJ5U2VsZWN0b3IoJy5zd2lwZXItc2xpZGUtdHJhbnNmb3JtJykgfHwgc2xpZGVFbDtcbn1cbmZ1bmN0aW9uIGVsZW1lbnRDaGlsZHJlbihlbGVtZW50LCBzZWxlY3Rvcikge1xuICBpZiAoc2VsZWN0b3IgPT09IHZvaWQgMCkge1xuICAgIHNlbGVjdG9yID0gJyc7XG4gIH1cbiAgcmV0dXJuIFsuLi5lbGVtZW50LmNoaWxkcmVuXS5maWx0ZXIoZWwgPT4gZWwubWF0Y2hlcyhzZWxlY3RvcikpO1xufVxuZnVuY3Rpb24gc2hvd1dhcm5pbmcodGV4dCkge1xuICB0cnkge1xuICAgIGNvbnNvbGUud2Fybih0ZXh0KTtcbiAgICByZXR1cm47XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIC8vIGVyclxuICB9XG59XG5mdW5jdGlvbiBjcmVhdGVFbGVtZW50KHRhZywgY2xhc3Nlcykge1xuICBpZiAoY2xhc3NlcyA9PT0gdm9pZCAwKSB7XG4gICAgY2xhc3NlcyA9IFtdO1xuICB9XG4gIGNvbnN0IGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCh0YWcpO1xuICBlbC5jbGFzc0xpc3QuYWRkKC4uLihBcnJheS5pc0FycmF5KGNsYXNzZXMpID8gY2xhc3NlcyA6IGNsYXNzZXNUb1Rva2VucyhjbGFzc2VzKSkpO1xuICByZXR1cm4gZWw7XG59XG5mdW5jdGlvbiBlbGVtZW50T2Zmc2V0KGVsKSB7XG4gIGNvbnN0IHdpbmRvdyA9IGdldFdpbmRvdygpO1xuICBjb25zdCBkb2N1bWVudCA9IGdldERvY3VtZW50KCk7XG4gIGNvbnN0IGJveCA9IGVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICBjb25zdCBib2R5ID0gZG9jdW1lbnQuYm9keTtcbiAgY29uc3QgY2xpZW50VG9wID0gZWwuY2xpZW50VG9wIHx8IGJvZHkuY2xpZW50VG9wIHx8IDA7XG4gIGNvbnN0IGNsaWVudExlZnQgPSBlbC5jbGllbnRMZWZ0IHx8IGJvZHkuY2xpZW50TGVmdCB8fCAwO1xuICBjb25zdCBzY3JvbGxUb3AgPSBlbCA9PT0gd2luZG93ID8gd2luZG93LnNjcm9sbFkgOiBlbC5zY3JvbGxUb3A7XG4gIGNvbnN0IHNjcm9sbExlZnQgPSBlbCA9PT0gd2luZG93ID8gd2luZG93LnNjcm9sbFggOiBlbC5zY3JvbGxMZWZ0O1xuICByZXR1cm4ge1xuICAgIHRvcDogYm94LnRvcCArIHNjcm9sbFRvcCAtIGNsaWVudFRvcCxcbiAgICBsZWZ0OiBib3gubGVmdCArIHNjcm9sbExlZnQgLSBjbGllbnRMZWZ0XG4gIH07XG59XG5mdW5jdGlvbiBlbGVtZW50UHJldkFsbChlbCwgc2VsZWN0b3IpIHtcbiAgY29uc3QgcHJldkVscyA9IFtdO1xuICB3aGlsZSAoZWwucHJldmlvdXNFbGVtZW50U2libGluZykge1xuICAgIGNvbnN0IHByZXYgPSBlbC5wcmV2aW91c0VsZW1lbnRTaWJsaW5nOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gICAgaWYgKHNlbGVjdG9yKSB7XG4gICAgICBpZiAocHJldi5tYXRjaGVzKHNlbGVjdG9yKSkgcHJldkVscy5wdXNoKHByZXYpO1xuICAgIH0gZWxzZSBwcmV2RWxzLnB1c2gocHJldik7XG4gICAgZWwgPSBwcmV2O1xuICB9XG4gIHJldHVybiBwcmV2RWxzO1xufVxuZnVuY3Rpb24gZWxlbWVudE5leHRBbGwoZWwsIHNlbGVjdG9yKSB7XG4gIGNvbnN0IG5leHRFbHMgPSBbXTtcbiAgd2hpbGUgKGVsLm5leHRFbGVtZW50U2libGluZykge1xuICAgIGNvbnN0IG5leHQgPSBlbC5uZXh0RWxlbWVudFNpYmxpbmc7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgICBpZiAoc2VsZWN0b3IpIHtcbiAgICAgIGlmIChuZXh0Lm1hdGNoZXMoc2VsZWN0b3IpKSBuZXh0RWxzLnB1c2gobmV4dCk7XG4gICAgfSBlbHNlIG5leHRFbHMucHVzaChuZXh0KTtcbiAgICBlbCA9IG5leHQ7XG4gIH1cbiAgcmV0dXJuIG5leHRFbHM7XG59XG5mdW5jdGlvbiBlbGVtZW50U3R5bGUoZWwsIHByb3ApIHtcbiAgY29uc3Qgd2luZG93ID0gZ2V0V2luZG93KCk7XG4gIHJldHVybiB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbCwgbnVsbCkuZ2V0UHJvcGVydHlWYWx1ZShwcm9wKTtcbn1cbmZ1bmN0aW9uIGVsZW1lbnRJbmRleChlbCkge1xuICBsZXQgY2hpbGQgPSBlbDtcbiAgbGV0IGk7XG4gIGlmIChjaGlsZCkge1xuICAgIGkgPSAwO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgIHdoaWxlICgoY2hpbGQgPSBjaGlsZC5wcmV2aW91c1NpYmxpbmcpICE9PSBudWxsKSB7XG4gICAgICBpZiAoY2hpbGQubm9kZVR5cGUgPT09IDEpIGkgKz0gMTtcbiAgICB9XG4gICAgcmV0dXJuIGk7XG4gIH1cbiAgcmV0dXJuIHVuZGVmaW5lZDtcbn1cbmZ1bmN0aW9uIGVsZW1lbnRQYXJlbnRzKGVsLCBzZWxlY3Rvcikge1xuICBjb25zdCBwYXJlbnRzID0gW107IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgbGV0IHBhcmVudCA9IGVsLnBhcmVudEVsZW1lbnQ7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgd2hpbGUgKHBhcmVudCkge1xuICAgIGlmIChzZWxlY3Rvcikge1xuICAgICAgaWYgKHBhcmVudC5tYXRjaGVzKHNlbGVjdG9yKSkgcGFyZW50cy5wdXNoKHBhcmVudCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHBhcmVudHMucHVzaChwYXJlbnQpO1xuICAgIH1cbiAgICBwYXJlbnQgPSBwYXJlbnQucGFyZW50RWxlbWVudDtcbiAgfVxuICByZXR1cm4gcGFyZW50cztcbn1cbmZ1bmN0aW9uIGVsZW1lbnRUcmFuc2l0aW9uRW5kKGVsLCBjYWxsYmFjaykge1xuICBmdW5jdGlvbiBmaXJlQ2FsbEJhY2soZSkge1xuICAgIGlmIChlLnRhcmdldCAhPT0gZWwpIHJldHVybjtcbiAgICBjYWxsYmFjay5jYWxsKGVsLCBlKTtcbiAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKCd0cmFuc2l0aW9uZW5kJywgZmlyZUNhbGxCYWNrKTtcbiAgfVxuICBpZiAoY2FsbGJhY2spIHtcbiAgICBlbC5hZGRFdmVudExpc3RlbmVyKCd0cmFuc2l0aW9uZW5kJywgZmlyZUNhbGxCYWNrKTtcbiAgfVxufVxuZnVuY3Rpb24gZWxlbWVudE91dGVyU2l6ZShlbCwgc2l6ZSwgaW5jbHVkZU1hcmdpbnMpIHtcbiAgY29uc3Qgd2luZG93ID0gZ2V0V2luZG93KCk7XG4gIGlmIChpbmNsdWRlTWFyZ2lucykge1xuICAgIHJldHVybiBlbFtzaXplID09PSAnd2lkdGgnID8gJ29mZnNldFdpZHRoJyA6ICdvZmZzZXRIZWlnaHQnXSArIHBhcnNlRmxvYXQod2luZG93LmdldENvbXB1dGVkU3R5bGUoZWwsIG51bGwpLmdldFByb3BlcnR5VmFsdWUoc2l6ZSA9PT0gJ3dpZHRoJyA/ICdtYXJnaW4tcmlnaHQnIDogJ21hcmdpbi10b3AnKSkgKyBwYXJzZUZsb2F0KHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGVsLCBudWxsKS5nZXRQcm9wZXJ0eVZhbHVlKHNpemUgPT09ICd3aWR0aCcgPyAnbWFyZ2luLWxlZnQnIDogJ21hcmdpbi1ib3R0b20nKSk7XG4gIH1cbiAgcmV0dXJuIGVsLm9mZnNldFdpZHRoO1xufVxuZnVuY3Rpb24gbWFrZUVsZW1lbnRzQXJyYXkoZWwpIHtcbiAgcmV0dXJuIChBcnJheS5pc0FycmF5KGVsKSA/IGVsIDogW2VsXSkuZmlsdGVyKGUgPT4gISFlKTtcbn1cblxuZXhwb3J0IHsgZWxlbWVudFBhcmVudHMgYXMgYSwgZWxlbWVudE9mZnNldCBhcyBiLCBjcmVhdGVFbGVtZW50IGFzIGMsIG5vdyBhcyBkLCBlbGVtZW50Q2hpbGRyZW4gYXMgZSwgZWxlbWVudE91dGVyU2l6ZSBhcyBmLCBnZXRTbGlkZVRyYW5zZm9ybUVsIGFzIGcsIGVsZW1lbnRJbmRleCBhcyBoLCBjbGFzc2VzVG9Ub2tlbnMgYXMgaSwgZ2V0VHJhbnNsYXRlIGFzIGosIGVsZW1lbnRUcmFuc2l0aW9uRW5kIGFzIGssIGlzT2JqZWN0IGFzIGwsIG1ha2VFbGVtZW50c0FycmF5IGFzIG0sIG5leHRUaWNrIGFzIG4sIGVsZW1lbnRTdHlsZSBhcyBvLCBlbGVtZW50TmV4dEFsbCBhcyBwLCBlbGVtZW50UHJldkFsbCBhcyBxLCBhbmltYXRlQ1NTTW9kZVNjcm9sbCBhcyByLCBzZXRDU1NQcm9wZXJ0eSBhcyBzLCBzaG93V2FybmluZyBhcyB0LCBleHRlbmQgYXMgdSwgZGVsZXRlUHJvcHMgYXMgdiB9O1xuIiwiaW1wb3J0IHsgYSBhcyBnZXRXaW5kb3csIGcgYXMgZ2V0RG9jdW1lbnQgfSBmcm9tICcuL3Nzci13aW5kb3cuZXNtLm1qcyc7XG5pbXBvcnQgeyBhIGFzIGVsZW1lbnRQYXJlbnRzLCBvIGFzIGVsZW1lbnRTdHlsZSwgZSBhcyBlbGVtZW50Q2hpbGRyZW4sIHMgYXMgc2V0Q1NTUHJvcGVydHksIGYgYXMgZWxlbWVudE91dGVyU2l6ZSwgcCBhcyBlbGVtZW50TmV4dEFsbCwgcSBhcyBlbGVtZW50UHJldkFsbCwgaiBhcyBnZXRUcmFuc2xhdGUsIHIgYXMgYW5pbWF0ZUNTU01vZGVTY3JvbGwsIG4gYXMgbmV4dFRpY2ssIHQgYXMgc2hvd1dhcm5pbmcsIGMgYXMgY3JlYXRlRWxlbWVudCwgZCBhcyBub3csIHUgYXMgZXh0ZW5kLCBoIGFzIGVsZW1lbnRJbmRleCwgdiBhcyBkZWxldGVQcm9wcyB9IGZyb20gJy4vdXRpbHMubWpzJztcblxubGV0IHN1cHBvcnQ7XG5mdW5jdGlvbiBjYWxjU3VwcG9ydCgpIHtcbiAgY29uc3Qgd2luZG93ID0gZ2V0V2luZG93KCk7XG4gIGNvbnN0IGRvY3VtZW50ID0gZ2V0RG9jdW1lbnQoKTtcbiAgcmV0dXJuIHtcbiAgICBzbW9vdGhTY3JvbGw6IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCAmJiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc3R5bGUgJiYgJ3Njcm9sbEJlaGF2aW9yJyBpbiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc3R5bGUsXG4gICAgdG91Y2g6ICEhKCdvbnRvdWNoc3RhcnQnIGluIHdpbmRvdyB8fCB3aW5kb3cuRG9jdW1lbnRUb3VjaCAmJiBkb2N1bWVudCBpbnN0YW5jZW9mIHdpbmRvdy5Eb2N1bWVudFRvdWNoKVxuICB9O1xufVxuZnVuY3Rpb24gZ2V0U3VwcG9ydCgpIHtcbiAgaWYgKCFzdXBwb3J0KSB7XG4gICAgc3VwcG9ydCA9IGNhbGNTdXBwb3J0KCk7XG4gIH1cbiAgcmV0dXJuIHN1cHBvcnQ7XG59XG5cbmxldCBkZXZpY2VDYWNoZWQ7XG5mdW5jdGlvbiBjYWxjRGV2aWNlKF90ZW1wKSB7XG4gIGxldCB7XG4gICAgdXNlckFnZW50XG4gIH0gPSBfdGVtcCA9PT0gdm9pZCAwID8ge30gOiBfdGVtcDtcbiAgY29uc3Qgc3VwcG9ydCA9IGdldFN1cHBvcnQoKTtcbiAgY29uc3Qgd2luZG93ID0gZ2V0V2luZG93KCk7XG4gIGNvbnN0IHBsYXRmb3JtID0gd2luZG93Lm5hdmlnYXRvci5wbGF0Zm9ybTtcbiAgY29uc3QgdWEgPSB1c2VyQWdlbnQgfHwgd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQ7XG4gIGNvbnN0IGRldmljZSA9IHtcbiAgICBpb3M6IGZhbHNlLFxuICAgIGFuZHJvaWQ6IGZhbHNlXG4gIH07XG4gIGNvbnN0IHNjcmVlbldpZHRoID0gd2luZG93LnNjcmVlbi53aWR0aDtcbiAgY29uc3Qgc2NyZWVuSGVpZ2h0ID0gd2luZG93LnNjcmVlbi5oZWlnaHQ7XG4gIGNvbnN0IGFuZHJvaWQgPSB1YS5tYXRjaCgvKEFuZHJvaWQpOz9bXFxzXFwvXSsoW1xcZC5dKyk/Lyk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgbGV0IGlwYWQgPSB1YS5tYXRjaCgvKGlQYWQpLipPU1xccyhbXFxkX10rKS8pO1xuICBjb25zdCBpcG9kID0gdWEubWF0Y2goLyhpUG9kKSguKk9TXFxzKFtcXGRfXSspKT8vKTtcbiAgY29uc3QgaXBob25lID0gIWlwYWQgJiYgdWEubWF0Y2goLyhpUGhvbmVcXHNPU3xpT1MpXFxzKFtcXGRfXSspLyk7XG4gIGNvbnN0IHdpbmRvd3MgPSBwbGF0Zm9ybSA9PT0gJ1dpbjMyJztcbiAgbGV0IG1hY29zID0gcGxhdGZvcm0gPT09ICdNYWNJbnRlbCc7XG5cbiAgLy8gaVBhZE9zIDEzIGZpeFxuICBjb25zdCBpUGFkU2NyZWVucyA9IFsnMTAyNHgxMzY2JywgJzEzNjZ4MTAyNCcsICc4MzR4MTE5NCcsICcxMTk0eDgzNCcsICc4MzR4MTExMicsICcxMTEyeDgzNCcsICc3Njh4MTAyNCcsICcxMDI0eDc2OCcsICc4MjB4MTE4MCcsICcxMTgweDgyMCcsICc4MTB4MTA4MCcsICcxMDgweDgxMCddO1xuICBpZiAoIWlwYWQgJiYgbWFjb3MgJiYgc3VwcG9ydC50b3VjaCAmJiBpUGFkU2NyZWVucy5pbmRleE9mKGAke3NjcmVlbldpZHRofXgke3NjcmVlbkhlaWdodH1gKSA+PSAwKSB7XG4gICAgaXBhZCA9IHVhLm1hdGNoKC8oVmVyc2lvbilcXC8oW1xcZC5dKykvKTtcbiAgICBpZiAoIWlwYWQpIGlwYWQgPSBbMCwgMSwgJzEzXzBfMCddO1xuICAgIG1hY29zID0gZmFsc2U7XG4gIH1cblxuICAvLyBBbmRyb2lkXG4gIGlmIChhbmRyb2lkICYmICF3aW5kb3dzKSB7XG4gICAgZGV2aWNlLm9zID0gJ2FuZHJvaWQnO1xuICAgIGRldmljZS5hbmRyb2lkID0gdHJ1ZTtcbiAgfVxuICBpZiAoaXBhZCB8fCBpcGhvbmUgfHwgaXBvZCkge1xuICAgIGRldmljZS5vcyA9ICdpb3MnO1xuICAgIGRldmljZS5pb3MgPSB0cnVlO1xuICB9XG5cbiAgLy8gRXhwb3J0IG9iamVjdFxuICByZXR1cm4gZGV2aWNlO1xufVxuZnVuY3Rpb24gZ2V0RGV2aWNlKG92ZXJyaWRlcykge1xuICBpZiAob3ZlcnJpZGVzID09PSB2b2lkIDApIHtcbiAgICBvdmVycmlkZXMgPSB7fTtcbiAgfVxuICBpZiAoIWRldmljZUNhY2hlZCkge1xuICAgIGRldmljZUNhY2hlZCA9IGNhbGNEZXZpY2Uob3ZlcnJpZGVzKTtcbiAgfVxuICByZXR1cm4gZGV2aWNlQ2FjaGVkO1xufVxuXG5sZXQgYnJvd3NlcjtcbmZ1bmN0aW9uIGNhbGNCcm93c2VyKCkge1xuICBjb25zdCB3aW5kb3cgPSBnZXRXaW5kb3coKTtcbiAgY29uc3QgZGV2aWNlID0gZ2V0RGV2aWNlKCk7XG4gIGxldCBuZWVkUGVyc3BlY3RpdmVGaXggPSBmYWxzZTtcbiAgZnVuY3Rpb24gaXNTYWZhcmkoKSB7XG4gICAgY29uc3QgdWEgPSB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpO1xuICAgIHJldHVybiB1YS5pbmRleE9mKCdzYWZhcmknKSA+PSAwICYmIHVhLmluZGV4T2YoJ2Nocm9tZScpIDwgMCAmJiB1YS5pbmRleE9mKCdhbmRyb2lkJykgPCAwO1xuICB9XG4gIGlmIChpc1NhZmFyaSgpKSB7XG4gICAgY29uc3QgdWEgPSBTdHJpbmcod2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQpO1xuICAgIGlmICh1YS5pbmNsdWRlcygnVmVyc2lvbi8nKSkge1xuICAgICAgY29uc3QgW21ham9yLCBtaW5vcl0gPSB1YS5zcGxpdCgnVmVyc2lvbi8nKVsxXS5zcGxpdCgnICcpWzBdLnNwbGl0KCcuJykubWFwKG51bSA9PiBOdW1iZXIobnVtKSk7XG4gICAgICBuZWVkUGVyc3BlY3RpdmVGaXggPSBtYWpvciA8IDE2IHx8IG1ham9yID09PSAxNiAmJiBtaW5vciA8IDI7XG4gICAgfVxuICB9XG4gIGNvbnN0IGlzV2ViVmlldyA9IC8oaVBob25lfGlQb2R8aVBhZCkuKkFwcGxlV2ViS2l0KD8hLipTYWZhcmkpL2kudGVzdCh3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudCk7XG4gIGNvbnN0IGlzU2FmYXJpQnJvd3NlciA9IGlzU2FmYXJpKCk7XG4gIGNvbnN0IG5lZWQzZEZpeCA9IGlzU2FmYXJpQnJvd3NlciB8fCBpc1dlYlZpZXcgJiYgZGV2aWNlLmlvcztcbiAgcmV0dXJuIHtcbiAgICBpc1NhZmFyaTogbmVlZFBlcnNwZWN0aXZlRml4IHx8IGlzU2FmYXJpQnJvd3NlcixcbiAgICBuZWVkUGVyc3BlY3RpdmVGaXgsXG4gICAgbmVlZDNkRml4LFxuICAgIGlzV2ViVmlld1xuICB9O1xufVxuZnVuY3Rpb24gZ2V0QnJvd3NlcigpIHtcbiAgaWYgKCFicm93c2VyKSB7XG4gICAgYnJvd3NlciA9IGNhbGNCcm93c2VyKCk7XG4gIH1cbiAgcmV0dXJuIGJyb3dzZXI7XG59XG5cbmZ1bmN0aW9uIFJlc2l6ZShfcmVmKSB7XG4gIGxldCB7XG4gICAgc3dpcGVyLFxuICAgIG9uLFxuICAgIGVtaXRcbiAgfSA9IF9yZWY7XG4gIGNvbnN0IHdpbmRvdyA9IGdldFdpbmRvdygpO1xuICBsZXQgb2JzZXJ2ZXIgPSBudWxsO1xuICBsZXQgYW5pbWF0aW9uRnJhbWUgPSBudWxsO1xuICBjb25zdCByZXNpemVIYW5kbGVyID0gKCkgPT4ge1xuICAgIGlmICghc3dpcGVyIHx8IHN3aXBlci5kZXN0cm95ZWQgfHwgIXN3aXBlci5pbml0aWFsaXplZCkgcmV0dXJuO1xuICAgIGVtaXQoJ2JlZm9yZVJlc2l6ZScpO1xuICAgIGVtaXQoJ3Jlc2l6ZScpO1xuICB9O1xuICBjb25zdCBjcmVhdGVPYnNlcnZlciA9ICgpID0+IHtcbiAgICBpZiAoIXN3aXBlciB8fCBzd2lwZXIuZGVzdHJveWVkIHx8ICFzd2lwZXIuaW5pdGlhbGl6ZWQpIHJldHVybjtcbiAgICBvYnNlcnZlciA9IG5ldyBSZXNpemVPYnNlcnZlcihlbnRyaWVzID0+IHtcbiAgICAgIGFuaW1hdGlvbkZyYW1lID0gd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgICAgIGNvbnN0IHtcbiAgICAgICAgICB3aWR0aCxcbiAgICAgICAgICBoZWlnaHRcbiAgICAgICAgfSA9IHN3aXBlcjtcbiAgICAgICAgbGV0IG5ld1dpZHRoID0gd2lkdGg7XG4gICAgICAgIGxldCBuZXdIZWlnaHQgPSBoZWlnaHQ7XG4gICAgICAgIGVudHJpZXMuZm9yRWFjaChfcmVmMiA9PiB7XG4gICAgICAgICAgbGV0IHtcbiAgICAgICAgICAgIGNvbnRlbnRCb3hTaXplLFxuICAgICAgICAgICAgY29udGVudFJlY3QsXG4gICAgICAgICAgICB0YXJnZXRcbiAgICAgICAgICB9ID0gX3JlZjI7XG4gICAgICAgICAgaWYgKHRhcmdldCAmJiB0YXJnZXQgIT09IHN3aXBlci5lbCkgcmV0dXJuO1xuICAgICAgICAgIG5ld1dpZHRoID0gY29udGVudFJlY3QgPyBjb250ZW50UmVjdC53aWR0aCA6IChjb250ZW50Qm94U2l6ZVswXSB8fCBjb250ZW50Qm94U2l6ZSkuaW5saW5lU2l6ZTtcbiAgICAgICAgICBuZXdIZWlnaHQgPSBjb250ZW50UmVjdCA/IGNvbnRlbnRSZWN0LmhlaWdodCA6IChjb250ZW50Qm94U2l6ZVswXSB8fCBjb250ZW50Qm94U2l6ZSkuYmxvY2tTaXplO1xuICAgICAgICB9KTtcbiAgICAgICAgaWYgKG5ld1dpZHRoICE9PSB3aWR0aCB8fCBuZXdIZWlnaHQgIT09IGhlaWdodCkge1xuICAgICAgICAgIHJlc2l6ZUhhbmRsZXIoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG4gICAgb2JzZXJ2ZXIub2JzZXJ2ZShzd2lwZXIuZWwpO1xuICB9O1xuICBjb25zdCByZW1vdmVPYnNlcnZlciA9ICgpID0+IHtcbiAgICBpZiAoYW5pbWF0aW9uRnJhbWUpIHtcbiAgICAgIHdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZShhbmltYXRpb25GcmFtZSk7XG4gICAgfVxuICAgIGlmIChvYnNlcnZlciAmJiBvYnNlcnZlci51bm9ic2VydmUgJiYgc3dpcGVyLmVsKSB7XG4gICAgICBvYnNlcnZlci51bm9ic2VydmUoc3dpcGVyLmVsKTtcbiAgICAgIG9ic2VydmVyID0gbnVsbDtcbiAgICB9XG4gIH07XG4gIGNvbnN0IG9yaWVudGF0aW9uQ2hhbmdlSGFuZGxlciA9ICgpID0+IHtcbiAgICBpZiAoIXN3aXBlciB8fCBzd2lwZXIuZGVzdHJveWVkIHx8ICFzd2lwZXIuaW5pdGlhbGl6ZWQpIHJldHVybjtcbiAgICBlbWl0KCdvcmllbnRhdGlvbmNoYW5nZScpO1xuICB9O1xuICBvbignaW5pdCcsICgpID0+IHtcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5yZXNpemVPYnNlcnZlciAmJiB0eXBlb2Ygd2luZG93LlJlc2l6ZU9ic2VydmVyICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgY3JlYXRlT2JzZXJ2ZXIoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHJlc2l6ZUhhbmRsZXIpO1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdvcmllbnRhdGlvbmNoYW5nZScsIG9yaWVudGF0aW9uQ2hhbmdlSGFuZGxlcik7XG4gIH0pO1xuICBvbignZGVzdHJveScsICgpID0+IHtcbiAgICByZW1vdmVPYnNlcnZlcigpO1xuICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdyZXNpemUnLCByZXNpemVIYW5kbGVyKTtcbiAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignb3JpZW50YXRpb25jaGFuZ2UnLCBvcmllbnRhdGlvbkNoYW5nZUhhbmRsZXIpO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gT2JzZXJ2ZXIoX3JlZikge1xuICBsZXQge1xuICAgIHN3aXBlcixcbiAgICBleHRlbmRQYXJhbXMsXG4gICAgb24sXG4gICAgZW1pdFxuICB9ID0gX3JlZjtcbiAgY29uc3Qgb2JzZXJ2ZXJzID0gW107XG4gIGNvbnN0IHdpbmRvdyA9IGdldFdpbmRvdygpO1xuICBjb25zdCBhdHRhY2ggPSBmdW5jdGlvbiAodGFyZ2V0LCBvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgICAgb3B0aW9ucyA9IHt9O1xuICAgIH1cbiAgICBjb25zdCBPYnNlcnZlckZ1bmMgPSB3aW5kb3cuTXV0YXRpb25PYnNlcnZlciB8fCB3aW5kb3cuV2Via2l0TXV0YXRpb25PYnNlcnZlcjtcbiAgICBjb25zdCBvYnNlcnZlciA9IG5ldyBPYnNlcnZlckZ1bmMobXV0YXRpb25zID0+IHtcbiAgICAgIC8vIFRoZSBvYnNlcnZlclVwZGF0ZSBldmVudCBzaG91bGQgb25seSBiZSB0cmlnZ2VyZWRcbiAgICAgIC8vIG9uY2UgZGVzcGl0ZSB0aGUgbnVtYmVyIG9mIG11dGF0aW9ucy4gIEFkZGl0aW9uYWxcbiAgICAgIC8vIHRyaWdnZXJzIGFyZSByZWR1bmRhbnQgYW5kIGFyZSB2ZXJ5IGNvc3RseVxuICAgICAgaWYgKHN3aXBlci5fX3ByZXZlbnRPYnNlcnZlcl9fKSByZXR1cm47XG4gICAgICBpZiAobXV0YXRpb25zLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICBlbWl0KCdvYnNlcnZlclVwZGF0ZScsIG11dGF0aW9uc1swXSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGNvbnN0IG9ic2VydmVyVXBkYXRlID0gZnVuY3Rpb24gb2JzZXJ2ZXJVcGRhdGUoKSB7XG4gICAgICAgIGVtaXQoJ29ic2VydmVyVXBkYXRlJywgbXV0YXRpb25zWzBdKTtcbiAgICAgIH07XG4gICAgICBpZiAod2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSkge1xuICAgICAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKG9ic2VydmVyVXBkYXRlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHdpbmRvdy5zZXRUaW1lb3V0KG9ic2VydmVyVXBkYXRlLCAwKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBvYnNlcnZlci5vYnNlcnZlKHRhcmdldCwge1xuICAgICAgYXR0cmlidXRlczogdHlwZW9mIG9wdGlvbnMuYXR0cmlidXRlcyA9PT0gJ3VuZGVmaW5lZCcgPyB0cnVlIDogb3B0aW9ucy5hdHRyaWJ1dGVzLFxuICAgICAgY2hpbGRMaXN0OiB0eXBlb2Ygb3B0aW9ucy5jaGlsZExpc3QgPT09ICd1bmRlZmluZWQnID8gdHJ1ZSA6IG9wdGlvbnMuY2hpbGRMaXN0LFxuICAgICAgY2hhcmFjdGVyRGF0YTogdHlwZW9mIG9wdGlvbnMuY2hhcmFjdGVyRGF0YSA9PT0gJ3VuZGVmaW5lZCcgPyB0cnVlIDogb3B0aW9ucy5jaGFyYWN0ZXJEYXRhXG4gICAgfSk7XG4gICAgb2JzZXJ2ZXJzLnB1c2gob2JzZXJ2ZXIpO1xuICB9O1xuICBjb25zdCBpbml0ID0gKCkgPT4ge1xuICAgIGlmICghc3dpcGVyLnBhcmFtcy5vYnNlcnZlcikgcmV0dXJuO1xuICAgIGlmIChzd2lwZXIucGFyYW1zLm9ic2VydmVQYXJlbnRzKSB7XG4gICAgICBjb25zdCBjb250YWluZXJQYXJlbnRzID0gZWxlbWVudFBhcmVudHMoc3dpcGVyLmhvc3RFbCk7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvbnRhaW5lclBhcmVudHMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgYXR0YWNoKGNvbnRhaW5lclBhcmVudHNbaV0pO1xuICAgICAgfVxuICAgIH1cbiAgICAvLyBPYnNlcnZlIGNvbnRhaW5lclxuICAgIGF0dGFjaChzd2lwZXIuaG9zdEVsLCB7XG4gICAgICBjaGlsZExpc3Q6IHN3aXBlci5wYXJhbXMub2JzZXJ2ZVNsaWRlQ2hpbGRyZW5cbiAgICB9KTtcblxuICAgIC8vIE9ic2VydmUgd3JhcHBlclxuICAgIGF0dGFjaChzd2lwZXIud3JhcHBlckVsLCB7XG4gICAgICBhdHRyaWJ1dGVzOiBmYWxzZVxuICAgIH0pO1xuICB9O1xuICBjb25zdCBkZXN0cm95ID0gKCkgPT4ge1xuICAgIG9ic2VydmVycy5mb3JFYWNoKG9ic2VydmVyID0+IHtcbiAgICAgIG9ic2VydmVyLmRpc2Nvbm5lY3QoKTtcbiAgICB9KTtcbiAgICBvYnNlcnZlcnMuc3BsaWNlKDAsIG9ic2VydmVycy5sZW5ndGgpO1xuICB9O1xuICBleHRlbmRQYXJhbXMoe1xuICAgIG9ic2VydmVyOiBmYWxzZSxcbiAgICBvYnNlcnZlUGFyZW50czogZmFsc2UsXG4gICAgb2JzZXJ2ZVNsaWRlQ2hpbGRyZW46IGZhbHNlXG4gIH0pO1xuICBvbignaW5pdCcsIGluaXQpO1xuICBvbignZGVzdHJveScsIGRlc3Ryb3kpO1xufVxuXG4vKiBlc2xpbnQtZGlzYWJsZSBuby11bmRlcnNjb3JlLWRhbmdsZSAqL1xuXG52YXIgZXZlbnRzRW1pdHRlciA9IHtcbiAgb24oZXZlbnRzLCBoYW5kbGVyLCBwcmlvcml0eSkge1xuICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuICAgIGlmICghc2VsZi5ldmVudHNMaXN0ZW5lcnMgfHwgc2VsZi5kZXN0cm95ZWQpIHJldHVybiBzZWxmO1xuICAgIGlmICh0eXBlb2YgaGFuZGxlciAhPT0gJ2Z1bmN0aW9uJykgcmV0dXJuIHNlbGY7XG4gICAgY29uc3QgbWV0aG9kID0gcHJpb3JpdHkgPyAndW5zaGlmdCcgOiAncHVzaCc7XG4gICAgZXZlbnRzLnNwbGl0KCcgJykuZm9yRWFjaChldmVudCA9PiB7XG4gICAgICBpZiAoIXNlbGYuZXZlbnRzTGlzdGVuZXJzW2V2ZW50XSkgc2VsZi5ldmVudHNMaXN0ZW5lcnNbZXZlbnRdID0gW107XG4gICAgICBzZWxmLmV2ZW50c0xpc3RlbmVyc1tldmVudF1bbWV0aG9kXShoYW5kbGVyKTtcbiAgICB9KTtcbiAgICByZXR1cm4gc2VsZjtcbiAgfSxcbiAgb25jZShldmVudHMsIGhhbmRsZXIsIHByaW9yaXR5KSB7XG4gICAgY29uc3Qgc2VsZiA9IHRoaXM7XG4gICAgaWYgKCFzZWxmLmV2ZW50c0xpc3RlbmVycyB8fCBzZWxmLmRlc3Ryb3llZCkgcmV0dXJuIHNlbGY7XG4gICAgaWYgKHR5cGVvZiBoYW5kbGVyICE9PSAnZnVuY3Rpb24nKSByZXR1cm4gc2VsZjtcbiAgICBmdW5jdGlvbiBvbmNlSGFuZGxlcigpIHtcbiAgICAgIHNlbGYub2ZmKGV2ZW50cywgb25jZUhhbmRsZXIpO1xuICAgICAgaWYgKG9uY2VIYW5kbGVyLl9fZW1pdHRlclByb3h5KSB7XG4gICAgICAgIGRlbGV0ZSBvbmNlSGFuZGxlci5fX2VtaXR0ZXJQcm94eTtcbiAgICAgIH1cbiAgICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgICAgfVxuICAgICAgaGFuZGxlci5hcHBseShzZWxmLCBhcmdzKTtcbiAgICB9XG4gICAgb25jZUhhbmRsZXIuX19lbWl0dGVyUHJveHkgPSBoYW5kbGVyO1xuICAgIHJldHVybiBzZWxmLm9uKGV2ZW50cywgb25jZUhhbmRsZXIsIHByaW9yaXR5KTtcbiAgfSxcbiAgb25BbnkoaGFuZGxlciwgcHJpb3JpdHkpIHtcbiAgICBjb25zdCBzZWxmID0gdGhpcztcbiAgICBpZiAoIXNlbGYuZXZlbnRzTGlzdGVuZXJzIHx8IHNlbGYuZGVzdHJveWVkKSByZXR1cm4gc2VsZjtcbiAgICBpZiAodHlwZW9mIGhhbmRsZXIgIT09ICdmdW5jdGlvbicpIHJldHVybiBzZWxmO1xuICAgIGNvbnN0IG1ldGhvZCA9IHByaW9yaXR5ID8gJ3Vuc2hpZnQnIDogJ3B1c2gnO1xuICAgIGlmIChzZWxmLmV2ZW50c0FueUxpc3RlbmVycy5pbmRleE9mKGhhbmRsZXIpIDwgMCkge1xuICAgICAgc2VsZi5ldmVudHNBbnlMaXN0ZW5lcnNbbWV0aG9kXShoYW5kbGVyKTtcbiAgICB9XG4gICAgcmV0dXJuIHNlbGY7XG4gIH0sXG4gIG9mZkFueShoYW5kbGVyKSB7XG4gICAgY29uc3Qgc2VsZiA9IHRoaXM7XG4gICAgaWYgKCFzZWxmLmV2ZW50c0xpc3RlbmVycyB8fCBzZWxmLmRlc3Ryb3llZCkgcmV0dXJuIHNlbGY7XG4gICAgaWYgKCFzZWxmLmV2ZW50c0FueUxpc3RlbmVycykgcmV0dXJuIHNlbGY7XG4gICAgY29uc3QgaW5kZXggPSBzZWxmLmV2ZW50c0FueUxpc3RlbmVycy5pbmRleE9mKGhhbmRsZXIpO1xuICAgIGlmIChpbmRleCA+PSAwKSB7XG4gICAgICBzZWxmLmV2ZW50c0FueUxpc3RlbmVycy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgIH1cbiAgICByZXR1cm4gc2VsZjtcbiAgfSxcbiAgb2ZmKGV2ZW50cywgaGFuZGxlcikge1xuICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuICAgIGlmICghc2VsZi5ldmVudHNMaXN0ZW5lcnMgfHwgc2VsZi5kZXN0cm95ZWQpIHJldHVybiBzZWxmO1xuICAgIGlmICghc2VsZi5ldmVudHNMaXN0ZW5lcnMpIHJldHVybiBzZWxmO1xuICAgIGV2ZW50cy5zcGxpdCgnICcpLmZvckVhY2goZXZlbnQgPT4ge1xuICAgICAgaWYgKHR5cGVvZiBoYW5kbGVyID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICBzZWxmLmV2ZW50c0xpc3RlbmVyc1tldmVudF0gPSBbXTtcbiAgICAgIH0gZWxzZSBpZiAoc2VsZi5ldmVudHNMaXN0ZW5lcnNbZXZlbnRdKSB7XG4gICAgICAgIHNlbGYuZXZlbnRzTGlzdGVuZXJzW2V2ZW50XS5mb3JFYWNoKChldmVudEhhbmRsZXIsIGluZGV4KSA9PiB7XG4gICAgICAgICAgaWYgKGV2ZW50SGFuZGxlciA9PT0gaGFuZGxlciB8fCBldmVudEhhbmRsZXIuX19lbWl0dGVyUHJveHkgJiYgZXZlbnRIYW5kbGVyLl9fZW1pdHRlclByb3h5ID09PSBoYW5kbGVyKSB7XG4gICAgICAgICAgICBzZWxmLmV2ZW50c0xpc3RlbmVyc1tldmVudF0uc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBzZWxmO1xuICB9LFxuICBlbWl0KCkge1xuICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuICAgIGlmICghc2VsZi5ldmVudHNMaXN0ZW5lcnMgfHwgc2VsZi5kZXN0cm95ZWQpIHJldHVybiBzZWxmO1xuICAgIGlmICghc2VsZi5ldmVudHNMaXN0ZW5lcnMpIHJldHVybiBzZWxmO1xuICAgIGxldCBldmVudHM7XG4gICAgbGV0IGRhdGE7XG4gICAgbGV0IGNvbnRleHQ7XG4gICAgZm9yICh2YXIgX2xlbjIgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4yKSwgX2tleTIgPSAwOyBfa2V5MiA8IF9sZW4yOyBfa2V5MisrKSB7XG4gICAgICBhcmdzW19rZXkyXSA9IGFyZ3VtZW50c1tfa2V5Ml07XG4gICAgfVxuICAgIGlmICh0eXBlb2YgYXJnc1swXSA9PT0gJ3N0cmluZycgfHwgQXJyYXkuaXNBcnJheShhcmdzWzBdKSkge1xuICAgICAgZXZlbnRzID0gYXJnc1swXTtcbiAgICAgIGRhdGEgPSBhcmdzLnNsaWNlKDEsIGFyZ3MubGVuZ3RoKTtcbiAgICAgIGNvbnRleHQgPSBzZWxmO1xuICAgIH0gZWxzZSB7XG4gICAgICBldmVudHMgPSBhcmdzWzBdLmV2ZW50cztcbiAgICAgIGRhdGEgPSBhcmdzWzBdLmRhdGE7XG4gICAgICBjb250ZXh0ID0gYXJnc1swXS5jb250ZXh0IHx8IHNlbGY7XG4gICAgfVxuICAgIGRhdGEudW5zaGlmdChjb250ZXh0KTtcbiAgICBjb25zdCBldmVudHNBcnJheSA9IEFycmF5LmlzQXJyYXkoZXZlbnRzKSA/IGV2ZW50cyA6IGV2ZW50cy5zcGxpdCgnICcpO1xuICAgIGV2ZW50c0FycmF5LmZvckVhY2goZXZlbnQgPT4ge1xuICAgICAgaWYgKHNlbGYuZXZlbnRzQW55TGlzdGVuZXJzICYmIHNlbGYuZXZlbnRzQW55TGlzdGVuZXJzLmxlbmd0aCkge1xuICAgICAgICBzZWxmLmV2ZW50c0FueUxpc3RlbmVycy5mb3JFYWNoKGV2ZW50SGFuZGxlciA9PiB7XG4gICAgICAgICAgZXZlbnRIYW5kbGVyLmFwcGx5KGNvbnRleHQsIFtldmVudCwgLi4uZGF0YV0pO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIGlmIChzZWxmLmV2ZW50c0xpc3RlbmVycyAmJiBzZWxmLmV2ZW50c0xpc3RlbmVyc1tldmVudF0pIHtcbiAgICAgICAgc2VsZi5ldmVudHNMaXN0ZW5lcnNbZXZlbnRdLmZvckVhY2goZXZlbnRIYW5kbGVyID0+IHtcbiAgICAgICAgICBldmVudEhhbmRsZXIuYXBwbHkoY29udGV4dCwgZGF0YSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBzZWxmO1xuICB9XG59O1xuXG5mdW5jdGlvbiB1cGRhdGVTaXplKCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBsZXQgd2lkdGg7XG4gIGxldCBoZWlnaHQ7XG4gIGNvbnN0IGVsID0gc3dpcGVyLmVsO1xuICBpZiAodHlwZW9mIHN3aXBlci5wYXJhbXMud2lkdGggIT09ICd1bmRlZmluZWQnICYmIHN3aXBlci5wYXJhbXMud2lkdGggIT09IG51bGwpIHtcbiAgICB3aWR0aCA9IHN3aXBlci5wYXJhbXMud2lkdGg7XG4gIH0gZWxzZSB7XG4gICAgd2lkdGggPSBlbC5jbGllbnRXaWR0aDtcbiAgfVxuICBpZiAodHlwZW9mIHN3aXBlci5wYXJhbXMuaGVpZ2h0ICE9PSAndW5kZWZpbmVkJyAmJiBzd2lwZXIucGFyYW1zLmhlaWdodCAhPT0gbnVsbCkge1xuICAgIGhlaWdodCA9IHN3aXBlci5wYXJhbXMuaGVpZ2h0O1xuICB9IGVsc2Uge1xuICAgIGhlaWdodCA9IGVsLmNsaWVudEhlaWdodDtcbiAgfVxuICBpZiAod2lkdGggPT09IDAgJiYgc3dpcGVyLmlzSG9yaXpvbnRhbCgpIHx8IGhlaWdodCA9PT0gMCAmJiBzd2lwZXIuaXNWZXJ0aWNhbCgpKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gU3VidHJhY3QgcGFkZGluZ3NcbiAgd2lkdGggPSB3aWR0aCAtIHBhcnNlSW50KGVsZW1lbnRTdHlsZShlbCwgJ3BhZGRpbmctbGVmdCcpIHx8IDAsIDEwKSAtIHBhcnNlSW50KGVsZW1lbnRTdHlsZShlbCwgJ3BhZGRpbmctcmlnaHQnKSB8fCAwLCAxMCk7XG4gIGhlaWdodCA9IGhlaWdodCAtIHBhcnNlSW50KGVsZW1lbnRTdHlsZShlbCwgJ3BhZGRpbmctdG9wJykgfHwgMCwgMTApIC0gcGFyc2VJbnQoZWxlbWVudFN0eWxlKGVsLCAncGFkZGluZy1ib3R0b20nKSB8fCAwLCAxMCk7XG4gIGlmIChOdW1iZXIuaXNOYU4od2lkdGgpKSB3aWR0aCA9IDA7XG4gIGlmIChOdW1iZXIuaXNOYU4oaGVpZ2h0KSkgaGVpZ2h0ID0gMDtcbiAgT2JqZWN0LmFzc2lnbihzd2lwZXIsIHtcbiAgICB3aWR0aCxcbiAgICBoZWlnaHQsXG4gICAgc2l6ZTogc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gd2lkdGggOiBoZWlnaHRcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZVNsaWRlcygpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgZnVuY3Rpb24gZ2V0RGlyZWN0aW9uUHJvcGVydHlWYWx1ZShub2RlLCBsYWJlbCkge1xuICAgIHJldHVybiBwYXJzZUZsb2F0KG5vZGUuZ2V0UHJvcGVydHlWYWx1ZShzd2lwZXIuZ2V0RGlyZWN0aW9uTGFiZWwobGFiZWwpKSB8fCAwKTtcbiAgfVxuICBjb25zdCBwYXJhbXMgPSBzd2lwZXIucGFyYW1zO1xuICBjb25zdCB7XG4gICAgd3JhcHBlckVsLFxuICAgIHNsaWRlc0VsLFxuICAgIHNpemU6IHN3aXBlclNpemUsXG4gICAgcnRsVHJhbnNsYXRlOiBydGwsXG4gICAgd3JvbmdSVExcbiAgfSA9IHN3aXBlcjtcbiAgY29uc3QgaXNWaXJ0dWFsID0gc3dpcGVyLnZpcnR1YWwgJiYgcGFyYW1zLnZpcnR1YWwuZW5hYmxlZDtcbiAgY29uc3QgcHJldmlvdXNTbGlkZXNMZW5ndGggPSBpc1ZpcnR1YWwgPyBzd2lwZXIudmlydHVhbC5zbGlkZXMubGVuZ3RoIDogc3dpcGVyLnNsaWRlcy5sZW5ndGg7XG4gIGNvbnN0IHNsaWRlcyA9IGVsZW1lbnRDaGlsZHJlbihzbGlkZXNFbCwgYC4ke3N3aXBlci5wYXJhbXMuc2xpZGVDbGFzc30sIHN3aXBlci1zbGlkZWApO1xuICBjb25zdCBzbGlkZXNMZW5ndGggPSBpc1ZpcnR1YWwgPyBzd2lwZXIudmlydHVhbC5zbGlkZXMubGVuZ3RoIDogc2xpZGVzLmxlbmd0aDtcbiAgbGV0IHNuYXBHcmlkID0gW107XG4gIGNvbnN0IHNsaWRlc0dyaWQgPSBbXTtcbiAgY29uc3Qgc2xpZGVzU2l6ZXNHcmlkID0gW107XG4gIGxldCBvZmZzZXRCZWZvcmUgPSBwYXJhbXMuc2xpZGVzT2Zmc2V0QmVmb3JlO1xuICBpZiAodHlwZW9mIG9mZnNldEJlZm9yZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIG9mZnNldEJlZm9yZSA9IHBhcmFtcy5zbGlkZXNPZmZzZXRCZWZvcmUuY2FsbChzd2lwZXIpO1xuICB9XG4gIGxldCBvZmZzZXRBZnRlciA9IHBhcmFtcy5zbGlkZXNPZmZzZXRBZnRlcjtcbiAgaWYgKHR5cGVvZiBvZmZzZXRBZnRlciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIG9mZnNldEFmdGVyID0gcGFyYW1zLnNsaWRlc09mZnNldEFmdGVyLmNhbGwoc3dpcGVyKTtcbiAgfVxuICBjb25zdCBwcmV2aW91c1NuYXBHcmlkTGVuZ3RoID0gc3dpcGVyLnNuYXBHcmlkLmxlbmd0aDtcbiAgY29uc3QgcHJldmlvdXNTbGlkZXNHcmlkTGVuZ3RoID0gc3dpcGVyLnNsaWRlc0dyaWQubGVuZ3RoO1xuICBsZXQgc3BhY2VCZXR3ZWVuID0gcGFyYW1zLnNwYWNlQmV0d2VlbjtcbiAgbGV0IHNsaWRlUG9zaXRpb24gPSAtb2Zmc2V0QmVmb3JlO1xuICBsZXQgcHJldlNsaWRlU2l6ZSA9IDA7XG4gIGxldCBpbmRleCA9IDA7XG4gIGlmICh0eXBlb2Ygc3dpcGVyU2l6ZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKHR5cGVvZiBzcGFjZUJldHdlZW4gPT09ICdzdHJpbmcnICYmIHNwYWNlQmV0d2Vlbi5pbmRleE9mKCclJykgPj0gMCkge1xuICAgIHNwYWNlQmV0d2VlbiA9IHBhcnNlRmxvYXQoc3BhY2VCZXR3ZWVuLnJlcGxhY2UoJyUnLCAnJykpIC8gMTAwICogc3dpcGVyU2l6ZTtcbiAgfSBlbHNlIGlmICh0eXBlb2Ygc3BhY2VCZXR3ZWVuID09PSAnc3RyaW5nJykge1xuICAgIHNwYWNlQmV0d2VlbiA9IHBhcnNlRmxvYXQoc3BhY2VCZXR3ZWVuKTtcbiAgfVxuICBzd2lwZXIudmlydHVhbFNpemUgPSAtc3BhY2VCZXR3ZWVuO1xuXG4gIC8vIHJlc2V0IG1hcmdpbnNcbiAgc2xpZGVzLmZvckVhY2goc2xpZGVFbCA9PiB7XG4gICAgaWYgKHJ0bCkge1xuICAgICAgc2xpZGVFbC5zdHlsZS5tYXJnaW5MZWZ0ID0gJyc7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNsaWRlRWwuc3R5bGUubWFyZ2luUmlnaHQgPSAnJztcbiAgICB9XG4gICAgc2xpZGVFbC5zdHlsZS5tYXJnaW5Cb3R0b20gPSAnJztcbiAgICBzbGlkZUVsLnN0eWxlLm1hcmdpblRvcCA9ICcnO1xuICB9KTtcblxuICAvLyByZXNldCBjc3NNb2RlIG9mZnNldHNcbiAgaWYgKHBhcmFtcy5jZW50ZXJlZFNsaWRlcyAmJiBwYXJhbXMuY3NzTW9kZSkge1xuICAgIHNldENTU1Byb3BlcnR5KHdyYXBwZXJFbCwgJy0tc3dpcGVyLWNlbnRlcmVkLW9mZnNldC1iZWZvcmUnLCAnJyk7XG4gICAgc2V0Q1NTUHJvcGVydHkod3JhcHBlckVsLCAnLS1zd2lwZXItY2VudGVyZWQtb2Zmc2V0LWFmdGVyJywgJycpO1xuICB9XG4gIGNvbnN0IGdyaWRFbmFibGVkID0gcGFyYW1zLmdyaWQgJiYgcGFyYW1zLmdyaWQucm93cyA+IDEgJiYgc3dpcGVyLmdyaWQ7XG4gIGlmIChncmlkRW5hYmxlZCkge1xuICAgIHN3aXBlci5ncmlkLmluaXRTbGlkZXMoc2xpZGVzKTtcbiAgfSBlbHNlIGlmIChzd2lwZXIuZ3JpZCkge1xuICAgIHN3aXBlci5ncmlkLnVuc2V0U2xpZGVzKCk7XG4gIH1cblxuICAvLyBDYWxjIHNsaWRlc1xuICBsZXQgc2xpZGVTaXplO1xuICBjb25zdCBzaG91bGRSZXNldFNsaWRlU2l6ZSA9IHBhcmFtcy5zbGlkZXNQZXJWaWV3ID09PSAnYXV0bycgJiYgcGFyYW1zLmJyZWFrcG9pbnRzICYmIE9iamVjdC5rZXlzKHBhcmFtcy5icmVha3BvaW50cykuZmlsdGVyKGtleSA9PiB7XG4gICAgcmV0dXJuIHR5cGVvZiBwYXJhbXMuYnJlYWtwb2ludHNba2V5XS5zbGlkZXNQZXJWaWV3ICE9PSAndW5kZWZpbmVkJztcbiAgfSkubGVuZ3RoID4gMDtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBzbGlkZXNMZW5ndGg7IGkgKz0gMSkge1xuICAgIHNsaWRlU2l6ZSA9IDA7XG4gICAgbGV0IHNsaWRlO1xuICAgIGlmIChzbGlkZXNbaV0pIHNsaWRlID0gc2xpZGVzW2ldO1xuICAgIGlmIChncmlkRW5hYmxlZCkge1xuICAgICAgc3dpcGVyLmdyaWQudXBkYXRlU2xpZGUoaSwgc2xpZGUsIHNsaWRlcyk7XG4gICAgfVxuICAgIGlmIChzbGlkZXNbaV0gJiYgZWxlbWVudFN0eWxlKHNsaWRlLCAnZGlzcGxheScpID09PSAnbm9uZScpIGNvbnRpbnVlOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG5cbiAgICBpZiAocGFyYW1zLnNsaWRlc1BlclZpZXcgPT09ICdhdXRvJykge1xuICAgICAgaWYgKHNob3VsZFJlc2V0U2xpZGVTaXplKSB7XG4gICAgICAgIHNsaWRlc1tpXS5zdHlsZVtzd2lwZXIuZ2V0RGlyZWN0aW9uTGFiZWwoJ3dpZHRoJyldID0gYGA7XG4gICAgICB9XG4gICAgICBjb25zdCBzbGlkZVN0eWxlcyA9IGdldENvbXB1dGVkU3R5bGUoc2xpZGUpO1xuICAgICAgY29uc3QgY3VycmVudFRyYW5zZm9ybSA9IHNsaWRlLnN0eWxlLnRyYW5zZm9ybTtcbiAgICAgIGNvbnN0IGN1cnJlbnRXZWJLaXRUcmFuc2Zvcm0gPSBzbGlkZS5zdHlsZS53ZWJraXRUcmFuc2Zvcm07XG4gICAgICBpZiAoY3VycmVudFRyYW5zZm9ybSkge1xuICAgICAgICBzbGlkZS5zdHlsZS50cmFuc2Zvcm0gPSAnbm9uZSc7XG4gICAgICB9XG4gICAgICBpZiAoY3VycmVudFdlYktpdFRyYW5zZm9ybSkge1xuICAgICAgICBzbGlkZS5zdHlsZS53ZWJraXRUcmFuc2Zvcm0gPSAnbm9uZSc7XG4gICAgICB9XG4gICAgICBpZiAocGFyYW1zLnJvdW5kTGVuZ3Rocykge1xuICAgICAgICBzbGlkZVNpemUgPSBzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyBlbGVtZW50T3V0ZXJTaXplKHNsaWRlLCAnd2lkdGgnLCB0cnVlKSA6IGVsZW1lbnRPdXRlclNpemUoc2xpZGUsICdoZWlnaHQnLCB0cnVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgICAgICBjb25zdCB3aWR0aCA9IGdldERpcmVjdGlvblByb3BlcnR5VmFsdWUoc2xpZGVTdHlsZXMsICd3aWR0aCcpO1xuICAgICAgICBjb25zdCBwYWRkaW5nTGVmdCA9IGdldERpcmVjdGlvblByb3BlcnR5VmFsdWUoc2xpZGVTdHlsZXMsICdwYWRkaW5nLWxlZnQnKTtcbiAgICAgICAgY29uc3QgcGFkZGluZ1JpZ2h0ID0gZ2V0RGlyZWN0aW9uUHJvcGVydHlWYWx1ZShzbGlkZVN0eWxlcywgJ3BhZGRpbmctcmlnaHQnKTtcbiAgICAgICAgY29uc3QgbWFyZ2luTGVmdCA9IGdldERpcmVjdGlvblByb3BlcnR5VmFsdWUoc2xpZGVTdHlsZXMsICdtYXJnaW4tbGVmdCcpO1xuICAgICAgICBjb25zdCBtYXJnaW5SaWdodCA9IGdldERpcmVjdGlvblByb3BlcnR5VmFsdWUoc2xpZGVTdHlsZXMsICdtYXJnaW4tcmlnaHQnKTtcbiAgICAgICAgY29uc3QgYm94U2l6aW5nID0gc2xpZGVTdHlsZXMuZ2V0UHJvcGVydHlWYWx1ZSgnYm94LXNpemluZycpO1xuICAgICAgICBpZiAoYm94U2l6aW5nICYmIGJveFNpemluZyA9PT0gJ2JvcmRlci1ib3gnKSB7XG4gICAgICAgICAgc2xpZGVTaXplID0gd2lkdGggKyBtYXJnaW5MZWZ0ICsgbWFyZ2luUmlnaHQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgY2xpZW50V2lkdGgsXG4gICAgICAgICAgICBvZmZzZXRXaWR0aFxuICAgICAgICAgIH0gPSBzbGlkZTtcbiAgICAgICAgICBzbGlkZVNpemUgPSB3aWR0aCArIHBhZGRpbmdMZWZ0ICsgcGFkZGluZ1JpZ2h0ICsgbWFyZ2luTGVmdCArIG1hcmdpblJpZ2h0ICsgKG9mZnNldFdpZHRoIC0gY2xpZW50V2lkdGgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoY3VycmVudFRyYW5zZm9ybSkge1xuICAgICAgICBzbGlkZS5zdHlsZS50cmFuc2Zvcm0gPSBjdXJyZW50VHJhbnNmb3JtO1xuICAgICAgfVxuICAgICAgaWYgKGN1cnJlbnRXZWJLaXRUcmFuc2Zvcm0pIHtcbiAgICAgICAgc2xpZGUuc3R5bGUud2Via2l0VHJhbnNmb3JtID0gY3VycmVudFdlYktpdFRyYW5zZm9ybTtcbiAgICAgIH1cbiAgICAgIGlmIChwYXJhbXMucm91bmRMZW5ndGhzKSBzbGlkZVNpemUgPSBNYXRoLmZsb29yKHNsaWRlU2l6ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNsaWRlU2l6ZSA9IChzd2lwZXJTaXplIC0gKHBhcmFtcy5zbGlkZXNQZXJWaWV3IC0gMSkgKiBzcGFjZUJldHdlZW4pIC8gcGFyYW1zLnNsaWRlc1BlclZpZXc7XG4gICAgICBpZiAocGFyYW1zLnJvdW5kTGVuZ3Rocykgc2xpZGVTaXplID0gTWF0aC5mbG9vcihzbGlkZVNpemUpO1xuICAgICAgaWYgKHNsaWRlc1tpXSkge1xuICAgICAgICBzbGlkZXNbaV0uc3R5bGVbc3dpcGVyLmdldERpcmVjdGlvbkxhYmVsKCd3aWR0aCcpXSA9IGAke3NsaWRlU2l6ZX1weGA7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChzbGlkZXNbaV0pIHtcbiAgICAgIHNsaWRlc1tpXS5zd2lwZXJTbGlkZVNpemUgPSBzbGlkZVNpemU7XG4gICAgfVxuICAgIHNsaWRlc1NpemVzR3JpZC5wdXNoKHNsaWRlU2l6ZSk7XG4gICAgaWYgKHBhcmFtcy5jZW50ZXJlZFNsaWRlcykge1xuICAgICAgc2xpZGVQb3NpdGlvbiA9IHNsaWRlUG9zaXRpb24gKyBzbGlkZVNpemUgLyAyICsgcHJldlNsaWRlU2l6ZSAvIDIgKyBzcGFjZUJldHdlZW47XG4gICAgICBpZiAocHJldlNsaWRlU2l6ZSA9PT0gMCAmJiBpICE9PSAwKSBzbGlkZVBvc2l0aW9uID0gc2xpZGVQb3NpdGlvbiAtIHN3aXBlclNpemUgLyAyIC0gc3BhY2VCZXR3ZWVuO1xuICAgICAgaWYgKGkgPT09IDApIHNsaWRlUG9zaXRpb24gPSBzbGlkZVBvc2l0aW9uIC0gc3dpcGVyU2l6ZSAvIDIgLSBzcGFjZUJldHdlZW47XG4gICAgICBpZiAoTWF0aC5hYnMoc2xpZGVQb3NpdGlvbikgPCAxIC8gMTAwMCkgc2xpZGVQb3NpdGlvbiA9IDA7XG4gICAgICBpZiAocGFyYW1zLnJvdW5kTGVuZ3Rocykgc2xpZGVQb3NpdGlvbiA9IE1hdGguZmxvb3Ioc2xpZGVQb3NpdGlvbik7XG4gICAgICBpZiAoaW5kZXggJSBwYXJhbXMuc2xpZGVzUGVyR3JvdXAgPT09IDApIHNuYXBHcmlkLnB1c2goc2xpZGVQb3NpdGlvbik7XG4gICAgICBzbGlkZXNHcmlkLnB1c2goc2xpZGVQb3NpdGlvbik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChwYXJhbXMucm91bmRMZW5ndGhzKSBzbGlkZVBvc2l0aW9uID0gTWF0aC5mbG9vcihzbGlkZVBvc2l0aW9uKTtcbiAgICAgIGlmICgoaW5kZXggLSBNYXRoLm1pbihzd2lwZXIucGFyYW1zLnNsaWRlc1Blckdyb3VwU2tpcCwgaW5kZXgpKSAlIHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyR3JvdXAgPT09IDApIHNuYXBHcmlkLnB1c2goc2xpZGVQb3NpdGlvbik7XG4gICAgICBzbGlkZXNHcmlkLnB1c2goc2xpZGVQb3NpdGlvbik7XG4gICAgICBzbGlkZVBvc2l0aW9uID0gc2xpZGVQb3NpdGlvbiArIHNsaWRlU2l6ZSArIHNwYWNlQmV0d2VlbjtcbiAgICB9XG4gICAgc3dpcGVyLnZpcnR1YWxTaXplICs9IHNsaWRlU2l6ZSArIHNwYWNlQmV0d2VlbjtcbiAgICBwcmV2U2xpZGVTaXplID0gc2xpZGVTaXplO1xuICAgIGluZGV4ICs9IDE7XG4gIH1cbiAgc3dpcGVyLnZpcnR1YWxTaXplID0gTWF0aC5tYXgoc3dpcGVyLnZpcnR1YWxTaXplLCBzd2lwZXJTaXplKSArIG9mZnNldEFmdGVyO1xuICBpZiAocnRsICYmIHdyb25nUlRMICYmIChwYXJhbXMuZWZmZWN0ID09PSAnc2xpZGUnIHx8IHBhcmFtcy5lZmZlY3QgPT09ICdjb3ZlcmZsb3cnKSkge1xuICAgIHdyYXBwZXJFbC5zdHlsZS53aWR0aCA9IGAke3N3aXBlci52aXJ0dWFsU2l6ZSArIHNwYWNlQmV0d2Vlbn1weGA7XG4gIH1cbiAgaWYgKHBhcmFtcy5zZXRXcmFwcGVyU2l6ZSkge1xuICAgIHdyYXBwZXJFbC5zdHlsZVtzd2lwZXIuZ2V0RGlyZWN0aW9uTGFiZWwoJ3dpZHRoJyldID0gYCR7c3dpcGVyLnZpcnR1YWxTaXplICsgc3BhY2VCZXR3ZWVufXB4YDtcbiAgfVxuICBpZiAoZ3JpZEVuYWJsZWQpIHtcbiAgICBzd2lwZXIuZ3JpZC51cGRhdGVXcmFwcGVyU2l6ZShzbGlkZVNpemUsIHNuYXBHcmlkKTtcbiAgfVxuXG4gIC8vIFJlbW92ZSBsYXN0IGdyaWQgZWxlbWVudHMgZGVwZW5kaW5nIG9uIHdpZHRoXG4gIGlmICghcGFyYW1zLmNlbnRlcmVkU2xpZGVzKSB7XG4gICAgY29uc3QgbmV3U2xpZGVzR3JpZCA9IFtdO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc25hcEdyaWQubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIGxldCBzbGlkZXNHcmlkSXRlbSA9IHNuYXBHcmlkW2ldO1xuICAgICAgaWYgKHBhcmFtcy5yb3VuZExlbmd0aHMpIHNsaWRlc0dyaWRJdGVtID0gTWF0aC5mbG9vcihzbGlkZXNHcmlkSXRlbSk7XG4gICAgICBpZiAoc25hcEdyaWRbaV0gPD0gc3dpcGVyLnZpcnR1YWxTaXplIC0gc3dpcGVyU2l6ZSkge1xuICAgICAgICBuZXdTbGlkZXNHcmlkLnB1c2goc2xpZGVzR3JpZEl0ZW0pO1xuICAgICAgfVxuICAgIH1cbiAgICBzbmFwR3JpZCA9IG5ld1NsaWRlc0dyaWQ7XG4gICAgaWYgKE1hdGguZmxvb3Ioc3dpcGVyLnZpcnR1YWxTaXplIC0gc3dpcGVyU2l6ZSkgLSBNYXRoLmZsb29yKHNuYXBHcmlkW3NuYXBHcmlkLmxlbmd0aCAtIDFdKSA+IDEpIHtcbiAgICAgIHNuYXBHcmlkLnB1c2goc3dpcGVyLnZpcnR1YWxTaXplIC0gc3dpcGVyU2l6ZSk7XG4gICAgfVxuICB9XG4gIGlmIChpc1ZpcnR1YWwgJiYgcGFyYW1zLmxvb3ApIHtcbiAgICBjb25zdCBzaXplID0gc2xpZGVzU2l6ZXNHcmlkWzBdICsgc3BhY2VCZXR3ZWVuO1xuICAgIGlmIChwYXJhbXMuc2xpZGVzUGVyR3JvdXAgPiAxKSB7XG4gICAgICBjb25zdCBncm91cHMgPSBNYXRoLmNlaWwoKHN3aXBlci52aXJ0dWFsLnNsaWRlc0JlZm9yZSArIHN3aXBlci52aXJ0dWFsLnNsaWRlc0FmdGVyKSAvIHBhcmFtcy5zbGlkZXNQZXJHcm91cCk7XG4gICAgICBjb25zdCBncm91cFNpemUgPSBzaXplICogcGFyYW1zLnNsaWRlc1Blckdyb3VwO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBncm91cHM7IGkgKz0gMSkge1xuICAgICAgICBzbmFwR3JpZC5wdXNoKHNuYXBHcmlkW3NuYXBHcmlkLmxlbmd0aCAtIDFdICsgZ3JvdXBTaXplKTtcbiAgICAgIH1cbiAgICB9XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzd2lwZXIudmlydHVhbC5zbGlkZXNCZWZvcmUgKyBzd2lwZXIudmlydHVhbC5zbGlkZXNBZnRlcjsgaSArPSAxKSB7XG4gICAgICBpZiAocGFyYW1zLnNsaWRlc1Blckdyb3VwID09PSAxKSB7XG4gICAgICAgIHNuYXBHcmlkLnB1c2goc25hcEdyaWRbc25hcEdyaWQubGVuZ3RoIC0gMV0gKyBzaXplKTtcbiAgICAgIH1cbiAgICAgIHNsaWRlc0dyaWQucHVzaChzbGlkZXNHcmlkW3NsaWRlc0dyaWQubGVuZ3RoIC0gMV0gKyBzaXplKTtcbiAgICAgIHN3aXBlci52aXJ0dWFsU2l6ZSArPSBzaXplO1xuICAgIH1cbiAgfVxuICBpZiAoc25hcEdyaWQubGVuZ3RoID09PSAwKSBzbmFwR3JpZCA9IFswXTtcbiAgaWYgKHNwYWNlQmV0d2VlbiAhPT0gMCkge1xuICAgIGNvbnN0IGtleSA9IHN3aXBlci5pc0hvcml6b250YWwoKSAmJiBydGwgPyAnbWFyZ2luTGVmdCcgOiBzd2lwZXIuZ2V0RGlyZWN0aW9uTGFiZWwoJ21hcmdpblJpZ2h0Jyk7XG4gICAgc2xpZGVzLmZpbHRlcigoXywgc2xpZGVJbmRleCkgPT4ge1xuICAgICAgaWYgKCFwYXJhbXMuY3NzTW9kZSB8fCBwYXJhbXMubG9vcCkgcmV0dXJuIHRydWU7XG4gICAgICBpZiAoc2xpZGVJbmRleCA9PT0gc2xpZGVzLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSkuZm9yRWFjaChzbGlkZUVsID0+IHtcbiAgICAgIHNsaWRlRWwuc3R5bGVba2V5XSA9IGAke3NwYWNlQmV0d2Vlbn1weGA7XG4gICAgfSk7XG4gIH1cbiAgaWYgKHBhcmFtcy5jZW50ZXJlZFNsaWRlcyAmJiBwYXJhbXMuY2VudGVyZWRTbGlkZXNCb3VuZHMpIHtcbiAgICBsZXQgYWxsU2xpZGVzU2l6ZSA9IDA7XG4gICAgc2xpZGVzU2l6ZXNHcmlkLmZvckVhY2goc2xpZGVTaXplVmFsdWUgPT4ge1xuICAgICAgYWxsU2xpZGVzU2l6ZSArPSBzbGlkZVNpemVWYWx1ZSArIChzcGFjZUJldHdlZW4gfHwgMCk7XG4gICAgfSk7XG4gICAgYWxsU2xpZGVzU2l6ZSAtPSBzcGFjZUJldHdlZW47XG4gICAgY29uc3QgbWF4U25hcCA9IGFsbFNsaWRlc1NpemUgLSBzd2lwZXJTaXplO1xuICAgIHNuYXBHcmlkID0gc25hcEdyaWQubWFwKHNuYXAgPT4ge1xuICAgICAgaWYgKHNuYXAgPD0gMCkgcmV0dXJuIC1vZmZzZXRCZWZvcmU7XG4gICAgICBpZiAoc25hcCA+IG1heFNuYXApIHJldHVybiBtYXhTbmFwICsgb2Zmc2V0QWZ0ZXI7XG4gICAgICByZXR1cm4gc25hcDtcbiAgICB9KTtcbiAgfVxuICBpZiAocGFyYW1zLmNlbnRlckluc3VmZmljaWVudFNsaWRlcykge1xuICAgIGxldCBhbGxTbGlkZXNTaXplID0gMDtcbiAgICBzbGlkZXNTaXplc0dyaWQuZm9yRWFjaChzbGlkZVNpemVWYWx1ZSA9PiB7XG4gICAgICBhbGxTbGlkZXNTaXplICs9IHNsaWRlU2l6ZVZhbHVlICsgKHNwYWNlQmV0d2VlbiB8fCAwKTtcbiAgICB9KTtcbiAgICBhbGxTbGlkZXNTaXplIC09IHNwYWNlQmV0d2VlbjtcbiAgICBjb25zdCBvZmZzZXRTaXplID0gKHBhcmFtcy5zbGlkZXNPZmZzZXRCZWZvcmUgfHwgMCkgKyAocGFyYW1zLnNsaWRlc09mZnNldEFmdGVyIHx8IDApO1xuICAgIGlmIChhbGxTbGlkZXNTaXplICsgb2Zmc2V0U2l6ZSA8IHN3aXBlclNpemUpIHtcbiAgICAgIGNvbnN0IGFsbFNsaWRlc09mZnNldCA9IChzd2lwZXJTaXplIC0gYWxsU2xpZGVzU2l6ZSAtIG9mZnNldFNpemUpIC8gMjtcbiAgICAgIHNuYXBHcmlkLmZvckVhY2goKHNuYXAsIHNuYXBJbmRleCkgPT4ge1xuICAgICAgICBzbmFwR3JpZFtzbmFwSW5kZXhdID0gc25hcCAtIGFsbFNsaWRlc09mZnNldDtcbiAgICAgIH0pO1xuICAgICAgc2xpZGVzR3JpZC5mb3JFYWNoKChzbmFwLCBzbmFwSW5kZXgpID0+IHtcbiAgICAgICAgc2xpZGVzR3JpZFtzbmFwSW5kZXhdID0gc25hcCArIGFsbFNsaWRlc09mZnNldDtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuICBPYmplY3QuYXNzaWduKHN3aXBlciwge1xuICAgIHNsaWRlcyxcbiAgICBzbmFwR3JpZCxcbiAgICBzbGlkZXNHcmlkLFxuICAgIHNsaWRlc1NpemVzR3JpZFxuICB9KTtcbiAgaWYgKHBhcmFtcy5jZW50ZXJlZFNsaWRlcyAmJiBwYXJhbXMuY3NzTW9kZSAmJiAhcGFyYW1zLmNlbnRlcmVkU2xpZGVzQm91bmRzKSB7XG4gICAgc2V0Q1NTUHJvcGVydHkod3JhcHBlckVsLCAnLS1zd2lwZXItY2VudGVyZWQtb2Zmc2V0LWJlZm9yZScsIGAkey1zbmFwR3JpZFswXX1weGApO1xuICAgIHNldENTU1Byb3BlcnR5KHdyYXBwZXJFbCwgJy0tc3dpcGVyLWNlbnRlcmVkLW9mZnNldC1hZnRlcicsIGAke3N3aXBlci5zaXplIC8gMiAtIHNsaWRlc1NpemVzR3JpZFtzbGlkZXNTaXplc0dyaWQubGVuZ3RoIC0gMV0gLyAyfXB4YCk7XG4gICAgY29uc3QgYWRkVG9TbmFwR3JpZCA9IC1zd2lwZXIuc25hcEdyaWRbMF07XG4gICAgY29uc3QgYWRkVG9TbGlkZXNHcmlkID0gLXN3aXBlci5zbGlkZXNHcmlkWzBdO1xuICAgIHN3aXBlci5zbmFwR3JpZCA9IHN3aXBlci5zbmFwR3JpZC5tYXAodiA9PiB2ICsgYWRkVG9TbmFwR3JpZCk7XG4gICAgc3dpcGVyLnNsaWRlc0dyaWQgPSBzd2lwZXIuc2xpZGVzR3JpZC5tYXAodiA9PiB2ICsgYWRkVG9TbGlkZXNHcmlkKTtcbiAgfVxuICBpZiAoc2xpZGVzTGVuZ3RoICE9PSBwcmV2aW91c1NsaWRlc0xlbmd0aCkge1xuICAgIHN3aXBlci5lbWl0KCdzbGlkZXNMZW5ndGhDaGFuZ2UnKTtcbiAgfVxuICBpZiAoc25hcEdyaWQubGVuZ3RoICE9PSBwcmV2aW91c1NuYXBHcmlkTGVuZ3RoKSB7XG4gICAgaWYgKHN3aXBlci5wYXJhbXMud2F0Y2hPdmVyZmxvdykgc3dpcGVyLmNoZWNrT3ZlcmZsb3coKTtcbiAgICBzd2lwZXIuZW1pdCgnc25hcEdyaWRMZW5ndGhDaGFuZ2UnKTtcbiAgfVxuICBpZiAoc2xpZGVzR3JpZC5sZW5ndGggIT09IHByZXZpb3VzU2xpZGVzR3JpZExlbmd0aCkge1xuICAgIHN3aXBlci5lbWl0KCdzbGlkZXNHcmlkTGVuZ3RoQ2hhbmdlJyk7XG4gIH1cbiAgaWYgKHBhcmFtcy53YXRjaFNsaWRlc1Byb2dyZXNzKSB7XG4gICAgc3dpcGVyLnVwZGF0ZVNsaWRlc09mZnNldCgpO1xuICB9XG4gIHN3aXBlci5lbWl0KCdzbGlkZXNVcGRhdGVkJyk7XG4gIGlmICghaXNWaXJ0dWFsICYmICFwYXJhbXMuY3NzTW9kZSAmJiAocGFyYW1zLmVmZmVjdCA9PT0gJ3NsaWRlJyB8fCBwYXJhbXMuZWZmZWN0ID09PSAnZmFkZScpKSB7XG4gICAgY29uc3QgYmFja0ZhY2VIaWRkZW5DbGFzcyA9IGAke3BhcmFtcy5jb250YWluZXJNb2RpZmllckNsYXNzfWJhY2tmYWNlLWhpZGRlbmA7XG4gICAgY29uc3QgaGFzQ2xhc3NCYWNrZmFjZUNsYXNzQWRkZWQgPSBzd2lwZXIuZWwuY2xhc3NMaXN0LmNvbnRhaW5zKGJhY2tGYWNlSGlkZGVuQ2xhc3MpO1xuICAgIGlmIChzbGlkZXNMZW5ndGggPD0gcGFyYW1zLm1heEJhY2tmYWNlSGlkZGVuU2xpZGVzKSB7XG4gICAgICBpZiAoIWhhc0NsYXNzQmFja2ZhY2VDbGFzc0FkZGVkKSBzd2lwZXIuZWwuY2xhc3NMaXN0LmFkZChiYWNrRmFjZUhpZGRlbkNsYXNzKTtcbiAgICB9IGVsc2UgaWYgKGhhc0NsYXNzQmFja2ZhY2VDbGFzc0FkZGVkKSB7XG4gICAgICBzd2lwZXIuZWwuY2xhc3NMaXN0LnJlbW92ZShiYWNrRmFjZUhpZGRlbkNsYXNzKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gdXBkYXRlQXV0b0hlaWdodChzcGVlZCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCBhY3RpdmVTbGlkZXMgPSBbXTtcbiAgY29uc3QgaXNWaXJ0dWFsID0gc3dpcGVyLnZpcnR1YWwgJiYgc3dpcGVyLnBhcmFtcy52aXJ0dWFsLmVuYWJsZWQ7XG4gIGxldCBuZXdIZWlnaHQgPSAwO1xuICBsZXQgaTtcbiAgaWYgKHR5cGVvZiBzcGVlZCA9PT0gJ251bWJlcicpIHtcbiAgICBzd2lwZXIuc2V0VHJhbnNpdGlvbihzcGVlZCk7XG4gIH0gZWxzZSBpZiAoc3BlZWQgPT09IHRydWUpIHtcbiAgICBzd2lwZXIuc2V0VHJhbnNpdGlvbihzd2lwZXIucGFyYW1zLnNwZWVkKTtcbiAgfVxuICBjb25zdCBnZXRTbGlkZUJ5SW5kZXggPSBpbmRleCA9PiB7XG4gICAgaWYgKGlzVmlydHVhbCkge1xuICAgICAgcmV0dXJuIHN3aXBlci5zbGlkZXNbc3dpcGVyLmdldFNsaWRlSW5kZXhCeURhdGEoaW5kZXgpXTtcbiAgICB9XG4gICAgcmV0dXJuIHN3aXBlci5zbGlkZXNbaW5kZXhdO1xuICB9O1xuICAvLyBGaW5kIHNsaWRlcyBjdXJyZW50bHkgaW4gdmlld1xuICBpZiAoc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJWaWV3ICE9PSAnYXV0bycgJiYgc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJWaWV3ID4gMSkge1xuICAgIGlmIChzd2lwZXIucGFyYW1zLmNlbnRlcmVkU2xpZGVzKSB7XG4gICAgICAoc3dpcGVyLnZpc2libGVTbGlkZXMgfHwgW10pLmZvckVhY2goc2xpZGUgPT4ge1xuICAgICAgICBhY3RpdmVTbGlkZXMucHVzaChzbGlkZSk7XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgZm9yIChpID0gMDsgaSA8IE1hdGguY2VpbChzd2lwZXIucGFyYW1zLnNsaWRlc1BlclZpZXcpOyBpICs9IDEpIHtcbiAgICAgICAgY29uc3QgaW5kZXggPSBzd2lwZXIuYWN0aXZlSW5kZXggKyBpO1xuICAgICAgICBpZiAoaW5kZXggPiBzd2lwZXIuc2xpZGVzLmxlbmd0aCAmJiAhaXNWaXJ0dWFsKSBicmVhaztcbiAgICAgICAgYWN0aXZlU2xpZGVzLnB1c2goZ2V0U2xpZGVCeUluZGV4KGluZGV4KSk7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGFjdGl2ZVNsaWRlcy5wdXNoKGdldFNsaWRlQnlJbmRleChzd2lwZXIuYWN0aXZlSW5kZXgpKTtcbiAgfVxuXG4gIC8vIEZpbmQgbmV3IGhlaWdodCBmcm9tIGhpZ2hlc3Qgc2xpZGUgaW4gdmlld1xuICBmb3IgKGkgPSAwOyBpIDwgYWN0aXZlU2xpZGVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgaWYgKHR5cGVvZiBhY3RpdmVTbGlkZXNbaV0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBjb25zdCBoZWlnaHQgPSBhY3RpdmVTbGlkZXNbaV0ub2Zmc2V0SGVpZ2h0O1xuICAgICAgbmV3SGVpZ2h0ID0gaGVpZ2h0ID4gbmV3SGVpZ2h0ID8gaGVpZ2h0IDogbmV3SGVpZ2h0O1xuICAgIH1cbiAgfVxuXG4gIC8vIFVwZGF0ZSBIZWlnaHRcbiAgaWYgKG5ld0hlaWdodCB8fCBuZXdIZWlnaHQgPT09IDApIHN3aXBlci53cmFwcGVyRWwuc3R5bGUuaGVpZ2h0ID0gYCR7bmV3SGVpZ2h0fXB4YDtcbn1cblxuZnVuY3Rpb24gdXBkYXRlU2xpZGVzT2Zmc2V0KCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCBzbGlkZXMgPSBzd2lwZXIuc2xpZGVzO1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgY29uc3QgbWludXNPZmZzZXQgPSBzd2lwZXIuaXNFbGVtZW50ID8gc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gc3dpcGVyLndyYXBwZXJFbC5vZmZzZXRMZWZ0IDogc3dpcGVyLndyYXBwZXJFbC5vZmZzZXRUb3AgOiAwO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHNsaWRlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIHNsaWRlc1tpXS5zd2lwZXJTbGlkZU9mZnNldCA9IChzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyBzbGlkZXNbaV0ub2Zmc2V0TGVmdCA6IHNsaWRlc1tpXS5vZmZzZXRUb3ApIC0gbWludXNPZmZzZXQgLSBzd2lwZXIuY3NzT3ZlcmZsb3dBZGp1c3RtZW50KCk7XG4gIH1cbn1cblxuY29uc3QgdG9nZ2xlU2xpZGVDbGFzc2VzJDEgPSAoc2xpZGVFbCwgY29uZGl0aW9uLCBjbGFzc05hbWUpID0+IHtcbiAgaWYgKGNvbmRpdGlvbiAmJiAhc2xpZGVFbC5jbGFzc0xpc3QuY29udGFpbnMoY2xhc3NOYW1lKSkge1xuICAgIHNsaWRlRWwuY2xhc3NMaXN0LmFkZChjbGFzc05hbWUpO1xuICB9IGVsc2UgaWYgKCFjb25kaXRpb24gJiYgc2xpZGVFbC5jbGFzc0xpc3QuY29udGFpbnMoY2xhc3NOYW1lKSkge1xuICAgIHNsaWRlRWwuY2xhc3NMaXN0LnJlbW92ZShjbGFzc05hbWUpO1xuICB9XG59O1xuZnVuY3Rpb24gdXBkYXRlU2xpZGVzUHJvZ3Jlc3ModHJhbnNsYXRlKSB7XG4gIGlmICh0cmFuc2xhdGUgPT09IHZvaWQgMCkge1xuICAgIHRyYW5zbGF0ZSA9IHRoaXMgJiYgdGhpcy50cmFuc2xhdGUgfHwgMDtcbiAgfVxuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCBwYXJhbXMgPSBzd2lwZXIucGFyYW1zO1xuICBjb25zdCB7XG4gICAgc2xpZGVzLFxuICAgIHJ0bFRyYW5zbGF0ZTogcnRsLFxuICAgIHNuYXBHcmlkXG4gIH0gPSBzd2lwZXI7XG4gIGlmIChzbGlkZXMubGVuZ3RoID09PSAwKSByZXR1cm47XG4gIGlmICh0eXBlb2Ygc2xpZGVzWzBdLnN3aXBlclNsaWRlT2Zmc2V0ID09PSAndW5kZWZpbmVkJykgc3dpcGVyLnVwZGF0ZVNsaWRlc09mZnNldCgpO1xuICBsZXQgb2Zmc2V0Q2VudGVyID0gLXRyYW5zbGF0ZTtcbiAgaWYgKHJ0bCkgb2Zmc2V0Q2VudGVyID0gdHJhbnNsYXRlO1xuICBzd2lwZXIudmlzaWJsZVNsaWRlc0luZGV4ZXMgPSBbXTtcbiAgc3dpcGVyLnZpc2libGVTbGlkZXMgPSBbXTtcbiAgbGV0IHNwYWNlQmV0d2VlbiA9IHBhcmFtcy5zcGFjZUJldHdlZW47XG4gIGlmICh0eXBlb2Ygc3BhY2VCZXR3ZWVuID09PSAnc3RyaW5nJyAmJiBzcGFjZUJldHdlZW4uaW5kZXhPZignJScpID49IDApIHtcbiAgICBzcGFjZUJldHdlZW4gPSBwYXJzZUZsb2F0KHNwYWNlQmV0d2Vlbi5yZXBsYWNlKCclJywgJycpKSAvIDEwMCAqIHN3aXBlci5zaXplO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBzcGFjZUJldHdlZW4gPT09ICdzdHJpbmcnKSB7XG4gICAgc3BhY2VCZXR3ZWVuID0gcGFyc2VGbG9hdChzcGFjZUJldHdlZW4pO1xuICB9XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgc2xpZGVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgY29uc3Qgc2xpZGUgPSBzbGlkZXNbaV07XG4gICAgbGV0IHNsaWRlT2Zmc2V0ID0gc2xpZGUuc3dpcGVyU2xpZGVPZmZzZXQ7XG4gICAgaWYgKHBhcmFtcy5jc3NNb2RlICYmIHBhcmFtcy5jZW50ZXJlZFNsaWRlcykge1xuICAgICAgc2xpZGVPZmZzZXQgLT0gc2xpZGVzWzBdLnN3aXBlclNsaWRlT2Zmc2V0O1xuICAgIH1cbiAgICBjb25zdCBzbGlkZVByb2dyZXNzID0gKG9mZnNldENlbnRlciArIChwYXJhbXMuY2VudGVyZWRTbGlkZXMgPyBzd2lwZXIubWluVHJhbnNsYXRlKCkgOiAwKSAtIHNsaWRlT2Zmc2V0KSAvIChzbGlkZS5zd2lwZXJTbGlkZVNpemUgKyBzcGFjZUJldHdlZW4pO1xuICAgIGNvbnN0IG9yaWdpbmFsU2xpZGVQcm9ncmVzcyA9IChvZmZzZXRDZW50ZXIgLSBzbmFwR3JpZFswXSArIChwYXJhbXMuY2VudGVyZWRTbGlkZXMgPyBzd2lwZXIubWluVHJhbnNsYXRlKCkgOiAwKSAtIHNsaWRlT2Zmc2V0KSAvIChzbGlkZS5zd2lwZXJTbGlkZVNpemUgKyBzcGFjZUJldHdlZW4pO1xuICAgIGNvbnN0IHNsaWRlQmVmb3JlID0gLShvZmZzZXRDZW50ZXIgLSBzbGlkZU9mZnNldCk7XG4gICAgY29uc3Qgc2xpZGVBZnRlciA9IHNsaWRlQmVmb3JlICsgc3dpcGVyLnNsaWRlc1NpemVzR3JpZFtpXTtcbiAgICBjb25zdCBpc0Z1bGx5VmlzaWJsZSA9IHNsaWRlQmVmb3JlID49IDAgJiYgc2xpZGVCZWZvcmUgPD0gc3dpcGVyLnNpemUgLSBzd2lwZXIuc2xpZGVzU2l6ZXNHcmlkW2ldO1xuICAgIGNvbnN0IGlzVmlzaWJsZSA9IHNsaWRlQmVmb3JlID49IDAgJiYgc2xpZGVCZWZvcmUgPCBzd2lwZXIuc2l6ZSAtIDEgfHwgc2xpZGVBZnRlciA+IDEgJiYgc2xpZGVBZnRlciA8PSBzd2lwZXIuc2l6ZSB8fCBzbGlkZUJlZm9yZSA8PSAwICYmIHNsaWRlQWZ0ZXIgPj0gc3dpcGVyLnNpemU7XG4gICAgaWYgKGlzVmlzaWJsZSkge1xuICAgICAgc3dpcGVyLnZpc2libGVTbGlkZXMucHVzaChzbGlkZSk7XG4gICAgICBzd2lwZXIudmlzaWJsZVNsaWRlc0luZGV4ZXMucHVzaChpKTtcbiAgICB9XG4gICAgdG9nZ2xlU2xpZGVDbGFzc2VzJDEoc2xpZGUsIGlzVmlzaWJsZSwgcGFyYW1zLnNsaWRlVmlzaWJsZUNsYXNzKTtcbiAgICB0b2dnbGVTbGlkZUNsYXNzZXMkMShzbGlkZSwgaXNGdWxseVZpc2libGUsIHBhcmFtcy5zbGlkZUZ1bGx5VmlzaWJsZUNsYXNzKTtcbiAgICBzbGlkZS5wcm9ncmVzcyA9IHJ0bCA/IC1zbGlkZVByb2dyZXNzIDogc2xpZGVQcm9ncmVzcztcbiAgICBzbGlkZS5vcmlnaW5hbFByb2dyZXNzID0gcnRsID8gLW9yaWdpbmFsU2xpZGVQcm9ncmVzcyA6IG9yaWdpbmFsU2xpZGVQcm9ncmVzcztcbiAgfVxufVxuXG5mdW5jdGlvbiB1cGRhdGVQcm9ncmVzcyh0cmFuc2xhdGUpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgaWYgKHR5cGVvZiB0cmFuc2xhdGUgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgY29uc3QgbXVsdGlwbGllciA9IHN3aXBlci5ydGxUcmFuc2xhdGUgPyAtMSA6IDE7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgdHJhbnNsYXRlID0gc3dpcGVyICYmIHN3aXBlci50cmFuc2xhdGUgJiYgc3dpcGVyLnRyYW5zbGF0ZSAqIG11bHRpcGxpZXIgfHwgMDtcbiAgfVxuICBjb25zdCBwYXJhbXMgPSBzd2lwZXIucGFyYW1zO1xuICBjb25zdCB0cmFuc2xhdGVzRGlmZiA9IHN3aXBlci5tYXhUcmFuc2xhdGUoKSAtIHN3aXBlci5taW5UcmFuc2xhdGUoKTtcbiAgbGV0IHtcbiAgICBwcm9ncmVzcyxcbiAgICBpc0JlZ2lubmluZyxcbiAgICBpc0VuZCxcbiAgICBwcm9ncmVzc0xvb3BcbiAgfSA9IHN3aXBlcjtcbiAgY29uc3Qgd2FzQmVnaW5uaW5nID0gaXNCZWdpbm5pbmc7XG4gIGNvbnN0IHdhc0VuZCA9IGlzRW5kO1xuICBpZiAodHJhbnNsYXRlc0RpZmYgPT09IDApIHtcbiAgICBwcm9ncmVzcyA9IDA7XG4gICAgaXNCZWdpbm5pbmcgPSB0cnVlO1xuICAgIGlzRW5kID0gdHJ1ZTtcbiAgfSBlbHNlIHtcbiAgICBwcm9ncmVzcyA9ICh0cmFuc2xhdGUgLSBzd2lwZXIubWluVHJhbnNsYXRlKCkpIC8gdHJhbnNsYXRlc0RpZmY7XG4gICAgY29uc3QgaXNCZWdpbm5pbmdSb3VuZGVkID0gTWF0aC5hYnModHJhbnNsYXRlIC0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpKSA8IDE7XG4gICAgY29uc3QgaXNFbmRSb3VuZGVkID0gTWF0aC5hYnModHJhbnNsYXRlIC0gc3dpcGVyLm1heFRyYW5zbGF0ZSgpKSA8IDE7XG4gICAgaXNCZWdpbm5pbmcgPSBpc0JlZ2lubmluZ1JvdW5kZWQgfHwgcHJvZ3Jlc3MgPD0gMDtcbiAgICBpc0VuZCA9IGlzRW5kUm91bmRlZCB8fCBwcm9ncmVzcyA+PSAxO1xuICAgIGlmIChpc0JlZ2lubmluZ1JvdW5kZWQpIHByb2dyZXNzID0gMDtcbiAgICBpZiAoaXNFbmRSb3VuZGVkKSBwcm9ncmVzcyA9IDE7XG4gIH1cbiAgaWYgKHBhcmFtcy5sb29wKSB7XG4gICAgY29uc3QgZmlyc3RTbGlkZUluZGV4ID0gc3dpcGVyLmdldFNsaWRlSW5kZXhCeURhdGEoMCk7XG4gICAgY29uc3QgbGFzdFNsaWRlSW5kZXggPSBzd2lwZXIuZ2V0U2xpZGVJbmRleEJ5RGF0YShzd2lwZXIuc2xpZGVzLmxlbmd0aCAtIDEpO1xuICAgIGNvbnN0IGZpcnN0U2xpZGVUcmFuc2xhdGUgPSBzd2lwZXIuc2xpZGVzR3JpZFtmaXJzdFNsaWRlSW5kZXhdO1xuICAgIGNvbnN0IGxhc3RTbGlkZVRyYW5zbGF0ZSA9IHN3aXBlci5zbGlkZXNHcmlkW2xhc3RTbGlkZUluZGV4XTtcbiAgICBjb25zdCB0cmFuc2xhdGVNYXggPSBzd2lwZXIuc2xpZGVzR3JpZFtzd2lwZXIuc2xpZGVzR3JpZC5sZW5ndGggLSAxXTtcbiAgICBjb25zdCB0cmFuc2xhdGVBYnMgPSBNYXRoLmFicyh0cmFuc2xhdGUpO1xuICAgIGlmICh0cmFuc2xhdGVBYnMgPj0gZmlyc3RTbGlkZVRyYW5zbGF0ZSkge1xuICAgICAgcHJvZ3Jlc3NMb29wID0gKHRyYW5zbGF0ZUFicyAtIGZpcnN0U2xpZGVUcmFuc2xhdGUpIC8gdHJhbnNsYXRlTWF4O1xuICAgIH0gZWxzZSB7XG4gICAgICBwcm9ncmVzc0xvb3AgPSAodHJhbnNsYXRlQWJzICsgdHJhbnNsYXRlTWF4IC0gbGFzdFNsaWRlVHJhbnNsYXRlKSAvIHRyYW5zbGF0ZU1heDtcbiAgICB9XG4gICAgaWYgKHByb2dyZXNzTG9vcCA+IDEpIHByb2dyZXNzTG9vcCAtPSAxO1xuICB9XG4gIE9iamVjdC5hc3NpZ24oc3dpcGVyLCB7XG4gICAgcHJvZ3Jlc3MsXG4gICAgcHJvZ3Jlc3NMb29wLFxuICAgIGlzQmVnaW5uaW5nLFxuICAgIGlzRW5kXG4gIH0pO1xuICBpZiAocGFyYW1zLndhdGNoU2xpZGVzUHJvZ3Jlc3MgfHwgcGFyYW1zLmNlbnRlcmVkU2xpZGVzICYmIHBhcmFtcy5hdXRvSGVpZ2h0KSBzd2lwZXIudXBkYXRlU2xpZGVzUHJvZ3Jlc3ModHJhbnNsYXRlKTtcbiAgaWYgKGlzQmVnaW5uaW5nICYmICF3YXNCZWdpbm5pbmcpIHtcbiAgICBzd2lwZXIuZW1pdCgncmVhY2hCZWdpbm5pbmcgdG9FZGdlJyk7XG4gIH1cbiAgaWYgKGlzRW5kICYmICF3YXNFbmQpIHtcbiAgICBzd2lwZXIuZW1pdCgncmVhY2hFbmQgdG9FZGdlJyk7XG4gIH1cbiAgaWYgKHdhc0JlZ2lubmluZyAmJiAhaXNCZWdpbm5pbmcgfHwgd2FzRW5kICYmICFpc0VuZCkge1xuICAgIHN3aXBlci5lbWl0KCdmcm9tRWRnZScpO1xuICB9XG4gIHN3aXBlci5lbWl0KCdwcm9ncmVzcycsIHByb2dyZXNzKTtcbn1cblxuY29uc3QgdG9nZ2xlU2xpZGVDbGFzc2VzID0gKHNsaWRlRWwsIGNvbmRpdGlvbiwgY2xhc3NOYW1lKSA9PiB7XG4gIGlmIChjb25kaXRpb24gJiYgIXNsaWRlRWwuY2xhc3NMaXN0LmNvbnRhaW5zKGNsYXNzTmFtZSkpIHtcbiAgICBzbGlkZUVsLmNsYXNzTGlzdC5hZGQoY2xhc3NOYW1lKTtcbiAgfSBlbHNlIGlmICghY29uZGl0aW9uICYmIHNsaWRlRWwuY2xhc3NMaXN0LmNvbnRhaW5zKGNsYXNzTmFtZSkpIHtcbiAgICBzbGlkZUVsLmNsYXNzTGlzdC5yZW1vdmUoY2xhc3NOYW1lKTtcbiAgfVxufTtcbmZ1bmN0aW9uIHVwZGF0ZVNsaWRlc0NsYXNzZXMoKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IHtcbiAgICBzbGlkZXMsXG4gICAgcGFyYW1zLFxuICAgIHNsaWRlc0VsLFxuICAgIGFjdGl2ZUluZGV4XG4gIH0gPSBzd2lwZXI7XG4gIGNvbnN0IGlzVmlydHVhbCA9IHN3aXBlci52aXJ0dWFsICYmIHBhcmFtcy52aXJ0dWFsLmVuYWJsZWQ7XG4gIGNvbnN0IGdyaWRFbmFibGVkID0gc3dpcGVyLmdyaWQgJiYgcGFyYW1zLmdyaWQgJiYgcGFyYW1zLmdyaWQucm93cyA+IDE7XG4gIGNvbnN0IGdldEZpbHRlcmVkU2xpZGUgPSBzZWxlY3RvciA9PiB7XG4gICAgcmV0dXJuIGVsZW1lbnRDaGlsZHJlbihzbGlkZXNFbCwgYC4ke3BhcmFtcy5zbGlkZUNsYXNzfSR7c2VsZWN0b3J9LCBzd2lwZXItc2xpZGUke3NlbGVjdG9yfWApWzBdO1xuICB9O1xuICBsZXQgYWN0aXZlU2xpZGU7XG4gIGxldCBwcmV2U2xpZGU7XG4gIGxldCBuZXh0U2xpZGU7XG4gIGlmIChpc1ZpcnR1YWwpIHtcbiAgICBpZiAocGFyYW1zLmxvb3ApIHtcbiAgICAgIGxldCBzbGlkZUluZGV4ID0gYWN0aXZlSW5kZXggLSBzd2lwZXIudmlydHVhbC5zbGlkZXNCZWZvcmU7XG4gICAgICBpZiAoc2xpZGVJbmRleCA8IDApIHNsaWRlSW5kZXggPSBzd2lwZXIudmlydHVhbC5zbGlkZXMubGVuZ3RoICsgc2xpZGVJbmRleDtcbiAgICAgIGlmIChzbGlkZUluZGV4ID49IHN3aXBlci52aXJ0dWFsLnNsaWRlcy5sZW5ndGgpIHNsaWRlSW5kZXggLT0gc3dpcGVyLnZpcnR1YWwuc2xpZGVzLmxlbmd0aDtcbiAgICAgIGFjdGl2ZVNsaWRlID0gZ2V0RmlsdGVyZWRTbGlkZShgW2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4PVwiJHtzbGlkZUluZGV4fVwiXWApO1xuICAgIH0gZWxzZSB7XG4gICAgICBhY3RpdmVTbGlkZSA9IGdldEZpbHRlcmVkU2xpZGUoYFtkYXRhLXN3aXBlci1zbGlkZS1pbmRleD1cIiR7YWN0aXZlSW5kZXh9XCJdYCk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlmIChncmlkRW5hYmxlZCkge1xuICAgICAgYWN0aXZlU2xpZGUgPSBzbGlkZXMuZmlsdGVyKHNsaWRlRWwgPT4gc2xpZGVFbC5jb2x1bW4gPT09IGFjdGl2ZUluZGV4KVswXTtcbiAgICAgIG5leHRTbGlkZSA9IHNsaWRlcy5maWx0ZXIoc2xpZGVFbCA9PiBzbGlkZUVsLmNvbHVtbiA9PT0gYWN0aXZlSW5kZXggKyAxKVswXTtcbiAgICAgIHByZXZTbGlkZSA9IHNsaWRlcy5maWx0ZXIoc2xpZGVFbCA9PiBzbGlkZUVsLmNvbHVtbiA9PT0gYWN0aXZlSW5kZXggLSAxKVswXTtcbiAgICB9IGVsc2Uge1xuICAgICAgYWN0aXZlU2xpZGUgPSBzbGlkZXNbYWN0aXZlSW5kZXhdO1xuICAgIH1cbiAgfVxuICBpZiAoYWN0aXZlU2xpZGUpIHtcbiAgICBpZiAoIWdyaWRFbmFibGVkKSB7XG4gICAgICAvLyBOZXh0IFNsaWRlXG4gICAgICBuZXh0U2xpZGUgPSBlbGVtZW50TmV4dEFsbChhY3RpdmVTbGlkZSwgYC4ke3BhcmFtcy5zbGlkZUNsYXNzfSwgc3dpcGVyLXNsaWRlYClbMF07XG4gICAgICBpZiAocGFyYW1zLmxvb3AgJiYgIW5leHRTbGlkZSkge1xuICAgICAgICBuZXh0U2xpZGUgPSBzbGlkZXNbMF07XG4gICAgICB9XG5cbiAgICAgIC8vIFByZXYgU2xpZGVcbiAgICAgIHByZXZTbGlkZSA9IGVsZW1lbnRQcmV2QWxsKGFjdGl2ZVNsaWRlLCBgLiR7cGFyYW1zLnNsaWRlQ2xhc3N9LCBzd2lwZXItc2xpZGVgKVswXTtcbiAgICAgIGlmIChwYXJhbXMubG9vcCAmJiAhcHJldlNsaWRlID09PSAwKSB7XG4gICAgICAgIHByZXZTbGlkZSA9IHNsaWRlc1tzbGlkZXMubGVuZ3RoIC0gMV07XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHNsaWRlcy5mb3JFYWNoKHNsaWRlRWwgPT4ge1xuICAgIHRvZ2dsZVNsaWRlQ2xhc3NlcyhzbGlkZUVsLCBzbGlkZUVsID09PSBhY3RpdmVTbGlkZSwgcGFyYW1zLnNsaWRlQWN0aXZlQ2xhc3MpO1xuICAgIHRvZ2dsZVNsaWRlQ2xhc3NlcyhzbGlkZUVsLCBzbGlkZUVsID09PSBuZXh0U2xpZGUsIHBhcmFtcy5zbGlkZU5leHRDbGFzcyk7XG4gICAgdG9nZ2xlU2xpZGVDbGFzc2VzKHNsaWRlRWwsIHNsaWRlRWwgPT09IHByZXZTbGlkZSwgcGFyYW1zLnNsaWRlUHJldkNsYXNzKTtcbiAgfSk7XG4gIHN3aXBlci5lbWl0U2xpZGVzQ2xhc3NlcygpO1xufVxuXG5jb25zdCBwcm9jZXNzTGF6eVByZWxvYWRlciA9IChzd2lwZXIsIGltYWdlRWwpID0+IHtcbiAgaWYgKCFzd2lwZXIgfHwgc3dpcGVyLmRlc3Ryb3llZCB8fCAhc3dpcGVyLnBhcmFtcykgcmV0dXJuO1xuICBjb25zdCBzbGlkZVNlbGVjdG9yID0gKCkgPT4gc3dpcGVyLmlzRWxlbWVudCA/IGBzd2lwZXItc2xpZGVgIDogYC4ke3N3aXBlci5wYXJhbXMuc2xpZGVDbGFzc31gO1xuICBjb25zdCBzbGlkZUVsID0gaW1hZ2VFbC5jbG9zZXN0KHNsaWRlU2VsZWN0b3IoKSk7XG4gIGlmIChzbGlkZUVsKSB7XG4gICAgbGV0IGxhenlFbCA9IHNsaWRlRWwucXVlcnlTZWxlY3RvcihgLiR7c3dpcGVyLnBhcmFtcy5sYXp5UHJlbG9hZGVyQ2xhc3N9YCk7XG4gICAgaWYgKCFsYXp5RWwgJiYgc3dpcGVyLmlzRWxlbWVudCkge1xuICAgICAgaWYgKHNsaWRlRWwuc2hhZG93Um9vdCkge1xuICAgICAgICBsYXp5RWwgPSBzbGlkZUVsLnNoYWRvd1Jvb3QucXVlcnlTZWxlY3RvcihgLiR7c3dpcGVyLnBhcmFtcy5sYXp5UHJlbG9hZGVyQ2xhc3N9YCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBpbml0IGxhdGVyXG4gICAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgICAgICAgaWYgKHNsaWRlRWwuc2hhZG93Um9vdCkge1xuICAgICAgICAgICAgbGF6eUVsID0gc2xpZGVFbC5zaGFkb3dSb290LnF1ZXJ5U2VsZWN0b3IoYC4ke3N3aXBlci5wYXJhbXMubGF6eVByZWxvYWRlckNsYXNzfWApO1xuICAgICAgICAgICAgaWYgKGxhenlFbCkgbGF6eUVsLnJlbW92ZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChsYXp5RWwpIGxhenlFbC5yZW1vdmUoKTtcbiAgfVxufTtcbmNvbnN0IHVubGF6eSA9IChzd2lwZXIsIGluZGV4KSA9PiB7XG4gIGlmICghc3dpcGVyLnNsaWRlc1tpbmRleF0pIHJldHVybjtcbiAgY29uc3QgaW1hZ2VFbCA9IHN3aXBlci5zbGlkZXNbaW5kZXhdLnF1ZXJ5U2VsZWN0b3IoJ1tsb2FkaW5nPVwibGF6eVwiXScpO1xuICBpZiAoaW1hZ2VFbCkgaW1hZ2VFbC5yZW1vdmVBdHRyaWJ1dGUoJ2xvYWRpbmcnKTtcbn07XG5jb25zdCBwcmVsb2FkID0gc3dpcGVyID0+IHtcbiAgaWYgKCFzd2lwZXIgfHwgc3dpcGVyLmRlc3Ryb3llZCB8fCAhc3dpcGVyLnBhcmFtcykgcmV0dXJuO1xuICBsZXQgYW1vdW50ID0gc3dpcGVyLnBhcmFtcy5sYXp5UHJlbG9hZFByZXZOZXh0O1xuICBjb25zdCBsZW4gPSBzd2lwZXIuc2xpZGVzLmxlbmd0aDtcbiAgaWYgKCFsZW4gfHwgIWFtb3VudCB8fCBhbW91bnQgPCAwKSByZXR1cm47XG4gIGFtb3VudCA9IE1hdGgubWluKGFtb3VudCwgbGVuKTtcbiAgY29uc3Qgc2xpZGVzUGVyVmlldyA9IHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyVmlldyA9PT0gJ2F1dG8nID8gc3dpcGVyLnNsaWRlc1BlclZpZXdEeW5hbWljKCkgOiBNYXRoLmNlaWwoc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJWaWV3KTtcbiAgY29uc3QgYWN0aXZlSW5kZXggPSBzd2lwZXIuYWN0aXZlSW5kZXg7XG4gIGlmIChzd2lwZXIucGFyYW1zLmdyaWQgJiYgc3dpcGVyLnBhcmFtcy5ncmlkLnJvd3MgPiAxKSB7XG4gICAgY29uc3QgYWN0aXZlQ29sdW1uID0gYWN0aXZlSW5kZXg7XG4gICAgY29uc3QgcHJlbG9hZENvbHVtbnMgPSBbYWN0aXZlQ29sdW1uIC0gYW1vdW50XTtcbiAgICBwcmVsb2FkQ29sdW1ucy5wdXNoKC4uLkFycmF5LmZyb20oe1xuICAgICAgbGVuZ3RoOiBhbW91bnRcbiAgICB9KS5tYXAoKF8sIGkpID0+IHtcbiAgICAgIHJldHVybiBhY3RpdmVDb2x1bW4gKyBzbGlkZXNQZXJWaWV3ICsgaTtcbiAgICB9KSk7XG4gICAgc3dpcGVyLnNsaWRlcy5mb3JFYWNoKChzbGlkZUVsLCBpKSA9PiB7XG4gICAgICBpZiAocHJlbG9hZENvbHVtbnMuaW5jbHVkZXMoc2xpZGVFbC5jb2x1bW4pKSB1bmxhenkoc3dpcGVyLCBpKTtcbiAgICB9KTtcbiAgICByZXR1cm47XG4gIH1cbiAgY29uc3Qgc2xpZGVJbmRleExhc3RJblZpZXcgPSBhY3RpdmVJbmRleCArIHNsaWRlc1BlclZpZXcgLSAxO1xuICBpZiAoc3dpcGVyLnBhcmFtcy5yZXdpbmQgfHwgc3dpcGVyLnBhcmFtcy5sb29wKSB7XG4gICAgZm9yIChsZXQgaSA9IGFjdGl2ZUluZGV4IC0gYW1vdW50OyBpIDw9IHNsaWRlSW5kZXhMYXN0SW5WaWV3ICsgYW1vdW50OyBpICs9IDEpIHtcbiAgICAgIGNvbnN0IHJlYWxJbmRleCA9IChpICUgbGVuICsgbGVuKSAlIGxlbjtcbiAgICAgIGlmIChyZWFsSW5kZXggPCBhY3RpdmVJbmRleCB8fCByZWFsSW5kZXggPiBzbGlkZUluZGV4TGFzdEluVmlldykgdW5sYXp5KHN3aXBlciwgcmVhbEluZGV4KTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgZm9yIChsZXQgaSA9IE1hdGgubWF4KGFjdGl2ZUluZGV4IC0gYW1vdW50LCAwKTsgaSA8PSBNYXRoLm1pbihzbGlkZUluZGV4TGFzdEluVmlldyArIGFtb3VudCwgbGVuIC0gMSk7IGkgKz0gMSkge1xuICAgICAgaWYgKGkgIT09IGFjdGl2ZUluZGV4ICYmIChpID4gc2xpZGVJbmRleExhc3RJblZpZXcgfHwgaSA8IGFjdGl2ZUluZGV4KSkge1xuICAgICAgICB1bmxhenkoc3dpcGVyLCBpKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn07XG5cbmZ1bmN0aW9uIGdldEFjdGl2ZUluZGV4QnlUcmFuc2xhdGUoc3dpcGVyKSB7XG4gIGNvbnN0IHtcbiAgICBzbGlkZXNHcmlkLFxuICAgIHBhcmFtc1xuICB9ID0gc3dpcGVyO1xuICBjb25zdCB0cmFuc2xhdGUgPSBzd2lwZXIucnRsVHJhbnNsYXRlID8gc3dpcGVyLnRyYW5zbGF0ZSA6IC1zd2lwZXIudHJhbnNsYXRlO1xuICBsZXQgYWN0aXZlSW5kZXg7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgc2xpZGVzR3JpZC5sZW5ndGg7IGkgKz0gMSkge1xuICAgIGlmICh0eXBlb2Ygc2xpZGVzR3JpZFtpICsgMV0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBpZiAodHJhbnNsYXRlID49IHNsaWRlc0dyaWRbaV0gJiYgdHJhbnNsYXRlIDwgc2xpZGVzR3JpZFtpICsgMV0gLSAoc2xpZGVzR3JpZFtpICsgMV0gLSBzbGlkZXNHcmlkW2ldKSAvIDIpIHtcbiAgICAgICAgYWN0aXZlSW5kZXggPSBpO1xuICAgICAgfSBlbHNlIGlmICh0cmFuc2xhdGUgPj0gc2xpZGVzR3JpZFtpXSAmJiB0cmFuc2xhdGUgPCBzbGlkZXNHcmlkW2kgKyAxXSkge1xuICAgICAgICBhY3RpdmVJbmRleCA9IGkgKyAxO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodHJhbnNsYXRlID49IHNsaWRlc0dyaWRbaV0pIHtcbiAgICAgIGFjdGl2ZUluZGV4ID0gaTtcbiAgICB9XG4gIH1cbiAgLy8gTm9ybWFsaXplIHNsaWRlSW5kZXhcbiAgaWYgKHBhcmFtcy5ub3JtYWxpemVTbGlkZUluZGV4KSB7XG4gICAgaWYgKGFjdGl2ZUluZGV4IDwgMCB8fCB0eXBlb2YgYWN0aXZlSW5kZXggPT09ICd1bmRlZmluZWQnKSBhY3RpdmVJbmRleCA9IDA7XG4gIH1cbiAgcmV0dXJuIGFjdGl2ZUluZGV4O1xufVxuZnVuY3Rpb24gdXBkYXRlQWN0aXZlSW5kZXgobmV3QWN0aXZlSW5kZXgpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgY29uc3QgdHJhbnNsYXRlID0gc3dpcGVyLnJ0bFRyYW5zbGF0ZSA/IHN3aXBlci50cmFuc2xhdGUgOiAtc3dpcGVyLnRyYW5zbGF0ZTtcbiAgY29uc3Qge1xuICAgIHNuYXBHcmlkLFxuICAgIHBhcmFtcyxcbiAgICBhY3RpdmVJbmRleDogcHJldmlvdXNJbmRleCxcbiAgICByZWFsSW5kZXg6IHByZXZpb3VzUmVhbEluZGV4LFxuICAgIHNuYXBJbmRleDogcHJldmlvdXNTbmFwSW5kZXhcbiAgfSA9IHN3aXBlcjtcbiAgbGV0IGFjdGl2ZUluZGV4ID0gbmV3QWN0aXZlSW5kZXg7XG4gIGxldCBzbmFwSW5kZXg7XG4gIGNvbnN0IGdldFZpcnR1YWxSZWFsSW5kZXggPSBhSW5kZXggPT4ge1xuICAgIGxldCByZWFsSW5kZXggPSBhSW5kZXggLSBzd2lwZXIudmlydHVhbC5zbGlkZXNCZWZvcmU7XG4gICAgaWYgKHJlYWxJbmRleCA8IDApIHtcbiAgICAgIHJlYWxJbmRleCA9IHN3aXBlci52aXJ0dWFsLnNsaWRlcy5sZW5ndGggKyByZWFsSW5kZXg7XG4gICAgfVxuICAgIGlmIChyZWFsSW5kZXggPj0gc3dpcGVyLnZpcnR1YWwuc2xpZGVzLmxlbmd0aCkge1xuICAgICAgcmVhbEluZGV4IC09IHN3aXBlci52aXJ0dWFsLnNsaWRlcy5sZW5ndGg7XG4gICAgfVxuICAgIHJldHVybiByZWFsSW5kZXg7XG4gIH07XG4gIGlmICh0eXBlb2YgYWN0aXZlSW5kZXggPT09ICd1bmRlZmluZWQnKSB7XG4gICAgYWN0aXZlSW5kZXggPSBnZXRBY3RpdmVJbmRleEJ5VHJhbnNsYXRlKHN3aXBlcik7XG4gIH1cbiAgaWYgKHNuYXBHcmlkLmluZGV4T2YodHJhbnNsYXRlKSA+PSAwKSB7XG4gICAgc25hcEluZGV4ID0gc25hcEdyaWQuaW5kZXhPZih0cmFuc2xhdGUpO1xuICB9IGVsc2Uge1xuICAgIGNvbnN0IHNraXAgPSBNYXRoLm1pbihwYXJhbXMuc2xpZGVzUGVyR3JvdXBTa2lwLCBhY3RpdmVJbmRleCk7XG4gICAgc25hcEluZGV4ID0gc2tpcCArIE1hdGguZmxvb3IoKGFjdGl2ZUluZGV4IC0gc2tpcCkgLyBwYXJhbXMuc2xpZGVzUGVyR3JvdXApO1xuICB9XG4gIGlmIChzbmFwSW5kZXggPj0gc25hcEdyaWQubGVuZ3RoKSBzbmFwSW5kZXggPSBzbmFwR3JpZC5sZW5ndGggLSAxO1xuICBpZiAoYWN0aXZlSW5kZXggPT09IHByZXZpb3VzSW5kZXggJiYgIXN3aXBlci5wYXJhbXMubG9vcCkge1xuICAgIGlmIChzbmFwSW5kZXggIT09IHByZXZpb3VzU25hcEluZGV4KSB7XG4gICAgICBzd2lwZXIuc25hcEluZGV4ID0gc25hcEluZGV4O1xuICAgICAgc3dpcGVyLmVtaXQoJ3NuYXBJbmRleENoYW5nZScpO1xuICAgIH1cbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKGFjdGl2ZUluZGV4ID09PSBwcmV2aW91c0luZGV4ICYmIHN3aXBlci5wYXJhbXMubG9vcCAmJiBzd2lwZXIudmlydHVhbCAmJiBzd2lwZXIucGFyYW1zLnZpcnR1YWwuZW5hYmxlZCkge1xuICAgIHN3aXBlci5yZWFsSW5kZXggPSBnZXRWaXJ0dWFsUmVhbEluZGV4KGFjdGl2ZUluZGV4KTtcbiAgICByZXR1cm47XG4gIH1cbiAgY29uc3QgZ3JpZEVuYWJsZWQgPSBzd2lwZXIuZ3JpZCAmJiBwYXJhbXMuZ3JpZCAmJiBwYXJhbXMuZ3JpZC5yb3dzID4gMTtcblxuICAvLyBHZXQgcmVhbCBpbmRleFxuICBsZXQgcmVhbEluZGV4O1xuICBpZiAoc3dpcGVyLnZpcnR1YWwgJiYgcGFyYW1zLnZpcnR1YWwuZW5hYmxlZCAmJiBwYXJhbXMubG9vcCkge1xuICAgIHJlYWxJbmRleCA9IGdldFZpcnR1YWxSZWFsSW5kZXgoYWN0aXZlSW5kZXgpO1xuICB9IGVsc2UgaWYgKGdyaWRFbmFibGVkKSB7XG4gICAgY29uc3QgZmlyc3RTbGlkZUluQ29sdW1uID0gc3dpcGVyLnNsaWRlcy5maWx0ZXIoc2xpZGVFbCA9PiBzbGlkZUVsLmNvbHVtbiA9PT0gYWN0aXZlSW5kZXgpWzBdO1xuICAgIGxldCBhY3RpdmVTbGlkZUluZGV4ID0gcGFyc2VJbnQoZmlyc3RTbGlkZUluQ29sdW1uLmdldEF0dHJpYnV0ZSgnZGF0YS1zd2lwZXItc2xpZGUtaW5kZXgnKSwgMTApO1xuICAgIGlmIChOdW1iZXIuaXNOYU4oYWN0aXZlU2xpZGVJbmRleCkpIHtcbiAgICAgIGFjdGl2ZVNsaWRlSW5kZXggPSBNYXRoLm1heChzd2lwZXIuc2xpZGVzLmluZGV4T2YoZmlyc3RTbGlkZUluQ29sdW1uKSwgMCk7XG4gICAgfVxuICAgIHJlYWxJbmRleCA9IE1hdGguZmxvb3IoYWN0aXZlU2xpZGVJbmRleCAvIHBhcmFtcy5ncmlkLnJvd3MpO1xuICB9IGVsc2UgaWYgKHN3aXBlci5zbGlkZXNbYWN0aXZlSW5kZXhdKSB7XG4gICAgY29uc3Qgc2xpZGVJbmRleCA9IHN3aXBlci5zbGlkZXNbYWN0aXZlSW5kZXhdLmdldEF0dHJpYnV0ZSgnZGF0YS1zd2lwZXItc2xpZGUtaW5kZXgnKTtcbiAgICBpZiAoc2xpZGVJbmRleCkge1xuICAgICAgcmVhbEluZGV4ID0gcGFyc2VJbnQoc2xpZGVJbmRleCwgMTApO1xuICAgIH0gZWxzZSB7XG4gICAgICByZWFsSW5kZXggPSBhY3RpdmVJbmRleDtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgcmVhbEluZGV4ID0gYWN0aXZlSW5kZXg7XG4gIH1cbiAgT2JqZWN0LmFzc2lnbihzd2lwZXIsIHtcbiAgICBwcmV2aW91c1NuYXBJbmRleCxcbiAgICBzbmFwSW5kZXgsXG4gICAgcHJldmlvdXNSZWFsSW5kZXgsXG4gICAgcmVhbEluZGV4LFxuICAgIHByZXZpb3VzSW5kZXgsXG4gICAgYWN0aXZlSW5kZXhcbiAgfSk7XG4gIGlmIChzd2lwZXIuaW5pdGlhbGl6ZWQpIHtcbiAgICBwcmVsb2FkKHN3aXBlcik7XG4gIH1cbiAgc3dpcGVyLmVtaXQoJ2FjdGl2ZUluZGV4Q2hhbmdlJyk7XG4gIHN3aXBlci5lbWl0KCdzbmFwSW5kZXhDaGFuZ2UnKTtcbiAgaWYgKHN3aXBlci5pbml0aWFsaXplZCB8fCBzd2lwZXIucGFyYW1zLnJ1bkNhbGxiYWNrc09uSW5pdCkge1xuICAgIGlmIChwcmV2aW91c1JlYWxJbmRleCAhPT0gcmVhbEluZGV4KSB7XG4gICAgICBzd2lwZXIuZW1pdCgncmVhbEluZGV4Q2hhbmdlJyk7XG4gICAgfVxuICAgIHN3aXBlci5lbWl0KCdzbGlkZUNoYW5nZScpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZUNsaWNrZWRTbGlkZShlbCwgcGF0aCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCBwYXJhbXMgPSBzd2lwZXIucGFyYW1zO1xuICBsZXQgc2xpZGUgPSBlbC5jbG9zZXN0KGAuJHtwYXJhbXMuc2xpZGVDbGFzc30sIHN3aXBlci1zbGlkZWApO1xuICBpZiAoIXNsaWRlICYmIHN3aXBlci5pc0VsZW1lbnQgJiYgcGF0aCAmJiBwYXRoLmxlbmd0aCA+IDEgJiYgcGF0aC5pbmNsdWRlcyhlbCkpIHtcbiAgICBbLi4ucGF0aC5zbGljZShwYXRoLmluZGV4T2YoZWwpICsgMSwgcGF0aC5sZW5ndGgpXS5mb3JFYWNoKHBhdGhFbCA9PiB7XG4gICAgICBpZiAoIXNsaWRlICYmIHBhdGhFbC5tYXRjaGVzICYmIHBhdGhFbC5tYXRjaGVzKGAuJHtwYXJhbXMuc2xpZGVDbGFzc30sIHN3aXBlci1zbGlkZWApKSB7XG4gICAgICAgIHNsaWRlID0gcGF0aEVsO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG4gIGxldCBzbGlkZUZvdW5kID0gZmFsc2U7XG4gIGxldCBzbGlkZUluZGV4O1xuICBpZiAoc2xpZGUpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHN3aXBlci5zbGlkZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIGlmIChzd2lwZXIuc2xpZGVzW2ldID09PSBzbGlkZSkge1xuICAgICAgICBzbGlkZUZvdW5kID0gdHJ1ZTtcbiAgICAgICAgc2xpZGVJbmRleCA9IGk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBpZiAoc2xpZGUgJiYgc2xpZGVGb3VuZCkge1xuICAgIHN3aXBlci5jbGlja2VkU2xpZGUgPSBzbGlkZTtcbiAgICBpZiAoc3dpcGVyLnZpcnR1YWwgJiYgc3dpcGVyLnBhcmFtcy52aXJ0dWFsLmVuYWJsZWQpIHtcbiAgICAgIHN3aXBlci5jbGlja2VkSW5kZXggPSBwYXJzZUludChzbGlkZS5nZXRBdHRyaWJ1dGUoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4JyksIDEwKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3dpcGVyLmNsaWNrZWRJbmRleCA9IHNsaWRlSW5kZXg7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHN3aXBlci5jbGlja2VkU2xpZGUgPSB1bmRlZmluZWQ7XG4gICAgc3dpcGVyLmNsaWNrZWRJbmRleCA9IHVuZGVmaW5lZDtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKHBhcmFtcy5zbGlkZVRvQ2xpY2tlZFNsaWRlICYmIHN3aXBlci5jbGlja2VkSW5kZXggIT09IHVuZGVmaW5lZCAmJiBzd2lwZXIuY2xpY2tlZEluZGV4ICE9PSBzd2lwZXIuYWN0aXZlSW5kZXgpIHtcbiAgICBzd2lwZXIuc2xpZGVUb0NsaWNrZWRTbGlkZSgpO1xuICB9XG59XG5cbnZhciB1cGRhdGUgPSB7XG4gIHVwZGF0ZVNpemUsXG4gIHVwZGF0ZVNsaWRlcyxcbiAgdXBkYXRlQXV0b0hlaWdodCxcbiAgdXBkYXRlU2xpZGVzT2Zmc2V0LFxuICB1cGRhdGVTbGlkZXNQcm9ncmVzcyxcbiAgdXBkYXRlUHJvZ3Jlc3MsXG4gIHVwZGF0ZVNsaWRlc0NsYXNzZXMsXG4gIHVwZGF0ZUFjdGl2ZUluZGV4LFxuICB1cGRhdGVDbGlja2VkU2xpZGVcbn07XG5cbmZ1bmN0aW9uIGdldFN3aXBlclRyYW5zbGF0ZShheGlzKSB7XG4gIGlmIChheGlzID09PSB2b2lkIDApIHtcbiAgICBheGlzID0gdGhpcy5pc0hvcml6b250YWwoKSA/ICd4JyA6ICd5JztcbiAgfVxuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCB7XG4gICAgcGFyYW1zLFxuICAgIHJ0bFRyYW5zbGF0ZTogcnRsLFxuICAgIHRyYW5zbGF0ZSxcbiAgICB3cmFwcGVyRWxcbiAgfSA9IHN3aXBlcjtcbiAgaWYgKHBhcmFtcy52aXJ0dWFsVHJhbnNsYXRlKSB7XG4gICAgcmV0dXJuIHJ0bCA/IC10cmFuc2xhdGUgOiB0cmFuc2xhdGU7XG4gIH1cbiAgaWYgKHBhcmFtcy5jc3NNb2RlKSB7XG4gICAgcmV0dXJuIHRyYW5zbGF0ZTtcbiAgfVxuICBsZXQgY3VycmVudFRyYW5zbGF0ZSA9IGdldFRyYW5zbGF0ZSh3cmFwcGVyRWwsIGF4aXMpO1xuICBjdXJyZW50VHJhbnNsYXRlICs9IHN3aXBlci5jc3NPdmVyZmxvd0FkanVzdG1lbnQoKTtcbiAgaWYgKHJ0bCkgY3VycmVudFRyYW5zbGF0ZSA9IC1jdXJyZW50VHJhbnNsYXRlO1xuICByZXR1cm4gY3VycmVudFRyYW5zbGF0ZSB8fCAwO1xufVxuXG5mdW5jdGlvbiBzZXRUcmFuc2xhdGUodHJhbnNsYXRlLCBieUNvbnRyb2xsZXIpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgY29uc3Qge1xuICAgIHJ0bFRyYW5zbGF0ZTogcnRsLFxuICAgIHBhcmFtcyxcbiAgICB3cmFwcGVyRWwsXG4gICAgcHJvZ3Jlc3NcbiAgfSA9IHN3aXBlcjtcbiAgbGV0IHggPSAwO1xuICBsZXQgeSA9IDA7XG4gIGNvbnN0IHogPSAwO1xuICBpZiAoc3dpcGVyLmlzSG9yaXpvbnRhbCgpKSB7XG4gICAgeCA9IHJ0bCA/IC10cmFuc2xhdGUgOiB0cmFuc2xhdGU7XG4gIH0gZWxzZSB7XG4gICAgeSA9IHRyYW5zbGF0ZTtcbiAgfVxuICBpZiAocGFyYW1zLnJvdW5kTGVuZ3Rocykge1xuICAgIHggPSBNYXRoLmZsb29yKHgpO1xuICAgIHkgPSBNYXRoLmZsb29yKHkpO1xuICB9XG4gIHN3aXBlci5wcmV2aW91c1RyYW5zbGF0ZSA9IHN3aXBlci50cmFuc2xhdGU7XG4gIHN3aXBlci50cmFuc2xhdGUgPSBzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyB4IDogeTtcbiAgaWYgKHBhcmFtcy5jc3NNb2RlKSB7XG4gICAgd3JhcHBlckVsW3N3aXBlci5pc0hvcml6b250YWwoKSA/ICdzY3JvbGxMZWZ0JyA6ICdzY3JvbGxUb3AnXSA9IHN3aXBlci5pc0hvcml6b250YWwoKSA/IC14IDogLXk7XG4gIH0gZWxzZSBpZiAoIXBhcmFtcy52aXJ0dWFsVHJhbnNsYXRlKSB7XG4gICAgaWYgKHN3aXBlci5pc0hvcml6b250YWwoKSkge1xuICAgICAgeCAtPSBzd2lwZXIuY3NzT3ZlcmZsb3dBZGp1c3RtZW50KCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHkgLT0gc3dpcGVyLmNzc092ZXJmbG93QWRqdXN0bWVudCgpO1xuICAgIH1cbiAgICB3cmFwcGVyRWwuc3R5bGUudHJhbnNmb3JtID0gYHRyYW5zbGF0ZTNkKCR7eH1weCwgJHt5fXB4LCAke3p9cHgpYDtcbiAgfVxuXG4gIC8vIENoZWNrIGlmIHdlIG5lZWQgdG8gdXBkYXRlIHByb2dyZXNzXG4gIGxldCBuZXdQcm9ncmVzcztcbiAgY29uc3QgdHJhbnNsYXRlc0RpZmYgPSBzd2lwZXIubWF4VHJhbnNsYXRlKCkgLSBzd2lwZXIubWluVHJhbnNsYXRlKCk7XG4gIGlmICh0cmFuc2xhdGVzRGlmZiA9PT0gMCkge1xuICAgIG5ld1Byb2dyZXNzID0gMDtcbiAgfSBlbHNlIHtcbiAgICBuZXdQcm9ncmVzcyA9ICh0cmFuc2xhdGUgLSBzd2lwZXIubWluVHJhbnNsYXRlKCkpIC8gdHJhbnNsYXRlc0RpZmY7XG4gIH1cbiAgaWYgKG5ld1Byb2dyZXNzICE9PSBwcm9ncmVzcykge1xuICAgIHN3aXBlci51cGRhdGVQcm9ncmVzcyh0cmFuc2xhdGUpO1xuICB9XG4gIHN3aXBlci5lbWl0KCdzZXRUcmFuc2xhdGUnLCBzd2lwZXIudHJhbnNsYXRlLCBieUNvbnRyb2xsZXIpO1xufVxuXG5mdW5jdGlvbiBtaW5UcmFuc2xhdGUoKSB7XG4gIHJldHVybiAtdGhpcy5zbmFwR3JpZFswXTtcbn1cblxuZnVuY3Rpb24gbWF4VHJhbnNsYXRlKCkge1xuICByZXR1cm4gLXRoaXMuc25hcEdyaWRbdGhpcy5zbmFwR3JpZC5sZW5ndGggLSAxXTtcbn1cblxuZnVuY3Rpb24gdHJhbnNsYXRlVG8odHJhbnNsYXRlLCBzcGVlZCwgcnVuQ2FsbGJhY2tzLCB0cmFuc2xhdGVCb3VuZHMsIGludGVybmFsKSB7XG4gIGlmICh0cmFuc2xhdGUgPT09IHZvaWQgMCkge1xuICAgIHRyYW5zbGF0ZSA9IDA7XG4gIH1cbiAgaWYgKHNwZWVkID09PSB2b2lkIDApIHtcbiAgICBzcGVlZCA9IHRoaXMucGFyYW1zLnNwZWVkO1xuICB9XG4gIGlmIChydW5DYWxsYmFja3MgPT09IHZvaWQgMCkge1xuICAgIHJ1bkNhbGxiYWNrcyA9IHRydWU7XG4gIH1cbiAgaWYgKHRyYW5zbGF0ZUJvdW5kcyA9PT0gdm9pZCAwKSB7XG4gICAgdHJhbnNsYXRlQm91bmRzID0gdHJ1ZTtcbiAgfVxuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCB7XG4gICAgcGFyYW1zLFxuICAgIHdyYXBwZXJFbFxuICB9ID0gc3dpcGVyO1xuICBpZiAoc3dpcGVyLmFuaW1hdGluZyAmJiBwYXJhbXMucHJldmVudEludGVyYWN0aW9uT25UcmFuc2l0aW9uKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGNvbnN0IG1pblRyYW5zbGF0ZSA9IHN3aXBlci5taW5UcmFuc2xhdGUoKTtcbiAgY29uc3QgbWF4VHJhbnNsYXRlID0gc3dpcGVyLm1heFRyYW5zbGF0ZSgpO1xuICBsZXQgbmV3VHJhbnNsYXRlO1xuICBpZiAodHJhbnNsYXRlQm91bmRzICYmIHRyYW5zbGF0ZSA+IG1pblRyYW5zbGF0ZSkgbmV3VHJhbnNsYXRlID0gbWluVHJhbnNsYXRlO2Vsc2UgaWYgKHRyYW5zbGF0ZUJvdW5kcyAmJiB0cmFuc2xhdGUgPCBtYXhUcmFuc2xhdGUpIG5ld1RyYW5zbGF0ZSA9IG1heFRyYW5zbGF0ZTtlbHNlIG5ld1RyYW5zbGF0ZSA9IHRyYW5zbGF0ZTtcblxuICAvLyBVcGRhdGUgcHJvZ3Jlc3NcbiAgc3dpcGVyLnVwZGF0ZVByb2dyZXNzKG5ld1RyYW5zbGF0ZSk7XG4gIGlmIChwYXJhbXMuY3NzTW9kZSkge1xuICAgIGNvbnN0IGlzSCA9IHN3aXBlci5pc0hvcml6b250YWwoKTtcbiAgICBpZiAoc3BlZWQgPT09IDApIHtcbiAgICAgIHdyYXBwZXJFbFtpc0ggPyAnc2Nyb2xsTGVmdCcgOiAnc2Nyb2xsVG9wJ10gPSAtbmV3VHJhbnNsYXRlO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoIXN3aXBlci5zdXBwb3J0LnNtb290aFNjcm9sbCkge1xuICAgICAgICBhbmltYXRlQ1NTTW9kZVNjcm9sbCh7XG4gICAgICAgICAgc3dpcGVyLFxuICAgICAgICAgIHRhcmdldFBvc2l0aW9uOiAtbmV3VHJhbnNsYXRlLFxuICAgICAgICAgIHNpZGU6IGlzSCA/ICdsZWZ0JyA6ICd0b3AnXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHdyYXBwZXJFbC5zY3JvbGxUbyh7XG4gICAgICAgIFtpc0ggPyAnbGVmdCcgOiAndG9wJ106IC1uZXdUcmFuc2xhdGUsXG4gICAgICAgIGJlaGF2aW9yOiAnc21vb3RoJ1xuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIGlmIChzcGVlZCA9PT0gMCkge1xuICAgIHN3aXBlci5zZXRUcmFuc2l0aW9uKDApO1xuICAgIHN3aXBlci5zZXRUcmFuc2xhdGUobmV3VHJhbnNsYXRlKTtcbiAgICBpZiAocnVuQ2FsbGJhY2tzKSB7XG4gICAgICBzd2lwZXIuZW1pdCgnYmVmb3JlVHJhbnNpdGlvblN0YXJ0Jywgc3BlZWQsIGludGVybmFsKTtcbiAgICAgIHN3aXBlci5lbWl0KCd0cmFuc2l0aW9uRW5kJyk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHN3aXBlci5zZXRUcmFuc2l0aW9uKHNwZWVkKTtcbiAgICBzd2lwZXIuc2V0VHJhbnNsYXRlKG5ld1RyYW5zbGF0ZSk7XG4gICAgaWYgKHJ1bkNhbGxiYWNrcykge1xuICAgICAgc3dpcGVyLmVtaXQoJ2JlZm9yZVRyYW5zaXRpb25TdGFydCcsIHNwZWVkLCBpbnRlcm5hbCk7XG4gICAgICBzd2lwZXIuZW1pdCgndHJhbnNpdGlvblN0YXJ0Jyk7XG4gICAgfVxuICAgIGlmICghc3dpcGVyLmFuaW1hdGluZykge1xuICAgICAgc3dpcGVyLmFuaW1hdGluZyA9IHRydWU7XG4gICAgICBpZiAoIXN3aXBlci5vblRyYW5zbGF0ZVRvV3JhcHBlclRyYW5zaXRpb25FbmQpIHtcbiAgICAgICAgc3dpcGVyLm9uVHJhbnNsYXRlVG9XcmFwcGVyVHJhbnNpdGlvbkVuZCA9IGZ1bmN0aW9uIHRyYW5zaXRpb25FbmQoZSkge1xuICAgICAgICAgIGlmICghc3dpcGVyIHx8IHN3aXBlci5kZXN0cm95ZWQpIHJldHVybjtcbiAgICAgICAgICBpZiAoZS50YXJnZXQgIT09IHRoaXMpIHJldHVybjtcbiAgICAgICAgICBzd2lwZXIud3JhcHBlckVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RyYW5zaXRpb25lbmQnLCBzd2lwZXIub25UcmFuc2xhdGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kKTtcbiAgICAgICAgICBzd2lwZXIub25UcmFuc2xhdGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kID0gbnVsbDtcbiAgICAgICAgICBkZWxldGUgc3dpcGVyLm9uVHJhbnNsYXRlVG9XcmFwcGVyVHJhbnNpdGlvbkVuZDtcbiAgICAgICAgICBzd2lwZXIuYW5pbWF0aW5nID0gZmFsc2U7XG4gICAgICAgICAgaWYgKHJ1bkNhbGxiYWNrcykge1xuICAgICAgICAgICAgc3dpcGVyLmVtaXQoJ3RyYW5zaXRpb25FbmQnKTtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICB9XG4gICAgICBzd2lwZXIud3JhcHBlckVsLmFkZEV2ZW50TGlzdGVuZXIoJ3RyYW5zaXRpb25lbmQnLCBzd2lwZXIub25UcmFuc2xhdGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRydWU7XG59XG5cbnZhciB0cmFuc2xhdGUgPSB7XG4gIGdldFRyYW5zbGF0ZTogZ2V0U3dpcGVyVHJhbnNsYXRlLFxuICBzZXRUcmFuc2xhdGUsXG4gIG1pblRyYW5zbGF0ZSxcbiAgbWF4VHJhbnNsYXRlLFxuICB0cmFuc2xhdGVUb1xufTtcblxuZnVuY3Rpb24gc2V0VHJhbnNpdGlvbihkdXJhdGlvbiwgYnlDb250cm9sbGVyKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGlmICghc3dpcGVyLnBhcmFtcy5jc3NNb2RlKSB7XG4gICAgc3dpcGVyLndyYXBwZXJFbC5zdHlsZS50cmFuc2l0aW9uRHVyYXRpb24gPSBgJHtkdXJhdGlvbn1tc2A7XG4gICAgc3dpcGVyLndyYXBwZXJFbC5zdHlsZS50cmFuc2l0aW9uRGVsYXkgPSBkdXJhdGlvbiA9PT0gMCA/IGAwbXNgIDogJyc7XG4gIH1cbiAgc3dpcGVyLmVtaXQoJ3NldFRyYW5zaXRpb24nLCBkdXJhdGlvbiwgYnlDb250cm9sbGVyKTtcbn1cblxuZnVuY3Rpb24gdHJhbnNpdGlvbkVtaXQoX3JlZikge1xuICBsZXQge1xuICAgIHN3aXBlcixcbiAgICBydW5DYWxsYmFja3MsXG4gICAgZGlyZWN0aW9uLFxuICAgIHN0ZXBcbiAgfSA9IF9yZWY7XG4gIGNvbnN0IHtcbiAgICBhY3RpdmVJbmRleCxcbiAgICBwcmV2aW91c0luZGV4XG4gIH0gPSBzd2lwZXI7XG4gIGxldCBkaXIgPSBkaXJlY3Rpb247XG4gIGlmICghZGlyKSB7XG4gICAgaWYgKGFjdGl2ZUluZGV4ID4gcHJldmlvdXNJbmRleCkgZGlyID0gJ25leHQnO2Vsc2UgaWYgKGFjdGl2ZUluZGV4IDwgcHJldmlvdXNJbmRleCkgZGlyID0gJ3ByZXYnO2Vsc2UgZGlyID0gJ3Jlc2V0JztcbiAgfVxuICBzd2lwZXIuZW1pdChgdHJhbnNpdGlvbiR7c3RlcH1gKTtcbiAgaWYgKHJ1bkNhbGxiYWNrcyAmJiBhY3RpdmVJbmRleCAhPT0gcHJldmlvdXNJbmRleCkge1xuICAgIGlmIChkaXIgPT09ICdyZXNldCcpIHtcbiAgICAgIHN3aXBlci5lbWl0KGBzbGlkZVJlc2V0VHJhbnNpdGlvbiR7c3RlcH1gKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgc3dpcGVyLmVtaXQoYHNsaWRlQ2hhbmdlVHJhbnNpdGlvbiR7c3RlcH1gKTtcbiAgICBpZiAoZGlyID09PSAnbmV4dCcpIHtcbiAgICAgIHN3aXBlci5lbWl0KGBzbGlkZU5leHRUcmFuc2l0aW9uJHtzdGVwfWApO1xuICAgIH0gZWxzZSB7XG4gICAgICBzd2lwZXIuZW1pdChgc2xpZGVQcmV2VHJhbnNpdGlvbiR7c3RlcH1gKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gdHJhbnNpdGlvblN0YXJ0KHJ1bkNhbGxiYWNrcywgZGlyZWN0aW9uKSB7XG4gIGlmIChydW5DYWxsYmFja3MgPT09IHZvaWQgMCkge1xuICAgIHJ1bkNhbGxiYWNrcyA9IHRydWU7XG4gIH1cbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgY29uc3Qge1xuICAgIHBhcmFtc1xuICB9ID0gc3dpcGVyO1xuICBpZiAocGFyYW1zLmNzc01vZGUpIHJldHVybjtcbiAgaWYgKHBhcmFtcy5hdXRvSGVpZ2h0KSB7XG4gICAgc3dpcGVyLnVwZGF0ZUF1dG9IZWlnaHQoKTtcbiAgfVxuICB0cmFuc2l0aW9uRW1pdCh7XG4gICAgc3dpcGVyLFxuICAgIHJ1bkNhbGxiYWNrcyxcbiAgICBkaXJlY3Rpb24sXG4gICAgc3RlcDogJ1N0YXJ0J1xuICB9KTtcbn1cblxuZnVuY3Rpb24gdHJhbnNpdGlvbkVuZChydW5DYWxsYmFja3MsIGRpcmVjdGlvbikge1xuICBpZiAocnVuQ2FsbGJhY2tzID09PSB2b2lkIDApIHtcbiAgICBydW5DYWxsYmFja3MgPSB0cnVlO1xuICB9XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IHtcbiAgICBwYXJhbXNcbiAgfSA9IHN3aXBlcjtcbiAgc3dpcGVyLmFuaW1hdGluZyA9IGZhbHNlO1xuICBpZiAocGFyYW1zLmNzc01vZGUpIHJldHVybjtcbiAgc3dpcGVyLnNldFRyYW5zaXRpb24oMCk7XG4gIHRyYW5zaXRpb25FbWl0KHtcbiAgICBzd2lwZXIsXG4gICAgcnVuQ2FsbGJhY2tzLFxuICAgIGRpcmVjdGlvbixcbiAgICBzdGVwOiAnRW5kJ1xuICB9KTtcbn1cblxudmFyIHRyYW5zaXRpb24gPSB7XG4gIHNldFRyYW5zaXRpb24sXG4gIHRyYW5zaXRpb25TdGFydCxcbiAgdHJhbnNpdGlvbkVuZFxufTtcblxuZnVuY3Rpb24gc2xpZGVUbyhpbmRleCwgc3BlZWQsIHJ1bkNhbGxiYWNrcywgaW50ZXJuYWwsIGluaXRpYWwpIHtcbiAgaWYgKGluZGV4ID09PSB2b2lkIDApIHtcbiAgICBpbmRleCA9IDA7XG4gIH1cbiAgaWYgKHJ1bkNhbGxiYWNrcyA9PT0gdm9pZCAwKSB7XG4gICAgcnVuQ2FsbGJhY2tzID0gdHJ1ZTtcbiAgfVxuICBpZiAodHlwZW9mIGluZGV4ID09PSAnc3RyaW5nJykge1xuICAgIGluZGV4ID0gcGFyc2VJbnQoaW5kZXgsIDEwKTtcbiAgfVxuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBsZXQgc2xpZGVJbmRleCA9IGluZGV4O1xuICBpZiAoc2xpZGVJbmRleCA8IDApIHNsaWRlSW5kZXggPSAwO1xuICBjb25zdCB7XG4gICAgcGFyYW1zLFxuICAgIHNuYXBHcmlkLFxuICAgIHNsaWRlc0dyaWQsXG4gICAgcHJldmlvdXNJbmRleCxcbiAgICBhY3RpdmVJbmRleCxcbiAgICBydGxUcmFuc2xhdGU6IHJ0bCxcbiAgICB3cmFwcGVyRWwsXG4gICAgZW5hYmxlZFxuICB9ID0gc3dpcGVyO1xuICBpZiAoIWVuYWJsZWQgJiYgIWludGVybmFsICYmICFpbml0aWFsIHx8IHN3aXBlci5kZXN0cm95ZWQgfHwgc3dpcGVyLmFuaW1hdGluZyAmJiBwYXJhbXMucHJldmVudEludGVyYWN0aW9uT25UcmFuc2l0aW9uKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGlmICh0eXBlb2Ygc3BlZWQgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgc3BlZWQgPSBzd2lwZXIucGFyYW1zLnNwZWVkO1xuICB9XG4gIGNvbnN0IHNraXAgPSBNYXRoLm1pbihzd2lwZXIucGFyYW1zLnNsaWRlc1Blckdyb3VwU2tpcCwgc2xpZGVJbmRleCk7XG4gIGxldCBzbmFwSW5kZXggPSBza2lwICsgTWF0aC5mbG9vcigoc2xpZGVJbmRleCAtIHNraXApIC8gc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJHcm91cCk7XG4gIGlmIChzbmFwSW5kZXggPj0gc25hcEdyaWQubGVuZ3RoKSBzbmFwSW5kZXggPSBzbmFwR3JpZC5sZW5ndGggLSAxO1xuICBjb25zdCB0cmFuc2xhdGUgPSAtc25hcEdyaWRbc25hcEluZGV4XTtcbiAgLy8gTm9ybWFsaXplIHNsaWRlSW5kZXhcbiAgaWYgKHBhcmFtcy5ub3JtYWxpemVTbGlkZUluZGV4KSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzbGlkZXNHcmlkLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICBjb25zdCBub3JtYWxpemVkVHJhbnNsYXRlID0gLU1hdGguZmxvb3IodHJhbnNsYXRlICogMTAwKTtcbiAgICAgIGNvbnN0IG5vcm1hbGl6ZWRHcmlkID0gTWF0aC5mbG9vcihzbGlkZXNHcmlkW2ldICogMTAwKTtcbiAgICAgIGNvbnN0IG5vcm1hbGl6ZWRHcmlkTmV4dCA9IE1hdGguZmxvb3Ioc2xpZGVzR3JpZFtpICsgMV0gKiAxMDApO1xuICAgICAgaWYgKHR5cGVvZiBzbGlkZXNHcmlkW2kgKyAxXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgaWYgKG5vcm1hbGl6ZWRUcmFuc2xhdGUgPj0gbm9ybWFsaXplZEdyaWQgJiYgbm9ybWFsaXplZFRyYW5zbGF0ZSA8IG5vcm1hbGl6ZWRHcmlkTmV4dCAtIChub3JtYWxpemVkR3JpZE5leHQgLSBub3JtYWxpemVkR3JpZCkgLyAyKSB7XG4gICAgICAgICAgc2xpZGVJbmRleCA9IGk7XG4gICAgICAgIH0gZWxzZSBpZiAobm9ybWFsaXplZFRyYW5zbGF0ZSA+PSBub3JtYWxpemVkR3JpZCAmJiBub3JtYWxpemVkVHJhbnNsYXRlIDwgbm9ybWFsaXplZEdyaWROZXh0KSB7XG4gICAgICAgICAgc2xpZGVJbmRleCA9IGkgKyAxO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKG5vcm1hbGl6ZWRUcmFuc2xhdGUgPj0gbm9ybWFsaXplZEdyaWQpIHtcbiAgICAgICAgc2xpZGVJbmRleCA9IGk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIC8vIERpcmVjdGlvbnMgbG9ja3NcbiAgaWYgKHN3aXBlci5pbml0aWFsaXplZCAmJiBzbGlkZUluZGV4ICE9PSBhY3RpdmVJbmRleCkge1xuICAgIGlmICghc3dpcGVyLmFsbG93U2xpZGVOZXh0ICYmIChydGwgPyB0cmFuc2xhdGUgPiBzd2lwZXIudHJhbnNsYXRlICYmIHRyYW5zbGF0ZSA+IHN3aXBlci5taW5UcmFuc2xhdGUoKSA6IHRyYW5zbGF0ZSA8IHN3aXBlci50cmFuc2xhdGUgJiYgdHJhbnNsYXRlIDwgc3dpcGVyLm1pblRyYW5zbGF0ZSgpKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAoIXN3aXBlci5hbGxvd1NsaWRlUHJldiAmJiB0cmFuc2xhdGUgPiBzd2lwZXIudHJhbnNsYXRlICYmIHRyYW5zbGF0ZSA+IHN3aXBlci5tYXhUcmFuc2xhdGUoKSkge1xuICAgICAgaWYgKChhY3RpdmVJbmRleCB8fCAwKSAhPT0gc2xpZGVJbmRleCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGlmIChzbGlkZUluZGV4ICE9PSAocHJldmlvdXNJbmRleCB8fCAwKSAmJiBydW5DYWxsYmFja3MpIHtcbiAgICBzd2lwZXIuZW1pdCgnYmVmb3JlU2xpZGVDaGFuZ2VTdGFydCcpO1xuICB9XG5cbiAgLy8gVXBkYXRlIHByb2dyZXNzXG4gIHN3aXBlci51cGRhdGVQcm9ncmVzcyh0cmFuc2xhdGUpO1xuICBsZXQgZGlyZWN0aW9uO1xuICBpZiAoc2xpZGVJbmRleCA+IGFjdGl2ZUluZGV4KSBkaXJlY3Rpb24gPSAnbmV4dCc7ZWxzZSBpZiAoc2xpZGVJbmRleCA8IGFjdGl2ZUluZGV4KSBkaXJlY3Rpb24gPSAncHJldic7ZWxzZSBkaXJlY3Rpb24gPSAncmVzZXQnO1xuXG4gIC8vIFVwZGF0ZSBJbmRleFxuICBpZiAocnRsICYmIC10cmFuc2xhdGUgPT09IHN3aXBlci50cmFuc2xhdGUgfHwgIXJ0bCAmJiB0cmFuc2xhdGUgPT09IHN3aXBlci50cmFuc2xhdGUpIHtcbiAgICBzd2lwZXIudXBkYXRlQWN0aXZlSW5kZXgoc2xpZGVJbmRleCk7XG4gICAgLy8gVXBkYXRlIEhlaWdodFxuICAgIGlmIChwYXJhbXMuYXV0b0hlaWdodCkge1xuICAgICAgc3dpcGVyLnVwZGF0ZUF1dG9IZWlnaHQoKTtcbiAgICB9XG4gICAgc3dpcGVyLnVwZGF0ZVNsaWRlc0NsYXNzZXMoKTtcbiAgICBpZiAocGFyYW1zLmVmZmVjdCAhPT0gJ3NsaWRlJykge1xuICAgICAgc3dpcGVyLnNldFRyYW5zbGF0ZSh0cmFuc2xhdGUpO1xuICAgIH1cbiAgICBpZiAoZGlyZWN0aW9uICE9PSAncmVzZXQnKSB7XG4gICAgICBzd2lwZXIudHJhbnNpdGlvblN0YXJ0KHJ1bkNhbGxiYWNrcywgZGlyZWN0aW9uKTtcbiAgICAgIHN3aXBlci50cmFuc2l0aW9uRW5kKHJ1bkNhbGxiYWNrcywgZGlyZWN0aW9uKTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGlmIChwYXJhbXMuY3NzTW9kZSkge1xuICAgIGNvbnN0IGlzSCA9IHN3aXBlci5pc0hvcml6b250YWwoKTtcbiAgICBjb25zdCB0ID0gcnRsID8gdHJhbnNsYXRlIDogLXRyYW5zbGF0ZTtcbiAgICBpZiAoc3BlZWQgPT09IDApIHtcbiAgICAgIGNvbnN0IGlzVmlydHVhbCA9IHN3aXBlci52aXJ0dWFsICYmIHN3aXBlci5wYXJhbXMudmlydHVhbC5lbmFibGVkO1xuICAgICAgaWYgKGlzVmlydHVhbCkge1xuICAgICAgICBzd2lwZXIud3JhcHBlckVsLnN0eWxlLnNjcm9sbFNuYXBUeXBlID0gJ25vbmUnO1xuICAgICAgICBzd2lwZXIuX2ltbWVkaWF0ZVZpcnR1YWwgPSB0cnVlO1xuICAgICAgfVxuICAgICAgaWYgKGlzVmlydHVhbCAmJiAhc3dpcGVyLl9jc3NNb2RlVmlydHVhbEluaXRpYWxTZXQgJiYgc3dpcGVyLnBhcmFtcy5pbml0aWFsU2xpZGUgPiAwKSB7XG4gICAgICAgIHN3aXBlci5fY3NzTW9kZVZpcnR1YWxJbml0aWFsU2V0ID0gdHJ1ZTtcbiAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICAgICAgICB3cmFwcGVyRWxbaXNIID8gJ3Njcm9sbExlZnQnIDogJ3Njcm9sbFRvcCddID0gdDtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB3cmFwcGVyRWxbaXNIID8gJ3Njcm9sbExlZnQnIDogJ3Njcm9sbFRvcCddID0gdDtcbiAgICAgIH1cbiAgICAgIGlmIChpc1ZpcnR1YWwpIHtcbiAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICAgICAgICBzd2lwZXIud3JhcHBlckVsLnN0eWxlLnNjcm9sbFNuYXBUeXBlID0gJyc7XG4gICAgICAgICAgc3dpcGVyLl9pbW1lZGlhdGVWaXJ0dWFsID0gZmFsc2U7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoIXN3aXBlci5zdXBwb3J0LnNtb290aFNjcm9sbCkge1xuICAgICAgICBhbmltYXRlQ1NTTW9kZVNjcm9sbCh7XG4gICAgICAgICAgc3dpcGVyLFxuICAgICAgICAgIHRhcmdldFBvc2l0aW9uOiB0LFxuICAgICAgICAgIHNpZGU6IGlzSCA/ICdsZWZ0JyA6ICd0b3AnXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHdyYXBwZXJFbC5zY3JvbGxUbyh7XG4gICAgICAgIFtpc0ggPyAnbGVmdCcgOiAndG9wJ106IHQsXG4gICAgICAgIGJlaGF2aW9yOiAnc21vb3RoJ1xuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHN3aXBlci5zZXRUcmFuc2l0aW9uKHNwZWVkKTtcbiAgc3dpcGVyLnNldFRyYW5zbGF0ZSh0cmFuc2xhdGUpO1xuICBzd2lwZXIudXBkYXRlQWN0aXZlSW5kZXgoc2xpZGVJbmRleCk7XG4gIHN3aXBlci51cGRhdGVTbGlkZXNDbGFzc2VzKCk7XG4gIHN3aXBlci5lbWl0KCdiZWZvcmVUcmFuc2l0aW9uU3RhcnQnLCBzcGVlZCwgaW50ZXJuYWwpO1xuICBzd2lwZXIudHJhbnNpdGlvblN0YXJ0KHJ1bkNhbGxiYWNrcywgZGlyZWN0aW9uKTtcbiAgaWYgKHNwZWVkID09PSAwKSB7XG4gICAgc3dpcGVyLnRyYW5zaXRpb25FbmQocnVuQ2FsbGJhY2tzLCBkaXJlY3Rpb24pO1xuICB9IGVsc2UgaWYgKCFzd2lwZXIuYW5pbWF0aW5nKSB7XG4gICAgc3dpcGVyLmFuaW1hdGluZyA9IHRydWU7XG4gICAgaWYgKCFzd2lwZXIub25TbGlkZVRvV3JhcHBlclRyYW5zaXRpb25FbmQpIHtcbiAgICAgIHN3aXBlci5vblNsaWRlVG9XcmFwcGVyVHJhbnNpdGlvbkVuZCA9IGZ1bmN0aW9uIHRyYW5zaXRpb25FbmQoZSkge1xuICAgICAgICBpZiAoIXN3aXBlciB8fCBzd2lwZXIuZGVzdHJveWVkKSByZXR1cm47XG4gICAgICAgIGlmIChlLnRhcmdldCAhPT0gdGhpcykgcmV0dXJuO1xuICAgICAgICBzd2lwZXIud3JhcHBlckVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RyYW5zaXRpb25lbmQnLCBzd2lwZXIub25TbGlkZVRvV3JhcHBlclRyYW5zaXRpb25FbmQpO1xuICAgICAgICBzd2lwZXIub25TbGlkZVRvV3JhcHBlclRyYW5zaXRpb25FbmQgPSBudWxsO1xuICAgICAgICBkZWxldGUgc3dpcGVyLm9uU2xpZGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kO1xuICAgICAgICBzd2lwZXIudHJhbnNpdGlvbkVuZChydW5DYWxsYmFja3MsIGRpcmVjdGlvbik7XG4gICAgICB9O1xuICAgIH1cbiAgICBzd2lwZXIud3JhcHBlckVsLmFkZEV2ZW50TGlzdGVuZXIoJ3RyYW5zaXRpb25lbmQnLCBzd2lwZXIub25TbGlkZVRvV3JhcHBlclRyYW5zaXRpb25FbmQpO1xuICB9XG4gIHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiBzbGlkZVRvTG9vcChpbmRleCwgc3BlZWQsIHJ1bkNhbGxiYWNrcywgaW50ZXJuYWwpIHtcbiAgaWYgKGluZGV4ID09PSB2b2lkIDApIHtcbiAgICBpbmRleCA9IDA7XG4gIH1cbiAgaWYgKHJ1bkNhbGxiYWNrcyA9PT0gdm9pZCAwKSB7XG4gICAgcnVuQ2FsbGJhY2tzID0gdHJ1ZTtcbiAgfVxuICBpZiAodHlwZW9mIGluZGV4ID09PSAnc3RyaW5nJykge1xuICAgIGNvbnN0IGluZGV4QXNOdW1iZXIgPSBwYXJzZUludChpbmRleCwgMTApO1xuICAgIGluZGV4ID0gaW5kZXhBc051bWJlcjtcbiAgfVxuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBpZiAoc3dpcGVyLmRlc3Ryb3llZCkgcmV0dXJuO1xuICBpZiAodHlwZW9mIHNwZWVkID09PSAndW5kZWZpbmVkJykge1xuICAgIHNwZWVkID0gc3dpcGVyLnBhcmFtcy5zcGVlZDtcbiAgfVxuICBjb25zdCBncmlkRW5hYmxlZCA9IHN3aXBlci5ncmlkICYmIHN3aXBlci5wYXJhbXMuZ3JpZCAmJiBzd2lwZXIucGFyYW1zLmdyaWQucm93cyA+IDE7XG4gIGxldCBuZXdJbmRleCA9IGluZGV4O1xuICBpZiAoc3dpcGVyLnBhcmFtcy5sb29wKSB7XG4gICAgaWYgKHN3aXBlci52aXJ0dWFsICYmIHN3aXBlci5wYXJhbXMudmlydHVhbC5lbmFibGVkKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICAgIG5ld0luZGV4ID0gbmV3SW5kZXggKyBzd2lwZXIudmlydHVhbC5zbGlkZXNCZWZvcmU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxldCB0YXJnZXRTbGlkZUluZGV4O1xuICAgICAgaWYgKGdyaWRFbmFibGVkKSB7XG4gICAgICAgIGNvbnN0IHNsaWRlSW5kZXggPSBuZXdJbmRleCAqIHN3aXBlci5wYXJhbXMuZ3JpZC5yb3dzO1xuICAgICAgICB0YXJnZXRTbGlkZUluZGV4ID0gc3dpcGVyLnNsaWRlcy5maWx0ZXIoc2xpZGVFbCA9PiBzbGlkZUVsLmdldEF0dHJpYnV0ZSgnZGF0YS1zd2lwZXItc2xpZGUtaW5kZXgnKSAqIDEgPT09IHNsaWRlSW5kZXgpWzBdLmNvbHVtbjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRhcmdldFNsaWRlSW5kZXggPSBzd2lwZXIuZ2V0U2xpZGVJbmRleEJ5RGF0YShuZXdJbmRleCk7XG4gICAgICB9XG4gICAgICBjb25zdCBjb2xzID0gZ3JpZEVuYWJsZWQgPyBNYXRoLmNlaWwoc3dpcGVyLnNsaWRlcy5sZW5ndGggLyBzd2lwZXIucGFyYW1zLmdyaWQucm93cykgOiBzd2lwZXIuc2xpZGVzLmxlbmd0aDtcbiAgICAgIGNvbnN0IHtcbiAgICAgICAgY2VudGVyZWRTbGlkZXNcbiAgICAgIH0gPSBzd2lwZXIucGFyYW1zO1xuICAgICAgbGV0IHNsaWRlc1BlclZpZXcgPSBzd2lwZXIucGFyYW1zLnNsaWRlc1BlclZpZXc7XG4gICAgICBpZiAoc2xpZGVzUGVyVmlldyA9PT0gJ2F1dG8nKSB7XG4gICAgICAgIHNsaWRlc1BlclZpZXcgPSBzd2lwZXIuc2xpZGVzUGVyVmlld0R5bmFtaWMoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNsaWRlc1BlclZpZXcgPSBNYXRoLmNlaWwocGFyc2VGbG9hdChzd2lwZXIucGFyYW1zLnNsaWRlc1BlclZpZXcsIDEwKSk7XG4gICAgICAgIGlmIChjZW50ZXJlZFNsaWRlcyAmJiBzbGlkZXNQZXJWaWV3ICUgMiA9PT0gMCkge1xuICAgICAgICAgIHNsaWRlc1BlclZpZXcgPSBzbGlkZXNQZXJWaWV3ICsgMTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgbGV0IG5lZWRMb29wRml4ID0gY29scyAtIHRhcmdldFNsaWRlSW5kZXggPCBzbGlkZXNQZXJWaWV3O1xuICAgICAgaWYgKGNlbnRlcmVkU2xpZGVzKSB7XG4gICAgICAgIG5lZWRMb29wRml4ID0gbmVlZExvb3BGaXggfHwgdGFyZ2V0U2xpZGVJbmRleCA8IE1hdGguY2VpbChzbGlkZXNQZXJWaWV3IC8gMik7XG4gICAgICB9XG4gICAgICBpZiAoaW50ZXJuYWwgJiYgY2VudGVyZWRTbGlkZXMgJiYgc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJWaWV3ICE9PSAnYXV0bycgJiYgIWdyaWRFbmFibGVkKSB7XG4gICAgICAgIG5lZWRMb29wRml4ID0gZmFsc2U7XG4gICAgICB9XG4gICAgICBpZiAobmVlZExvb3BGaXgpIHtcbiAgICAgICAgY29uc3QgZGlyZWN0aW9uID0gY2VudGVyZWRTbGlkZXMgPyB0YXJnZXRTbGlkZUluZGV4IDwgc3dpcGVyLmFjdGl2ZUluZGV4ID8gJ3ByZXYnIDogJ25leHQnIDogdGFyZ2V0U2xpZGVJbmRleCAtIHN3aXBlci5hY3RpdmVJbmRleCAtIDEgPCBzd2lwZXIucGFyYW1zLnNsaWRlc1BlclZpZXcgPyAnbmV4dCcgOiAncHJldic7XG4gICAgICAgIHN3aXBlci5sb29wRml4KHtcbiAgICAgICAgICBkaXJlY3Rpb24sXG4gICAgICAgICAgc2xpZGVUbzogdHJ1ZSxcbiAgICAgICAgICBhY3RpdmVTbGlkZUluZGV4OiBkaXJlY3Rpb24gPT09ICduZXh0JyA/IHRhcmdldFNsaWRlSW5kZXggKyAxIDogdGFyZ2V0U2xpZGVJbmRleCAtIGNvbHMgKyAxLFxuICAgICAgICAgIHNsaWRlUmVhbEluZGV4OiBkaXJlY3Rpb24gPT09ICduZXh0JyA/IHN3aXBlci5yZWFsSW5kZXggOiB1bmRlZmluZWRcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBpZiAoZ3JpZEVuYWJsZWQpIHtcbiAgICAgICAgY29uc3Qgc2xpZGVJbmRleCA9IG5ld0luZGV4ICogc3dpcGVyLnBhcmFtcy5ncmlkLnJvd3M7XG4gICAgICAgIG5ld0luZGV4ID0gc3dpcGVyLnNsaWRlcy5maWx0ZXIoc2xpZGVFbCA9PiBzbGlkZUVsLmdldEF0dHJpYnV0ZSgnZGF0YS1zd2lwZXItc2xpZGUtaW5kZXgnKSAqIDEgPT09IHNsaWRlSW5kZXgpWzBdLmNvbHVtbjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5ld0luZGV4ID0gc3dpcGVyLmdldFNsaWRlSW5kZXhCeURhdGEobmV3SW5kZXgpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgIHN3aXBlci5zbGlkZVRvKG5ld0luZGV4LCBzcGVlZCwgcnVuQ2FsbGJhY2tzLCBpbnRlcm5hbCk7XG4gIH0pO1xuICByZXR1cm4gc3dpcGVyO1xufVxuXG4vKiBlc2xpbnQgbm8tdW51c2VkLXZhcnM6IFwib2ZmXCIgKi9cbmZ1bmN0aW9uIHNsaWRlTmV4dChzcGVlZCwgcnVuQ2FsbGJhY2tzLCBpbnRlcm5hbCkge1xuICBpZiAocnVuQ2FsbGJhY2tzID09PSB2b2lkIDApIHtcbiAgICBydW5DYWxsYmFja3MgPSB0cnVlO1xuICB9XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IHtcbiAgICBlbmFibGVkLFxuICAgIHBhcmFtcyxcbiAgICBhbmltYXRpbmdcbiAgfSA9IHN3aXBlcjtcbiAgaWYgKCFlbmFibGVkIHx8IHN3aXBlci5kZXN0cm95ZWQpIHJldHVybiBzd2lwZXI7XG4gIGlmICh0eXBlb2Ygc3BlZWQgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgc3BlZWQgPSBzd2lwZXIucGFyYW1zLnNwZWVkO1xuICB9XG4gIGxldCBwZXJHcm91cCA9IHBhcmFtcy5zbGlkZXNQZXJHcm91cDtcbiAgaWYgKHBhcmFtcy5zbGlkZXNQZXJWaWV3ID09PSAnYXV0bycgJiYgcGFyYW1zLnNsaWRlc1Blckdyb3VwID09PSAxICYmIHBhcmFtcy5zbGlkZXNQZXJHcm91cEF1dG8pIHtcbiAgICBwZXJHcm91cCA9IE1hdGgubWF4KHN3aXBlci5zbGlkZXNQZXJWaWV3RHluYW1pYygnY3VycmVudCcsIHRydWUpLCAxKTtcbiAgfVxuICBjb25zdCBpbmNyZW1lbnQgPSBzd2lwZXIuYWN0aXZlSW5kZXggPCBwYXJhbXMuc2xpZGVzUGVyR3JvdXBTa2lwID8gMSA6IHBlckdyb3VwO1xuICBjb25zdCBpc1ZpcnR1YWwgPSBzd2lwZXIudmlydHVhbCAmJiBwYXJhbXMudmlydHVhbC5lbmFibGVkO1xuICBpZiAocGFyYW1zLmxvb3ApIHtcbiAgICBpZiAoYW5pbWF0aW5nICYmICFpc1ZpcnR1YWwgJiYgcGFyYW1zLmxvb3BQcmV2ZW50c1NsaWRpbmcpIHJldHVybiBmYWxzZTtcbiAgICBzd2lwZXIubG9vcEZpeCh7XG4gICAgICBkaXJlY3Rpb246ICduZXh0J1xuICAgIH0pO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgIHN3aXBlci5fY2xpZW50TGVmdCA9IHN3aXBlci53cmFwcGVyRWwuY2xpZW50TGVmdDtcbiAgICBpZiAoc3dpcGVyLmFjdGl2ZUluZGV4ID09PSBzd2lwZXIuc2xpZGVzLmxlbmd0aCAtIDEgJiYgcGFyYW1zLmNzc01vZGUpIHtcbiAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgICAgIHN3aXBlci5zbGlkZVRvKHN3aXBlci5hY3RpdmVJbmRleCArIGluY3JlbWVudCwgc3BlZWQsIHJ1bkNhbGxiYWNrcywgaW50ZXJuYWwpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cbiAgaWYgKHBhcmFtcy5yZXdpbmQgJiYgc3dpcGVyLmlzRW5kKSB7XG4gICAgcmV0dXJuIHN3aXBlci5zbGlkZVRvKDAsIHNwZWVkLCBydW5DYWxsYmFja3MsIGludGVybmFsKTtcbiAgfVxuICByZXR1cm4gc3dpcGVyLnNsaWRlVG8oc3dpcGVyLmFjdGl2ZUluZGV4ICsgaW5jcmVtZW50LCBzcGVlZCwgcnVuQ2FsbGJhY2tzLCBpbnRlcm5hbCk7XG59XG5cbi8qIGVzbGludCBuby11bnVzZWQtdmFyczogXCJvZmZcIiAqL1xuZnVuY3Rpb24gc2xpZGVQcmV2KHNwZWVkLCBydW5DYWxsYmFja3MsIGludGVybmFsKSB7XG4gIGlmIChydW5DYWxsYmFja3MgPT09IHZvaWQgMCkge1xuICAgIHJ1bkNhbGxiYWNrcyA9IHRydWU7XG4gIH1cbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgY29uc3Qge1xuICAgIHBhcmFtcyxcbiAgICBzbmFwR3JpZCxcbiAgICBzbGlkZXNHcmlkLFxuICAgIHJ0bFRyYW5zbGF0ZSxcbiAgICBlbmFibGVkLFxuICAgIGFuaW1hdGluZ1xuICB9ID0gc3dpcGVyO1xuICBpZiAoIWVuYWJsZWQgfHwgc3dpcGVyLmRlc3Ryb3llZCkgcmV0dXJuIHN3aXBlcjtcbiAgaWYgKHR5cGVvZiBzcGVlZCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBzcGVlZCA9IHN3aXBlci5wYXJhbXMuc3BlZWQ7XG4gIH1cbiAgY29uc3QgaXNWaXJ0dWFsID0gc3dpcGVyLnZpcnR1YWwgJiYgcGFyYW1zLnZpcnR1YWwuZW5hYmxlZDtcbiAgaWYgKHBhcmFtcy5sb29wKSB7XG4gICAgaWYgKGFuaW1hdGluZyAmJiAhaXNWaXJ0dWFsICYmIHBhcmFtcy5sb29wUHJldmVudHNTbGlkaW5nKSByZXR1cm4gZmFsc2U7XG4gICAgc3dpcGVyLmxvb3BGaXgoe1xuICAgICAgZGlyZWN0aW9uOiAncHJldidcbiAgICB9KTtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICBzd2lwZXIuX2NsaWVudExlZnQgPSBzd2lwZXIud3JhcHBlckVsLmNsaWVudExlZnQ7XG4gIH1cbiAgY29uc3QgdHJhbnNsYXRlID0gcnRsVHJhbnNsYXRlID8gc3dpcGVyLnRyYW5zbGF0ZSA6IC1zd2lwZXIudHJhbnNsYXRlO1xuICBmdW5jdGlvbiBub3JtYWxpemUodmFsKSB7XG4gICAgaWYgKHZhbCA8IDApIHJldHVybiAtTWF0aC5mbG9vcihNYXRoLmFicyh2YWwpKTtcbiAgICByZXR1cm4gTWF0aC5mbG9vcih2YWwpO1xuICB9XG4gIGNvbnN0IG5vcm1hbGl6ZWRUcmFuc2xhdGUgPSBub3JtYWxpemUodHJhbnNsYXRlKTtcbiAgY29uc3Qgbm9ybWFsaXplZFNuYXBHcmlkID0gc25hcEdyaWQubWFwKHZhbCA9PiBub3JtYWxpemUodmFsKSk7XG4gIGxldCBwcmV2U25hcCA9IHNuYXBHcmlkW25vcm1hbGl6ZWRTbmFwR3JpZC5pbmRleE9mKG5vcm1hbGl6ZWRUcmFuc2xhdGUpIC0gMV07XG4gIGlmICh0eXBlb2YgcHJldlNuYXAgPT09ICd1bmRlZmluZWQnICYmIHBhcmFtcy5jc3NNb2RlKSB7XG4gICAgbGV0IHByZXZTbmFwSW5kZXg7XG4gICAgc25hcEdyaWQuZm9yRWFjaCgoc25hcCwgc25hcEluZGV4KSA9PiB7XG4gICAgICBpZiAobm9ybWFsaXplZFRyYW5zbGF0ZSA+PSBzbmFwKSB7XG4gICAgICAgIC8vIHByZXZTbmFwID0gc25hcDtcbiAgICAgICAgcHJldlNuYXBJbmRleCA9IHNuYXBJbmRleDtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBpZiAodHlwZW9mIHByZXZTbmFwSW5kZXggIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBwcmV2U25hcCA9IHNuYXBHcmlkW3ByZXZTbmFwSW5kZXggPiAwID8gcHJldlNuYXBJbmRleCAtIDEgOiBwcmV2U25hcEluZGV4XTtcbiAgICB9XG4gIH1cbiAgbGV0IHByZXZJbmRleCA9IDA7XG4gIGlmICh0eXBlb2YgcHJldlNuYXAgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgcHJldkluZGV4ID0gc2xpZGVzR3JpZC5pbmRleE9mKHByZXZTbmFwKTtcbiAgICBpZiAocHJldkluZGV4IDwgMCkgcHJldkluZGV4ID0gc3dpcGVyLmFjdGl2ZUluZGV4IC0gMTtcbiAgICBpZiAocGFyYW1zLnNsaWRlc1BlclZpZXcgPT09ICdhdXRvJyAmJiBwYXJhbXMuc2xpZGVzUGVyR3JvdXAgPT09IDEgJiYgcGFyYW1zLnNsaWRlc1Blckdyb3VwQXV0bykge1xuICAgICAgcHJldkluZGV4ID0gcHJldkluZGV4IC0gc3dpcGVyLnNsaWRlc1BlclZpZXdEeW5hbWljKCdwcmV2aW91cycsIHRydWUpICsgMTtcbiAgICAgIHByZXZJbmRleCA9IE1hdGgubWF4KHByZXZJbmRleCwgMCk7XG4gICAgfVxuICB9XG4gIGlmIChwYXJhbXMucmV3aW5kICYmIHN3aXBlci5pc0JlZ2lubmluZykge1xuICAgIGNvbnN0IGxhc3RJbmRleCA9IHN3aXBlci5wYXJhbXMudmlydHVhbCAmJiBzd2lwZXIucGFyYW1zLnZpcnR1YWwuZW5hYmxlZCAmJiBzd2lwZXIudmlydHVhbCA/IHN3aXBlci52aXJ0dWFsLnNsaWRlcy5sZW5ndGggLSAxIDogc3dpcGVyLnNsaWRlcy5sZW5ndGggLSAxO1xuICAgIHJldHVybiBzd2lwZXIuc2xpZGVUbyhsYXN0SW5kZXgsIHNwZWVkLCBydW5DYWxsYmFja3MsIGludGVybmFsKTtcbiAgfSBlbHNlIGlmIChwYXJhbXMubG9vcCAmJiBzd2lwZXIuYWN0aXZlSW5kZXggPT09IDAgJiYgcGFyYW1zLmNzc01vZGUpIHtcbiAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgICAgc3dpcGVyLnNsaWRlVG8ocHJldkluZGV4LCBzcGVlZCwgcnVuQ2FsbGJhY2tzLCBpbnRlcm5hbCk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgcmV0dXJuIHN3aXBlci5zbGlkZVRvKHByZXZJbmRleCwgc3BlZWQsIHJ1bkNhbGxiYWNrcywgaW50ZXJuYWwpO1xufVxuXG4vKiBlc2xpbnQgbm8tdW51c2VkLXZhcnM6IFwib2ZmXCIgKi9cbmZ1bmN0aW9uIHNsaWRlUmVzZXQoc3BlZWQsIHJ1bkNhbGxiYWNrcywgaW50ZXJuYWwpIHtcbiAgaWYgKHJ1bkNhbGxiYWNrcyA9PT0gdm9pZCAwKSB7XG4gICAgcnVuQ2FsbGJhY2tzID0gdHJ1ZTtcbiAgfVxuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBpZiAoc3dpcGVyLmRlc3Ryb3llZCkgcmV0dXJuO1xuICBpZiAodHlwZW9mIHNwZWVkID09PSAndW5kZWZpbmVkJykge1xuICAgIHNwZWVkID0gc3dpcGVyLnBhcmFtcy5zcGVlZDtcbiAgfVxuICByZXR1cm4gc3dpcGVyLnNsaWRlVG8oc3dpcGVyLmFjdGl2ZUluZGV4LCBzcGVlZCwgcnVuQ2FsbGJhY2tzLCBpbnRlcm5hbCk7XG59XG5cbi8qIGVzbGludCBuby11bnVzZWQtdmFyczogXCJvZmZcIiAqL1xuZnVuY3Rpb24gc2xpZGVUb0Nsb3Nlc3Qoc3BlZWQsIHJ1bkNhbGxiYWNrcywgaW50ZXJuYWwsIHRocmVzaG9sZCkge1xuICBpZiAocnVuQ2FsbGJhY2tzID09PSB2b2lkIDApIHtcbiAgICBydW5DYWxsYmFja3MgPSB0cnVlO1xuICB9XG4gIGlmICh0aHJlc2hvbGQgPT09IHZvaWQgMCkge1xuICAgIHRocmVzaG9sZCA9IDAuNTtcbiAgfVxuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBpZiAoc3dpcGVyLmRlc3Ryb3llZCkgcmV0dXJuO1xuICBpZiAodHlwZW9mIHNwZWVkID09PSAndW5kZWZpbmVkJykge1xuICAgIHNwZWVkID0gc3dpcGVyLnBhcmFtcy5zcGVlZDtcbiAgfVxuICBsZXQgaW5kZXggPSBzd2lwZXIuYWN0aXZlSW5kZXg7XG4gIGNvbnN0IHNraXAgPSBNYXRoLm1pbihzd2lwZXIucGFyYW1zLnNsaWRlc1Blckdyb3VwU2tpcCwgaW5kZXgpO1xuICBjb25zdCBzbmFwSW5kZXggPSBza2lwICsgTWF0aC5mbG9vcigoaW5kZXggLSBza2lwKSAvIHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyR3JvdXApO1xuICBjb25zdCB0cmFuc2xhdGUgPSBzd2lwZXIucnRsVHJhbnNsYXRlID8gc3dpcGVyLnRyYW5zbGF0ZSA6IC1zd2lwZXIudHJhbnNsYXRlO1xuICBpZiAodHJhbnNsYXRlID49IHN3aXBlci5zbmFwR3JpZFtzbmFwSW5kZXhdKSB7XG4gICAgLy8gVGhlIGN1cnJlbnQgdHJhbnNsYXRlIGlzIG9uIG9yIGFmdGVyIHRoZSBjdXJyZW50IHNuYXAgaW5kZXgsIHNvIHRoZSBjaG9pY2VcbiAgICAvLyBpcyBiZXR3ZWVuIHRoZSBjdXJyZW50IGluZGV4IGFuZCB0aGUgb25lIGFmdGVyIGl0LlxuICAgIGNvbnN0IGN1cnJlbnRTbmFwID0gc3dpcGVyLnNuYXBHcmlkW3NuYXBJbmRleF07XG4gICAgY29uc3QgbmV4dFNuYXAgPSBzd2lwZXIuc25hcEdyaWRbc25hcEluZGV4ICsgMV07XG4gICAgaWYgKHRyYW5zbGF0ZSAtIGN1cnJlbnRTbmFwID4gKG5leHRTbmFwIC0gY3VycmVudFNuYXApICogdGhyZXNob2xkKSB7XG4gICAgICBpbmRleCArPSBzd2lwZXIucGFyYW1zLnNsaWRlc1Blckdyb3VwO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBUaGUgY3VycmVudCB0cmFuc2xhdGUgaXMgYmVmb3JlIHRoZSBjdXJyZW50IHNuYXAgaW5kZXgsIHNvIHRoZSBjaG9pY2VcbiAgICAvLyBpcyBiZXR3ZWVuIHRoZSBjdXJyZW50IGluZGV4IGFuZCB0aGUgb25lIGJlZm9yZSBpdC5cbiAgICBjb25zdCBwcmV2U25hcCA9IHN3aXBlci5zbmFwR3JpZFtzbmFwSW5kZXggLSAxXTtcbiAgICBjb25zdCBjdXJyZW50U25hcCA9IHN3aXBlci5zbmFwR3JpZFtzbmFwSW5kZXhdO1xuICAgIGlmICh0cmFuc2xhdGUgLSBwcmV2U25hcCA8PSAoY3VycmVudFNuYXAgLSBwcmV2U25hcCkgKiB0aHJlc2hvbGQpIHtcbiAgICAgIGluZGV4IC09IHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyR3JvdXA7XG4gICAgfVxuICB9XG4gIGluZGV4ID0gTWF0aC5tYXgoaW5kZXgsIDApO1xuICBpbmRleCA9IE1hdGgubWluKGluZGV4LCBzd2lwZXIuc2xpZGVzR3JpZC5sZW5ndGggLSAxKTtcbiAgcmV0dXJuIHN3aXBlci5zbGlkZVRvKGluZGV4LCBzcGVlZCwgcnVuQ2FsbGJhY2tzLCBpbnRlcm5hbCk7XG59XG5cbmZ1bmN0aW9uIHNsaWRlVG9DbGlja2VkU2xpZGUoKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGlmIChzd2lwZXIuZGVzdHJveWVkKSByZXR1cm47XG4gIGNvbnN0IHtcbiAgICBwYXJhbXMsXG4gICAgc2xpZGVzRWxcbiAgfSA9IHN3aXBlcjtcbiAgY29uc3Qgc2xpZGVzUGVyVmlldyA9IHBhcmFtcy5zbGlkZXNQZXJWaWV3ID09PSAnYXV0bycgPyBzd2lwZXIuc2xpZGVzUGVyVmlld0R5bmFtaWMoKSA6IHBhcmFtcy5zbGlkZXNQZXJWaWV3O1xuICBsZXQgc2xpZGVUb0luZGV4ID0gc3dpcGVyLmNsaWNrZWRJbmRleDtcbiAgbGV0IHJlYWxJbmRleDtcbiAgY29uc3Qgc2xpZGVTZWxlY3RvciA9IHN3aXBlci5pc0VsZW1lbnQgPyBgc3dpcGVyLXNsaWRlYCA6IGAuJHtwYXJhbXMuc2xpZGVDbGFzc31gO1xuICBpZiAocGFyYW1zLmxvb3ApIHtcbiAgICBpZiAoc3dpcGVyLmFuaW1hdGluZykgcmV0dXJuO1xuICAgIHJlYWxJbmRleCA9IHBhcnNlSW50KHN3aXBlci5jbGlja2VkU2xpZGUuZ2V0QXR0cmlidXRlKCdkYXRhLXN3aXBlci1zbGlkZS1pbmRleCcpLCAxMCk7XG4gICAgaWYgKHBhcmFtcy5jZW50ZXJlZFNsaWRlcykge1xuICAgICAgaWYgKHNsaWRlVG9JbmRleCA8IHN3aXBlci5sb29wZWRTbGlkZXMgLSBzbGlkZXNQZXJWaWV3IC8gMiB8fCBzbGlkZVRvSW5kZXggPiBzd2lwZXIuc2xpZGVzLmxlbmd0aCAtIHN3aXBlci5sb29wZWRTbGlkZXMgKyBzbGlkZXNQZXJWaWV3IC8gMikge1xuICAgICAgICBzd2lwZXIubG9vcEZpeCgpO1xuICAgICAgICBzbGlkZVRvSW5kZXggPSBzd2lwZXIuZ2V0U2xpZGVJbmRleChlbGVtZW50Q2hpbGRyZW4oc2xpZGVzRWwsIGAke3NsaWRlU2VsZWN0b3J9W2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4PVwiJHtyZWFsSW5kZXh9XCJdYClbMF0pO1xuICAgICAgICBuZXh0VGljaygoKSA9PiB7XG4gICAgICAgICAgc3dpcGVyLnNsaWRlVG8oc2xpZGVUb0luZGV4KTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzd2lwZXIuc2xpZGVUbyhzbGlkZVRvSW5kZXgpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoc2xpZGVUb0luZGV4ID4gc3dpcGVyLnNsaWRlcy5sZW5ndGggLSBzbGlkZXNQZXJWaWV3KSB7XG4gICAgICBzd2lwZXIubG9vcEZpeCgpO1xuICAgICAgc2xpZGVUb0luZGV4ID0gc3dpcGVyLmdldFNsaWRlSW5kZXgoZWxlbWVudENoaWxkcmVuKHNsaWRlc0VsLCBgJHtzbGlkZVNlbGVjdG9yfVtkYXRhLXN3aXBlci1zbGlkZS1pbmRleD1cIiR7cmVhbEluZGV4fVwiXWApWzBdKTtcbiAgICAgIG5leHRUaWNrKCgpID0+IHtcbiAgICAgICAgc3dpcGVyLnNsaWRlVG8oc2xpZGVUb0luZGV4KTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBzd2lwZXIuc2xpZGVUbyhzbGlkZVRvSW5kZXgpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBzd2lwZXIuc2xpZGVUbyhzbGlkZVRvSW5kZXgpO1xuICB9XG59XG5cbnZhciBzbGlkZSA9IHtcbiAgc2xpZGVUbyxcbiAgc2xpZGVUb0xvb3AsXG4gIHNsaWRlTmV4dCxcbiAgc2xpZGVQcmV2LFxuICBzbGlkZVJlc2V0LFxuICBzbGlkZVRvQ2xvc2VzdCxcbiAgc2xpZGVUb0NsaWNrZWRTbGlkZVxufTtcblxuZnVuY3Rpb24gbG9vcENyZWF0ZShzbGlkZVJlYWxJbmRleCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCB7XG4gICAgcGFyYW1zLFxuICAgIHNsaWRlc0VsXG4gIH0gPSBzd2lwZXI7XG4gIGlmICghcGFyYW1zLmxvb3AgfHwgc3dpcGVyLnZpcnR1YWwgJiYgc3dpcGVyLnBhcmFtcy52aXJ0dWFsLmVuYWJsZWQpIHJldHVybjtcbiAgY29uc3QgaW5pdFNsaWRlcyA9ICgpID0+IHtcbiAgICBjb25zdCBzbGlkZXMgPSBlbGVtZW50Q2hpbGRyZW4oc2xpZGVzRWwsIGAuJHtwYXJhbXMuc2xpZGVDbGFzc30sIHN3aXBlci1zbGlkZWApO1xuICAgIHNsaWRlcy5mb3JFYWNoKChlbCwgaW5kZXgpID0+IHtcbiAgICAgIGVsLnNldEF0dHJpYnV0ZSgnZGF0YS1zd2lwZXItc2xpZGUtaW5kZXgnLCBpbmRleCk7XG4gICAgfSk7XG4gIH07XG4gIGNvbnN0IGdyaWRFbmFibGVkID0gc3dpcGVyLmdyaWQgJiYgcGFyYW1zLmdyaWQgJiYgcGFyYW1zLmdyaWQucm93cyA+IDE7XG4gIGNvbnN0IHNsaWRlc1Blckdyb3VwID0gcGFyYW1zLnNsaWRlc1Blckdyb3VwICogKGdyaWRFbmFibGVkID8gcGFyYW1zLmdyaWQucm93cyA6IDEpO1xuICBjb25zdCBzaG91bGRGaWxsR3JvdXAgPSBzd2lwZXIuc2xpZGVzLmxlbmd0aCAlIHNsaWRlc1Blckdyb3VwICE9PSAwO1xuICBjb25zdCBzaG91bGRGaWxsR3JpZCA9IGdyaWRFbmFibGVkICYmIHN3aXBlci5zbGlkZXMubGVuZ3RoICUgcGFyYW1zLmdyaWQucm93cyAhPT0gMDtcbiAgY29uc3QgYWRkQmxhbmtTbGlkZXMgPSBhbW91bnRPZlNsaWRlcyA9PiB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhbW91bnRPZlNsaWRlczsgaSArPSAxKSB7XG4gICAgICBjb25zdCBzbGlkZUVsID0gc3dpcGVyLmlzRWxlbWVudCA/IGNyZWF0ZUVsZW1lbnQoJ3N3aXBlci1zbGlkZScsIFtwYXJhbXMuc2xpZGVCbGFua0NsYXNzXSkgOiBjcmVhdGVFbGVtZW50KCdkaXYnLCBbcGFyYW1zLnNsaWRlQ2xhc3MsIHBhcmFtcy5zbGlkZUJsYW5rQ2xhc3NdKTtcbiAgICAgIHN3aXBlci5zbGlkZXNFbC5hcHBlbmQoc2xpZGVFbCk7XG4gICAgfVxuICB9O1xuICBpZiAoc2hvdWxkRmlsbEdyb3VwKSB7XG4gICAgaWYgKHBhcmFtcy5sb29wQWRkQmxhbmtTbGlkZXMpIHtcbiAgICAgIGNvbnN0IHNsaWRlc1RvQWRkID0gc2xpZGVzUGVyR3JvdXAgLSBzd2lwZXIuc2xpZGVzLmxlbmd0aCAlIHNsaWRlc1Blckdyb3VwO1xuICAgICAgYWRkQmxhbmtTbGlkZXMoc2xpZGVzVG9BZGQpO1xuICAgICAgc3dpcGVyLnJlY2FsY1NsaWRlcygpO1xuICAgICAgc3dpcGVyLnVwZGF0ZVNsaWRlcygpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzaG93V2FybmluZygnU3dpcGVyIExvb3AgV2FybmluZzogVGhlIG51bWJlciBvZiBzbGlkZXMgaXMgbm90IGV2ZW4gdG8gc2xpZGVzUGVyR3JvdXAsIGxvb3AgbW9kZSBtYXkgbm90IGZ1bmN0aW9uIHByb3Blcmx5LiBZb3UgbmVlZCB0byBhZGQgbW9yZSBzbGlkZXMgKG9yIG1ha2UgZHVwbGljYXRlcywgb3IgZW1wdHkgc2xpZGVzKScpO1xuICAgIH1cbiAgICBpbml0U2xpZGVzKCk7XG4gIH0gZWxzZSBpZiAoc2hvdWxkRmlsbEdyaWQpIHtcbiAgICBpZiAocGFyYW1zLmxvb3BBZGRCbGFua1NsaWRlcykge1xuICAgICAgY29uc3Qgc2xpZGVzVG9BZGQgPSBwYXJhbXMuZ3JpZC5yb3dzIC0gc3dpcGVyLnNsaWRlcy5sZW5ndGggJSBwYXJhbXMuZ3JpZC5yb3dzO1xuICAgICAgYWRkQmxhbmtTbGlkZXMoc2xpZGVzVG9BZGQpO1xuICAgICAgc3dpcGVyLnJlY2FsY1NsaWRlcygpO1xuICAgICAgc3dpcGVyLnVwZGF0ZVNsaWRlcygpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzaG93V2FybmluZygnU3dpcGVyIExvb3AgV2FybmluZzogVGhlIG51bWJlciBvZiBzbGlkZXMgaXMgbm90IGV2ZW4gdG8gZ3JpZC5yb3dzLCBsb29wIG1vZGUgbWF5IG5vdCBmdW5jdGlvbiBwcm9wZXJseS4gWW91IG5lZWQgdG8gYWRkIG1vcmUgc2xpZGVzIChvciBtYWtlIGR1cGxpY2F0ZXMsIG9yIGVtcHR5IHNsaWRlcyknKTtcbiAgICB9XG4gICAgaW5pdFNsaWRlcygpO1xuICB9IGVsc2Uge1xuICAgIGluaXRTbGlkZXMoKTtcbiAgfVxuICBzd2lwZXIubG9vcEZpeCh7XG4gICAgc2xpZGVSZWFsSW5kZXgsXG4gICAgZGlyZWN0aW9uOiBwYXJhbXMuY2VudGVyZWRTbGlkZXMgPyB1bmRlZmluZWQgOiAnbmV4dCdcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGxvb3BGaXgoX3RlbXApIHtcbiAgbGV0IHtcbiAgICBzbGlkZVJlYWxJbmRleCxcbiAgICBzbGlkZVRvID0gdHJ1ZSxcbiAgICBkaXJlY3Rpb24sXG4gICAgc2V0VHJhbnNsYXRlLFxuICAgIGFjdGl2ZVNsaWRlSW5kZXgsXG4gICAgYnlDb250cm9sbGVyLFxuICAgIGJ5TW91c2V3aGVlbFxuICB9ID0gX3RlbXAgPT09IHZvaWQgMCA/IHt9IDogX3RlbXA7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGlmICghc3dpcGVyLnBhcmFtcy5sb29wKSByZXR1cm47XG4gIHN3aXBlci5lbWl0KCdiZWZvcmVMb29wRml4Jyk7XG4gIGNvbnN0IHtcbiAgICBzbGlkZXMsXG4gICAgYWxsb3dTbGlkZVByZXYsXG4gICAgYWxsb3dTbGlkZU5leHQsXG4gICAgc2xpZGVzRWwsXG4gICAgcGFyYW1zXG4gIH0gPSBzd2lwZXI7XG4gIGNvbnN0IHtcbiAgICBjZW50ZXJlZFNsaWRlc1xuICB9ID0gcGFyYW1zO1xuICBzd2lwZXIuYWxsb3dTbGlkZVByZXYgPSB0cnVlO1xuICBzd2lwZXIuYWxsb3dTbGlkZU5leHQgPSB0cnVlO1xuICBpZiAoc3dpcGVyLnZpcnR1YWwgJiYgcGFyYW1zLnZpcnR1YWwuZW5hYmxlZCkge1xuICAgIGlmIChzbGlkZVRvKSB7XG4gICAgICBpZiAoIXBhcmFtcy5jZW50ZXJlZFNsaWRlcyAmJiBzd2lwZXIuc25hcEluZGV4ID09PSAwKSB7XG4gICAgICAgIHN3aXBlci5zbGlkZVRvKHN3aXBlci52aXJ0dWFsLnNsaWRlcy5sZW5ndGgsIDAsIGZhbHNlLCB0cnVlKTtcbiAgICAgIH0gZWxzZSBpZiAocGFyYW1zLmNlbnRlcmVkU2xpZGVzICYmIHN3aXBlci5zbmFwSW5kZXggPCBwYXJhbXMuc2xpZGVzUGVyVmlldykge1xuICAgICAgICBzd2lwZXIuc2xpZGVUbyhzd2lwZXIudmlydHVhbC5zbGlkZXMubGVuZ3RoICsgc3dpcGVyLnNuYXBJbmRleCwgMCwgZmFsc2UsIHRydWUpO1xuICAgICAgfSBlbHNlIGlmIChzd2lwZXIuc25hcEluZGV4ID09PSBzd2lwZXIuc25hcEdyaWQubGVuZ3RoIC0gMSkge1xuICAgICAgICBzd2lwZXIuc2xpZGVUbyhzd2lwZXIudmlydHVhbC5zbGlkZXNCZWZvcmUsIDAsIGZhbHNlLCB0cnVlKTtcbiAgICAgIH1cbiAgICB9XG4gICAgc3dpcGVyLmFsbG93U2xpZGVQcmV2ID0gYWxsb3dTbGlkZVByZXY7XG4gICAgc3dpcGVyLmFsbG93U2xpZGVOZXh0ID0gYWxsb3dTbGlkZU5leHQ7XG4gICAgc3dpcGVyLmVtaXQoJ2xvb3BGaXgnKTtcbiAgICByZXR1cm47XG4gIH1cbiAgbGV0IHNsaWRlc1BlclZpZXcgPSBwYXJhbXMuc2xpZGVzUGVyVmlldztcbiAgaWYgKHNsaWRlc1BlclZpZXcgPT09ICdhdXRvJykge1xuICAgIHNsaWRlc1BlclZpZXcgPSBzd2lwZXIuc2xpZGVzUGVyVmlld0R5bmFtaWMoKTtcbiAgfSBlbHNlIHtcbiAgICBzbGlkZXNQZXJWaWV3ID0gTWF0aC5jZWlsKHBhcnNlRmxvYXQocGFyYW1zLnNsaWRlc1BlclZpZXcsIDEwKSk7XG4gICAgaWYgKGNlbnRlcmVkU2xpZGVzICYmIHNsaWRlc1BlclZpZXcgJSAyID09PSAwKSB7XG4gICAgICBzbGlkZXNQZXJWaWV3ID0gc2xpZGVzUGVyVmlldyArIDE7XG4gICAgfVxuICB9XG4gIGNvbnN0IHNsaWRlc1Blckdyb3VwID0gcGFyYW1zLnNsaWRlc1Blckdyb3VwQXV0byA/IHNsaWRlc1BlclZpZXcgOiBwYXJhbXMuc2xpZGVzUGVyR3JvdXA7XG4gIGxldCBsb29wZWRTbGlkZXMgPSBzbGlkZXNQZXJHcm91cDtcbiAgaWYgKGxvb3BlZFNsaWRlcyAlIHNsaWRlc1Blckdyb3VwICE9PSAwKSB7XG4gICAgbG9vcGVkU2xpZGVzICs9IHNsaWRlc1Blckdyb3VwIC0gbG9vcGVkU2xpZGVzICUgc2xpZGVzUGVyR3JvdXA7XG4gIH1cbiAgbG9vcGVkU2xpZGVzICs9IHBhcmFtcy5sb29wQWRkaXRpb25hbFNsaWRlcztcbiAgc3dpcGVyLmxvb3BlZFNsaWRlcyA9IGxvb3BlZFNsaWRlcztcbiAgY29uc3QgZ3JpZEVuYWJsZWQgPSBzd2lwZXIuZ3JpZCAmJiBwYXJhbXMuZ3JpZCAmJiBwYXJhbXMuZ3JpZC5yb3dzID4gMTtcbiAgaWYgKHNsaWRlcy5sZW5ndGggPCBzbGlkZXNQZXJWaWV3ICsgbG9vcGVkU2xpZGVzKSB7XG4gICAgc2hvd1dhcm5pbmcoJ1N3aXBlciBMb29wIFdhcm5pbmc6IFRoZSBudW1iZXIgb2Ygc2xpZGVzIGlzIG5vdCBlbm91Z2ggZm9yIGxvb3AgbW9kZSwgaXQgd2lsbCBiZSBkaXNhYmxlZCBhbmQgbm90IGZ1bmN0aW9uIHByb3Blcmx5LiBZb3UgbmVlZCB0byBhZGQgbW9yZSBzbGlkZXMgKG9yIG1ha2UgZHVwbGljYXRlcykgb3IgbG93ZXIgdGhlIHZhbHVlcyBvZiBzbGlkZXNQZXJWaWV3IGFuZCBzbGlkZXNQZXJHcm91cCBwYXJhbWV0ZXJzJyk7XG4gIH0gZWxzZSBpZiAoZ3JpZEVuYWJsZWQgJiYgcGFyYW1zLmdyaWQuZmlsbCA9PT0gJ3JvdycpIHtcbiAgICBzaG93V2FybmluZygnU3dpcGVyIExvb3AgV2FybmluZzogTG9vcCBtb2RlIGlzIG5vdCBjb21wYXRpYmxlIHdpdGggZ3JpZC5maWxsID0gYHJvd2AnKTtcbiAgfVxuICBjb25zdCBwcmVwZW5kU2xpZGVzSW5kZXhlcyA9IFtdO1xuICBjb25zdCBhcHBlbmRTbGlkZXNJbmRleGVzID0gW107XG4gIGxldCBhY3RpdmVJbmRleCA9IHN3aXBlci5hY3RpdmVJbmRleDtcbiAgaWYgKHR5cGVvZiBhY3RpdmVTbGlkZUluZGV4ID09PSAndW5kZWZpbmVkJykge1xuICAgIGFjdGl2ZVNsaWRlSW5kZXggPSBzd2lwZXIuZ2V0U2xpZGVJbmRleChzbGlkZXMuZmlsdGVyKGVsID0+IGVsLmNsYXNzTGlzdC5jb250YWlucyhwYXJhbXMuc2xpZGVBY3RpdmVDbGFzcykpWzBdKTtcbiAgfSBlbHNlIHtcbiAgICBhY3RpdmVJbmRleCA9IGFjdGl2ZVNsaWRlSW5kZXg7XG4gIH1cbiAgY29uc3QgaXNOZXh0ID0gZGlyZWN0aW9uID09PSAnbmV4dCcgfHwgIWRpcmVjdGlvbjtcbiAgY29uc3QgaXNQcmV2ID0gZGlyZWN0aW9uID09PSAncHJldicgfHwgIWRpcmVjdGlvbjtcbiAgbGV0IHNsaWRlc1ByZXBlbmRlZCA9IDA7XG4gIGxldCBzbGlkZXNBcHBlbmRlZCA9IDA7XG4gIGNvbnN0IGNvbHMgPSBncmlkRW5hYmxlZCA/IE1hdGguY2VpbChzbGlkZXMubGVuZ3RoIC8gcGFyYW1zLmdyaWQucm93cykgOiBzbGlkZXMubGVuZ3RoO1xuICBjb25zdCBhY3RpdmVDb2xJbmRleCA9IGdyaWRFbmFibGVkID8gc2xpZGVzW2FjdGl2ZVNsaWRlSW5kZXhdLmNvbHVtbiA6IGFjdGl2ZVNsaWRlSW5kZXg7XG4gIGNvbnN0IGFjdGl2ZUNvbEluZGV4V2l0aFNoaWZ0ID0gYWN0aXZlQ29sSW5kZXggKyAoY2VudGVyZWRTbGlkZXMgJiYgdHlwZW9mIHNldFRyYW5zbGF0ZSA9PT0gJ3VuZGVmaW5lZCcgPyAtc2xpZGVzUGVyVmlldyAvIDIgKyAwLjUgOiAwKTtcbiAgLy8gcHJlcGVuZCBsYXN0IHNsaWRlcyBiZWZvcmUgc3RhcnRcbiAgaWYgKGFjdGl2ZUNvbEluZGV4V2l0aFNoaWZ0IDwgbG9vcGVkU2xpZGVzKSB7XG4gICAgc2xpZGVzUHJlcGVuZGVkID0gTWF0aC5tYXgobG9vcGVkU2xpZGVzIC0gYWN0aXZlQ29sSW5kZXhXaXRoU2hpZnQsIHNsaWRlc1Blckdyb3VwKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxvb3BlZFNsaWRlcyAtIGFjdGl2ZUNvbEluZGV4V2l0aFNoaWZ0OyBpICs9IDEpIHtcbiAgICAgIGNvbnN0IGluZGV4ID0gaSAtIE1hdGguZmxvb3IoaSAvIGNvbHMpICogY29scztcbiAgICAgIGlmIChncmlkRW5hYmxlZCkge1xuICAgICAgICBjb25zdCBjb2xJbmRleFRvUHJlcGVuZCA9IGNvbHMgLSBpbmRleCAtIDE7XG4gICAgICAgIGZvciAobGV0IGkgPSBzbGlkZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpIC09IDEpIHtcbiAgICAgICAgICBpZiAoc2xpZGVzW2ldLmNvbHVtbiA9PT0gY29sSW5kZXhUb1ByZXBlbmQpIHByZXBlbmRTbGlkZXNJbmRleGVzLnB1c2goaSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gc2xpZGVzLmZvckVhY2goKHNsaWRlLCBzbGlkZUluZGV4KSA9PiB7XG4gICAgICAgIC8vICAgaWYgKHNsaWRlLmNvbHVtbiA9PT0gY29sSW5kZXhUb1ByZXBlbmQpIHByZXBlbmRTbGlkZXNJbmRleGVzLnB1c2goc2xpZGVJbmRleCk7XG4gICAgICAgIC8vIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcHJlcGVuZFNsaWRlc0luZGV4ZXMucHVzaChjb2xzIC0gaW5kZXggLSAxKTtcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSBpZiAoYWN0aXZlQ29sSW5kZXhXaXRoU2hpZnQgKyBzbGlkZXNQZXJWaWV3ID4gY29scyAtIGxvb3BlZFNsaWRlcykge1xuICAgIHNsaWRlc0FwcGVuZGVkID0gTWF0aC5tYXgoYWN0aXZlQ29sSW5kZXhXaXRoU2hpZnQgLSAoY29scyAtIGxvb3BlZFNsaWRlcyAqIDIpLCBzbGlkZXNQZXJHcm91cCk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzbGlkZXNBcHBlbmRlZDsgaSArPSAxKSB7XG4gICAgICBjb25zdCBpbmRleCA9IGkgLSBNYXRoLmZsb29yKGkgLyBjb2xzKSAqIGNvbHM7XG4gICAgICBpZiAoZ3JpZEVuYWJsZWQpIHtcbiAgICAgICAgc2xpZGVzLmZvckVhY2goKHNsaWRlLCBzbGlkZUluZGV4KSA9PiB7XG4gICAgICAgICAgaWYgKHNsaWRlLmNvbHVtbiA9PT0gaW5kZXgpIGFwcGVuZFNsaWRlc0luZGV4ZXMucHVzaChzbGlkZUluZGV4KTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhcHBlbmRTbGlkZXNJbmRleGVzLnB1c2goaW5kZXgpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBzd2lwZXIuX19wcmV2ZW50T2JzZXJ2ZXJfXyA9IHRydWU7XG4gIHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgc3dpcGVyLl9fcHJldmVudE9ic2VydmVyX18gPSBmYWxzZTtcbiAgfSk7XG4gIGlmIChpc1ByZXYpIHtcbiAgICBwcmVwZW5kU2xpZGVzSW5kZXhlcy5mb3JFYWNoKGluZGV4ID0+IHtcbiAgICAgIHNsaWRlc1tpbmRleF0uc3dpcGVyTG9vcE1vdmVET00gPSB0cnVlO1xuICAgICAgc2xpZGVzRWwucHJlcGVuZChzbGlkZXNbaW5kZXhdKTtcbiAgICAgIHNsaWRlc1tpbmRleF0uc3dpcGVyTG9vcE1vdmVET00gPSBmYWxzZTtcbiAgICB9KTtcbiAgfVxuICBpZiAoaXNOZXh0KSB7XG4gICAgYXBwZW5kU2xpZGVzSW5kZXhlcy5mb3JFYWNoKGluZGV4ID0+IHtcbiAgICAgIHNsaWRlc1tpbmRleF0uc3dpcGVyTG9vcE1vdmVET00gPSB0cnVlO1xuICAgICAgc2xpZGVzRWwuYXBwZW5kKHNsaWRlc1tpbmRleF0pO1xuICAgICAgc2xpZGVzW2luZGV4XS5zd2lwZXJMb29wTW92ZURPTSA9IGZhbHNlO1xuICAgIH0pO1xuICB9XG4gIHN3aXBlci5yZWNhbGNTbGlkZXMoKTtcbiAgaWYgKHBhcmFtcy5zbGlkZXNQZXJWaWV3ID09PSAnYXV0bycpIHtcbiAgICBzd2lwZXIudXBkYXRlU2xpZGVzKCk7XG4gIH0gZWxzZSBpZiAoZ3JpZEVuYWJsZWQgJiYgKHByZXBlbmRTbGlkZXNJbmRleGVzLmxlbmd0aCA+IDAgJiYgaXNQcmV2IHx8IGFwcGVuZFNsaWRlc0luZGV4ZXMubGVuZ3RoID4gMCAmJiBpc05leHQpKSB7XG4gICAgc3dpcGVyLnNsaWRlcy5mb3JFYWNoKChzbGlkZSwgc2xpZGVJbmRleCkgPT4ge1xuICAgICAgc3dpcGVyLmdyaWQudXBkYXRlU2xpZGUoc2xpZGVJbmRleCwgc2xpZGUsIHN3aXBlci5zbGlkZXMpO1xuICAgIH0pO1xuICB9XG4gIGlmIChwYXJhbXMud2F0Y2hTbGlkZXNQcm9ncmVzcykge1xuICAgIHN3aXBlci51cGRhdGVTbGlkZXNPZmZzZXQoKTtcbiAgfVxuICBpZiAoc2xpZGVUbykge1xuICAgIGlmIChwcmVwZW5kU2xpZGVzSW5kZXhlcy5sZW5ndGggPiAwICYmIGlzUHJldikge1xuICAgICAgaWYgKHR5cGVvZiBzbGlkZVJlYWxJbmRleCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgY29uc3QgY3VycmVudFNsaWRlVHJhbnNsYXRlID0gc3dpcGVyLnNsaWRlc0dyaWRbYWN0aXZlSW5kZXhdO1xuICAgICAgICBjb25zdCBuZXdTbGlkZVRyYW5zbGF0ZSA9IHN3aXBlci5zbGlkZXNHcmlkW2FjdGl2ZUluZGV4ICsgc2xpZGVzUHJlcGVuZGVkXTtcbiAgICAgICAgY29uc3QgZGlmZiA9IG5ld1NsaWRlVHJhbnNsYXRlIC0gY3VycmVudFNsaWRlVHJhbnNsYXRlO1xuICAgICAgICBpZiAoYnlNb3VzZXdoZWVsKSB7XG4gICAgICAgICAgc3dpcGVyLnNldFRyYW5zbGF0ZShzd2lwZXIudHJhbnNsYXRlIC0gZGlmZik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc3dpcGVyLnNsaWRlVG8oYWN0aXZlSW5kZXggKyBNYXRoLmNlaWwoc2xpZGVzUHJlcGVuZGVkKSwgMCwgZmFsc2UsIHRydWUpO1xuICAgICAgICAgIGlmIChzZXRUcmFuc2xhdGUpIHtcbiAgICAgICAgICAgIHN3aXBlci50b3VjaEV2ZW50c0RhdGEuc3RhcnRUcmFuc2xhdGUgPSBzd2lwZXIudG91Y2hFdmVudHNEYXRhLnN0YXJ0VHJhbnNsYXRlIC0gZGlmZjtcbiAgICAgICAgICAgIHN3aXBlci50b3VjaEV2ZW50c0RhdGEuY3VycmVudFRyYW5zbGF0ZSA9IHN3aXBlci50b3VjaEV2ZW50c0RhdGEuY3VycmVudFRyYW5zbGF0ZSAtIGRpZmY7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoc2V0VHJhbnNsYXRlKSB7XG4gICAgICAgICAgY29uc3Qgc2hpZnQgPSBncmlkRW5hYmxlZCA/IHByZXBlbmRTbGlkZXNJbmRleGVzLmxlbmd0aCAvIHBhcmFtcy5ncmlkLnJvd3MgOiBwcmVwZW5kU2xpZGVzSW5kZXhlcy5sZW5ndGg7XG4gICAgICAgICAgc3dpcGVyLnNsaWRlVG8oc3dpcGVyLmFjdGl2ZUluZGV4ICsgc2hpZnQsIDAsIGZhbHNlLCB0cnVlKTtcbiAgICAgICAgICBzd2lwZXIudG91Y2hFdmVudHNEYXRhLmN1cnJlbnRUcmFuc2xhdGUgPSBzd2lwZXIudHJhbnNsYXRlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChhcHBlbmRTbGlkZXNJbmRleGVzLmxlbmd0aCA+IDAgJiYgaXNOZXh0KSB7XG4gICAgICBpZiAodHlwZW9mIHNsaWRlUmVhbEluZGV4ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICBjb25zdCBjdXJyZW50U2xpZGVUcmFuc2xhdGUgPSBzd2lwZXIuc2xpZGVzR3JpZFthY3RpdmVJbmRleF07XG4gICAgICAgIGNvbnN0IG5ld1NsaWRlVHJhbnNsYXRlID0gc3dpcGVyLnNsaWRlc0dyaWRbYWN0aXZlSW5kZXggLSBzbGlkZXNBcHBlbmRlZF07XG4gICAgICAgIGNvbnN0IGRpZmYgPSBuZXdTbGlkZVRyYW5zbGF0ZSAtIGN1cnJlbnRTbGlkZVRyYW5zbGF0ZTtcbiAgICAgICAgaWYgKGJ5TW91c2V3aGVlbCkge1xuICAgICAgICAgIHN3aXBlci5zZXRUcmFuc2xhdGUoc3dpcGVyLnRyYW5zbGF0ZSAtIGRpZmYpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHN3aXBlci5zbGlkZVRvKGFjdGl2ZUluZGV4IC0gc2xpZGVzQXBwZW5kZWQsIDAsIGZhbHNlLCB0cnVlKTtcbiAgICAgICAgICBpZiAoc2V0VHJhbnNsYXRlKSB7XG4gICAgICAgICAgICBzd2lwZXIudG91Y2hFdmVudHNEYXRhLnN0YXJ0VHJhbnNsYXRlID0gc3dpcGVyLnRvdWNoRXZlbnRzRGF0YS5zdGFydFRyYW5zbGF0ZSAtIGRpZmY7XG4gICAgICAgICAgICBzd2lwZXIudG91Y2hFdmVudHNEYXRhLmN1cnJlbnRUcmFuc2xhdGUgPSBzd2lwZXIudG91Y2hFdmVudHNEYXRhLmN1cnJlbnRUcmFuc2xhdGUgLSBkaWZmO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3Qgc2hpZnQgPSBncmlkRW5hYmxlZCA/IGFwcGVuZFNsaWRlc0luZGV4ZXMubGVuZ3RoIC8gcGFyYW1zLmdyaWQucm93cyA6IGFwcGVuZFNsaWRlc0luZGV4ZXMubGVuZ3RoO1xuICAgICAgICBzd2lwZXIuc2xpZGVUbyhzd2lwZXIuYWN0aXZlSW5kZXggLSBzaGlmdCwgMCwgZmFsc2UsIHRydWUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBzd2lwZXIuYWxsb3dTbGlkZVByZXYgPSBhbGxvd1NsaWRlUHJldjtcbiAgc3dpcGVyLmFsbG93U2xpZGVOZXh0ID0gYWxsb3dTbGlkZU5leHQ7XG4gIGlmIChzd2lwZXIuY29udHJvbGxlciAmJiBzd2lwZXIuY29udHJvbGxlci5jb250cm9sICYmICFieUNvbnRyb2xsZXIpIHtcbiAgICBjb25zdCBsb29wUGFyYW1zID0ge1xuICAgICAgc2xpZGVSZWFsSW5kZXgsXG4gICAgICBkaXJlY3Rpb24sXG4gICAgICBzZXRUcmFuc2xhdGUsXG4gICAgICBhY3RpdmVTbGlkZUluZGV4LFxuICAgICAgYnlDb250cm9sbGVyOiB0cnVlXG4gICAgfTtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShzd2lwZXIuY29udHJvbGxlci5jb250cm9sKSkge1xuICAgICAgc3dpcGVyLmNvbnRyb2xsZXIuY29udHJvbC5mb3JFYWNoKGMgPT4ge1xuICAgICAgICBpZiAoIWMuZGVzdHJveWVkICYmIGMucGFyYW1zLmxvb3ApIGMubG9vcEZpeCh7XG4gICAgICAgICAgLi4ubG9vcFBhcmFtcyxcbiAgICAgICAgICBzbGlkZVRvOiBjLnBhcmFtcy5zbGlkZXNQZXJWaWV3ID09PSBwYXJhbXMuc2xpZGVzUGVyVmlldyA/IHNsaWRlVG8gOiBmYWxzZVxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAoc3dpcGVyLmNvbnRyb2xsZXIuY29udHJvbCBpbnN0YW5jZW9mIHN3aXBlci5jb25zdHJ1Y3RvciAmJiBzd2lwZXIuY29udHJvbGxlci5jb250cm9sLnBhcmFtcy5sb29wKSB7XG4gICAgICBzd2lwZXIuY29udHJvbGxlci5jb250cm9sLmxvb3BGaXgoe1xuICAgICAgICAuLi5sb29wUGFyYW1zLFxuICAgICAgICBzbGlkZVRvOiBzd2lwZXIuY29udHJvbGxlci5jb250cm9sLnBhcmFtcy5zbGlkZXNQZXJWaWV3ID09PSBwYXJhbXMuc2xpZGVzUGVyVmlldyA/IHNsaWRlVG8gOiBmYWxzZVxuICAgICAgfSk7XG4gICAgfVxuICB9XG4gIHN3aXBlci5lbWl0KCdsb29wRml4Jyk7XG59XG5cbmZ1bmN0aW9uIGxvb3BEZXN0cm95KCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCB7XG4gICAgcGFyYW1zLFxuICAgIHNsaWRlc0VsXG4gIH0gPSBzd2lwZXI7XG4gIGlmICghcGFyYW1zLmxvb3AgfHwgc3dpcGVyLnZpcnR1YWwgJiYgc3dpcGVyLnBhcmFtcy52aXJ0dWFsLmVuYWJsZWQpIHJldHVybjtcbiAgc3dpcGVyLnJlY2FsY1NsaWRlcygpO1xuICBjb25zdCBuZXdTbGlkZXNPcmRlciA9IFtdO1xuICBzd2lwZXIuc2xpZGVzLmZvckVhY2goc2xpZGVFbCA9PiB7XG4gICAgY29uc3QgaW5kZXggPSB0eXBlb2Ygc2xpZGVFbC5zd2lwZXJTbGlkZUluZGV4ID09PSAndW5kZWZpbmVkJyA/IHNsaWRlRWwuZ2V0QXR0cmlidXRlKCdkYXRhLXN3aXBlci1zbGlkZS1pbmRleCcpICogMSA6IHNsaWRlRWwuc3dpcGVyU2xpZGVJbmRleDtcbiAgICBuZXdTbGlkZXNPcmRlcltpbmRleF0gPSBzbGlkZUVsO1xuICB9KTtcbiAgc3dpcGVyLnNsaWRlcy5mb3JFYWNoKHNsaWRlRWwgPT4ge1xuICAgIHNsaWRlRWwucmVtb3ZlQXR0cmlidXRlKCdkYXRhLXN3aXBlci1zbGlkZS1pbmRleCcpO1xuICB9KTtcbiAgbmV3U2xpZGVzT3JkZXIuZm9yRWFjaChzbGlkZUVsID0+IHtcbiAgICBzbGlkZXNFbC5hcHBlbmQoc2xpZGVFbCk7XG4gIH0pO1xuICBzd2lwZXIucmVjYWxjU2xpZGVzKCk7XG4gIHN3aXBlci5zbGlkZVRvKHN3aXBlci5yZWFsSW5kZXgsIDApO1xufVxuXG52YXIgbG9vcCA9IHtcbiAgbG9vcENyZWF0ZSxcbiAgbG9vcEZpeCxcbiAgbG9vcERlc3Ryb3lcbn07XG5cbmZ1bmN0aW9uIHNldEdyYWJDdXJzb3IobW92aW5nKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGlmICghc3dpcGVyLnBhcmFtcy5zaW11bGF0ZVRvdWNoIHx8IHN3aXBlci5wYXJhbXMud2F0Y2hPdmVyZmxvdyAmJiBzd2lwZXIuaXNMb2NrZWQgfHwgc3dpcGVyLnBhcmFtcy5jc3NNb2RlKSByZXR1cm47XG4gIGNvbnN0IGVsID0gc3dpcGVyLnBhcmFtcy50b3VjaEV2ZW50c1RhcmdldCA9PT0gJ2NvbnRhaW5lcicgPyBzd2lwZXIuZWwgOiBzd2lwZXIud3JhcHBlckVsO1xuICBpZiAoc3dpcGVyLmlzRWxlbWVudCkge1xuICAgIHN3aXBlci5fX3ByZXZlbnRPYnNlcnZlcl9fID0gdHJ1ZTtcbiAgfVxuICBlbC5zdHlsZS5jdXJzb3IgPSAnbW92ZSc7XG4gIGVsLnN0eWxlLmN1cnNvciA9IG1vdmluZyA/ICdncmFiYmluZycgOiAnZ3JhYic7XG4gIGlmIChzd2lwZXIuaXNFbGVtZW50KSB7XG4gICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICAgIHN3aXBlci5fX3ByZXZlbnRPYnNlcnZlcl9fID0gZmFsc2U7XG4gICAgfSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gdW5zZXRHcmFiQ3Vyc29yKCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBpZiAoc3dpcGVyLnBhcmFtcy53YXRjaE92ZXJmbG93ICYmIHN3aXBlci5pc0xvY2tlZCB8fCBzd2lwZXIucGFyYW1zLmNzc01vZGUpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKHN3aXBlci5pc0VsZW1lbnQpIHtcbiAgICBzd2lwZXIuX19wcmV2ZW50T2JzZXJ2ZXJfXyA9IHRydWU7XG4gIH1cbiAgc3dpcGVyW3N3aXBlci5wYXJhbXMudG91Y2hFdmVudHNUYXJnZXQgPT09ICdjb250YWluZXInID8gJ2VsJyA6ICd3cmFwcGVyRWwnXS5zdHlsZS5jdXJzb3IgPSAnJztcbiAgaWYgKHN3aXBlci5pc0VsZW1lbnQpIHtcbiAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgICAgc3dpcGVyLl9fcHJldmVudE9ic2VydmVyX18gPSBmYWxzZTtcbiAgICB9KTtcbiAgfVxufVxuXG52YXIgZ3JhYkN1cnNvciA9IHtcbiAgc2V0R3JhYkN1cnNvcixcbiAgdW5zZXRHcmFiQ3Vyc29yXG59O1xuXG4vLyBNb2RpZmllZCBmcm9tIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzU0NTIwNTU0L2N1c3RvbS1lbGVtZW50LWdldHJvb3Rub2RlLWNsb3Nlc3QtZnVuY3Rpb24tY3Jvc3NpbmctbXVsdGlwbGUtcGFyZW50LXNoYWRvd2RcbmZ1bmN0aW9uIGNsb3Nlc3RFbGVtZW50KHNlbGVjdG9yLCBiYXNlKSB7XG4gIGlmIChiYXNlID09PSB2b2lkIDApIHtcbiAgICBiYXNlID0gdGhpcztcbiAgfVxuICBmdW5jdGlvbiBfX2Nsb3Nlc3RGcm9tKGVsKSB7XG4gICAgaWYgKCFlbCB8fCBlbCA9PT0gZ2V0RG9jdW1lbnQoKSB8fCBlbCA9PT0gZ2V0V2luZG93KCkpIHJldHVybiBudWxsO1xuICAgIGlmIChlbC5hc3NpZ25lZFNsb3QpIGVsID0gZWwuYXNzaWduZWRTbG90O1xuICAgIGNvbnN0IGZvdW5kID0gZWwuY2xvc2VzdChzZWxlY3Rvcik7XG4gICAgaWYgKCFmb3VuZCAmJiAhZWwuZ2V0Um9vdE5vZGUpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gZm91bmQgfHwgX19jbG9zZXN0RnJvbShlbC5nZXRSb290Tm9kZSgpLmhvc3QpO1xuICB9XG4gIHJldHVybiBfX2Nsb3Nlc3RGcm9tKGJhc2UpO1xufVxuZnVuY3Rpb24gcHJldmVudEVkZ2VTd2lwZShzd2lwZXIsIGV2ZW50LCBzdGFydFgpIHtcbiAgY29uc3Qgd2luZG93ID0gZ2V0V2luZG93KCk7XG4gIGNvbnN0IHtcbiAgICBwYXJhbXNcbiAgfSA9IHN3aXBlcjtcbiAgY29uc3QgZWRnZVN3aXBlRGV0ZWN0aW9uID0gcGFyYW1zLmVkZ2VTd2lwZURldGVjdGlvbjtcbiAgY29uc3QgZWRnZVN3aXBlVGhyZXNob2xkID0gcGFyYW1zLmVkZ2VTd2lwZVRocmVzaG9sZDtcbiAgaWYgKGVkZ2VTd2lwZURldGVjdGlvbiAmJiAoc3RhcnRYIDw9IGVkZ2VTd2lwZVRocmVzaG9sZCB8fCBzdGFydFggPj0gd2luZG93LmlubmVyV2lkdGggLSBlZGdlU3dpcGVUaHJlc2hvbGQpKSB7XG4gICAgaWYgKGVkZ2VTd2lwZURldGVjdGlvbiA9PT0gJ3ByZXZlbnQnKSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn1cbmZ1bmN0aW9uIG9uVG91Y2hTdGFydChldmVudCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCBkb2N1bWVudCA9IGdldERvY3VtZW50KCk7XG4gIGxldCBlID0gZXZlbnQ7XG4gIGlmIChlLm9yaWdpbmFsRXZlbnQpIGUgPSBlLm9yaWdpbmFsRXZlbnQ7XG4gIGNvbnN0IGRhdGEgPSBzd2lwZXIudG91Y2hFdmVudHNEYXRhO1xuICBpZiAoZS50eXBlID09PSAncG9pbnRlcmRvd24nKSB7XG4gICAgaWYgKGRhdGEucG9pbnRlcklkICE9PSBudWxsICYmIGRhdGEucG9pbnRlcklkICE9PSBlLnBvaW50ZXJJZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBkYXRhLnBvaW50ZXJJZCA9IGUucG9pbnRlcklkO1xuICB9IGVsc2UgaWYgKGUudHlwZSA9PT0gJ3RvdWNoc3RhcnQnICYmIGUudGFyZ2V0VG91Y2hlcy5sZW5ndGggPT09IDEpIHtcbiAgICBkYXRhLnRvdWNoSWQgPSBlLnRhcmdldFRvdWNoZXNbMF0uaWRlbnRpZmllcjtcbiAgfVxuICBpZiAoZS50eXBlID09PSAndG91Y2hzdGFydCcpIHtcbiAgICAvLyBkb24ndCBwcm9jZWVkIHRvdWNoIGV2ZW50XG4gICAgcHJldmVudEVkZ2VTd2lwZShzd2lwZXIsIGUsIGUudGFyZ2V0VG91Y2hlc1swXS5wYWdlWCk7XG4gICAgcmV0dXJuO1xuICB9XG4gIGNvbnN0IHtcbiAgICBwYXJhbXMsXG4gICAgdG91Y2hlcyxcbiAgICBlbmFibGVkXG4gIH0gPSBzd2lwZXI7XG4gIGlmICghZW5hYmxlZCkgcmV0dXJuO1xuICBpZiAoIXBhcmFtcy5zaW11bGF0ZVRvdWNoICYmIGUucG9pbnRlclR5cGUgPT09ICdtb3VzZScpIHJldHVybjtcbiAgaWYgKHN3aXBlci5hbmltYXRpbmcgJiYgcGFyYW1zLnByZXZlbnRJbnRlcmFjdGlvbk9uVHJhbnNpdGlvbikge1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAoIXN3aXBlci5hbmltYXRpbmcgJiYgcGFyYW1zLmNzc01vZGUgJiYgcGFyYW1zLmxvb3ApIHtcbiAgICBzd2lwZXIubG9vcEZpeCgpO1xuICB9XG4gIGxldCB0YXJnZXRFbCA9IGUudGFyZ2V0O1xuICBpZiAocGFyYW1zLnRvdWNoRXZlbnRzVGFyZ2V0ID09PSAnd3JhcHBlcicpIHtcbiAgICBpZiAoIXN3aXBlci53cmFwcGVyRWwuY29udGFpbnModGFyZ2V0RWwpKSByZXR1cm47XG4gIH1cbiAgaWYgKCd3aGljaCcgaW4gZSAmJiBlLndoaWNoID09PSAzKSByZXR1cm47XG4gIGlmICgnYnV0dG9uJyBpbiBlICYmIGUuYnV0dG9uID4gMCkgcmV0dXJuO1xuICBpZiAoZGF0YS5pc1RvdWNoZWQgJiYgZGF0YS5pc01vdmVkKSByZXR1cm47XG5cbiAgLy8gY2hhbmdlIHRhcmdldCBlbCBmb3Igc2hhZG93IHJvb3QgY29tcG9uZW50XG4gIGNvbnN0IHN3aXBpbmdDbGFzc0hhc1ZhbHVlID0gISFwYXJhbXMubm9Td2lwaW5nQ2xhc3MgJiYgcGFyYW1zLm5vU3dpcGluZ0NsYXNzICE9PSAnJztcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gIGNvbnN0IGV2ZW50UGF0aCA9IGUuY29tcG9zZWRQYXRoID8gZS5jb21wb3NlZFBhdGgoKSA6IGUucGF0aDtcbiAgaWYgKHN3aXBpbmdDbGFzc0hhc1ZhbHVlICYmIGUudGFyZ2V0ICYmIGUudGFyZ2V0LnNoYWRvd1Jvb3QgJiYgZXZlbnRQYXRoKSB7XG4gICAgdGFyZ2V0RWwgPSBldmVudFBhdGhbMF07XG4gIH1cbiAgY29uc3Qgbm9Td2lwaW5nU2VsZWN0b3IgPSBwYXJhbXMubm9Td2lwaW5nU2VsZWN0b3IgPyBwYXJhbXMubm9Td2lwaW5nU2VsZWN0b3IgOiBgLiR7cGFyYW1zLm5vU3dpcGluZ0NsYXNzfWA7XG4gIGNvbnN0IGlzVGFyZ2V0U2hhZG93ID0gISEoZS50YXJnZXQgJiYgZS50YXJnZXQuc2hhZG93Um9vdCk7XG5cbiAgLy8gdXNlIGNsb3Nlc3RFbGVtZW50IGZvciBzaGFkb3cgcm9vdCBlbGVtZW50IHRvIGdldCB0aGUgYWN0dWFsIGNsb3Nlc3QgZm9yIG5lc3RlZCBzaGFkb3cgcm9vdCBlbGVtZW50XG4gIGlmIChwYXJhbXMubm9Td2lwaW5nICYmIChpc1RhcmdldFNoYWRvdyA/IGNsb3Nlc3RFbGVtZW50KG5vU3dpcGluZ1NlbGVjdG9yLCB0YXJnZXRFbCkgOiB0YXJnZXRFbC5jbG9zZXN0KG5vU3dpcGluZ1NlbGVjdG9yKSkpIHtcbiAgICBzd2lwZXIuYWxsb3dDbGljayA9IHRydWU7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChwYXJhbXMuc3dpcGVIYW5kbGVyKSB7XG4gICAgaWYgKCF0YXJnZXRFbC5jbG9zZXN0KHBhcmFtcy5zd2lwZUhhbmRsZXIpKSByZXR1cm47XG4gIH1cbiAgdG91Y2hlcy5jdXJyZW50WCA9IGUucGFnZVg7XG4gIHRvdWNoZXMuY3VycmVudFkgPSBlLnBhZ2VZO1xuICBjb25zdCBzdGFydFggPSB0b3VjaGVzLmN1cnJlbnRYO1xuICBjb25zdCBzdGFydFkgPSB0b3VjaGVzLmN1cnJlbnRZO1xuXG4gIC8vIERvIE5PVCBzdGFydCBpZiBpT1MgZWRnZSBzd2lwZSBpcyBkZXRlY3RlZC4gT3RoZXJ3aXNlIGlPUyBhcHAgY2Fubm90IHN3aXBlLXRvLWdvLWJhY2sgYW55bW9yZVxuXG4gIGlmICghcHJldmVudEVkZ2VTd2lwZShzd2lwZXIsIGUsIHN0YXJ0WCkpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgT2JqZWN0LmFzc2lnbihkYXRhLCB7XG4gICAgaXNUb3VjaGVkOiB0cnVlLFxuICAgIGlzTW92ZWQ6IGZhbHNlLFxuICAgIGFsbG93VG91Y2hDYWxsYmFja3M6IHRydWUsXG4gICAgaXNTY3JvbGxpbmc6IHVuZGVmaW5lZCxcbiAgICBzdGFydE1vdmluZzogdW5kZWZpbmVkXG4gIH0pO1xuICB0b3VjaGVzLnN0YXJ0WCA9IHN0YXJ0WDtcbiAgdG91Y2hlcy5zdGFydFkgPSBzdGFydFk7XG4gIGRhdGEudG91Y2hTdGFydFRpbWUgPSBub3coKTtcbiAgc3dpcGVyLmFsbG93Q2xpY2sgPSB0cnVlO1xuICBzd2lwZXIudXBkYXRlU2l6ZSgpO1xuICBzd2lwZXIuc3dpcGVEaXJlY3Rpb24gPSB1bmRlZmluZWQ7XG4gIGlmIChwYXJhbXMudGhyZXNob2xkID4gMCkgZGF0YS5hbGxvd1RocmVzaG9sZE1vdmUgPSBmYWxzZTtcbiAgbGV0IHByZXZlbnREZWZhdWx0ID0gdHJ1ZTtcbiAgaWYgKHRhcmdldEVsLm1hdGNoZXMoZGF0YS5mb2N1c2FibGVFbGVtZW50cykpIHtcbiAgICBwcmV2ZW50RGVmYXVsdCA9IGZhbHNlO1xuICAgIGlmICh0YXJnZXRFbC5ub2RlTmFtZSA9PT0gJ1NFTEVDVCcpIHtcbiAgICAgIGRhdGEuaXNUb3VjaGVkID0gZmFsc2U7XG4gICAgfVxuICB9XG4gIGlmIChkb2N1bWVudC5hY3RpdmVFbGVtZW50ICYmIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQubWF0Y2hlcyhkYXRhLmZvY3VzYWJsZUVsZW1lbnRzKSAmJiBkb2N1bWVudC5hY3RpdmVFbGVtZW50ICE9PSB0YXJnZXRFbCkge1xuICAgIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQuYmx1cigpO1xuICB9XG4gIGNvbnN0IHNob3VsZFByZXZlbnREZWZhdWx0ID0gcHJldmVudERlZmF1bHQgJiYgc3dpcGVyLmFsbG93VG91Y2hNb3ZlICYmIHBhcmFtcy50b3VjaFN0YXJ0UHJldmVudERlZmF1bHQ7XG4gIGlmICgocGFyYW1zLnRvdWNoU3RhcnRGb3JjZVByZXZlbnREZWZhdWx0IHx8IHNob3VsZFByZXZlbnREZWZhdWx0KSAmJiAhdGFyZ2V0RWwuaXNDb250ZW50RWRpdGFibGUpIHtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gIH1cbiAgaWYgKHBhcmFtcy5mcmVlTW9kZSAmJiBwYXJhbXMuZnJlZU1vZGUuZW5hYmxlZCAmJiBzd2lwZXIuZnJlZU1vZGUgJiYgc3dpcGVyLmFuaW1hdGluZyAmJiAhcGFyYW1zLmNzc01vZGUpIHtcbiAgICBzd2lwZXIuZnJlZU1vZGUub25Ub3VjaFN0YXJ0KCk7XG4gIH1cbiAgc3dpcGVyLmVtaXQoJ3RvdWNoU3RhcnQnLCBlKTtcbn1cblxuZnVuY3Rpb24gb25Ub3VjaE1vdmUoZXZlbnQpIHtcbiAgY29uc3QgZG9jdW1lbnQgPSBnZXREb2N1bWVudCgpO1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCBkYXRhID0gc3dpcGVyLnRvdWNoRXZlbnRzRGF0YTtcbiAgY29uc3Qge1xuICAgIHBhcmFtcyxcbiAgICB0b3VjaGVzLFxuICAgIHJ0bFRyYW5zbGF0ZTogcnRsLFxuICAgIGVuYWJsZWRcbiAgfSA9IHN3aXBlcjtcbiAgaWYgKCFlbmFibGVkKSByZXR1cm47XG4gIGlmICghcGFyYW1zLnNpbXVsYXRlVG91Y2ggJiYgZXZlbnQucG9pbnRlclR5cGUgPT09ICdtb3VzZScpIHJldHVybjtcbiAgbGV0IGUgPSBldmVudDtcbiAgaWYgKGUub3JpZ2luYWxFdmVudCkgZSA9IGUub3JpZ2luYWxFdmVudDtcbiAgaWYgKGUudHlwZSA9PT0gJ3BvaW50ZXJtb3ZlJykge1xuICAgIGlmIChkYXRhLnRvdWNoSWQgIT09IG51bGwpIHJldHVybjsgLy8gcmV0dXJuIGZyb20gcG9pbnRlciBpZiB3ZSB1c2UgdG91Y2hcbiAgICBjb25zdCBpZCA9IGUucG9pbnRlcklkO1xuICAgIGlmIChpZCAhPT0gZGF0YS5wb2ludGVySWQpIHJldHVybjtcbiAgfVxuICBsZXQgdGFyZ2V0VG91Y2g7XG4gIGlmIChlLnR5cGUgPT09ICd0b3VjaG1vdmUnKSB7XG4gICAgdGFyZ2V0VG91Y2ggPSBbLi4uZS5jaGFuZ2VkVG91Y2hlc10uZmlsdGVyKHQgPT4gdC5pZGVudGlmaWVyID09PSBkYXRhLnRvdWNoSWQpWzBdO1xuICAgIGlmICghdGFyZ2V0VG91Y2ggfHwgdGFyZ2V0VG91Y2guaWRlbnRpZmllciAhPT0gZGF0YS50b3VjaElkKSByZXR1cm47XG4gIH0gZWxzZSB7XG4gICAgdGFyZ2V0VG91Y2ggPSBlO1xuICB9XG4gIGlmICghZGF0YS5pc1RvdWNoZWQpIHtcbiAgICBpZiAoZGF0YS5zdGFydE1vdmluZyAmJiBkYXRhLmlzU2Nyb2xsaW5nKSB7XG4gICAgICBzd2lwZXIuZW1pdCgndG91Y2hNb3ZlT3Bwb3NpdGUnLCBlKTtcbiAgICB9XG4gICAgcmV0dXJuO1xuICB9XG4gIGNvbnN0IHBhZ2VYID0gdGFyZ2V0VG91Y2gucGFnZVg7XG4gIGNvbnN0IHBhZ2VZID0gdGFyZ2V0VG91Y2gucGFnZVk7XG4gIGlmIChlLnByZXZlbnRlZEJ5TmVzdGVkU3dpcGVyKSB7XG4gICAgdG91Y2hlcy5zdGFydFggPSBwYWdlWDtcbiAgICB0b3VjaGVzLnN0YXJ0WSA9IHBhZ2VZO1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAoIXN3aXBlci5hbGxvd1RvdWNoTW92ZSkge1xuICAgIGlmICghZS50YXJnZXQubWF0Y2hlcyhkYXRhLmZvY3VzYWJsZUVsZW1lbnRzKSkge1xuICAgICAgc3dpcGVyLmFsbG93Q2xpY2sgPSBmYWxzZTtcbiAgICB9XG4gICAgaWYgKGRhdGEuaXNUb3VjaGVkKSB7XG4gICAgICBPYmplY3QuYXNzaWduKHRvdWNoZXMsIHtcbiAgICAgICAgc3RhcnRYOiBwYWdlWCxcbiAgICAgICAgc3RhcnRZOiBwYWdlWSxcbiAgICAgICAgY3VycmVudFg6IHBhZ2VYLFxuICAgICAgICBjdXJyZW50WTogcGFnZVlcbiAgICAgIH0pO1xuICAgICAgZGF0YS50b3VjaFN0YXJ0VGltZSA9IG5vdygpO1xuICAgIH1cbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKHBhcmFtcy50b3VjaFJlbGVhc2VPbkVkZ2VzICYmICFwYXJhbXMubG9vcCkge1xuICAgIGlmIChzd2lwZXIuaXNWZXJ0aWNhbCgpKSB7XG4gICAgICAvLyBWZXJ0aWNhbFxuICAgICAgaWYgKHBhZ2VZIDwgdG91Y2hlcy5zdGFydFkgJiYgc3dpcGVyLnRyYW5zbGF0ZSA8PSBzd2lwZXIubWF4VHJhbnNsYXRlKCkgfHwgcGFnZVkgPiB0b3VjaGVzLnN0YXJ0WSAmJiBzd2lwZXIudHJhbnNsYXRlID49IHN3aXBlci5taW5UcmFuc2xhdGUoKSkge1xuICAgICAgICBkYXRhLmlzVG91Y2hlZCA9IGZhbHNlO1xuICAgICAgICBkYXRhLmlzTW92ZWQgPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAocGFnZVggPCB0b3VjaGVzLnN0YXJ0WCAmJiBzd2lwZXIudHJhbnNsYXRlIDw9IHN3aXBlci5tYXhUcmFuc2xhdGUoKSB8fCBwYWdlWCA+IHRvdWNoZXMuc3RhcnRYICYmIHN3aXBlci50cmFuc2xhdGUgPj0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICB9XG4gIGlmIChkb2N1bWVudC5hY3RpdmVFbGVtZW50KSB7XG4gICAgaWYgKGUudGFyZ2V0ID09PSBkb2N1bWVudC5hY3RpdmVFbGVtZW50ICYmIGUudGFyZ2V0Lm1hdGNoZXMoZGF0YS5mb2N1c2FibGVFbGVtZW50cykpIHtcbiAgICAgIGRhdGEuaXNNb3ZlZCA9IHRydWU7XG4gICAgICBzd2lwZXIuYWxsb3dDbGljayA9IGZhbHNlO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgfVxuICBpZiAoZGF0YS5hbGxvd1RvdWNoQ2FsbGJhY2tzKSB7XG4gICAgc3dpcGVyLmVtaXQoJ3RvdWNoTW92ZScsIGUpO1xuICB9XG4gIHRvdWNoZXMucHJldmlvdXNYID0gdG91Y2hlcy5jdXJyZW50WDtcbiAgdG91Y2hlcy5wcmV2aW91c1kgPSB0b3VjaGVzLmN1cnJlbnRZO1xuICB0b3VjaGVzLmN1cnJlbnRYID0gcGFnZVg7XG4gIHRvdWNoZXMuY3VycmVudFkgPSBwYWdlWTtcbiAgY29uc3QgZGlmZlggPSB0b3VjaGVzLmN1cnJlbnRYIC0gdG91Y2hlcy5zdGFydFg7XG4gIGNvbnN0IGRpZmZZID0gdG91Y2hlcy5jdXJyZW50WSAtIHRvdWNoZXMuc3RhcnRZO1xuICBpZiAoc3dpcGVyLnBhcmFtcy50aHJlc2hvbGQgJiYgTWF0aC5zcXJ0KGRpZmZYICoqIDIgKyBkaWZmWSAqKiAyKSA8IHN3aXBlci5wYXJhbXMudGhyZXNob2xkKSByZXR1cm47XG4gIGlmICh0eXBlb2YgZGF0YS5pc1Njcm9sbGluZyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBsZXQgdG91Y2hBbmdsZTtcbiAgICBpZiAoc3dpcGVyLmlzSG9yaXpvbnRhbCgpICYmIHRvdWNoZXMuY3VycmVudFkgPT09IHRvdWNoZXMuc3RhcnRZIHx8IHN3aXBlci5pc1ZlcnRpY2FsKCkgJiYgdG91Y2hlcy5jdXJyZW50WCA9PT0gdG91Y2hlcy5zdGFydFgpIHtcbiAgICAgIGRhdGEuaXNTY3JvbGxpbmcgPSBmYWxzZTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgICBpZiAoZGlmZlggKiBkaWZmWCArIGRpZmZZICogZGlmZlkgPj0gMjUpIHtcbiAgICAgICAgdG91Y2hBbmdsZSA9IE1hdGguYXRhbjIoTWF0aC5hYnMoZGlmZlkpLCBNYXRoLmFicyhkaWZmWCkpICogMTgwIC8gTWF0aC5QSTtcbiAgICAgICAgZGF0YS5pc1Njcm9sbGluZyA9IHN3aXBlci5pc0hvcml6b250YWwoKSA/IHRvdWNoQW5nbGUgPiBwYXJhbXMudG91Y2hBbmdsZSA6IDkwIC0gdG91Y2hBbmdsZSA+IHBhcmFtcy50b3VjaEFuZ2xlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBpZiAoZGF0YS5pc1Njcm9sbGluZykge1xuICAgIHN3aXBlci5lbWl0KCd0b3VjaE1vdmVPcHBvc2l0ZScsIGUpO1xuICB9XG4gIGlmICh0eXBlb2YgZGF0YS5zdGFydE1vdmluZyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBpZiAodG91Y2hlcy5jdXJyZW50WCAhPT0gdG91Y2hlcy5zdGFydFggfHwgdG91Y2hlcy5jdXJyZW50WSAhPT0gdG91Y2hlcy5zdGFydFkpIHtcbiAgICAgIGRhdGEuc3RhcnRNb3ZpbmcgPSB0cnVlO1xuICAgIH1cbiAgfVxuICBpZiAoZGF0YS5pc1Njcm9sbGluZyB8fCBlLnR5cGUgPT09ICd0b3VjaG1vdmUnICYmIGRhdGEucHJldmVudFRvdWNoTW92ZUZyb21Qb2ludGVyTW92ZSkge1xuICAgIGRhdGEuaXNUb3VjaGVkID0gZmFsc2U7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmICghZGF0YS5zdGFydE1vdmluZykge1xuICAgIHJldHVybjtcbiAgfVxuICBzd2lwZXIuYWxsb3dDbGljayA9IGZhbHNlO1xuICBpZiAoIXBhcmFtcy5jc3NNb2RlICYmIGUuY2FuY2VsYWJsZSkge1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgfVxuICBpZiAocGFyYW1zLnRvdWNoTW92ZVN0b3BQcm9wYWdhdGlvbiAmJiAhcGFyYW1zLm5lc3RlZCkge1xuICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gIH1cbiAgbGV0IGRpZmYgPSBzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyBkaWZmWCA6IGRpZmZZO1xuICBsZXQgdG91Y2hlc0RpZmYgPSBzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyB0b3VjaGVzLmN1cnJlbnRYIC0gdG91Y2hlcy5wcmV2aW91c1ggOiB0b3VjaGVzLmN1cnJlbnRZIC0gdG91Y2hlcy5wcmV2aW91c1k7XG4gIGlmIChwYXJhbXMub25lV2F5TW92ZW1lbnQpIHtcbiAgICBkaWZmID0gTWF0aC5hYnMoZGlmZikgKiAocnRsID8gMSA6IC0xKTtcbiAgICB0b3VjaGVzRGlmZiA9IE1hdGguYWJzKHRvdWNoZXNEaWZmKSAqIChydGwgPyAxIDogLTEpO1xuICB9XG4gIHRvdWNoZXMuZGlmZiA9IGRpZmY7XG4gIGRpZmYgKj0gcGFyYW1zLnRvdWNoUmF0aW87XG4gIGlmIChydGwpIHtcbiAgICBkaWZmID0gLWRpZmY7XG4gICAgdG91Y2hlc0RpZmYgPSAtdG91Y2hlc0RpZmY7XG4gIH1cbiAgY29uc3QgcHJldlRvdWNoZXNEaXJlY3Rpb24gPSBzd2lwZXIudG91Y2hlc0RpcmVjdGlvbjtcbiAgc3dpcGVyLnN3aXBlRGlyZWN0aW9uID0gZGlmZiA+IDAgPyAncHJldicgOiAnbmV4dCc7XG4gIHN3aXBlci50b3VjaGVzRGlyZWN0aW9uID0gdG91Y2hlc0RpZmYgPiAwID8gJ3ByZXYnIDogJ25leHQnO1xuICBjb25zdCBpc0xvb3AgPSBzd2lwZXIucGFyYW1zLmxvb3AgJiYgIXBhcmFtcy5jc3NNb2RlO1xuICBjb25zdCBhbGxvd0xvb3BGaXggPSBzd2lwZXIudG91Y2hlc0RpcmVjdGlvbiA9PT0gJ25leHQnICYmIHN3aXBlci5hbGxvd1NsaWRlTmV4dCB8fCBzd2lwZXIudG91Y2hlc0RpcmVjdGlvbiA9PT0gJ3ByZXYnICYmIHN3aXBlci5hbGxvd1NsaWRlUHJldjtcbiAgaWYgKCFkYXRhLmlzTW92ZWQpIHtcbiAgICBpZiAoaXNMb29wICYmIGFsbG93TG9vcEZpeCkge1xuICAgICAgc3dpcGVyLmxvb3BGaXgoe1xuICAgICAgICBkaXJlY3Rpb246IHN3aXBlci5zd2lwZURpcmVjdGlvblxuICAgICAgfSk7XG4gICAgfVxuICAgIGRhdGEuc3RhcnRUcmFuc2xhdGUgPSBzd2lwZXIuZ2V0VHJhbnNsYXRlKCk7XG4gICAgc3dpcGVyLnNldFRyYW5zaXRpb24oMCk7XG4gICAgaWYgKHN3aXBlci5hbmltYXRpbmcpIHtcbiAgICAgIGNvbnN0IGV2dCA9IG5ldyB3aW5kb3cuQ3VzdG9tRXZlbnQoJ3RyYW5zaXRpb25lbmQnLCB7XG4gICAgICAgIGJ1YmJsZXM6IHRydWUsXG4gICAgICAgIGNhbmNlbGFibGU6IHRydWUsXG4gICAgICAgIGRldGFpbDoge1xuICAgICAgICAgIGJ5U3dpcGVyVG91Y2hNb3ZlOiB0cnVlXG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgc3dpcGVyLndyYXBwZXJFbC5kaXNwYXRjaEV2ZW50KGV2dCk7XG4gICAgfVxuICAgIGRhdGEuYWxsb3dNb21lbnR1bUJvdW5jZSA9IGZhbHNlO1xuICAgIC8vIEdyYWIgQ3Vyc29yXG4gICAgaWYgKHBhcmFtcy5ncmFiQ3Vyc29yICYmIChzd2lwZXIuYWxsb3dTbGlkZU5leHQgPT09IHRydWUgfHwgc3dpcGVyLmFsbG93U2xpZGVQcmV2ID09PSB0cnVlKSkge1xuICAgICAgc3dpcGVyLnNldEdyYWJDdXJzb3IodHJ1ZSk7XG4gICAgfVxuICAgIHN3aXBlci5lbWl0KCdzbGlkZXJGaXJzdE1vdmUnLCBlKTtcbiAgfVxuICBsZXQgbG9vcEZpeGVkO1xuICBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcbiAgaWYgKGRhdGEuaXNNb3ZlZCAmJiBkYXRhLmFsbG93VGhyZXNob2xkTW92ZSAmJiBwcmV2VG91Y2hlc0RpcmVjdGlvbiAhPT0gc3dpcGVyLnRvdWNoZXNEaXJlY3Rpb24gJiYgaXNMb29wICYmIGFsbG93TG9vcEZpeCAmJiBNYXRoLmFicyhkaWZmKSA+PSAxKSB7XG4gICAgT2JqZWN0LmFzc2lnbih0b3VjaGVzLCB7XG4gICAgICBzdGFydFg6IHBhZ2VYLFxuICAgICAgc3RhcnRZOiBwYWdlWSxcbiAgICAgIGN1cnJlbnRYOiBwYWdlWCxcbiAgICAgIGN1cnJlbnRZOiBwYWdlWSxcbiAgICAgIHN0YXJ0VHJhbnNsYXRlOiBkYXRhLmN1cnJlbnRUcmFuc2xhdGVcbiAgICB9KTtcbiAgICBkYXRhLmxvb3BTd2FwUmVzZXQgPSB0cnVlO1xuICAgIGRhdGEuc3RhcnRUcmFuc2xhdGUgPSBkYXRhLmN1cnJlbnRUcmFuc2xhdGU7XG4gICAgcmV0dXJuO1xuICB9XG4gIHN3aXBlci5lbWl0KCdzbGlkZXJNb3ZlJywgZSk7XG4gIGRhdGEuaXNNb3ZlZCA9IHRydWU7XG4gIGRhdGEuY3VycmVudFRyYW5zbGF0ZSA9IGRpZmYgKyBkYXRhLnN0YXJ0VHJhbnNsYXRlO1xuICBsZXQgZGlzYWJsZVBhcmVudFN3aXBlciA9IHRydWU7XG4gIGxldCByZXNpc3RhbmNlUmF0aW8gPSBwYXJhbXMucmVzaXN0YW5jZVJhdGlvO1xuICBpZiAocGFyYW1zLnRvdWNoUmVsZWFzZU9uRWRnZXMpIHtcbiAgICByZXNpc3RhbmNlUmF0aW8gPSAwO1xuICB9XG4gIGlmIChkaWZmID4gMCkge1xuICAgIGlmIChpc0xvb3AgJiYgYWxsb3dMb29wRml4ICYmICFsb29wRml4ZWQgJiYgZGF0YS5hbGxvd1RocmVzaG9sZE1vdmUgJiYgZGF0YS5jdXJyZW50VHJhbnNsYXRlID4gKHBhcmFtcy5jZW50ZXJlZFNsaWRlcyA/IHN3aXBlci5taW5UcmFuc2xhdGUoKSAtIHN3aXBlci5zbGlkZXNTaXplc0dyaWRbc3dpcGVyLmFjdGl2ZUluZGV4ICsgMV0gOiBzd2lwZXIubWluVHJhbnNsYXRlKCkpKSB7XG4gICAgICBzd2lwZXIubG9vcEZpeCh7XG4gICAgICAgIGRpcmVjdGlvbjogJ3ByZXYnLFxuICAgICAgICBzZXRUcmFuc2xhdGU6IHRydWUsXG4gICAgICAgIGFjdGl2ZVNsaWRlSW5kZXg6IDBcbiAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAoZGF0YS5jdXJyZW50VHJhbnNsYXRlID4gc3dpcGVyLm1pblRyYW5zbGF0ZSgpKSB7XG4gICAgICBkaXNhYmxlUGFyZW50U3dpcGVyID0gZmFsc2U7XG4gICAgICBpZiAocGFyYW1zLnJlc2lzdGFuY2UpIHtcbiAgICAgICAgZGF0YS5jdXJyZW50VHJhbnNsYXRlID0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpIC0gMSArICgtc3dpcGVyLm1pblRyYW5zbGF0ZSgpICsgZGF0YS5zdGFydFRyYW5zbGF0ZSArIGRpZmYpICoqIHJlc2lzdGFuY2VSYXRpbztcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSBpZiAoZGlmZiA8IDApIHtcbiAgICBpZiAoaXNMb29wICYmIGFsbG93TG9vcEZpeCAmJiAhbG9vcEZpeGVkICYmIGRhdGEuYWxsb3dUaHJlc2hvbGRNb3ZlICYmIGRhdGEuY3VycmVudFRyYW5zbGF0ZSA8IChwYXJhbXMuY2VudGVyZWRTbGlkZXMgPyBzd2lwZXIubWF4VHJhbnNsYXRlKCkgKyBzd2lwZXIuc2xpZGVzU2l6ZXNHcmlkW3N3aXBlci5zbGlkZXNTaXplc0dyaWQubGVuZ3RoIC0gMV0gOiBzd2lwZXIubWF4VHJhbnNsYXRlKCkpKSB7XG4gICAgICBzd2lwZXIubG9vcEZpeCh7XG4gICAgICAgIGRpcmVjdGlvbjogJ25leHQnLFxuICAgICAgICBzZXRUcmFuc2xhdGU6IHRydWUsXG4gICAgICAgIGFjdGl2ZVNsaWRlSW5kZXg6IHN3aXBlci5zbGlkZXMubGVuZ3RoIC0gKHBhcmFtcy5zbGlkZXNQZXJWaWV3ID09PSAnYXV0bycgPyBzd2lwZXIuc2xpZGVzUGVyVmlld0R5bmFtaWMoKSA6IE1hdGguY2VpbChwYXJzZUZsb2F0KHBhcmFtcy5zbGlkZXNQZXJWaWV3LCAxMCkpKVxuICAgICAgfSk7XG4gICAgfVxuICAgIGlmIChkYXRhLmN1cnJlbnRUcmFuc2xhdGUgPCBzd2lwZXIubWF4VHJhbnNsYXRlKCkpIHtcbiAgICAgIGRpc2FibGVQYXJlbnRTd2lwZXIgPSBmYWxzZTtcbiAgICAgIGlmIChwYXJhbXMucmVzaXN0YW5jZSkge1xuICAgICAgICBkYXRhLmN1cnJlbnRUcmFuc2xhdGUgPSBzd2lwZXIubWF4VHJhbnNsYXRlKCkgKyAxIC0gKHN3aXBlci5tYXhUcmFuc2xhdGUoKSAtIGRhdGEuc3RhcnRUcmFuc2xhdGUgLSBkaWZmKSAqKiByZXNpc3RhbmNlUmF0aW87XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGlmIChkaXNhYmxlUGFyZW50U3dpcGVyKSB7XG4gICAgZS5wcmV2ZW50ZWRCeU5lc3RlZFN3aXBlciA9IHRydWU7XG4gIH1cblxuICAvLyBEaXJlY3Rpb25zIGxvY2tzXG4gIGlmICghc3dpcGVyLmFsbG93U2xpZGVOZXh0ICYmIHN3aXBlci5zd2lwZURpcmVjdGlvbiA9PT0gJ25leHQnICYmIGRhdGEuY3VycmVudFRyYW5zbGF0ZSA8IGRhdGEuc3RhcnRUcmFuc2xhdGUpIHtcbiAgICBkYXRhLmN1cnJlbnRUcmFuc2xhdGUgPSBkYXRhLnN0YXJ0VHJhbnNsYXRlO1xuICB9XG4gIGlmICghc3dpcGVyLmFsbG93U2xpZGVQcmV2ICYmIHN3aXBlci5zd2lwZURpcmVjdGlvbiA9PT0gJ3ByZXYnICYmIGRhdGEuY3VycmVudFRyYW5zbGF0ZSA+IGRhdGEuc3RhcnRUcmFuc2xhdGUpIHtcbiAgICBkYXRhLmN1cnJlbnRUcmFuc2xhdGUgPSBkYXRhLnN0YXJ0VHJhbnNsYXRlO1xuICB9XG4gIGlmICghc3dpcGVyLmFsbG93U2xpZGVQcmV2ICYmICFzd2lwZXIuYWxsb3dTbGlkZU5leHQpIHtcbiAgICBkYXRhLmN1cnJlbnRUcmFuc2xhdGUgPSBkYXRhLnN0YXJ0VHJhbnNsYXRlO1xuICB9XG5cbiAgLy8gVGhyZXNob2xkXG4gIGlmIChwYXJhbXMudGhyZXNob2xkID4gMCkge1xuICAgIGlmIChNYXRoLmFicyhkaWZmKSA+IHBhcmFtcy50aHJlc2hvbGQgfHwgZGF0YS5hbGxvd1RocmVzaG9sZE1vdmUpIHtcbiAgICAgIGlmICghZGF0YS5hbGxvd1RocmVzaG9sZE1vdmUpIHtcbiAgICAgICAgZGF0YS5hbGxvd1RocmVzaG9sZE1vdmUgPSB0cnVlO1xuICAgICAgICB0b3VjaGVzLnN0YXJ0WCA9IHRvdWNoZXMuY3VycmVudFg7XG4gICAgICAgIHRvdWNoZXMuc3RhcnRZID0gdG91Y2hlcy5jdXJyZW50WTtcbiAgICAgICAgZGF0YS5jdXJyZW50VHJhbnNsYXRlID0gZGF0YS5zdGFydFRyYW5zbGF0ZTtcbiAgICAgICAgdG91Y2hlcy5kaWZmID0gc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gdG91Y2hlcy5jdXJyZW50WCAtIHRvdWNoZXMuc3RhcnRYIDogdG91Y2hlcy5jdXJyZW50WSAtIHRvdWNoZXMuc3RhcnRZO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGRhdGEuY3VycmVudFRyYW5zbGF0ZSA9IGRhdGEuc3RhcnRUcmFuc2xhdGU7XG4gICAgICByZXR1cm47XG4gICAgfVxuICB9XG4gIGlmICghcGFyYW1zLmZvbGxvd0ZpbmdlciB8fCBwYXJhbXMuY3NzTW9kZSkgcmV0dXJuO1xuXG4gIC8vIFVwZGF0ZSBhY3RpdmUgaW5kZXggaW4gZnJlZSBtb2RlXG4gIGlmIChwYXJhbXMuZnJlZU1vZGUgJiYgcGFyYW1zLmZyZWVNb2RlLmVuYWJsZWQgJiYgc3dpcGVyLmZyZWVNb2RlIHx8IHBhcmFtcy53YXRjaFNsaWRlc1Byb2dyZXNzKSB7XG4gICAgc3dpcGVyLnVwZGF0ZUFjdGl2ZUluZGV4KCk7XG4gICAgc3dpcGVyLnVwZGF0ZVNsaWRlc0NsYXNzZXMoKTtcbiAgfVxuICBpZiAocGFyYW1zLmZyZWVNb2RlICYmIHBhcmFtcy5mcmVlTW9kZS5lbmFibGVkICYmIHN3aXBlci5mcmVlTW9kZSkge1xuICAgIHN3aXBlci5mcmVlTW9kZS5vblRvdWNoTW92ZSgpO1xuICB9XG4gIC8vIFVwZGF0ZSBwcm9ncmVzc1xuICBzd2lwZXIudXBkYXRlUHJvZ3Jlc3MoZGF0YS5jdXJyZW50VHJhbnNsYXRlKTtcbiAgLy8gVXBkYXRlIHRyYW5zbGF0ZVxuICBzd2lwZXIuc2V0VHJhbnNsYXRlKGRhdGEuY3VycmVudFRyYW5zbGF0ZSk7XG59XG5cbmZ1bmN0aW9uIG9uVG91Y2hFbmQoZXZlbnQpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgY29uc3QgZGF0YSA9IHN3aXBlci50b3VjaEV2ZW50c0RhdGE7XG4gIGxldCBlID0gZXZlbnQ7XG4gIGlmIChlLm9yaWdpbmFsRXZlbnQpIGUgPSBlLm9yaWdpbmFsRXZlbnQ7XG4gIGxldCB0YXJnZXRUb3VjaDtcbiAgY29uc3QgaXNUb3VjaEV2ZW50ID0gZS50eXBlID09PSAndG91Y2hlbmQnIHx8IGUudHlwZSA9PT0gJ3RvdWNoY2FuY2VsJztcbiAgaWYgKCFpc1RvdWNoRXZlbnQpIHtcbiAgICBpZiAoZGF0YS50b3VjaElkICE9PSBudWxsKSByZXR1cm47IC8vIHJldHVybiBmcm9tIHBvaW50ZXIgaWYgd2UgdXNlIHRvdWNoXG4gICAgaWYgKGUucG9pbnRlcklkICE9PSBkYXRhLnBvaW50ZXJJZCkgcmV0dXJuO1xuICAgIHRhcmdldFRvdWNoID0gZTtcbiAgfSBlbHNlIHtcbiAgICB0YXJnZXRUb3VjaCA9IFsuLi5lLmNoYW5nZWRUb3VjaGVzXS5maWx0ZXIodCA9PiB0LmlkZW50aWZpZXIgPT09IGRhdGEudG91Y2hJZClbMF07XG4gICAgaWYgKCF0YXJnZXRUb3VjaCB8fCB0YXJnZXRUb3VjaC5pZGVudGlmaWVyICE9PSBkYXRhLnRvdWNoSWQpIHJldHVybjtcbiAgfVxuICBpZiAoWydwb2ludGVyY2FuY2VsJywgJ3BvaW50ZXJvdXQnLCAncG9pbnRlcmxlYXZlJywgJ2NvbnRleHRtZW51J10uaW5jbHVkZXMoZS50eXBlKSkge1xuICAgIGNvbnN0IHByb2NlZWQgPSBbJ3BvaW50ZXJjYW5jZWwnLCAnY29udGV4dG1lbnUnXS5pbmNsdWRlcyhlLnR5cGUpICYmIChzd2lwZXIuYnJvd3Nlci5pc1NhZmFyaSB8fCBzd2lwZXIuYnJvd3Nlci5pc1dlYlZpZXcpO1xuICAgIGlmICghcHJvY2VlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgfVxuICBkYXRhLnBvaW50ZXJJZCA9IG51bGw7XG4gIGRhdGEudG91Y2hJZCA9IG51bGw7XG4gIGNvbnN0IHtcbiAgICBwYXJhbXMsXG4gICAgdG91Y2hlcyxcbiAgICBydGxUcmFuc2xhdGU6IHJ0bCxcbiAgICBzbGlkZXNHcmlkLFxuICAgIGVuYWJsZWRcbiAgfSA9IHN3aXBlcjtcbiAgaWYgKCFlbmFibGVkKSByZXR1cm47XG4gIGlmICghcGFyYW1zLnNpbXVsYXRlVG91Y2ggJiYgZS5wb2ludGVyVHlwZSA9PT0gJ21vdXNlJykgcmV0dXJuO1xuICBpZiAoZGF0YS5hbGxvd1RvdWNoQ2FsbGJhY2tzKSB7XG4gICAgc3dpcGVyLmVtaXQoJ3RvdWNoRW5kJywgZSk7XG4gIH1cbiAgZGF0YS5hbGxvd1RvdWNoQ2FsbGJhY2tzID0gZmFsc2U7XG4gIGlmICghZGF0YS5pc1RvdWNoZWQpIHtcbiAgICBpZiAoZGF0YS5pc01vdmVkICYmIHBhcmFtcy5ncmFiQ3Vyc29yKSB7XG4gICAgICBzd2lwZXIuc2V0R3JhYkN1cnNvcihmYWxzZSk7XG4gICAgfVxuICAgIGRhdGEuaXNNb3ZlZCA9IGZhbHNlO1xuICAgIGRhdGEuc3RhcnRNb3ZpbmcgPSBmYWxzZTtcbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBSZXR1cm4gR3JhYiBDdXJzb3JcbiAgaWYgKHBhcmFtcy5ncmFiQ3Vyc29yICYmIGRhdGEuaXNNb3ZlZCAmJiBkYXRhLmlzVG91Y2hlZCAmJiAoc3dpcGVyLmFsbG93U2xpZGVOZXh0ID09PSB0cnVlIHx8IHN3aXBlci5hbGxvd1NsaWRlUHJldiA9PT0gdHJ1ZSkpIHtcbiAgICBzd2lwZXIuc2V0R3JhYkN1cnNvcihmYWxzZSk7XG4gIH1cblxuICAvLyBUaW1lIGRpZmZcbiAgY29uc3QgdG91Y2hFbmRUaW1lID0gbm93KCk7XG4gIGNvbnN0IHRpbWVEaWZmID0gdG91Y2hFbmRUaW1lIC0gZGF0YS50b3VjaFN0YXJ0VGltZTtcblxuICAvLyBUYXAsIGRvdWJsZVRhcCwgQ2xpY2tcbiAgaWYgKHN3aXBlci5hbGxvd0NsaWNrKSB7XG4gICAgY29uc3QgcGF0aFRyZWUgPSBlLnBhdGggfHwgZS5jb21wb3NlZFBhdGggJiYgZS5jb21wb3NlZFBhdGgoKTtcbiAgICBzd2lwZXIudXBkYXRlQ2xpY2tlZFNsaWRlKHBhdGhUcmVlICYmIHBhdGhUcmVlWzBdIHx8IGUudGFyZ2V0LCBwYXRoVHJlZSk7XG4gICAgc3dpcGVyLmVtaXQoJ3RhcCBjbGljaycsIGUpO1xuICAgIGlmICh0aW1lRGlmZiA8IDMwMCAmJiB0b3VjaEVuZFRpbWUgLSBkYXRhLmxhc3RDbGlja1RpbWUgPCAzMDApIHtcbiAgICAgIHN3aXBlci5lbWl0KCdkb3VibGVUYXAgZG91YmxlQ2xpY2snLCBlKTtcbiAgICB9XG4gIH1cbiAgZGF0YS5sYXN0Q2xpY2tUaW1lID0gbm93KCk7XG4gIG5leHRUaWNrKCgpID0+IHtcbiAgICBpZiAoIXN3aXBlci5kZXN0cm95ZWQpIHN3aXBlci5hbGxvd0NsaWNrID0gdHJ1ZTtcbiAgfSk7XG4gIGlmICghZGF0YS5pc1RvdWNoZWQgfHwgIWRhdGEuaXNNb3ZlZCB8fCAhc3dpcGVyLnN3aXBlRGlyZWN0aW9uIHx8IHRvdWNoZXMuZGlmZiA9PT0gMCAmJiAhZGF0YS5sb29wU3dhcFJlc2V0IHx8IGRhdGEuY3VycmVudFRyYW5zbGF0ZSA9PT0gZGF0YS5zdGFydFRyYW5zbGF0ZSAmJiAhZGF0YS5sb29wU3dhcFJlc2V0KSB7XG4gICAgZGF0YS5pc1RvdWNoZWQgPSBmYWxzZTtcbiAgICBkYXRhLmlzTW92ZWQgPSBmYWxzZTtcbiAgICBkYXRhLnN0YXJ0TW92aW5nID0gZmFsc2U7XG4gICAgcmV0dXJuO1xuICB9XG4gIGRhdGEuaXNUb3VjaGVkID0gZmFsc2U7XG4gIGRhdGEuaXNNb3ZlZCA9IGZhbHNlO1xuICBkYXRhLnN0YXJ0TW92aW5nID0gZmFsc2U7XG4gIGxldCBjdXJyZW50UG9zO1xuICBpZiAocGFyYW1zLmZvbGxvd0Zpbmdlcikge1xuICAgIGN1cnJlbnRQb3MgPSBydGwgPyBzd2lwZXIudHJhbnNsYXRlIDogLXN3aXBlci50cmFuc2xhdGU7XG4gIH0gZWxzZSB7XG4gICAgY3VycmVudFBvcyA9IC1kYXRhLmN1cnJlbnRUcmFuc2xhdGU7XG4gIH1cbiAgaWYgKHBhcmFtcy5jc3NNb2RlKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChwYXJhbXMuZnJlZU1vZGUgJiYgcGFyYW1zLmZyZWVNb2RlLmVuYWJsZWQpIHtcbiAgICBzd2lwZXIuZnJlZU1vZGUub25Ub3VjaEVuZCh7XG4gICAgICBjdXJyZW50UG9zXG4gICAgfSk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gRmluZCBjdXJyZW50IHNsaWRlXG4gIGNvbnN0IHN3aXBlVG9MYXN0ID0gY3VycmVudFBvcyA+PSAtc3dpcGVyLm1heFRyYW5zbGF0ZSgpICYmICFzd2lwZXIucGFyYW1zLmxvb3A7XG4gIGxldCBzdG9wSW5kZXggPSAwO1xuICBsZXQgZ3JvdXBTaXplID0gc3dpcGVyLnNsaWRlc1NpemVzR3JpZFswXTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBzbGlkZXNHcmlkLmxlbmd0aDsgaSArPSBpIDwgcGFyYW1zLnNsaWRlc1Blckdyb3VwU2tpcCA/IDEgOiBwYXJhbXMuc2xpZGVzUGVyR3JvdXApIHtcbiAgICBjb25zdCBpbmNyZW1lbnQgPSBpIDwgcGFyYW1zLnNsaWRlc1Blckdyb3VwU2tpcCAtIDEgPyAxIDogcGFyYW1zLnNsaWRlc1Blckdyb3VwO1xuICAgIGlmICh0eXBlb2Ygc2xpZGVzR3JpZFtpICsgaW5jcmVtZW50XSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGlmIChzd2lwZVRvTGFzdCB8fCBjdXJyZW50UG9zID49IHNsaWRlc0dyaWRbaV0gJiYgY3VycmVudFBvcyA8IHNsaWRlc0dyaWRbaSArIGluY3JlbWVudF0pIHtcbiAgICAgICAgc3RvcEluZGV4ID0gaTtcbiAgICAgICAgZ3JvdXBTaXplID0gc2xpZGVzR3JpZFtpICsgaW5jcmVtZW50XSAtIHNsaWRlc0dyaWRbaV07XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChzd2lwZVRvTGFzdCB8fCBjdXJyZW50UG9zID49IHNsaWRlc0dyaWRbaV0pIHtcbiAgICAgIHN0b3BJbmRleCA9IGk7XG4gICAgICBncm91cFNpemUgPSBzbGlkZXNHcmlkW3NsaWRlc0dyaWQubGVuZ3RoIC0gMV0gLSBzbGlkZXNHcmlkW3NsaWRlc0dyaWQubGVuZ3RoIC0gMl07XG4gICAgfVxuICB9XG4gIGxldCByZXdpbmRGaXJzdEluZGV4ID0gbnVsbDtcbiAgbGV0IHJld2luZExhc3RJbmRleCA9IG51bGw7XG4gIGlmIChwYXJhbXMucmV3aW5kKSB7XG4gICAgaWYgKHN3aXBlci5pc0JlZ2lubmluZykge1xuICAgICAgcmV3aW5kTGFzdEluZGV4ID0gcGFyYW1zLnZpcnR1YWwgJiYgcGFyYW1zLnZpcnR1YWwuZW5hYmxlZCAmJiBzd2lwZXIudmlydHVhbCA/IHN3aXBlci52aXJ0dWFsLnNsaWRlcy5sZW5ndGggLSAxIDogc3dpcGVyLnNsaWRlcy5sZW5ndGggLSAxO1xuICAgIH0gZWxzZSBpZiAoc3dpcGVyLmlzRW5kKSB7XG4gICAgICByZXdpbmRGaXJzdEluZGV4ID0gMDtcbiAgICB9XG4gIH1cbiAgLy8gRmluZCBjdXJyZW50IHNsaWRlIHNpemVcbiAgY29uc3QgcmF0aW8gPSAoY3VycmVudFBvcyAtIHNsaWRlc0dyaWRbc3RvcEluZGV4XSkgLyBncm91cFNpemU7XG4gIGNvbnN0IGluY3JlbWVudCA9IHN0b3BJbmRleCA8IHBhcmFtcy5zbGlkZXNQZXJHcm91cFNraXAgLSAxID8gMSA6IHBhcmFtcy5zbGlkZXNQZXJHcm91cDtcbiAgaWYgKHRpbWVEaWZmID4gcGFyYW1zLmxvbmdTd2lwZXNNcykge1xuICAgIC8vIExvbmcgdG91Y2hlc1xuICAgIGlmICghcGFyYW1zLmxvbmdTd2lwZXMpIHtcbiAgICAgIHN3aXBlci5zbGlkZVRvKHN3aXBlci5hY3RpdmVJbmRleCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChzd2lwZXIuc3dpcGVEaXJlY3Rpb24gPT09ICduZXh0Jykge1xuICAgICAgaWYgKHJhdGlvID49IHBhcmFtcy5sb25nU3dpcGVzUmF0aW8pIHN3aXBlci5zbGlkZVRvKHBhcmFtcy5yZXdpbmQgJiYgc3dpcGVyLmlzRW5kID8gcmV3aW5kRmlyc3RJbmRleCA6IHN0b3BJbmRleCArIGluY3JlbWVudCk7ZWxzZSBzd2lwZXIuc2xpZGVUbyhzdG9wSW5kZXgpO1xuICAgIH1cbiAgICBpZiAoc3dpcGVyLnN3aXBlRGlyZWN0aW9uID09PSAncHJldicpIHtcbiAgICAgIGlmIChyYXRpbyA+IDEgLSBwYXJhbXMubG9uZ1N3aXBlc1JhdGlvKSB7XG4gICAgICAgIHN3aXBlci5zbGlkZVRvKHN0b3BJbmRleCArIGluY3JlbWVudCk7XG4gICAgICB9IGVsc2UgaWYgKHJld2luZExhc3RJbmRleCAhPT0gbnVsbCAmJiByYXRpbyA8IDAgJiYgTWF0aC5hYnMocmF0aW8pID4gcGFyYW1zLmxvbmdTd2lwZXNSYXRpbykge1xuICAgICAgICBzd2lwZXIuc2xpZGVUbyhyZXdpbmRMYXN0SW5kZXgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3dpcGVyLnNsaWRlVG8oc3RvcEluZGV4KTtcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gU2hvcnQgc3dpcGVzXG4gICAgaWYgKCFwYXJhbXMuc2hvcnRTd2lwZXMpIHtcbiAgICAgIHN3aXBlci5zbGlkZVRvKHN3aXBlci5hY3RpdmVJbmRleCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGlzTmF2QnV0dG9uVGFyZ2V0ID0gc3dpcGVyLm5hdmlnYXRpb24gJiYgKGUudGFyZ2V0ID09PSBzd2lwZXIubmF2aWdhdGlvbi5uZXh0RWwgfHwgZS50YXJnZXQgPT09IHN3aXBlci5uYXZpZ2F0aW9uLnByZXZFbCk7XG4gICAgaWYgKCFpc05hdkJ1dHRvblRhcmdldCkge1xuICAgICAgaWYgKHN3aXBlci5zd2lwZURpcmVjdGlvbiA9PT0gJ25leHQnKSB7XG4gICAgICAgIHN3aXBlci5zbGlkZVRvKHJld2luZEZpcnN0SW5kZXggIT09IG51bGwgPyByZXdpbmRGaXJzdEluZGV4IDogc3RvcEluZGV4ICsgaW5jcmVtZW50KTtcbiAgICAgIH1cbiAgICAgIGlmIChzd2lwZXIuc3dpcGVEaXJlY3Rpb24gPT09ICdwcmV2Jykge1xuICAgICAgICBzd2lwZXIuc2xpZGVUbyhyZXdpbmRMYXN0SW5kZXggIT09IG51bGwgPyByZXdpbmRMYXN0SW5kZXggOiBzdG9wSW5kZXgpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoZS50YXJnZXQgPT09IHN3aXBlci5uYXZpZ2F0aW9uLm5leHRFbCkge1xuICAgICAgc3dpcGVyLnNsaWRlVG8oc3RvcEluZGV4ICsgaW5jcmVtZW50KTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3dpcGVyLnNsaWRlVG8oc3RvcEluZGV4KTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gb25SZXNpemUoKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IHtcbiAgICBwYXJhbXMsXG4gICAgZWxcbiAgfSA9IHN3aXBlcjtcbiAgaWYgKGVsICYmIGVsLm9mZnNldFdpZHRoID09PSAwKSByZXR1cm47XG5cbiAgLy8gQnJlYWtwb2ludHNcbiAgaWYgKHBhcmFtcy5icmVha3BvaW50cykge1xuICAgIHN3aXBlci5zZXRCcmVha3BvaW50KCk7XG4gIH1cblxuICAvLyBTYXZlIGxvY2tzXG4gIGNvbnN0IHtcbiAgICBhbGxvd1NsaWRlTmV4dCxcbiAgICBhbGxvd1NsaWRlUHJldixcbiAgICBzbmFwR3JpZFxuICB9ID0gc3dpcGVyO1xuICBjb25zdCBpc1ZpcnR1YWwgPSBzd2lwZXIudmlydHVhbCAmJiBzd2lwZXIucGFyYW1zLnZpcnR1YWwuZW5hYmxlZDtcblxuICAvLyBEaXNhYmxlIGxvY2tzIG9uIHJlc2l6ZVxuICBzd2lwZXIuYWxsb3dTbGlkZU5leHQgPSB0cnVlO1xuICBzd2lwZXIuYWxsb3dTbGlkZVByZXYgPSB0cnVlO1xuICBzd2lwZXIudXBkYXRlU2l6ZSgpO1xuICBzd2lwZXIudXBkYXRlU2xpZGVzKCk7XG4gIHN3aXBlci51cGRhdGVTbGlkZXNDbGFzc2VzKCk7XG4gIGNvbnN0IGlzVmlydHVhbExvb3AgPSBpc1ZpcnR1YWwgJiYgcGFyYW1zLmxvb3A7XG4gIGlmICgocGFyYW1zLnNsaWRlc1BlclZpZXcgPT09ICdhdXRvJyB8fCBwYXJhbXMuc2xpZGVzUGVyVmlldyA+IDEpICYmIHN3aXBlci5pc0VuZCAmJiAhc3dpcGVyLmlzQmVnaW5uaW5nICYmICFzd2lwZXIucGFyYW1zLmNlbnRlcmVkU2xpZGVzICYmICFpc1ZpcnR1YWxMb29wKSB7XG4gICAgc3dpcGVyLnNsaWRlVG8oc3dpcGVyLnNsaWRlcy5sZW5ndGggLSAxLCAwLCBmYWxzZSwgdHJ1ZSk7XG4gIH0gZWxzZSB7XG4gICAgaWYgKHN3aXBlci5wYXJhbXMubG9vcCAmJiAhaXNWaXJ0dWFsKSB7XG4gICAgICBzd2lwZXIuc2xpZGVUb0xvb3Aoc3dpcGVyLnJlYWxJbmRleCwgMCwgZmFsc2UsIHRydWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzd2lwZXIuc2xpZGVUbyhzd2lwZXIuYWN0aXZlSW5kZXgsIDAsIGZhbHNlLCB0cnVlKTtcbiAgICB9XG4gIH1cbiAgaWYgKHN3aXBlci5hdXRvcGxheSAmJiBzd2lwZXIuYXV0b3BsYXkucnVubmluZyAmJiBzd2lwZXIuYXV0b3BsYXkucGF1c2VkKSB7XG4gICAgY2xlYXJUaW1lb3V0KHN3aXBlci5hdXRvcGxheS5yZXNpemVUaW1lb3V0KTtcbiAgICBzd2lwZXIuYXV0b3BsYXkucmVzaXplVGltZW91dCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgaWYgKHN3aXBlci5hdXRvcGxheSAmJiBzd2lwZXIuYXV0b3BsYXkucnVubmluZyAmJiBzd2lwZXIuYXV0b3BsYXkucGF1c2VkKSB7XG4gICAgICAgIHN3aXBlci5hdXRvcGxheS5yZXN1bWUoKTtcbiAgICAgIH1cbiAgICB9LCA1MDApO1xuICB9XG4gIC8vIFJldHVybiBsb2NrcyBhZnRlciByZXNpemVcbiAgc3dpcGVyLmFsbG93U2xpZGVQcmV2ID0gYWxsb3dTbGlkZVByZXY7XG4gIHN3aXBlci5hbGxvd1NsaWRlTmV4dCA9IGFsbG93U2xpZGVOZXh0O1xuICBpZiAoc3dpcGVyLnBhcmFtcy53YXRjaE92ZXJmbG93ICYmIHNuYXBHcmlkICE9PSBzd2lwZXIuc25hcEdyaWQpIHtcbiAgICBzd2lwZXIuY2hlY2tPdmVyZmxvdygpO1xuICB9XG59XG5cbmZ1bmN0aW9uIG9uQ2xpY2soZSkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBpZiAoIXN3aXBlci5lbmFibGVkKSByZXR1cm47XG4gIGlmICghc3dpcGVyLmFsbG93Q2xpY2spIHtcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5wcmV2ZW50Q2xpY2tzKSBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgaWYgKHN3aXBlci5wYXJhbXMucHJldmVudENsaWNrc1Byb3BhZ2F0aW9uICYmIHN3aXBlci5hbmltYXRpbmcpIHtcbiAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICBlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBvblNjcm9sbCgpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgY29uc3Qge1xuICAgIHdyYXBwZXJFbCxcbiAgICBydGxUcmFuc2xhdGUsXG4gICAgZW5hYmxlZFxuICB9ID0gc3dpcGVyO1xuICBpZiAoIWVuYWJsZWQpIHJldHVybjtcbiAgc3dpcGVyLnByZXZpb3VzVHJhbnNsYXRlID0gc3dpcGVyLnRyYW5zbGF0ZTtcbiAgaWYgKHN3aXBlci5pc0hvcml6b250YWwoKSkge1xuICAgIHN3aXBlci50cmFuc2xhdGUgPSAtd3JhcHBlckVsLnNjcm9sbExlZnQ7XG4gIH0gZWxzZSB7XG4gICAgc3dpcGVyLnRyYW5zbGF0ZSA9IC13cmFwcGVyRWwuc2Nyb2xsVG9wO1xuICB9XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICBpZiAoc3dpcGVyLnRyYW5zbGF0ZSA9PT0gMCkgc3dpcGVyLnRyYW5zbGF0ZSA9IDA7XG4gIHN3aXBlci51cGRhdGVBY3RpdmVJbmRleCgpO1xuICBzd2lwZXIudXBkYXRlU2xpZGVzQ2xhc3NlcygpO1xuICBsZXQgbmV3UHJvZ3Jlc3M7XG4gIGNvbnN0IHRyYW5zbGF0ZXNEaWZmID0gc3dpcGVyLm1heFRyYW5zbGF0ZSgpIC0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpO1xuICBpZiAodHJhbnNsYXRlc0RpZmYgPT09IDApIHtcbiAgICBuZXdQcm9ncmVzcyA9IDA7XG4gIH0gZWxzZSB7XG4gICAgbmV3UHJvZ3Jlc3MgPSAoc3dpcGVyLnRyYW5zbGF0ZSAtIHN3aXBlci5taW5UcmFuc2xhdGUoKSkgLyB0cmFuc2xhdGVzRGlmZjtcbiAgfVxuICBpZiAobmV3UHJvZ3Jlc3MgIT09IHN3aXBlci5wcm9ncmVzcykge1xuICAgIHN3aXBlci51cGRhdGVQcm9ncmVzcyhydGxUcmFuc2xhdGUgPyAtc3dpcGVyLnRyYW5zbGF0ZSA6IHN3aXBlci50cmFuc2xhdGUpO1xuICB9XG4gIHN3aXBlci5lbWl0KCdzZXRUcmFuc2xhdGUnLCBzd2lwZXIudHJhbnNsYXRlLCBmYWxzZSk7XG59XG5cbmZ1bmN0aW9uIG9uTG9hZChlKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIHByb2Nlc3NMYXp5UHJlbG9hZGVyKHN3aXBlciwgZS50YXJnZXQpO1xuICBpZiAoc3dpcGVyLnBhcmFtcy5jc3NNb2RlIHx8IHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyVmlldyAhPT0gJ2F1dG8nICYmICFzd2lwZXIucGFyYW1zLmF1dG9IZWlnaHQpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgc3dpcGVyLnVwZGF0ZSgpO1xufVxuXG5mdW5jdGlvbiBvbkRvY3VtZW50VG91Y2hTdGFydCgpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgaWYgKHN3aXBlci5kb2N1bWVudFRvdWNoSGFuZGxlclByb2NlZWRlZCkgcmV0dXJuO1xuICBzd2lwZXIuZG9jdW1lbnRUb3VjaEhhbmRsZXJQcm9jZWVkZWQgPSB0cnVlO1xuICBpZiAoc3dpcGVyLnBhcmFtcy50b3VjaFJlbGVhc2VPbkVkZ2VzKSB7XG4gICAgc3dpcGVyLmVsLnN0eWxlLnRvdWNoQWN0aW9uID0gJ2F1dG8nO1xuICB9XG59XG5cbmNvbnN0IGV2ZW50cyA9IChzd2lwZXIsIG1ldGhvZCkgPT4ge1xuICBjb25zdCBkb2N1bWVudCA9IGdldERvY3VtZW50KCk7XG4gIGNvbnN0IHtcbiAgICBwYXJhbXMsXG4gICAgZWwsXG4gICAgd3JhcHBlckVsLFxuICAgIGRldmljZVxuICB9ID0gc3dpcGVyO1xuICBjb25zdCBjYXB0dXJlID0gISFwYXJhbXMubmVzdGVkO1xuICBjb25zdCBkb21NZXRob2QgPSBtZXRob2QgPT09ICdvbicgPyAnYWRkRXZlbnRMaXN0ZW5lcicgOiAncmVtb3ZlRXZlbnRMaXN0ZW5lcic7XG4gIGNvbnN0IHN3aXBlck1ldGhvZCA9IG1ldGhvZDtcbiAgaWYgKCFlbCB8fCB0eXBlb2YgZWwgPT09ICdzdHJpbmcnKSByZXR1cm47XG5cbiAgLy8gVG91Y2ggRXZlbnRzXG4gIGRvY3VtZW50W2RvbU1ldGhvZF0oJ3RvdWNoc3RhcnQnLCBzd2lwZXIub25Eb2N1bWVudFRvdWNoU3RhcnQsIHtcbiAgICBwYXNzaXZlOiBmYWxzZSxcbiAgICBjYXB0dXJlXG4gIH0pO1xuICBlbFtkb21NZXRob2RdKCd0b3VjaHN0YXJ0Jywgc3dpcGVyLm9uVG91Y2hTdGFydCwge1xuICAgIHBhc3NpdmU6IGZhbHNlXG4gIH0pO1xuICBlbFtkb21NZXRob2RdKCdwb2ludGVyZG93bicsIHN3aXBlci5vblRvdWNoU3RhcnQsIHtcbiAgICBwYXNzaXZlOiBmYWxzZVxuICB9KTtcbiAgZG9jdW1lbnRbZG9tTWV0aG9kXSgndG91Y2htb3ZlJywgc3dpcGVyLm9uVG91Y2hNb3ZlLCB7XG4gICAgcGFzc2l2ZTogZmFsc2UsXG4gICAgY2FwdHVyZVxuICB9KTtcbiAgZG9jdW1lbnRbZG9tTWV0aG9kXSgncG9pbnRlcm1vdmUnLCBzd2lwZXIub25Ub3VjaE1vdmUsIHtcbiAgICBwYXNzaXZlOiBmYWxzZSxcbiAgICBjYXB0dXJlXG4gIH0pO1xuICBkb2N1bWVudFtkb21NZXRob2RdKCd0b3VjaGVuZCcsIHN3aXBlci5vblRvdWNoRW5kLCB7XG4gICAgcGFzc2l2ZTogdHJ1ZVxuICB9KTtcbiAgZG9jdW1lbnRbZG9tTWV0aG9kXSgncG9pbnRlcnVwJywgc3dpcGVyLm9uVG91Y2hFbmQsIHtcbiAgICBwYXNzaXZlOiB0cnVlXG4gIH0pO1xuICBkb2N1bWVudFtkb21NZXRob2RdKCdwb2ludGVyY2FuY2VsJywgc3dpcGVyLm9uVG91Y2hFbmQsIHtcbiAgICBwYXNzaXZlOiB0cnVlXG4gIH0pO1xuICBkb2N1bWVudFtkb21NZXRob2RdKCd0b3VjaGNhbmNlbCcsIHN3aXBlci5vblRvdWNoRW5kLCB7XG4gICAgcGFzc2l2ZTogdHJ1ZVxuICB9KTtcbiAgZG9jdW1lbnRbZG9tTWV0aG9kXSgncG9pbnRlcm91dCcsIHN3aXBlci5vblRvdWNoRW5kLCB7XG4gICAgcGFzc2l2ZTogdHJ1ZVxuICB9KTtcbiAgZG9jdW1lbnRbZG9tTWV0aG9kXSgncG9pbnRlcmxlYXZlJywgc3dpcGVyLm9uVG91Y2hFbmQsIHtcbiAgICBwYXNzaXZlOiB0cnVlXG4gIH0pO1xuICBkb2N1bWVudFtkb21NZXRob2RdKCdjb250ZXh0bWVudScsIHN3aXBlci5vblRvdWNoRW5kLCB7XG4gICAgcGFzc2l2ZTogdHJ1ZVxuICB9KTtcblxuICAvLyBQcmV2ZW50IExpbmtzIENsaWNrc1xuICBpZiAocGFyYW1zLnByZXZlbnRDbGlja3MgfHwgcGFyYW1zLnByZXZlbnRDbGlja3NQcm9wYWdhdGlvbikge1xuICAgIGVsW2RvbU1ldGhvZF0oJ2NsaWNrJywgc3dpcGVyLm9uQ2xpY2ssIHRydWUpO1xuICB9XG4gIGlmIChwYXJhbXMuY3NzTW9kZSkge1xuICAgIHdyYXBwZXJFbFtkb21NZXRob2RdKCdzY3JvbGwnLCBzd2lwZXIub25TY3JvbGwpO1xuICB9XG5cbiAgLy8gUmVzaXplIGhhbmRsZXJcbiAgaWYgKHBhcmFtcy51cGRhdGVPbldpbmRvd1Jlc2l6ZSkge1xuICAgIHN3aXBlcltzd2lwZXJNZXRob2RdKGRldmljZS5pb3MgfHwgZGV2aWNlLmFuZHJvaWQgPyAncmVzaXplIG9yaWVudGF0aW9uY2hhbmdlIG9ic2VydmVyVXBkYXRlJyA6ICdyZXNpemUgb2JzZXJ2ZXJVcGRhdGUnLCBvblJlc2l6ZSwgdHJ1ZSk7XG4gIH0gZWxzZSB7XG4gICAgc3dpcGVyW3N3aXBlck1ldGhvZF0oJ29ic2VydmVyVXBkYXRlJywgb25SZXNpemUsIHRydWUpO1xuICB9XG5cbiAgLy8gSW1hZ2VzIGxvYWRlclxuICBlbFtkb21NZXRob2RdKCdsb2FkJywgc3dpcGVyLm9uTG9hZCwge1xuICAgIGNhcHR1cmU6IHRydWVcbiAgfSk7XG59O1xuZnVuY3Rpb24gYXR0YWNoRXZlbnRzKCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCB7XG4gICAgcGFyYW1zXG4gIH0gPSBzd2lwZXI7XG4gIHN3aXBlci5vblRvdWNoU3RhcnQgPSBvblRvdWNoU3RhcnQuYmluZChzd2lwZXIpO1xuICBzd2lwZXIub25Ub3VjaE1vdmUgPSBvblRvdWNoTW92ZS5iaW5kKHN3aXBlcik7XG4gIHN3aXBlci5vblRvdWNoRW5kID0gb25Ub3VjaEVuZC5iaW5kKHN3aXBlcik7XG4gIHN3aXBlci5vbkRvY3VtZW50VG91Y2hTdGFydCA9IG9uRG9jdW1lbnRUb3VjaFN0YXJ0LmJpbmQoc3dpcGVyKTtcbiAgaWYgKHBhcmFtcy5jc3NNb2RlKSB7XG4gICAgc3dpcGVyLm9uU2Nyb2xsID0gb25TY3JvbGwuYmluZChzd2lwZXIpO1xuICB9XG4gIHN3aXBlci5vbkNsaWNrID0gb25DbGljay5iaW5kKHN3aXBlcik7XG4gIHN3aXBlci5vbkxvYWQgPSBvbkxvYWQuYmluZChzd2lwZXIpO1xuICBldmVudHMoc3dpcGVyLCAnb24nKTtcbn1cbmZ1bmN0aW9uIGRldGFjaEV2ZW50cygpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgZXZlbnRzKHN3aXBlciwgJ29mZicpO1xufVxudmFyIGV2ZW50cyQxID0ge1xuICBhdHRhY2hFdmVudHMsXG4gIGRldGFjaEV2ZW50c1xufTtcblxuY29uc3QgaXNHcmlkRW5hYmxlZCA9IChzd2lwZXIsIHBhcmFtcykgPT4ge1xuICByZXR1cm4gc3dpcGVyLmdyaWQgJiYgcGFyYW1zLmdyaWQgJiYgcGFyYW1zLmdyaWQucm93cyA+IDE7XG59O1xuZnVuY3Rpb24gc2V0QnJlYWtwb2ludCgpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgY29uc3Qge1xuICAgIHJlYWxJbmRleCxcbiAgICBpbml0aWFsaXplZCxcbiAgICBwYXJhbXMsXG4gICAgZWxcbiAgfSA9IHN3aXBlcjtcbiAgY29uc3QgYnJlYWtwb2ludHMgPSBwYXJhbXMuYnJlYWtwb2ludHM7XG4gIGlmICghYnJlYWtwb2ludHMgfHwgYnJlYWtwb2ludHMgJiYgT2JqZWN0LmtleXMoYnJlYWtwb2ludHMpLmxlbmd0aCA9PT0gMCkgcmV0dXJuO1xuXG4gIC8vIEdldCBicmVha3BvaW50IGZvciB3aW5kb3cgd2lkdGggYW5kIHVwZGF0ZSBwYXJhbWV0ZXJzXG4gIGNvbnN0IGJyZWFrcG9pbnQgPSBzd2lwZXIuZ2V0QnJlYWtwb2ludChicmVha3BvaW50cywgc3dpcGVyLnBhcmFtcy5icmVha3BvaW50c0Jhc2UsIHN3aXBlci5lbCk7XG4gIGlmICghYnJlYWtwb2ludCB8fCBzd2lwZXIuY3VycmVudEJyZWFrcG9pbnQgPT09IGJyZWFrcG9pbnQpIHJldHVybjtcbiAgY29uc3QgYnJlYWtwb2ludE9ubHlQYXJhbXMgPSBicmVha3BvaW50IGluIGJyZWFrcG9pbnRzID8gYnJlYWtwb2ludHNbYnJlYWtwb2ludF0gOiB1bmRlZmluZWQ7XG4gIGNvbnN0IGJyZWFrcG9pbnRQYXJhbXMgPSBicmVha3BvaW50T25seVBhcmFtcyB8fCBzd2lwZXIub3JpZ2luYWxQYXJhbXM7XG4gIGNvbnN0IHdhc011bHRpUm93ID0gaXNHcmlkRW5hYmxlZChzd2lwZXIsIHBhcmFtcyk7XG4gIGNvbnN0IGlzTXVsdGlSb3cgPSBpc0dyaWRFbmFibGVkKHN3aXBlciwgYnJlYWtwb2ludFBhcmFtcyk7XG4gIGNvbnN0IHdhc0dyYWJDdXJzb3IgPSBzd2lwZXIucGFyYW1zLmdyYWJDdXJzb3I7XG4gIGNvbnN0IGlzR3JhYkN1cnNvciA9IGJyZWFrcG9pbnRQYXJhbXMuZ3JhYkN1cnNvcjtcbiAgY29uc3Qgd2FzRW5hYmxlZCA9IHBhcmFtcy5lbmFibGVkO1xuICBpZiAod2FzTXVsdGlSb3cgJiYgIWlzTXVsdGlSb3cpIHtcbiAgICBlbC5jbGFzc0xpc3QucmVtb3ZlKGAke3BhcmFtcy5jb250YWluZXJNb2RpZmllckNsYXNzfWdyaWRgLCBgJHtwYXJhbXMuY29udGFpbmVyTW9kaWZpZXJDbGFzc31ncmlkLWNvbHVtbmApO1xuICAgIHN3aXBlci5lbWl0Q29udGFpbmVyQ2xhc3NlcygpO1xuICB9IGVsc2UgaWYgKCF3YXNNdWx0aVJvdyAmJiBpc011bHRpUm93KSB7XG4gICAgZWwuY2xhc3NMaXN0LmFkZChgJHtwYXJhbXMuY29udGFpbmVyTW9kaWZpZXJDbGFzc31ncmlkYCk7XG4gICAgaWYgKGJyZWFrcG9pbnRQYXJhbXMuZ3JpZC5maWxsICYmIGJyZWFrcG9pbnRQYXJhbXMuZ3JpZC5maWxsID09PSAnY29sdW1uJyB8fCAhYnJlYWtwb2ludFBhcmFtcy5ncmlkLmZpbGwgJiYgcGFyYW1zLmdyaWQuZmlsbCA9PT0gJ2NvbHVtbicpIHtcbiAgICAgIGVsLmNsYXNzTGlzdC5hZGQoYCR7cGFyYW1zLmNvbnRhaW5lck1vZGlmaWVyQ2xhc3N9Z3JpZC1jb2x1bW5gKTtcbiAgICB9XG4gICAgc3dpcGVyLmVtaXRDb250YWluZXJDbGFzc2VzKCk7XG4gIH1cbiAgaWYgKHdhc0dyYWJDdXJzb3IgJiYgIWlzR3JhYkN1cnNvcikge1xuICAgIHN3aXBlci51bnNldEdyYWJDdXJzb3IoKTtcbiAgfSBlbHNlIGlmICghd2FzR3JhYkN1cnNvciAmJiBpc0dyYWJDdXJzb3IpIHtcbiAgICBzd2lwZXIuc2V0R3JhYkN1cnNvcigpO1xuICB9XG5cbiAgLy8gVG9nZ2xlIG5hdmlnYXRpb24sIHBhZ2luYXRpb24sIHNjcm9sbGJhclxuICBbJ25hdmlnYXRpb24nLCAncGFnaW5hdGlvbicsICdzY3JvbGxiYXInXS5mb3JFYWNoKHByb3AgPT4ge1xuICAgIGlmICh0eXBlb2YgYnJlYWtwb2ludFBhcmFtc1twcm9wXSA9PT0gJ3VuZGVmaW5lZCcpIHJldHVybjtcbiAgICBjb25zdCB3YXNNb2R1bGVFbmFibGVkID0gcGFyYW1zW3Byb3BdICYmIHBhcmFtc1twcm9wXS5lbmFibGVkO1xuICAgIGNvbnN0IGlzTW9kdWxlRW5hYmxlZCA9IGJyZWFrcG9pbnRQYXJhbXNbcHJvcF0gJiYgYnJlYWtwb2ludFBhcmFtc1twcm9wXS5lbmFibGVkO1xuICAgIGlmICh3YXNNb2R1bGVFbmFibGVkICYmICFpc01vZHVsZUVuYWJsZWQpIHtcbiAgICAgIHN3aXBlcltwcm9wXS5kaXNhYmxlKCk7XG4gICAgfVxuICAgIGlmICghd2FzTW9kdWxlRW5hYmxlZCAmJiBpc01vZHVsZUVuYWJsZWQpIHtcbiAgICAgIHN3aXBlcltwcm9wXS5lbmFibGUoKTtcbiAgICB9XG4gIH0pO1xuICBjb25zdCBkaXJlY3Rpb25DaGFuZ2VkID0gYnJlYWtwb2ludFBhcmFtcy5kaXJlY3Rpb24gJiYgYnJlYWtwb2ludFBhcmFtcy5kaXJlY3Rpb24gIT09IHBhcmFtcy5kaXJlY3Rpb247XG4gIGNvbnN0IG5lZWRzUmVMb29wID0gcGFyYW1zLmxvb3AgJiYgKGJyZWFrcG9pbnRQYXJhbXMuc2xpZGVzUGVyVmlldyAhPT0gcGFyYW1zLnNsaWRlc1BlclZpZXcgfHwgZGlyZWN0aW9uQ2hhbmdlZCk7XG4gIGNvbnN0IHdhc0xvb3AgPSBwYXJhbXMubG9vcDtcbiAgaWYgKGRpcmVjdGlvbkNoYW5nZWQgJiYgaW5pdGlhbGl6ZWQpIHtcbiAgICBzd2lwZXIuY2hhbmdlRGlyZWN0aW9uKCk7XG4gIH1cbiAgZXh0ZW5kKHN3aXBlci5wYXJhbXMsIGJyZWFrcG9pbnRQYXJhbXMpO1xuICBjb25zdCBpc0VuYWJsZWQgPSBzd2lwZXIucGFyYW1zLmVuYWJsZWQ7XG4gIGNvbnN0IGhhc0xvb3AgPSBzd2lwZXIucGFyYW1zLmxvb3A7XG4gIE9iamVjdC5hc3NpZ24oc3dpcGVyLCB7XG4gICAgYWxsb3dUb3VjaE1vdmU6IHN3aXBlci5wYXJhbXMuYWxsb3dUb3VjaE1vdmUsXG4gICAgYWxsb3dTbGlkZU5leHQ6IHN3aXBlci5wYXJhbXMuYWxsb3dTbGlkZU5leHQsXG4gICAgYWxsb3dTbGlkZVByZXY6IHN3aXBlci5wYXJhbXMuYWxsb3dTbGlkZVByZXZcbiAgfSk7XG4gIGlmICh3YXNFbmFibGVkICYmICFpc0VuYWJsZWQpIHtcbiAgICBzd2lwZXIuZGlzYWJsZSgpO1xuICB9IGVsc2UgaWYgKCF3YXNFbmFibGVkICYmIGlzRW5hYmxlZCkge1xuICAgIHN3aXBlci5lbmFibGUoKTtcbiAgfVxuICBzd2lwZXIuY3VycmVudEJyZWFrcG9pbnQgPSBicmVha3BvaW50O1xuICBzd2lwZXIuZW1pdCgnX2JlZm9yZUJyZWFrcG9pbnQnLCBicmVha3BvaW50UGFyYW1zKTtcbiAgaWYgKGluaXRpYWxpemVkKSB7XG4gICAgaWYgKG5lZWRzUmVMb29wKSB7XG4gICAgICBzd2lwZXIubG9vcERlc3Ryb3koKTtcbiAgICAgIHN3aXBlci5sb29wQ3JlYXRlKHJlYWxJbmRleCk7XG4gICAgICBzd2lwZXIudXBkYXRlU2xpZGVzKCk7XG4gICAgfSBlbHNlIGlmICghd2FzTG9vcCAmJiBoYXNMb29wKSB7XG4gICAgICBzd2lwZXIubG9vcENyZWF0ZShyZWFsSW5kZXgpO1xuICAgICAgc3dpcGVyLnVwZGF0ZVNsaWRlcygpO1xuICAgIH0gZWxzZSBpZiAod2FzTG9vcCAmJiAhaGFzTG9vcCkge1xuICAgICAgc3dpcGVyLmxvb3BEZXN0cm95KCk7XG4gICAgfVxuICB9XG4gIHN3aXBlci5lbWl0KCdicmVha3BvaW50JywgYnJlYWtwb2ludFBhcmFtcyk7XG59XG5cbmZ1bmN0aW9uIGdldEJyZWFrcG9pbnQoYnJlYWtwb2ludHMsIGJhc2UsIGNvbnRhaW5lckVsKSB7XG4gIGlmIChiYXNlID09PSB2b2lkIDApIHtcbiAgICBiYXNlID0gJ3dpbmRvdyc7XG4gIH1cbiAgaWYgKCFicmVha3BvaW50cyB8fCBiYXNlID09PSAnY29udGFpbmVyJyAmJiAhY29udGFpbmVyRWwpIHJldHVybiB1bmRlZmluZWQ7XG4gIGxldCBicmVha3BvaW50ID0gZmFsc2U7XG4gIGNvbnN0IHdpbmRvdyA9IGdldFdpbmRvdygpO1xuICBjb25zdCBjdXJyZW50SGVpZ2h0ID0gYmFzZSA9PT0gJ3dpbmRvdycgPyB3aW5kb3cuaW5uZXJIZWlnaHQgOiBjb250YWluZXJFbC5jbGllbnRIZWlnaHQ7XG4gIGNvbnN0IHBvaW50cyA9IE9iamVjdC5rZXlzKGJyZWFrcG9pbnRzKS5tYXAocG9pbnQgPT4ge1xuICAgIGlmICh0eXBlb2YgcG9pbnQgPT09ICdzdHJpbmcnICYmIHBvaW50LmluZGV4T2YoJ0AnKSA9PT0gMCkge1xuICAgICAgY29uc3QgbWluUmF0aW8gPSBwYXJzZUZsb2F0KHBvaW50LnN1YnN0cigxKSk7XG4gICAgICBjb25zdCB2YWx1ZSA9IGN1cnJlbnRIZWlnaHQgKiBtaW5SYXRpbztcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHZhbHVlLFxuICAgICAgICBwb2ludFxuICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgIHZhbHVlOiBwb2ludCxcbiAgICAgIHBvaW50XG4gICAgfTtcbiAgfSk7XG4gIHBvaW50cy5zb3J0KChhLCBiKSA9PiBwYXJzZUludChhLnZhbHVlLCAxMCkgLSBwYXJzZUludChiLnZhbHVlLCAxMCkpO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHBvaW50cy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIGNvbnN0IHtcbiAgICAgIHBvaW50LFxuICAgICAgdmFsdWVcbiAgICB9ID0gcG9pbnRzW2ldO1xuICAgIGlmIChiYXNlID09PSAnd2luZG93Jykge1xuICAgICAgaWYgKHdpbmRvdy5tYXRjaE1lZGlhKGAobWluLXdpZHRoOiAke3ZhbHVlfXB4KWApLm1hdGNoZXMpIHtcbiAgICAgICAgYnJlYWtwb2ludCA9IHBvaW50O1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodmFsdWUgPD0gY29udGFpbmVyRWwuY2xpZW50V2lkdGgpIHtcbiAgICAgIGJyZWFrcG9pbnQgPSBwb2ludDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGJyZWFrcG9pbnQgfHwgJ21heCc7XG59XG5cbnZhciBicmVha3BvaW50cyA9IHtcbiAgc2V0QnJlYWtwb2ludCxcbiAgZ2V0QnJlYWtwb2ludFxufTtcblxuZnVuY3Rpb24gcHJlcGFyZUNsYXNzZXMoZW50cmllcywgcHJlZml4KSB7XG4gIGNvbnN0IHJlc3VsdENsYXNzZXMgPSBbXTtcbiAgZW50cmllcy5mb3JFYWNoKGl0ZW0gPT4ge1xuICAgIGlmICh0eXBlb2YgaXRlbSA9PT0gJ29iamVjdCcpIHtcbiAgICAgIE9iamVjdC5rZXlzKGl0ZW0pLmZvckVhY2goY2xhc3NOYW1lcyA9PiB7XG4gICAgICAgIGlmIChpdGVtW2NsYXNzTmFtZXNdKSB7XG4gICAgICAgICAgcmVzdWx0Q2xhc3Nlcy5wdXNoKHByZWZpeCArIGNsYXNzTmFtZXMpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBpdGVtID09PSAnc3RyaW5nJykge1xuICAgICAgcmVzdWx0Q2xhc3Nlcy5wdXNoKHByZWZpeCArIGl0ZW0pO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiByZXN1bHRDbGFzc2VzO1xufVxuZnVuY3Rpb24gYWRkQ2xhc3NlcygpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgY29uc3Qge1xuICAgIGNsYXNzTmFtZXMsXG4gICAgcGFyYW1zLFxuICAgIHJ0bCxcbiAgICBlbCxcbiAgICBkZXZpY2VcbiAgfSA9IHN3aXBlcjtcbiAgLy8gcHJldHRpZXItaWdub3JlXG4gIGNvbnN0IHN1ZmZpeGVzID0gcHJlcGFyZUNsYXNzZXMoWydpbml0aWFsaXplZCcsIHBhcmFtcy5kaXJlY3Rpb24sIHtcbiAgICAnZnJlZS1tb2RlJzogc3dpcGVyLnBhcmFtcy5mcmVlTW9kZSAmJiBwYXJhbXMuZnJlZU1vZGUuZW5hYmxlZFxuICB9LCB7XG4gICAgJ2F1dG9oZWlnaHQnOiBwYXJhbXMuYXV0b0hlaWdodFxuICB9LCB7XG4gICAgJ3J0bCc6IHJ0bFxuICB9LCB7XG4gICAgJ2dyaWQnOiBwYXJhbXMuZ3JpZCAmJiBwYXJhbXMuZ3JpZC5yb3dzID4gMVxuICB9LCB7XG4gICAgJ2dyaWQtY29sdW1uJzogcGFyYW1zLmdyaWQgJiYgcGFyYW1zLmdyaWQucm93cyA+IDEgJiYgcGFyYW1zLmdyaWQuZmlsbCA9PT0gJ2NvbHVtbidcbiAgfSwge1xuICAgICdhbmRyb2lkJzogZGV2aWNlLmFuZHJvaWRcbiAgfSwge1xuICAgICdpb3MnOiBkZXZpY2UuaW9zXG4gIH0sIHtcbiAgICAnY3NzLW1vZGUnOiBwYXJhbXMuY3NzTW9kZVxuICB9LCB7XG4gICAgJ2NlbnRlcmVkJzogcGFyYW1zLmNzc01vZGUgJiYgcGFyYW1zLmNlbnRlcmVkU2xpZGVzXG4gIH0sIHtcbiAgICAnd2F0Y2gtcHJvZ3Jlc3MnOiBwYXJhbXMud2F0Y2hTbGlkZXNQcm9ncmVzc1xuICB9XSwgcGFyYW1zLmNvbnRhaW5lck1vZGlmaWVyQ2xhc3MpO1xuICBjbGFzc05hbWVzLnB1c2goLi4uc3VmZml4ZXMpO1xuICBlbC5jbGFzc0xpc3QuYWRkKC4uLmNsYXNzTmFtZXMpO1xuICBzd2lwZXIuZW1pdENvbnRhaW5lckNsYXNzZXMoKTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlQ2xhc3NlcygpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgY29uc3Qge1xuICAgIGVsLFxuICAgIGNsYXNzTmFtZXNcbiAgfSA9IHN3aXBlcjtcbiAgaWYgKCFlbCB8fCB0eXBlb2YgZWwgPT09ICdzdHJpbmcnKSByZXR1cm47XG4gIGVsLmNsYXNzTGlzdC5yZW1vdmUoLi4uY2xhc3NOYW1lcyk7XG4gIHN3aXBlci5lbWl0Q29udGFpbmVyQ2xhc3NlcygpO1xufVxuXG52YXIgY2xhc3NlcyA9IHtcbiAgYWRkQ2xhc3NlcyxcbiAgcmVtb3ZlQ2xhc3Nlc1xufTtcblxuZnVuY3Rpb24gY2hlY2tPdmVyZmxvdygpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgY29uc3Qge1xuICAgIGlzTG9ja2VkOiB3YXNMb2NrZWQsXG4gICAgcGFyYW1zXG4gIH0gPSBzd2lwZXI7XG4gIGNvbnN0IHtcbiAgICBzbGlkZXNPZmZzZXRCZWZvcmVcbiAgfSA9IHBhcmFtcztcbiAgaWYgKHNsaWRlc09mZnNldEJlZm9yZSkge1xuICAgIGNvbnN0IGxhc3RTbGlkZUluZGV4ID0gc3dpcGVyLnNsaWRlcy5sZW5ndGggLSAxO1xuICAgIGNvbnN0IGxhc3RTbGlkZVJpZ2h0RWRnZSA9IHN3aXBlci5zbGlkZXNHcmlkW2xhc3RTbGlkZUluZGV4XSArIHN3aXBlci5zbGlkZXNTaXplc0dyaWRbbGFzdFNsaWRlSW5kZXhdICsgc2xpZGVzT2Zmc2V0QmVmb3JlICogMjtcbiAgICBzd2lwZXIuaXNMb2NrZWQgPSBzd2lwZXIuc2l6ZSA+IGxhc3RTbGlkZVJpZ2h0RWRnZTtcbiAgfSBlbHNlIHtcbiAgICBzd2lwZXIuaXNMb2NrZWQgPSBzd2lwZXIuc25hcEdyaWQubGVuZ3RoID09PSAxO1xuICB9XG4gIGlmIChwYXJhbXMuYWxsb3dTbGlkZU5leHQgPT09IHRydWUpIHtcbiAgICBzd2lwZXIuYWxsb3dTbGlkZU5leHQgPSAhc3dpcGVyLmlzTG9ja2VkO1xuICB9XG4gIGlmIChwYXJhbXMuYWxsb3dTbGlkZVByZXYgPT09IHRydWUpIHtcbiAgICBzd2lwZXIuYWxsb3dTbGlkZVByZXYgPSAhc3dpcGVyLmlzTG9ja2VkO1xuICB9XG4gIGlmICh3YXNMb2NrZWQgJiYgd2FzTG9ja2VkICE9PSBzd2lwZXIuaXNMb2NrZWQpIHtcbiAgICBzd2lwZXIuaXNFbmQgPSBmYWxzZTtcbiAgfVxuICBpZiAod2FzTG9ja2VkICE9PSBzd2lwZXIuaXNMb2NrZWQpIHtcbiAgICBzd2lwZXIuZW1pdChzd2lwZXIuaXNMb2NrZWQgPyAnbG9jaycgOiAndW5sb2NrJyk7XG4gIH1cbn1cbnZhciBjaGVja092ZXJmbG93JDEgPSB7XG4gIGNoZWNrT3ZlcmZsb3dcbn07XG5cbnZhciBkZWZhdWx0cyA9IHtcbiAgaW5pdDogdHJ1ZSxcbiAgZGlyZWN0aW9uOiAnaG9yaXpvbnRhbCcsXG4gIG9uZVdheU1vdmVtZW50OiBmYWxzZSxcbiAgc3dpcGVyRWxlbWVudE5vZGVOYW1lOiAnU1dJUEVSLUNPTlRBSU5FUicsXG4gIHRvdWNoRXZlbnRzVGFyZ2V0OiAnd3JhcHBlcicsXG4gIGluaXRpYWxTbGlkZTogMCxcbiAgc3BlZWQ6IDMwMCxcbiAgY3NzTW9kZTogZmFsc2UsXG4gIHVwZGF0ZU9uV2luZG93UmVzaXplOiB0cnVlLFxuICByZXNpemVPYnNlcnZlcjogdHJ1ZSxcbiAgbmVzdGVkOiBmYWxzZSxcbiAgY3JlYXRlRWxlbWVudHM6IGZhbHNlLFxuICBldmVudHNQcmVmaXg6ICdzd2lwZXInLFxuICBlbmFibGVkOiB0cnVlLFxuICBmb2N1c2FibGVFbGVtZW50czogJ2lucHV0LCBzZWxlY3QsIG9wdGlvbiwgdGV4dGFyZWEsIGJ1dHRvbiwgdmlkZW8sIGxhYmVsJyxcbiAgLy8gT3ZlcnJpZGVzXG4gIHdpZHRoOiBudWxsLFxuICBoZWlnaHQ6IG51bGwsXG4gIC8vXG4gIHByZXZlbnRJbnRlcmFjdGlvbk9uVHJhbnNpdGlvbjogZmFsc2UsXG4gIC8vIHNzclxuICB1c2VyQWdlbnQ6IG51bGwsXG4gIHVybDogbnVsbCxcbiAgLy8gVG8gc3VwcG9ydCBpT1MncyBzd2lwZS10by1nby1iYWNrIGdlc3R1cmUgKHdoZW4gYmVpbmcgdXNlZCBpbi1hcHApLlxuICBlZGdlU3dpcGVEZXRlY3Rpb246IGZhbHNlLFxuICBlZGdlU3dpcGVUaHJlc2hvbGQ6IDIwLFxuICAvLyBBdXRvaGVpZ2h0XG4gIGF1dG9IZWlnaHQ6IGZhbHNlLFxuICAvLyBTZXQgd3JhcHBlciB3aWR0aFxuICBzZXRXcmFwcGVyU2l6ZTogZmFsc2UsXG4gIC8vIFZpcnR1YWwgVHJhbnNsYXRlXG4gIHZpcnR1YWxUcmFuc2xhdGU6IGZhbHNlLFxuICAvLyBFZmZlY3RzXG4gIGVmZmVjdDogJ3NsaWRlJyxcbiAgLy8gJ3NsaWRlJyBvciAnZmFkZScgb3IgJ2N1YmUnIG9yICdjb3ZlcmZsb3cnIG9yICdmbGlwJ1xuXG4gIC8vIEJyZWFrcG9pbnRzXG4gIGJyZWFrcG9pbnRzOiB1bmRlZmluZWQsXG4gIGJyZWFrcG9pbnRzQmFzZTogJ3dpbmRvdycsXG4gIC8vIFNsaWRlcyBncmlkXG4gIHNwYWNlQmV0d2VlbjogMCxcbiAgc2xpZGVzUGVyVmlldzogMSxcbiAgc2xpZGVzUGVyR3JvdXA6IDEsXG4gIHNsaWRlc1Blckdyb3VwU2tpcDogMCxcbiAgc2xpZGVzUGVyR3JvdXBBdXRvOiBmYWxzZSxcbiAgY2VudGVyZWRTbGlkZXM6IGZhbHNlLFxuICBjZW50ZXJlZFNsaWRlc0JvdW5kczogZmFsc2UsXG4gIHNsaWRlc09mZnNldEJlZm9yZTogMCxcbiAgLy8gaW4gcHhcbiAgc2xpZGVzT2Zmc2V0QWZ0ZXI6IDAsXG4gIC8vIGluIHB4XG4gIG5vcm1hbGl6ZVNsaWRlSW5kZXg6IHRydWUsXG4gIGNlbnRlckluc3VmZmljaWVudFNsaWRlczogZmFsc2UsXG4gIC8vIERpc2FibGUgc3dpcGVyIGFuZCBoaWRlIG5hdmlnYXRpb24gd2hlbiBjb250YWluZXIgbm90IG92ZXJmbG93XG4gIHdhdGNoT3ZlcmZsb3c6IHRydWUsXG4gIC8vIFJvdW5kIGxlbmd0aFxuICByb3VuZExlbmd0aHM6IGZhbHNlLFxuICAvLyBUb3VjaGVzXG4gIHRvdWNoUmF0aW86IDEsXG4gIHRvdWNoQW5nbGU6IDQ1LFxuICBzaW11bGF0ZVRvdWNoOiB0cnVlLFxuICBzaG9ydFN3aXBlczogdHJ1ZSxcbiAgbG9uZ1N3aXBlczogdHJ1ZSxcbiAgbG9uZ1N3aXBlc1JhdGlvOiAwLjUsXG4gIGxvbmdTd2lwZXNNczogMzAwLFxuICBmb2xsb3dGaW5nZXI6IHRydWUsXG4gIGFsbG93VG91Y2hNb3ZlOiB0cnVlLFxuICB0aHJlc2hvbGQ6IDUsXG4gIHRvdWNoTW92ZVN0b3BQcm9wYWdhdGlvbjogZmFsc2UsXG4gIHRvdWNoU3RhcnRQcmV2ZW50RGVmYXVsdDogdHJ1ZSxcbiAgdG91Y2hTdGFydEZvcmNlUHJldmVudERlZmF1bHQ6IGZhbHNlLFxuICB0b3VjaFJlbGVhc2VPbkVkZ2VzOiBmYWxzZSxcbiAgLy8gVW5pcXVlIE5hdmlnYXRpb24gRWxlbWVudHNcbiAgdW5pcXVlTmF2RWxlbWVudHM6IHRydWUsXG4gIC8vIFJlc2lzdGFuY2VcbiAgcmVzaXN0YW5jZTogdHJ1ZSxcbiAgcmVzaXN0YW5jZVJhdGlvOiAwLjg1LFxuICAvLyBQcm9ncmVzc1xuICB3YXRjaFNsaWRlc1Byb2dyZXNzOiBmYWxzZSxcbiAgLy8gQ3Vyc29yXG4gIGdyYWJDdXJzb3I6IGZhbHNlLFxuICAvLyBDbGlja3NcbiAgcHJldmVudENsaWNrczogdHJ1ZSxcbiAgcHJldmVudENsaWNrc1Byb3BhZ2F0aW9uOiB0cnVlLFxuICBzbGlkZVRvQ2xpY2tlZFNsaWRlOiBmYWxzZSxcbiAgLy8gbG9vcFxuICBsb29wOiBmYWxzZSxcbiAgbG9vcEFkZEJsYW5rU2xpZGVzOiB0cnVlLFxuICBsb29wQWRkaXRpb25hbFNsaWRlczogMCxcbiAgbG9vcFByZXZlbnRzU2xpZGluZzogdHJ1ZSxcbiAgLy8gcmV3aW5kXG4gIHJld2luZDogZmFsc2UsXG4gIC8vIFN3aXBpbmcvbm8gc3dpcGluZ1xuICBhbGxvd1NsaWRlUHJldjogdHJ1ZSxcbiAgYWxsb3dTbGlkZU5leHQ6IHRydWUsXG4gIHN3aXBlSGFuZGxlcjogbnVsbCxcbiAgLy8gJy5zd2lwZS1oYW5kbGVyJyxcbiAgbm9Td2lwaW5nOiB0cnVlLFxuICBub1N3aXBpbmdDbGFzczogJ3N3aXBlci1uby1zd2lwaW5nJyxcbiAgbm9Td2lwaW5nU2VsZWN0b3I6IG51bGwsXG4gIC8vIFBhc3NpdmUgTGlzdGVuZXJzXG4gIHBhc3NpdmVMaXN0ZW5lcnM6IHRydWUsXG4gIG1heEJhY2tmYWNlSGlkZGVuU2xpZGVzOiAxMCxcbiAgLy8gTlNcbiAgY29udGFpbmVyTW9kaWZpZXJDbGFzczogJ3N3aXBlci0nLFxuICAvLyBORVdcbiAgc2xpZGVDbGFzczogJ3N3aXBlci1zbGlkZScsXG4gIHNsaWRlQmxhbmtDbGFzczogJ3N3aXBlci1zbGlkZS1ibGFuaycsXG4gIHNsaWRlQWN0aXZlQ2xhc3M6ICdzd2lwZXItc2xpZGUtYWN0aXZlJyxcbiAgc2xpZGVWaXNpYmxlQ2xhc3M6ICdzd2lwZXItc2xpZGUtdmlzaWJsZScsXG4gIHNsaWRlRnVsbHlWaXNpYmxlQ2xhc3M6ICdzd2lwZXItc2xpZGUtZnVsbHktdmlzaWJsZScsXG4gIHNsaWRlTmV4dENsYXNzOiAnc3dpcGVyLXNsaWRlLW5leHQnLFxuICBzbGlkZVByZXZDbGFzczogJ3N3aXBlci1zbGlkZS1wcmV2JyxcbiAgd3JhcHBlckNsYXNzOiAnc3dpcGVyLXdyYXBwZXInLFxuICBsYXp5UHJlbG9hZGVyQ2xhc3M6ICdzd2lwZXItbGF6eS1wcmVsb2FkZXInLFxuICBsYXp5UHJlbG9hZFByZXZOZXh0OiAwLFxuICAvLyBDYWxsYmFja3NcbiAgcnVuQ2FsbGJhY2tzT25Jbml0OiB0cnVlLFxuICAvLyBJbnRlcm5hbHNcbiAgX2VtaXRDbGFzc2VzOiBmYWxzZVxufTtcblxuZnVuY3Rpb24gbW9kdWxlRXh0ZW5kUGFyYW1zKHBhcmFtcywgYWxsTW9kdWxlc1BhcmFtcykge1xuICByZXR1cm4gZnVuY3Rpb24gZXh0ZW5kUGFyYW1zKG9iaikge1xuICAgIGlmIChvYmogPT09IHZvaWQgMCkge1xuICAgICAgb2JqID0ge307XG4gICAgfVxuICAgIGNvbnN0IG1vZHVsZVBhcmFtTmFtZSA9IE9iamVjdC5rZXlzKG9iailbMF07XG4gICAgY29uc3QgbW9kdWxlUGFyYW1zID0gb2JqW21vZHVsZVBhcmFtTmFtZV07XG4gICAgaWYgKHR5cGVvZiBtb2R1bGVQYXJhbXMgIT09ICdvYmplY3QnIHx8IG1vZHVsZVBhcmFtcyA9PT0gbnVsbCkge1xuICAgICAgZXh0ZW5kKGFsbE1vZHVsZXNQYXJhbXMsIG9iaik7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChwYXJhbXNbbW9kdWxlUGFyYW1OYW1lXSA9PT0gdHJ1ZSkge1xuICAgICAgcGFyYW1zW21vZHVsZVBhcmFtTmFtZV0gPSB7XG4gICAgICAgIGVuYWJsZWQ6IHRydWVcbiAgICAgIH07XG4gICAgfVxuICAgIGlmIChtb2R1bGVQYXJhbU5hbWUgPT09ICduYXZpZ2F0aW9uJyAmJiBwYXJhbXNbbW9kdWxlUGFyYW1OYW1lXSAmJiBwYXJhbXNbbW9kdWxlUGFyYW1OYW1lXS5lbmFibGVkICYmICFwYXJhbXNbbW9kdWxlUGFyYW1OYW1lXS5wcmV2RWwgJiYgIXBhcmFtc1ttb2R1bGVQYXJhbU5hbWVdLm5leHRFbCkge1xuICAgICAgcGFyYW1zW21vZHVsZVBhcmFtTmFtZV0uYXV0byA9IHRydWU7XG4gICAgfVxuICAgIGlmIChbJ3BhZ2luYXRpb24nLCAnc2Nyb2xsYmFyJ10uaW5kZXhPZihtb2R1bGVQYXJhbU5hbWUpID49IDAgJiYgcGFyYW1zW21vZHVsZVBhcmFtTmFtZV0gJiYgcGFyYW1zW21vZHVsZVBhcmFtTmFtZV0uZW5hYmxlZCAmJiAhcGFyYW1zW21vZHVsZVBhcmFtTmFtZV0uZWwpIHtcbiAgICAgIHBhcmFtc1ttb2R1bGVQYXJhbU5hbWVdLmF1dG8gPSB0cnVlO1xuICAgIH1cbiAgICBpZiAoIShtb2R1bGVQYXJhbU5hbWUgaW4gcGFyYW1zICYmICdlbmFibGVkJyBpbiBtb2R1bGVQYXJhbXMpKSB7XG4gICAgICBleHRlbmQoYWxsTW9kdWxlc1BhcmFtcywgb2JqKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBwYXJhbXNbbW9kdWxlUGFyYW1OYW1lXSA9PT0gJ29iamVjdCcgJiYgISgnZW5hYmxlZCcgaW4gcGFyYW1zW21vZHVsZVBhcmFtTmFtZV0pKSB7XG4gICAgICBwYXJhbXNbbW9kdWxlUGFyYW1OYW1lXS5lbmFibGVkID0gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKCFwYXJhbXNbbW9kdWxlUGFyYW1OYW1lXSkgcGFyYW1zW21vZHVsZVBhcmFtTmFtZV0gPSB7XG4gICAgICBlbmFibGVkOiBmYWxzZVxuICAgIH07XG4gICAgZXh0ZW5kKGFsbE1vZHVsZXNQYXJhbXMsIG9iaik7XG4gIH07XG59XG5cbi8qIGVzbGludCBuby1wYXJhbS1yZWFzc2lnbjogXCJvZmZcIiAqL1xuY29uc3QgcHJvdG90eXBlcyA9IHtcbiAgZXZlbnRzRW1pdHRlcixcbiAgdXBkYXRlLFxuICB0cmFuc2xhdGUsXG4gIHRyYW5zaXRpb24sXG4gIHNsaWRlLFxuICBsb29wLFxuICBncmFiQ3Vyc29yLFxuICBldmVudHM6IGV2ZW50cyQxLFxuICBicmVha3BvaW50cyxcbiAgY2hlY2tPdmVyZmxvdzogY2hlY2tPdmVyZmxvdyQxLFxuICBjbGFzc2VzXG59O1xuY29uc3QgZXh0ZW5kZWREZWZhdWx0cyA9IHt9O1xuY2xhc3MgU3dpcGVyIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgbGV0IGVsO1xuICAgIGxldCBwYXJhbXM7XG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cbiAgICBpZiAoYXJncy5sZW5ndGggPT09IDEgJiYgYXJnc1swXS5jb25zdHJ1Y3RvciAmJiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYXJnc1swXSkuc2xpY2UoOCwgLTEpID09PSAnT2JqZWN0Jykge1xuICAgICAgcGFyYW1zID0gYXJnc1swXTtcbiAgICB9IGVsc2Uge1xuICAgICAgW2VsLCBwYXJhbXNdID0gYXJncztcbiAgICB9XG4gICAgaWYgKCFwYXJhbXMpIHBhcmFtcyA9IHt9O1xuICAgIHBhcmFtcyA9IGV4dGVuZCh7fSwgcGFyYW1zKTtcbiAgICBpZiAoZWwgJiYgIXBhcmFtcy5lbCkgcGFyYW1zLmVsID0gZWw7XG4gICAgY29uc3QgZG9jdW1lbnQgPSBnZXREb2N1bWVudCgpO1xuICAgIGlmIChwYXJhbXMuZWwgJiYgdHlwZW9mIHBhcmFtcy5lbCA9PT0gJ3N0cmluZycgJiYgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChwYXJhbXMuZWwpLmxlbmd0aCA+IDEpIHtcbiAgICAgIGNvbnN0IHN3aXBlcnMgPSBbXTtcbiAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwocGFyYW1zLmVsKS5mb3JFYWNoKGNvbnRhaW5lckVsID0+IHtcbiAgICAgICAgY29uc3QgbmV3UGFyYW1zID0gZXh0ZW5kKHt9LCBwYXJhbXMsIHtcbiAgICAgICAgICBlbDogY29udGFpbmVyRWxcbiAgICAgICAgfSk7XG4gICAgICAgIHN3aXBlcnMucHVzaChuZXcgU3dpcGVyKG5ld1BhcmFtcykpO1xuICAgICAgfSk7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc3RydWN0b3ItcmV0dXJuXG4gICAgICByZXR1cm4gc3dpcGVycztcbiAgICB9XG5cbiAgICAvLyBTd2lwZXIgSW5zdGFuY2VcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIHN3aXBlci5fX3N3aXBlcl9fID0gdHJ1ZTtcbiAgICBzd2lwZXIuc3VwcG9ydCA9IGdldFN1cHBvcnQoKTtcbiAgICBzd2lwZXIuZGV2aWNlID0gZ2V0RGV2aWNlKHtcbiAgICAgIHVzZXJBZ2VudDogcGFyYW1zLnVzZXJBZ2VudFxuICAgIH0pO1xuICAgIHN3aXBlci5icm93c2VyID0gZ2V0QnJvd3NlcigpO1xuICAgIHN3aXBlci5ldmVudHNMaXN0ZW5lcnMgPSB7fTtcbiAgICBzd2lwZXIuZXZlbnRzQW55TGlzdGVuZXJzID0gW107XG4gICAgc3dpcGVyLm1vZHVsZXMgPSBbLi4uc3dpcGVyLl9fbW9kdWxlc19fXTtcbiAgICBpZiAocGFyYW1zLm1vZHVsZXMgJiYgQXJyYXkuaXNBcnJheShwYXJhbXMubW9kdWxlcykpIHtcbiAgICAgIHN3aXBlci5tb2R1bGVzLnB1c2goLi4ucGFyYW1zLm1vZHVsZXMpO1xuICAgIH1cbiAgICBjb25zdCBhbGxNb2R1bGVzUGFyYW1zID0ge307XG4gICAgc3dpcGVyLm1vZHVsZXMuZm9yRWFjaChtb2QgPT4ge1xuICAgICAgbW9kKHtcbiAgICAgICAgcGFyYW1zLFxuICAgICAgICBzd2lwZXIsXG4gICAgICAgIGV4dGVuZFBhcmFtczogbW9kdWxlRXh0ZW5kUGFyYW1zKHBhcmFtcywgYWxsTW9kdWxlc1BhcmFtcyksXG4gICAgICAgIG9uOiBzd2lwZXIub24uYmluZChzd2lwZXIpLFxuICAgICAgICBvbmNlOiBzd2lwZXIub25jZS5iaW5kKHN3aXBlciksXG4gICAgICAgIG9mZjogc3dpcGVyLm9mZi5iaW5kKHN3aXBlciksXG4gICAgICAgIGVtaXQ6IHN3aXBlci5lbWl0LmJpbmQoc3dpcGVyKVxuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICAvLyBFeHRlbmQgZGVmYXVsdHMgd2l0aCBtb2R1bGVzIHBhcmFtc1xuICAgIGNvbnN0IHN3aXBlclBhcmFtcyA9IGV4dGVuZCh7fSwgZGVmYXVsdHMsIGFsbE1vZHVsZXNQYXJhbXMpO1xuXG4gICAgLy8gRXh0ZW5kIGRlZmF1bHRzIHdpdGggcGFzc2VkIHBhcmFtc1xuICAgIHN3aXBlci5wYXJhbXMgPSBleHRlbmQoe30sIHN3aXBlclBhcmFtcywgZXh0ZW5kZWREZWZhdWx0cywgcGFyYW1zKTtcbiAgICBzd2lwZXIub3JpZ2luYWxQYXJhbXMgPSBleHRlbmQoe30sIHN3aXBlci5wYXJhbXMpO1xuICAgIHN3aXBlci5wYXNzZWRQYXJhbXMgPSBleHRlbmQoe30sIHBhcmFtcyk7XG5cbiAgICAvLyBhZGQgZXZlbnQgbGlzdGVuZXJzXG4gICAgaWYgKHN3aXBlci5wYXJhbXMgJiYgc3dpcGVyLnBhcmFtcy5vbikge1xuICAgICAgT2JqZWN0LmtleXMoc3dpcGVyLnBhcmFtcy5vbikuZm9yRWFjaChldmVudE5hbWUgPT4ge1xuICAgICAgICBzd2lwZXIub24oZXZlbnROYW1lLCBzd2lwZXIucGFyYW1zLm9uW2V2ZW50TmFtZV0pO1xuICAgICAgfSk7XG4gICAgfVxuICAgIGlmIChzd2lwZXIucGFyYW1zICYmIHN3aXBlci5wYXJhbXMub25BbnkpIHtcbiAgICAgIHN3aXBlci5vbkFueShzd2lwZXIucGFyYW1zLm9uQW55KTtcbiAgICB9XG5cbiAgICAvLyBFeHRlbmQgU3dpcGVyXG4gICAgT2JqZWN0LmFzc2lnbihzd2lwZXIsIHtcbiAgICAgIGVuYWJsZWQ6IHN3aXBlci5wYXJhbXMuZW5hYmxlZCxcbiAgICAgIGVsLFxuICAgICAgLy8gQ2xhc3Nlc1xuICAgICAgY2xhc3NOYW1lczogW10sXG4gICAgICAvLyBTbGlkZXNcbiAgICAgIHNsaWRlczogW10sXG4gICAgICBzbGlkZXNHcmlkOiBbXSxcbiAgICAgIHNuYXBHcmlkOiBbXSxcbiAgICAgIHNsaWRlc1NpemVzR3JpZDogW10sXG4gICAgICAvLyBpc0RpcmVjdGlvblxuICAgICAgaXNIb3Jpem9udGFsKCkge1xuICAgICAgICByZXR1cm4gc3dpcGVyLnBhcmFtcy5kaXJlY3Rpb24gPT09ICdob3Jpem9udGFsJztcbiAgICAgIH0sXG4gICAgICBpc1ZlcnRpY2FsKCkge1xuICAgICAgICByZXR1cm4gc3dpcGVyLnBhcmFtcy5kaXJlY3Rpb24gPT09ICd2ZXJ0aWNhbCc7XG4gICAgICB9LFxuICAgICAgLy8gSW5kZXhlc1xuICAgICAgYWN0aXZlSW5kZXg6IDAsXG4gICAgICByZWFsSW5kZXg6IDAsXG4gICAgICAvL1xuICAgICAgaXNCZWdpbm5pbmc6IHRydWUsXG4gICAgICBpc0VuZDogZmFsc2UsXG4gICAgICAvLyBQcm9wc1xuICAgICAgdHJhbnNsYXRlOiAwLFxuICAgICAgcHJldmlvdXNUcmFuc2xhdGU6IDAsXG4gICAgICBwcm9ncmVzczogMCxcbiAgICAgIHZlbG9jaXR5OiAwLFxuICAgICAgYW5pbWF0aW5nOiBmYWxzZSxcbiAgICAgIGNzc092ZXJmbG93QWRqdXN0bWVudCgpIHtcbiAgICAgICAgLy8gUmV0dXJucyAwIHVubGVzcyBgdHJhbnNsYXRlYCBpcyA+IDIqKjIzXG4gICAgICAgIC8vIFNob3VsZCBiZSBzdWJ0cmFjdGVkIGZyb20gY3NzIHZhbHVlcyB0byBwcmV2ZW50IG92ZXJmbG93XG4gICAgICAgIHJldHVybiBNYXRoLnRydW5jKHRoaXMudHJhbnNsYXRlIC8gMiAqKiAyMykgKiAyICoqIDIzO1xuICAgICAgfSxcbiAgICAgIC8vIExvY2tzXG4gICAgICBhbGxvd1NsaWRlTmV4dDogc3dpcGVyLnBhcmFtcy5hbGxvd1NsaWRlTmV4dCxcbiAgICAgIGFsbG93U2xpZGVQcmV2OiBzd2lwZXIucGFyYW1zLmFsbG93U2xpZGVQcmV2LFxuICAgICAgLy8gVG91Y2ggRXZlbnRzXG4gICAgICB0b3VjaEV2ZW50c0RhdGE6IHtcbiAgICAgICAgaXNUb3VjaGVkOiB1bmRlZmluZWQsXG4gICAgICAgIGlzTW92ZWQ6IHVuZGVmaW5lZCxcbiAgICAgICAgYWxsb3dUb3VjaENhbGxiYWNrczogdW5kZWZpbmVkLFxuICAgICAgICB0b3VjaFN0YXJ0VGltZTogdW5kZWZpbmVkLFxuICAgICAgICBpc1Njcm9sbGluZzogdW5kZWZpbmVkLFxuICAgICAgICBjdXJyZW50VHJhbnNsYXRlOiB1bmRlZmluZWQsXG4gICAgICAgIHN0YXJ0VHJhbnNsYXRlOiB1bmRlZmluZWQsXG4gICAgICAgIGFsbG93VGhyZXNob2xkTW92ZTogdW5kZWZpbmVkLFxuICAgICAgICAvLyBGb3JtIGVsZW1lbnRzIHRvIG1hdGNoXG4gICAgICAgIGZvY3VzYWJsZUVsZW1lbnRzOiBzd2lwZXIucGFyYW1zLmZvY3VzYWJsZUVsZW1lbnRzLFxuICAgICAgICAvLyBMYXN0IGNsaWNrIHRpbWVcbiAgICAgICAgbGFzdENsaWNrVGltZTogMCxcbiAgICAgICAgY2xpY2tUaW1lb3V0OiB1bmRlZmluZWQsXG4gICAgICAgIC8vIFZlbG9jaXRpZXNcbiAgICAgICAgdmVsb2NpdGllczogW10sXG4gICAgICAgIGFsbG93TW9tZW50dW1Cb3VuY2U6IHVuZGVmaW5lZCxcbiAgICAgICAgc3RhcnRNb3Zpbmc6IHVuZGVmaW5lZCxcbiAgICAgICAgcG9pbnRlcklkOiBudWxsLFxuICAgICAgICB0b3VjaElkOiBudWxsXG4gICAgICB9LFxuICAgICAgLy8gQ2xpY2tzXG4gICAgICBhbGxvd0NsaWNrOiB0cnVlLFxuICAgICAgLy8gVG91Y2hlc1xuICAgICAgYWxsb3dUb3VjaE1vdmU6IHN3aXBlci5wYXJhbXMuYWxsb3dUb3VjaE1vdmUsXG4gICAgICB0b3VjaGVzOiB7XG4gICAgICAgIHN0YXJ0WDogMCxcbiAgICAgICAgc3RhcnRZOiAwLFxuICAgICAgICBjdXJyZW50WDogMCxcbiAgICAgICAgY3VycmVudFk6IDAsXG4gICAgICAgIGRpZmY6IDBcbiAgICAgIH0sXG4gICAgICAvLyBJbWFnZXNcbiAgICAgIGltYWdlc1RvTG9hZDogW10sXG4gICAgICBpbWFnZXNMb2FkZWQ6IDBcbiAgICB9KTtcbiAgICBzd2lwZXIuZW1pdCgnX3N3aXBlcicpO1xuXG4gICAgLy8gSW5pdFxuICAgIGlmIChzd2lwZXIucGFyYW1zLmluaXQpIHtcbiAgICAgIHN3aXBlci5pbml0KCk7XG4gICAgfVxuXG4gICAgLy8gUmV0dXJuIGFwcCBpbnN0YW5jZVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zdHJ1Y3Rvci1yZXR1cm5cbiAgICByZXR1cm4gc3dpcGVyO1xuICB9XG4gIGdldERpcmVjdGlvbkxhYmVsKHByb3BlcnR5KSB7XG4gICAgaWYgKHRoaXMuaXNIb3Jpem9udGFsKCkpIHtcbiAgICAgIHJldHVybiBwcm9wZXJ0eTtcbiAgICB9XG4gICAgLy8gcHJldHRpZXItaWdub3JlXG4gICAgcmV0dXJuIHtcbiAgICAgICd3aWR0aCc6ICdoZWlnaHQnLFxuICAgICAgJ21hcmdpbi10b3AnOiAnbWFyZ2luLWxlZnQnLFxuICAgICAgJ21hcmdpbi1ib3R0b20gJzogJ21hcmdpbi1yaWdodCcsXG4gICAgICAnbWFyZ2luLWxlZnQnOiAnbWFyZ2luLXRvcCcsXG4gICAgICAnbWFyZ2luLXJpZ2h0JzogJ21hcmdpbi1ib3R0b20nLFxuICAgICAgJ3BhZGRpbmctbGVmdCc6ICdwYWRkaW5nLXRvcCcsXG4gICAgICAncGFkZGluZy1yaWdodCc6ICdwYWRkaW5nLWJvdHRvbScsXG4gICAgICAnbWFyZ2luUmlnaHQnOiAnbWFyZ2luQm90dG9tJ1xuICAgIH1bcHJvcGVydHldO1xuICB9XG4gIGdldFNsaWRlSW5kZXgoc2xpZGVFbCkge1xuICAgIGNvbnN0IHtcbiAgICAgIHNsaWRlc0VsLFxuICAgICAgcGFyYW1zXG4gICAgfSA9IHRoaXM7XG4gICAgY29uc3Qgc2xpZGVzID0gZWxlbWVudENoaWxkcmVuKHNsaWRlc0VsLCBgLiR7cGFyYW1zLnNsaWRlQ2xhc3N9LCBzd2lwZXItc2xpZGVgKTtcbiAgICBjb25zdCBmaXJzdFNsaWRlSW5kZXggPSBlbGVtZW50SW5kZXgoc2xpZGVzWzBdKTtcbiAgICByZXR1cm4gZWxlbWVudEluZGV4KHNsaWRlRWwpIC0gZmlyc3RTbGlkZUluZGV4O1xuICB9XG4gIGdldFNsaWRlSW5kZXhCeURhdGEoaW5kZXgpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRTbGlkZUluZGV4KHRoaXMuc2xpZGVzLmZpbHRlcihzbGlkZUVsID0+IHNsaWRlRWwuZ2V0QXR0cmlidXRlKCdkYXRhLXN3aXBlci1zbGlkZS1pbmRleCcpICogMSA9PT0gaW5kZXgpWzBdKTtcbiAgfVxuICByZWNhbGNTbGlkZXMoKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBjb25zdCB7XG4gICAgICBzbGlkZXNFbCxcbiAgICAgIHBhcmFtc1xuICAgIH0gPSBzd2lwZXI7XG4gICAgc3dpcGVyLnNsaWRlcyA9IGVsZW1lbnRDaGlsZHJlbihzbGlkZXNFbCwgYC4ke3BhcmFtcy5zbGlkZUNsYXNzfSwgc3dpcGVyLXNsaWRlYCk7XG4gIH1cbiAgZW5hYmxlKCkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgaWYgKHN3aXBlci5lbmFibGVkKSByZXR1cm47XG4gICAgc3dpcGVyLmVuYWJsZWQgPSB0cnVlO1xuICAgIGlmIChzd2lwZXIucGFyYW1zLmdyYWJDdXJzb3IpIHtcbiAgICAgIHN3aXBlci5zZXRHcmFiQ3Vyc29yKCk7XG4gICAgfVxuICAgIHN3aXBlci5lbWl0KCdlbmFibGUnKTtcbiAgfVxuICBkaXNhYmxlKCkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgaWYgKCFzd2lwZXIuZW5hYmxlZCkgcmV0dXJuO1xuICAgIHN3aXBlci5lbmFibGVkID0gZmFsc2U7XG4gICAgaWYgKHN3aXBlci5wYXJhbXMuZ3JhYkN1cnNvcikge1xuICAgICAgc3dpcGVyLnVuc2V0R3JhYkN1cnNvcigpO1xuICAgIH1cbiAgICBzd2lwZXIuZW1pdCgnZGlzYWJsZScpO1xuICB9XG4gIHNldFByb2dyZXNzKHByb2dyZXNzLCBzcGVlZCkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgcHJvZ3Jlc3MgPSBNYXRoLm1pbihNYXRoLm1heChwcm9ncmVzcywgMCksIDEpO1xuICAgIGNvbnN0IG1pbiA9IHN3aXBlci5taW5UcmFuc2xhdGUoKTtcbiAgICBjb25zdCBtYXggPSBzd2lwZXIubWF4VHJhbnNsYXRlKCk7XG4gICAgY29uc3QgY3VycmVudCA9IChtYXggLSBtaW4pICogcHJvZ3Jlc3MgKyBtaW47XG4gICAgc3dpcGVyLnRyYW5zbGF0ZVRvKGN1cnJlbnQsIHR5cGVvZiBzcGVlZCA9PT0gJ3VuZGVmaW5lZCcgPyAwIDogc3BlZWQpO1xuICAgIHN3aXBlci51cGRhdGVBY3RpdmVJbmRleCgpO1xuICAgIHN3aXBlci51cGRhdGVTbGlkZXNDbGFzc2VzKCk7XG4gIH1cbiAgZW1pdENvbnRhaW5lckNsYXNzZXMoKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBpZiAoIXN3aXBlci5wYXJhbXMuX2VtaXRDbGFzc2VzIHx8ICFzd2lwZXIuZWwpIHJldHVybjtcbiAgICBjb25zdCBjbHMgPSBzd2lwZXIuZWwuY2xhc3NOYW1lLnNwbGl0KCcgJykuZmlsdGVyKGNsYXNzTmFtZSA9PiB7XG4gICAgICByZXR1cm4gY2xhc3NOYW1lLmluZGV4T2YoJ3N3aXBlcicpID09PSAwIHx8IGNsYXNzTmFtZS5pbmRleE9mKHN3aXBlci5wYXJhbXMuY29udGFpbmVyTW9kaWZpZXJDbGFzcykgPT09IDA7XG4gICAgfSk7XG4gICAgc3dpcGVyLmVtaXQoJ19jb250YWluZXJDbGFzc2VzJywgY2xzLmpvaW4oJyAnKSk7XG4gIH1cbiAgZ2V0U2xpZGVDbGFzc2VzKHNsaWRlRWwpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGlmIChzd2lwZXIuZGVzdHJveWVkKSByZXR1cm4gJyc7XG4gICAgcmV0dXJuIHNsaWRlRWwuY2xhc3NOYW1lLnNwbGl0KCcgJykuZmlsdGVyKGNsYXNzTmFtZSA9PiB7XG4gICAgICByZXR1cm4gY2xhc3NOYW1lLmluZGV4T2YoJ3N3aXBlci1zbGlkZScpID09PSAwIHx8IGNsYXNzTmFtZS5pbmRleE9mKHN3aXBlci5wYXJhbXMuc2xpZGVDbGFzcykgPT09IDA7XG4gICAgfSkuam9pbignICcpO1xuICB9XG4gIGVtaXRTbGlkZXNDbGFzc2VzKCkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgaWYgKCFzd2lwZXIucGFyYW1zLl9lbWl0Q2xhc3NlcyB8fCAhc3dpcGVyLmVsKSByZXR1cm47XG4gICAgY29uc3QgdXBkYXRlcyA9IFtdO1xuICAgIHN3aXBlci5zbGlkZXMuZm9yRWFjaChzbGlkZUVsID0+IHtcbiAgICAgIGNvbnN0IGNsYXNzTmFtZXMgPSBzd2lwZXIuZ2V0U2xpZGVDbGFzc2VzKHNsaWRlRWwpO1xuICAgICAgdXBkYXRlcy5wdXNoKHtcbiAgICAgICAgc2xpZGVFbCxcbiAgICAgICAgY2xhc3NOYW1lc1xuICAgICAgfSk7XG4gICAgICBzd2lwZXIuZW1pdCgnX3NsaWRlQ2xhc3MnLCBzbGlkZUVsLCBjbGFzc05hbWVzKTtcbiAgICB9KTtcbiAgICBzd2lwZXIuZW1pdCgnX3NsaWRlQ2xhc3NlcycsIHVwZGF0ZXMpO1xuICB9XG4gIHNsaWRlc1BlclZpZXdEeW5hbWljKHZpZXcsIGV4YWN0KSB7XG4gICAgaWYgKHZpZXcgPT09IHZvaWQgMCkge1xuICAgICAgdmlldyA9ICdjdXJyZW50JztcbiAgICB9XG4gICAgaWYgKGV4YWN0ID09PSB2b2lkIDApIHtcbiAgICAgIGV4YWN0ID0gZmFsc2U7XG4gICAgfVxuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgY29uc3Qge1xuICAgICAgcGFyYW1zLFxuICAgICAgc2xpZGVzLFxuICAgICAgc2xpZGVzR3JpZCxcbiAgICAgIHNsaWRlc1NpemVzR3JpZCxcbiAgICAgIHNpemU6IHN3aXBlclNpemUsXG4gICAgICBhY3RpdmVJbmRleFxuICAgIH0gPSBzd2lwZXI7XG4gICAgbGV0IHNwdiA9IDE7XG4gICAgaWYgKHR5cGVvZiBwYXJhbXMuc2xpZGVzUGVyVmlldyA9PT0gJ251bWJlcicpIHJldHVybiBwYXJhbXMuc2xpZGVzUGVyVmlldztcbiAgICBpZiAocGFyYW1zLmNlbnRlcmVkU2xpZGVzKSB7XG4gICAgICBsZXQgc2xpZGVTaXplID0gc2xpZGVzW2FjdGl2ZUluZGV4XSA/IE1hdGguY2VpbChzbGlkZXNbYWN0aXZlSW5kZXhdLnN3aXBlclNsaWRlU2l6ZSkgOiAwO1xuICAgICAgbGV0IGJyZWFrTG9vcDtcbiAgICAgIGZvciAobGV0IGkgPSBhY3RpdmVJbmRleCArIDE7IGkgPCBzbGlkZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgaWYgKHNsaWRlc1tpXSAmJiAhYnJlYWtMb29wKSB7XG4gICAgICAgICAgc2xpZGVTaXplICs9IE1hdGguY2VpbChzbGlkZXNbaV0uc3dpcGVyU2xpZGVTaXplKTtcbiAgICAgICAgICBzcHYgKz0gMTtcbiAgICAgICAgICBpZiAoc2xpZGVTaXplID4gc3dpcGVyU2l6ZSkgYnJlYWtMb29wID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZm9yIChsZXQgaSA9IGFjdGl2ZUluZGV4IC0gMTsgaSA+PSAwOyBpIC09IDEpIHtcbiAgICAgICAgaWYgKHNsaWRlc1tpXSAmJiAhYnJlYWtMb29wKSB7XG4gICAgICAgICAgc2xpZGVTaXplICs9IHNsaWRlc1tpXS5zd2lwZXJTbGlkZVNpemU7XG4gICAgICAgICAgc3B2ICs9IDE7XG4gICAgICAgICAgaWYgKHNsaWRlU2l6ZSA+IHN3aXBlclNpemUpIGJyZWFrTG9vcCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgICBpZiAodmlldyA9PT0gJ2N1cnJlbnQnKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSBhY3RpdmVJbmRleCArIDE7IGkgPCBzbGlkZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICBjb25zdCBzbGlkZUluVmlldyA9IGV4YWN0ID8gc2xpZGVzR3JpZFtpXSArIHNsaWRlc1NpemVzR3JpZFtpXSAtIHNsaWRlc0dyaWRbYWN0aXZlSW5kZXhdIDwgc3dpcGVyU2l6ZSA6IHNsaWRlc0dyaWRbaV0gLSBzbGlkZXNHcmlkW2FjdGl2ZUluZGV4XSA8IHN3aXBlclNpemU7XG4gICAgICAgICAgaWYgKHNsaWRlSW5WaWV3KSB7XG4gICAgICAgICAgICBzcHYgKz0gMTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIHByZXZpb3VzXG4gICAgICAgIGZvciAobGV0IGkgPSBhY3RpdmVJbmRleCAtIDE7IGkgPj0gMDsgaSAtPSAxKSB7XG4gICAgICAgICAgY29uc3Qgc2xpZGVJblZpZXcgPSBzbGlkZXNHcmlkW2FjdGl2ZUluZGV4XSAtIHNsaWRlc0dyaWRbaV0gPCBzd2lwZXJTaXplO1xuICAgICAgICAgIGlmIChzbGlkZUluVmlldykge1xuICAgICAgICAgICAgc3B2ICs9IDE7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBzcHY7XG4gIH1cbiAgdXBkYXRlKCkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgaWYgKCFzd2lwZXIgfHwgc3dpcGVyLmRlc3Ryb3llZCkgcmV0dXJuO1xuICAgIGNvbnN0IHtcbiAgICAgIHNuYXBHcmlkLFxuICAgICAgcGFyYW1zXG4gICAgfSA9IHN3aXBlcjtcbiAgICAvLyBCcmVha3BvaW50c1xuICAgIGlmIChwYXJhbXMuYnJlYWtwb2ludHMpIHtcbiAgICAgIHN3aXBlci5zZXRCcmVha3BvaW50KCk7XG4gICAgfVxuICAgIFsuLi5zd2lwZXIuZWwucXVlcnlTZWxlY3RvckFsbCgnW2xvYWRpbmc9XCJsYXp5XCJdJyldLmZvckVhY2goaW1hZ2VFbCA9PiB7XG4gICAgICBpZiAoaW1hZ2VFbC5jb21wbGV0ZSkge1xuICAgICAgICBwcm9jZXNzTGF6eVByZWxvYWRlcihzd2lwZXIsIGltYWdlRWwpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHN3aXBlci51cGRhdGVTaXplKCk7XG4gICAgc3dpcGVyLnVwZGF0ZVNsaWRlcygpO1xuICAgIHN3aXBlci51cGRhdGVQcm9ncmVzcygpO1xuICAgIHN3aXBlci51cGRhdGVTbGlkZXNDbGFzc2VzKCk7XG4gICAgZnVuY3Rpb24gc2V0VHJhbnNsYXRlKCkge1xuICAgICAgY29uc3QgdHJhbnNsYXRlVmFsdWUgPSBzd2lwZXIucnRsVHJhbnNsYXRlID8gc3dpcGVyLnRyYW5zbGF0ZSAqIC0xIDogc3dpcGVyLnRyYW5zbGF0ZTtcbiAgICAgIGNvbnN0IG5ld1RyYW5zbGF0ZSA9IE1hdGgubWluKE1hdGgubWF4KHRyYW5zbGF0ZVZhbHVlLCBzd2lwZXIubWF4VHJhbnNsYXRlKCkpLCBzd2lwZXIubWluVHJhbnNsYXRlKCkpO1xuICAgICAgc3dpcGVyLnNldFRyYW5zbGF0ZShuZXdUcmFuc2xhdGUpO1xuICAgICAgc3dpcGVyLnVwZGF0ZUFjdGl2ZUluZGV4KCk7XG4gICAgICBzd2lwZXIudXBkYXRlU2xpZGVzQ2xhc3NlcygpO1xuICAgIH1cbiAgICBsZXQgdHJhbnNsYXRlZDtcbiAgICBpZiAocGFyYW1zLmZyZWVNb2RlICYmIHBhcmFtcy5mcmVlTW9kZS5lbmFibGVkICYmICFwYXJhbXMuY3NzTW9kZSkge1xuICAgICAgc2V0VHJhbnNsYXRlKCk7XG4gICAgICBpZiAocGFyYW1zLmF1dG9IZWlnaHQpIHtcbiAgICAgICAgc3dpcGVyLnVwZGF0ZUF1dG9IZWlnaHQoKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKChwYXJhbXMuc2xpZGVzUGVyVmlldyA9PT0gJ2F1dG8nIHx8IHBhcmFtcy5zbGlkZXNQZXJWaWV3ID4gMSkgJiYgc3dpcGVyLmlzRW5kICYmICFwYXJhbXMuY2VudGVyZWRTbGlkZXMpIHtcbiAgICAgICAgY29uc3Qgc2xpZGVzID0gc3dpcGVyLnZpcnR1YWwgJiYgcGFyYW1zLnZpcnR1YWwuZW5hYmxlZCA/IHN3aXBlci52aXJ0dWFsLnNsaWRlcyA6IHN3aXBlci5zbGlkZXM7XG4gICAgICAgIHRyYW5zbGF0ZWQgPSBzd2lwZXIuc2xpZGVUbyhzbGlkZXMubGVuZ3RoIC0gMSwgMCwgZmFsc2UsIHRydWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdHJhbnNsYXRlZCA9IHN3aXBlci5zbGlkZVRvKHN3aXBlci5hY3RpdmVJbmRleCwgMCwgZmFsc2UsIHRydWUpO1xuICAgICAgfVxuICAgICAgaWYgKCF0cmFuc2xhdGVkKSB7XG4gICAgICAgIHNldFRyYW5zbGF0ZSgpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAocGFyYW1zLndhdGNoT3ZlcmZsb3cgJiYgc25hcEdyaWQgIT09IHN3aXBlci5zbmFwR3JpZCkge1xuICAgICAgc3dpcGVyLmNoZWNrT3ZlcmZsb3coKTtcbiAgICB9XG4gICAgc3dpcGVyLmVtaXQoJ3VwZGF0ZScpO1xuICB9XG4gIGNoYW5nZURpcmVjdGlvbihuZXdEaXJlY3Rpb24sIG5lZWRVcGRhdGUpIHtcbiAgICBpZiAobmVlZFVwZGF0ZSA9PT0gdm9pZCAwKSB7XG4gICAgICBuZWVkVXBkYXRlID0gdHJ1ZTtcbiAgICB9XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBjb25zdCBjdXJyZW50RGlyZWN0aW9uID0gc3dpcGVyLnBhcmFtcy5kaXJlY3Rpb247XG4gICAgaWYgKCFuZXdEaXJlY3Rpb24pIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgICAgbmV3RGlyZWN0aW9uID0gY3VycmVudERpcmVjdGlvbiA9PT0gJ2hvcml6b250YWwnID8gJ3ZlcnRpY2FsJyA6ICdob3Jpem9udGFsJztcbiAgICB9XG4gICAgaWYgKG5ld0RpcmVjdGlvbiA9PT0gY3VycmVudERpcmVjdGlvbiB8fCBuZXdEaXJlY3Rpb24gIT09ICdob3Jpem9udGFsJyAmJiBuZXdEaXJlY3Rpb24gIT09ICd2ZXJ0aWNhbCcpIHtcbiAgICAgIHJldHVybiBzd2lwZXI7XG4gICAgfVxuICAgIHN3aXBlci5lbC5jbGFzc0xpc3QucmVtb3ZlKGAke3N3aXBlci5wYXJhbXMuY29udGFpbmVyTW9kaWZpZXJDbGFzc30ke2N1cnJlbnREaXJlY3Rpb259YCk7XG4gICAgc3dpcGVyLmVsLmNsYXNzTGlzdC5hZGQoYCR7c3dpcGVyLnBhcmFtcy5jb250YWluZXJNb2RpZmllckNsYXNzfSR7bmV3RGlyZWN0aW9ufWApO1xuICAgIHN3aXBlci5lbWl0Q29udGFpbmVyQ2xhc3NlcygpO1xuICAgIHN3aXBlci5wYXJhbXMuZGlyZWN0aW9uID0gbmV3RGlyZWN0aW9uO1xuICAgIHN3aXBlci5zbGlkZXMuZm9yRWFjaChzbGlkZUVsID0+IHtcbiAgICAgIGlmIChuZXdEaXJlY3Rpb24gPT09ICd2ZXJ0aWNhbCcpIHtcbiAgICAgICAgc2xpZGVFbC5zdHlsZS53aWR0aCA9ICcnO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2xpZGVFbC5zdHlsZS5oZWlnaHQgPSAnJztcbiAgICAgIH1cbiAgICB9KTtcbiAgICBzd2lwZXIuZW1pdCgnY2hhbmdlRGlyZWN0aW9uJyk7XG4gICAgaWYgKG5lZWRVcGRhdGUpIHN3aXBlci51cGRhdGUoKTtcbiAgICByZXR1cm4gc3dpcGVyO1xuICB9XG4gIGNoYW5nZUxhbmd1YWdlRGlyZWN0aW9uKGRpcmVjdGlvbikge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgaWYgKHN3aXBlci5ydGwgJiYgZGlyZWN0aW9uID09PSAncnRsJyB8fCAhc3dpcGVyLnJ0bCAmJiBkaXJlY3Rpb24gPT09ICdsdHInKSByZXR1cm47XG4gICAgc3dpcGVyLnJ0bCA9IGRpcmVjdGlvbiA9PT0gJ3J0bCc7XG4gICAgc3dpcGVyLnJ0bFRyYW5zbGF0ZSA9IHN3aXBlci5wYXJhbXMuZGlyZWN0aW9uID09PSAnaG9yaXpvbnRhbCcgJiYgc3dpcGVyLnJ0bDtcbiAgICBpZiAoc3dpcGVyLnJ0bCkge1xuICAgICAgc3dpcGVyLmVsLmNsYXNzTGlzdC5hZGQoYCR7c3dpcGVyLnBhcmFtcy5jb250YWluZXJNb2RpZmllckNsYXNzfXJ0bGApO1xuICAgICAgc3dpcGVyLmVsLmRpciA9ICdydGwnO1xuICAgIH0gZWxzZSB7XG4gICAgICBzd2lwZXIuZWwuY2xhc3NMaXN0LnJlbW92ZShgJHtzd2lwZXIucGFyYW1zLmNvbnRhaW5lck1vZGlmaWVyQ2xhc3N9cnRsYCk7XG4gICAgICBzd2lwZXIuZWwuZGlyID0gJ2x0cic7XG4gICAgfVxuICAgIHN3aXBlci51cGRhdGUoKTtcbiAgfVxuICBtb3VudChlbGVtZW50KSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBpZiAoc3dpcGVyLm1vdW50ZWQpIHJldHVybiB0cnVlO1xuXG4gICAgLy8gRmluZCBlbFxuICAgIGxldCBlbCA9IGVsZW1lbnQgfHwgc3dpcGVyLnBhcmFtcy5lbDtcbiAgICBpZiAodHlwZW9mIGVsID09PSAnc3RyaW5nJykge1xuICAgICAgZWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGVsKTtcbiAgICB9XG4gICAgaWYgKCFlbCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBlbC5zd2lwZXIgPSBzd2lwZXI7XG4gICAgaWYgKGVsLnBhcmVudE5vZGUgJiYgZWwucGFyZW50Tm9kZS5ob3N0ICYmIGVsLnBhcmVudE5vZGUuaG9zdC5ub2RlTmFtZSA9PT0gc3dpcGVyLnBhcmFtcy5zd2lwZXJFbGVtZW50Tm9kZU5hbWUudG9VcHBlckNhc2UoKSkge1xuICAgICAgc3dpcGVyLmlzRWxlbWVudCA9IHRydWU7XG4gICAgfVxuICAgIGNvbnN0IGdldFdyYXBwZXJTZWxlY3RvciA9ICgpID0+IHtcbiAgICAgIHJldHVybiBgLiR7KHN3aXBlci5wYXJhbXMud3JhcHBlckNsYXNzIHx8ICcnKS50cmltKCkuc3BsaXQoJyAnKS5qb2luKCcuJyl9YDtcbiAgICB9O1xuICAgIGNvbnN0IGdldFdyYXBwZXIgPSAoKSA9PiB7XG4gICAgICBpZiAoZWwgJiYgZWwuc2hhZG93Um9vdCAmJiBlbC5zaGFkb3dSb290LnF1ZXJ5U2VsZWN0b3IpIHtcbiAgICAgICAgY29uc3QgcmVzID0gZWwuc2hhZG93Um9vdC5xdWVyeVNlbGVjdG9yKGdldFdyYXBwZXJTZWxlY3RvcigpKTtcbiAgICAgICAgLy8gQ2hpbGRyZW4gbmVlZHMgdG8gcmV0dXJuIHNsb3QgaXRlbXNcbiAgICAgICAgcmV0dXJuIHJlcztcbiAgICAgIH1cbiAgICAgIHJldHVybiBlbGVtZW50Q2hpbGRyZW4oZWwsIGdldFdyYXBwZXJTZWxlY3RvcigpKVswXTtcbiAgICB9O1xuICAgIC8vIEZpbmQgV3JhcHBlclxuICAgIGxldCB3cmFwcGVyRWwgPSBnZXRXcmFwcGVyKCk7XG4gICAgaWYgKCF3cmFwcGVyRWwgJiYgc3dpcGVyLnBhcmFtcy5jcmVhdGVFbGVtZW50cykge1xuICAgICAgd3JhcHBlckVsID0gY3JlYXRlRWxlbWVudCgnZGl2Jywgc3dpcGVyLnBhcmFtcy53cmFwcGVyQ2xhc3MpO1xuICAgICAgZWwuYXBwZW5kKHdyYXBwZXJFbCk7XG4gICAgICBlbGVtZW50Q2hpbGRyZW4oZWwsIGAuJHtzd2lwZXIucGFyYW1zLnNsaWRlQ2xhc3N9YCkuZm9yRWFjaChzbGlkZUVsID0+IHtcbiAgICAgICAgd3JhcHBlckVsLmFwcGVuZChzbGlkZUVsKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICBPYmplY3QuYXNzaWduKHN3aXBlciwge1xuICAgICAgZWwsXG4gICAgICB3cmFwcGVyRWwsXG4gICAgICBzbGlkZXNFbDogc3dpcGVyLmlzRWxlbWVudCAmJiAhZWwucGFyZW50Tm9kZS5ob3N0LnNsaWRlU2xvdHMgPyBlbC5wYXJlbnROb2RlLmhvc3QgOiB3cmFwcGVyRWwsXG4gICAgICBob3N0RWw6IHN3aXBlci5pc0VsZW1lbnQgPyBlbC5wYXJlbnROb2RlLmhvc3QgOiBlbCxcbiAgICAgIG1vdW50ZWQ6IHRydWUsXG4gICAgICAvLyBSVExcbiAgICAgIHJ0bDogZWwuZGlyLnRvTG93ZXJDYXNlKCkgPT09ICdydGwnIHx8IGVsZW1lbnRTdHlsZShlbCwgJ2RpcmVjdGlvbicpID09PSAncnRsJyxcbiAgICAgIHJ0bFRyYW5zbGF0ZTogc3dpcGVyLnBhcmFtcy5kaXJlY3Rpb24gPT09ICdob3Jpem9udGFsJyAmJiAoZWwuZGlyLnRvTG93ZXJDYXNlKCkgPT09ICdydGwnIHx8IGVsZW1lbnRTdHlsZShlbCwgJ2RpcmVjdGlvbicpID09PSAncnRsJyksXG4gICAgICB3cm9uZ1JUTDogZWxlbWVudFN0eWxlKHdyYXBwZXJFbCwgJ2Rpc3BsYXknKSA9PT0gJy13ZWJraXQtYm94J1xuICAgIH0pO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIGluaXQoZWwpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGlmIChzd2lwZXIuaW5pdGlhbGl6ZWQpIHJldHVybiBzd2lwZXI7XG4gICAgY29uc3QgbW91bnRlZCA9IHN3aXBlci5tb3VudChlbCk7XG4gICAgaWYgKG1vdW50ZWQgPT09IGZhbHNlKSByZXR1cm4gc3dpcGVyO1xuICAgIHN3aXBlci5lbWl0KCdiZWZvcmVJbml0Jyk7XG5cbiAgICAvLyBTZXQgYnJlYWtwb2ludFxuICAgIGlmIChzd2lwZXIucGFyYW1zLmJyZWFrcG9pbnRzKSB7XG4gICAgICBzd2lwZXIuc2V0QnJlYWtwb2ludCgpO1xuICAgIH1cblxuICAgIC8vIEFkZCBDbGFzc2VzXG4gICAgc3dpcGVyLmFkZENsYXNzZXMoKTtcblxuICAgIC8vIFVwZGF0ZSBzaXplXG4gICAgc3dpcGVyLnVwZGF0ZVNpemUoKTtcblxuICAgIC8vIFVwZGF0ZSBzbGlkZXNcbiAgICBzd2lwZXIudXBkYXRlU2xpZGVzKCk7XG4gICAgaWYgKHN3aXBlci5wYXJhbXMud2F0Y2hPdmVyZmxvdykge1xuICAgICAgc3dpcGVyLmNoZWNrT3ZlcmZsb3coKTtcbiAgICB9XG5cbiAgICAvLyBTZXQgR3JhYiBDdXJzb3JcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5ncmFiQ3Vyc29yICYmIHN3aXBlci5lbmFibGVkKSB7XG4gICAgICBzd2lwZXIuc2V0R3JhYkN1cnNvcigpO1xuICAgIH1cblxuICAgIC8vIFNsaWRlIFRvIEluaXRpYWwgU2xpZGVcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5sb29wICYmIHN3aXBlci52aXJ0dWFsICYmIHN3aXBlci5wYXJhbXMudmlydHVhbC5lbmFibGVkKSB7XG4gICAgICBzd2lwZXIuc2xpZGVUbyhzd2lwZXIucGFyYW1zLmluaXRpYWxTbGlkZSArIHN3aXBlci52aXJ0dWFsLnNsaWRlc0JlZm9yZSwgMCwgc3dpcGVyLnBhcmFtcy5ydW5DYWxsYmFja3NPbkluaXQsIGZhbHNlLCB0cnVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3dpcGVyLnNsaWRlVG8oc3dpcGVyLnBhcmFtcy5pbml0aWFsU2xpZGUsIDAsIHN3aXBlci5wYXJhbXMucnVuQ2FsbGJhY2tzT25Jbml0LCBmYWxzZSwgdHJ1ZSk7XG4gICAgfVxuXG4gICAgLy8gQ3JlYXRlIGxvb3BcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5sb29wKSB7XG4gICAgICBzd2lwZXIubG9vcENyZWF0ZSgpO1xuICAgIH1cblxuICAgIC8vIEF0dGFjaCBldmVudHNcbiAgICBzd2lwZXIuYXR0YWNoRXZlbnRzKCk7XG4gICAgY29uc3QgbGF6eUVsZW1lbnRzID0gWy4uLnN3aXBlci5lbC5xdWVyeVNlbGVjdG9yQWxsKCdbbG9hZGluZz1cImxhenlcIl0nKV07XG4gICAgaWYgKHN3aXBlci5pc0VsZW1lbnQpIHtcbiAgICAgIGxhenlFbGVtZW50cy5wdXNoKC4uLnN3aXBlci5ob3N0RWwucXVlcnlTZWxlY3RvckFsbCgnW2xvYWRpbmc9XCJsYXp5XCJdJykpO1xuICAgIH1cbiAgICBsYXp5RWxlbWVudHMuZm9yRWFjaChpbWFnZUVsID0+IHtcbiAgICAgIGlmIChpbWFnZUVsLmNvbXBsZXRlKSB7XG4gICAgICAgIHByb2Nlc3NMYXp5UHJlbG9hZGVyKHN3aXBlciwgaW1hZ2VFbCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpbWFnZUVsLmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWQnLCBlID0+IHtcbiAgICAgICAgICBwcm9jZXNzTGF6eVByZWxvYWRlcihzd2lwZXIsIGUudGFyZ2V0KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcHJlbG9hZChzd2lwZXIpO1xuXG4gICAgLy8gSW5pdCBGbGFnXG4gICAgc3dpcGVyLmluaXRpYWxpemVkID0gdHJ1ZTtcbiAgICBwcmVsb2FkKHN3aXBlcik7XG5cbiAgICAvLyBFbWl0XG4gICAgc3dpcGVyLmVtaXQoJ2luaXQnKTtcbiAgICBzd2lwZXIuZW1pdCgnYWZ0ZXJJbml0Jyk7XG4gICAgcmV0dXJuIHN3aXBlcjtcbiAgfVxuICBkZXN0cm95KGRlbGV0ZUluc3RhbmNlLCBjbGVhblN0eWxlcykge1xuICAgIGlmIChkZWxldGVJbnN0YW5jZSA9PT0gdm9pZCAwKSB7XG4gICAgICBkZWxldGVJbnN0YW5jZSA9IHRydWU7XG4gICAgfVxuICAgIGlmIChjbGVhblN0eWxlcyA9PT0gdm9pZCAwKSB7XG4gICAgICBjbGVhblN0eWxlcyA9IHRydWU7XG4gICAgfVxuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgY29uc3Qge1xuICAgICAgcGFyYW1zLFxuICAgICAgZWwsXG4gICAgICB3cmFwcGVyRWwsXG4gICAgICBzbGlkZXNcbiAgICB9ID0gc3dpcGVyO1xuICAgIGlmICh0eXBlb2Ygc3dpcGVyLnBhcmFtcyA9PT0gJ3VuZGVmaW5lZCcgfHwgc3dpcGVyLmRlc3Ryb3llZCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHN3aXBlci5lbWl0KCdiZWZvcmVEZXN0cm95Jyk7XG5cbiAgICAvLyBJbml0IEZsYWdcbiAgICBzd2lwZXIuaW5pdGlhbGl6ZWQgPSBmYWxzZTtcblxuICAgIC8vIERldGFjaCBldmVudHNcbiAgICBzd2lwZXIuZGV0YWNoRXZlbnRzKCk7XG5cbiAgICAvLyBEZXN0cm95IGxvb3BcbiAgICBpZiAocGFyYW1zLmxvb3ApIHtcbiAgICAgIHN3aXBlci5sb29wRGVzdHJveSgpO1xuICAgIH1cblxuICAgIC8vIENsZWFudXAgc3R5bGVzXG4gICAgaWYgKGNsZWFuU3R5bGVzKSB7XG4gICAgICBzd2lwZXIucmVtb3ZlQ2xhc3NlcygpO1xuICAgICAgaWYgKGVsICYmIHR5cGVvZiBlbCAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgZWwucmVtb3ZlQXR0cmlidXRlKCdzdHlsZScpO1xuICAgICAgfVxuICAgICAgaWYgKHdyYXBwZXJFbCkge1xuICAgICAgICB3cmFwcGVyRWwucmVtb3ZlQXR0cmlidXRlKCdzdHlsZScpO1xuICAgICAgfVxuICAgICAgaWYgKHNsaWRlcyAmJiBzbGlkZXMubGVuZ3RoKSB7XG4gICAgICAgIHNsaWRlcy5mb3JFYWNoKHNsaWRlRWwgPT4ge1xuICAgICAgICAgIHNsaWRlRWwuY2xhc3NMaXN0LnJlbW92ZShwYXJhbXMuc2xpZGVWaXNpYmxlQ2xhc3MsIHBhcmFtcy5zbGlkZUZ1bGx5VmlzaWJsZUNsYXNzLCBwYXJhbXMuc2xpZGVBY3RpdmVDbGFzcywgcGFyYW1zLnNsaWRlTmV4dENsYXNzLCBwYXJhbXMuc2xpZGVQcmV2Q2xhc3MpO1xuICAgICAgICAgIHNsaWRlRWwucmVtb3ZlQXR0cmlidXRlKCdzdHlsZScpO1xuICAgICAgICAgIHNsaWRlRWwucmVtb3ZlQXR0cmlidXRlKCdkYXRhLXN3aXBlci1zbGlkZS1pbmRleCcpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gICAgc3dpcGVyLmVtaXQoJ2Rlc3Ryb3knKTtcblxuICAgIC8vIERldGFjaCBlbWl0dGVyIGV2ZW50c1xuICAgIE9iamVjdC5rZXlzKHN3aXBlci5ldmVudHNMaXN0ZW5lcnMpLmZvckVhY2goZXZlbnROYW1lID0+IHtcbiAgICAgIHN3aXBlci5vZmYoZXZlbnROYW1lKTtcbiAgICB9KTtcbiAgICBpZiAoZGVsZXRlSW5zdGFuY2UgIT09IGZhbHNlKSB7XG4gICAgICBpZiAoc3dpcGVyLmVsICYmIHR5cGVvZiBzd2lwZXIuZWwgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHN3aXBlci5lbC5zd2lwZXIgPSBudWxsO1xuICAgICAgfVxuICAgICAgZGVsZXRlUHJvcHMoc3dpcGVyKTtcbiAgICB9XG4gICAgc3dpcGVyLmRlc3Ryb3llZCA9IHRydWU7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgc3RhdGljIGV4dGVuZERlZmF1bHRzKG5ld0RlZmF1bHRzKSB7XG4gICAgZXh0ZW5kKGV4dGVuZGVkRGVmYXVsdHMsIG5ld0RlZmF1bHRzKTtcbiAgfVxuICBzdGF0aWMgZ2V0IGV4dGVuZGVkRGVmYXVsdHMoKSB7XG4gICAgcmV0dXJuIGV4dGVuZGVkRGVmYXVsdHM7XG4gIH1cbiAgc3RhdGljIGdldCBkZWZhdWx0cygpIHtcbiAgICByZXR1cm4gZGVmYXVsdHM7XG4gIH1cbiAgc3RhdGljIGluc3RhbGxNb2R1bGUobW9kKSB7XG4gICAgaWYgKCFTd2lwZXIucHJvdG90eXBlLl9fbW9kdWxlc19fKSBTd2lwZXIucHJvdG90eXBlLl9fbW9kdWxlc19fID0gW107XG4gICAgY29uc3QgbW9kdWxlcyA9IFN3aXBlci5wcm90b3R5cGUuX19tb2R1bGVzX187XG4gICAgaWYgKHR5cGVvZiBtb2QgPT09ICdmdW5jdGlvbicgJiYgbW9kdWxlcy5pbmRleE9mKG1vZCkgPCAwKSB7XG4gICAgICBtb2R1bGVzLnB1c2gobW9kKTtcbiAgICB9XG4gIH1cbiAgc3RhdGljIHVzZShtb2R1bGUpIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShtb2R1bGUpKSB7XG4gICAgICBtb2R1bGUuZm9yRWFjaChtID0+IFN3aXBlci5pbnN0YWxsTW9kdWxlKG0pKTtcbiAgICAgIHJldHVybiBTd2lwZXI7XG4gICAgfVxuICAgIFN3aXBlci5pbnN0YWxsTW9kdWxlKG1vZHVsZSk7XG4gICAgcmV0dXJuIFN3aXBlcjtcbiAgfVxufVxuT2JqZWN0LmtleXMocHJvdG90eXBlcykuZm9yRWFjaChwcm90b3R5cGVHcm91cCA9PiB7XG4gIE9iamVjdC5rZXlzKHByb3RvdHlwZXNbcHJvdG90eXBlR3JvdXBdKS5mb3JFYWNoKHByb3RvTWV0aG9kID0+IHtcbiAgICBTd2lwZXIucHJvdG90eXBlW3Byb3RvTWV0aG9kXSA9IHByb3RvdHlwZXNbcHJvdG90eXBlR3JvdXBdW3Byb3RvTWV0aG9kXTtcbiAgfSk7XG59KTtcblN3aXBlci51c2UoW1Jlc2l6ZSwgT2JzZXJ2ZXJdKTtcblxuZXhwb3J0IHsgU3dpcGVyIGFzIFMsIGRlZmF1bHRzIGFzIGQgfTtcbiIsImltcG9ydCB7IGcgYXMgZ2V0RG9jdW1lbnQgfSBmcm9tICcuLi9zaGFyZWQvc3NyLXdpbmRvdy5lc20ubWpzJztcbmltcG9ydCB7IHMgYXMgc2V0Q1NTUHJvcGVydHksIGUgYXMgZWxlbWVudENoaWxkcmVuLCBjIGFzIGNyZWF0ZUVsZW1lbnQgfSBmcm9tICcuLi9zaGFyZWQvdXRpbHMubWpzJztcblxuZnVuY3Rpb24gVmlydHVhbChfcmVmKSB7XG4gIGxldCB7XG4gICAgc3dpcGVyLFxuICAgIGV4dGVuZFBhcmFtcyxcbiAgICBvbixcbiAgICBlbWl0XG4gIH0gPSBfcmVmO1xuICBleHRlbmRQYXJhbXMoe1xuICAgIHZpcnR1YWw6IHtcbiAgICAgIGVuYWJsZWQ6IGZhbHNlLFxuICAgICAgc2xpZGVzOiBbXSxcbiAgICAgIGNhY2hlOiB0cnVlLFxuICAgICAgcmVuZGVyU2xpZGU6IG51bGwsXG4gICAgICByZW5kZXJFeHRlcm5hbDogbnVsbCxcbiAgICAgIHJlbmRlckV4dGVybmFsVXBkYXRlOiB0cnVlLFxuICAgICAgYWRkU2xpZGVzQmVmb3JlOiAwLFxuICAgICAgYWRkU2xpZGVzQWZ0ZXI6IDBcbiAgICB9XG4gIH0pO1xuICBsZXQgY3NzTW9kZVRpbWVvdXQ7XG4gIGNvbnN0IGRvY3VtZW50ID0gZ2V0RG9jdW1lbnQoKTtcbiAgc3dpcGVyLnZpcnR1YWwgPSB7XG4gICAgY2FjaGU6IHt9LFxuICAgIGZyb206IHVuZGVmaW5lZCxcbiAgICB0bzogdW5kZWZpbmVkLFxuICAgIHNsaWRlczogW10sXG4gICAgb2Zmc2V0OiAwLFxuICAgIHNsaWRlc0dyaWQ6IFtdXG4gIH07XG4gIGNvbnN0IHRlbXBET00gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgZnVuY3Rpb24gcmVuZGVyU2xpZGUoc2xpZGUsIGluZGV4KSB7XG4gICAgY29uc3QgcGFyYW1zID0gc3dpcGVyLnBhcmFtcy52aXJ0dWFsO1xuICAgIGlmIChwYXJhbXMuY2FjaGUgJiYgc3dpcGVyLnZpcnR1YWwuY2FjaGVbaW5kZXhdKSB7XG4gICAgICByZXR1cm4gc3dpcGVyLnZpcnR1YWwuY2FjaGVbaW5kZXhdO1xuICAgIH1cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICBsZXQgc2xpZGVFbDtcbiAgICBpZiAocGFyYW1zLnJlbmRlclNsaWRlKSB7XG4gICAgICBzbGlkZUVsID0gcGFyYW1zLnJlbmRlclNsaWRlLmNhbGwoc3dpcGVyLCBzbGlkZSwgaW5kZXgpO1xuICAgICAgaWYgKHR5cGVvZiBzbGlkZUVsID09PSAnc3RyaW5nJykge1xuICAgICAgICB0ZW1wRE9NLmlubmVySFRNTCA9IHNsaWRlRWw7XG4gICAgICAgIHNsaWRlRWwgPSB0ZW1wRE9NLmNoaWxkcmVuWzBdO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoc3dpcGVyLmlzRWxlbWVudCkge1xuICAgICAgc2xpZGVFbCA9IGNyZWF0ZUVsZW1lbnQoJ3N3aXBlci1zbGlkZScpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzbGlkZUVsID0gY3JlYXRlRWxlbWVudCgnZGl2Jywgc3dpcGVyLnBhcmFtcy5zbGlkZUNsYXNzKTtcbiAgICB9XG4gICAgc2xpZGVFbC5zZXRBdHRyaWJ1dGUoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4JywgaW5kZXgpO1xuICAgIGlmICghcGFyYW1zLnJlbmRlclNsaWRlKSB7XG4gICAgICBzbGlkZUVsLmlubmVySFRNTCA9IHNsaWRlO1xuICAgIH1cbiAgICBpZiAocGFyYW1zLmNhY2hlKSB7XG4gICAgICBzd2lwZXIudmlydHVhbC5jYWNoZVtpbmRleF0gPSBzbGlkZUVsO1xuICAgIH1cbiAgICByZXR1cm4gc2xpZGVFbDtcbiAgfVxuICBmdW5jdGlvbiB1cGRhdGUoZm9yY2UsIGJlZm9yZUluaXQpIHtcbiAgICBjb25zdCB7XG4gICAgICBzbGlkZXNQZXJWaWV3LFxuICAgICAgc2xpZGVzUGVyR3JvdXAsXG4gICAgICBjZW50ZXJlZFNsaWRlcyxcbiAgICAgIGxvb3A6IGlzTG9vcCxcbiAgICAgIGluaXRpYWxTbGlkZVxuICAgIH0gPSBzd2lwZXIucGFyYW1zO1xuICAgIGlmIChiZWZvcmVJbml0ICYmICFpc0xvb3AgJiYgaW5pdGlhbFNsaWRlID4gMCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCB7XG4gICAgICBhZGRTbGlkZXNCZWZvcmUsXG4gICAgICBhZGRTbGlkZXNBZnRlclxuICAgIH0gPSBzd2lwZXIucGFyYW1zLnZpcnR1YWw7XG4gICAgY29uc3Qge1xuICAgICAgZnJvbTogcHJldmlvdXNGcm9tLFxuICAgICAgdG86IHByZXZpb3VzVG8sXG4gICAgICBzbGlkZXMsXG4gICAgICBzbGlkZXNHcmlkOiBwcmV2aW91c1NsaWRlc0dyaWQsXG4gICAgICBvZmZzZXQ6IHByZXZpb3VzT2Zmc2V0XG4gICAgfSA9IHN3aXBlci52aXJ0dWFsO1xuICAgIGlmICghc3dpcGVyLnBhcmFtcy5jc3NNb2RlKSB7XG4gICAgICBzd2lwZXIudXBkYXRlQWN0aXZlSW5kZXgoKTtcbiAgICB9XG4gICAgY29uc3QgYWN0aXZlSW5kZXggPSBzd2lwZXIuYWN0aXZlSW5kZXggfHwgMDtcbiAgICBsZXQgb2Zmc2V0UHJvcDtcbiAgICBpZiAoc3dpcGVyLnJ0bFRyYW5zbGF0ZSkgb2Zmc2V0UHJvcCA9ICdyaWdodCc7ZWxzZSBvZmZzZXRQcm9wID0gc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gJ2xlZnQnIDogJ3RvcCc7XG4gICAgbGV0IHNsaWRlc0FmdGVyO1xuICAgIGxldCBzbGlkZXNCZWZvcmU7XG4gICAgaWYgKGNlbnRlcmVkU2xpZGVzKSB7XG4gICAgICBzbGlkZXNBZnRlciA9IE1hdGguZmxvb3Ioc2xpZGVzUGVyVmlldyAvIDIpICsgc2xpZGVzUGVyR3JvdXAgKyBhZGRTbGlkZXNBZnRlcjtcbiAgICAgIHNsaWRlc0JlZm9yZSA9IE1hdGguZmxvb3Ioc2xpZGVzUGVyVmlldyAvIDIpICsgc2xpZGVzUGVyR3JvdXAgKyBhZGRTbGlkZXNCZWZvcmU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNsaWRlc0FmdGVyID0gc2xpZGVzUGVyVmlldyArIChzbGlkZXNQZXJHcm91cCAtIDEpICsgYWRkU2xpZGVzQWZ0ZXI7XG4gICAgICBzbGlkZXNCZWZvcmUgPSAoaXNMb29wID8gc2xpZGVzUGVyVmlldyA6IHNsaWRlc1Blckdyb3VwKSArIGFkZFNsaWRlc0JlZm9yZTtcbiAgICB9XG4gICAgbGV0IGZyb20gPSBhY3RpdmVJbmRleCAtIHNsaWRlc0JlZm9yZTtcbiAgICBsZXQgdG8gPSBhY3RpdmVJbmRleCArIHNsaWRlc0FmdGVyO1xuICAgIGlmICghaXNMb29wKSB7XG4gICAgICBmcm9tID0gTWF0aC5tYXgoZnJvbSwgMCk7XG4gICAgICB0byA9IE1hdGgubWluKHRvLCBzbGlkZXMubGVuZ3RoIC0gMSk7XG4gICAgfVxuICAgIGxldCBvZmZzZXQgPSAoc3dpcGVyLnNsaWRlc0dyaWRbZnJvbV0gfHwgMCkgLSAoc3dpcGVyLnNsaWRlc0dyaWRbMF0gfHwgMCk7XG4gICAgaWYgKGlzTG9vcCAmJiBhY3RpdmVJbmRleCA+PSBzbGlkZXNCZWZvcmUpIHtcbiAgICAgIGZyb20gLT0gc2xpZGVzQmVmb3JlO1xuICAgICAgaWYgKCFjZW50ZXJlZFNsaWRlcykgb2Zmc2V0ICs9IHN3aXBlci5zbGlkZXNHcmlkWzBdO1xuICAgIH0gZWxzZSBpZiAoaXNMb29wICYmIGFjdGl2ZUluZGV4IDwgc2xpZGVzQmVmb3JlKSB7XG4gICAgICBmcm9tID0gLXNsaWRlc0JlZm9yZTtcbiAgICAgIGlmIChjZW50ZXJlZFNsaWRlcykgb2Zmc2V0ICs9IHN3aXBlci5zbGlkZXNHcmlkWzBdO1xuICAgIH1cbiAgICBPYmplY3QuYXNzaWduKHN3aXBlci52aXJ0dWFsLCB7XG4gICAgICBmcm9tLFxuICAgICAgdG8sXG4gICAgICBvZmZzZXQsXG4gICAgICBzbGlkZXNHcmlkOiBzd2lwZXIuc2xpZGVzR3JpZCxcbiAgICAgIHNsaWRlc0JlZm9yZSxcbiAgICAgIHNsaWRlc0FmdGVyXG4gICAgfSk7XG4gICAgZnVuY3Rpb24gb25SZW5kZXJlZCgpIHtcbiAgICAgIHN3aXBlci51cGRhdGVTbGlkZXMoKTtcbiAgICAgIHN3aXBlci51cGRhdGVQcm9ncmVzcygpO1xuICAgICAgc3dpcGVyLnVwZGF0ZVNsaWRlc0NsYXNzZXMoKTtcbiAgICAgIGVtaXQoJ3ZpcnR1YWxVcGRhdGUnKTtcbiAgICB9XG4gICAgaWYgKHByZXZpb3VzRnJvbSA9PT0gZnJvbSAmJiBwcmV2aW91c1RvID09PSB0byAmJiAhZm9yY2UpIHtcbiAgICAgIGlmIChzd2lwZXIuc2xpZGVzR3JpZCAhPT0gcHJldmlvdXNTbGlkZXNHcmlkICYmIG9mZnNldCAhPT0gcHJldmlvdXNPZmZzZXQpIHtcbiAgICAgICAgc3dpcGVyLnNsaWRlcy5mb3JFYWNoKHNsaWRlRWwgPT4ge1xuICAgICAgICAgIHNsaWRlRWwuc3R5bGVbb2Zmc2V0UHJvcF0gPSBgJHtvZmZzZXQgLSBNYXRoLmFicyhzd2lwZXIuY3NzT3ZlcmZsb3dBZGp1c3RtZW50KCkpfXB4YDtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBzd2lwZXIudXBkYXRlUHJvZ3Jlc3MoKTtcbiAgICAgIGVtaXQoJ3ZpcnR1YWxVcGRhdGUnKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKHN3aXBlci5wYXJhbXMudmlydHVhbC5yZW5kZXJFeHRlcm5hbCkge1xuICAgICAgc3dpcGVyLnBhcmFtcy52aXJ0dWFsLnJlbmRlckV4dGVybmFsLmNhbGwoc3dpcGVyLCB7XG4gICAgICAgIG9mZnNldCxcbiAgICAgICAgZnJvbSxcbiAgICAgICAgdG8sXG4gICAgICAgIHNsaWRlczogZnVuY3Rpb24gZ2V0U2xpZGVzKCkge1xuICAgICAgICAgIGNvbnN0IHNsaWRlc1RvUmVuZGVyID0gW107XG4gICAgICAgICAgZm9yIChsZXQgaSA9IGZyb207IGkgPD0gdG87IGkgKz0gMSkge1xuICAgICAgICAgICAgc2xpZGVzVG9SZW5kZXIucHVzaChzbGlkZXNbaV0pO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gc2xpZGVzVG9SZW5kZXI7XG4gICAgICAgIH0oKVxuICAgICAgfSk7XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy52aXJ0dWFsLnJlbmRlckV4dGVybmFsVXBkYXRlKSB7XG4gICAgICAgIG9uUmVuZGVyZWQoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGVtaXQoJ3ZpcnR1YWxVcGRhdGUnKTtcbiAgICAgIH1cbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgcHJlcGVuZEluZGV4ZXMgPSBbXTtcbiAgICBjb25zdCBhcHBlbmRJbmRleGVzID0gW107XG4gICAgY29uc3QgZ2V0U2xpZGVJbmRleCA9IGluZGV4ID0+IHtcbiAgICAgIGxldCBzbGlkZUluZGV4ID0gaW5kZXg7XG4gICAgICBpZiAoaW5kZXggPCAwKSB7XG4gICAgICAgIHNsaWRlSW5kZXggPSBzbGlkZXMubGVuZ3RoICsgaW5kZXg7XG4gICAgICB9IGVsc2UgaWYgKHNsaWRlSW5kZXggPj0gc2xpZGVzLmxlbmd0aCkge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICAgICAgc2xpZGVJbmRleCA9IHNsaWRlSW5kZXggLSBzbGlkZXMubGVuZ3RoO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHNsaWRlSW5kZXg7XG4gICAgfTtcbiAgICBpZiAoZm9yY2UpIHtcbiAgICAgIHN3aXBlci5zbGlkZXMuZmlsdGVyKGVsID0+IGVsLm1hdGNoZXMoYC4ke3N3aXBlci5wYXJhbXMuc2xpZGVDbGFzc30sIHN3aXBlci1zbGlkZWApKS5mb3JFYWNoKHNsaWRlRWwgPT4ge1xuICAgICAgICBzbGlkZUVsLnJlbW92ZSgpO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGZvciAobGV0IGkgPSBwcmV2aW91c0Zyb207IGkgPD0gcHJldmlvdXNUbzsgaSArPSAxKSB7XG4gICAgICAgIGlmIChpIDwgZnJvbSB8fCBpID4gdG8pIHtcbiAgICAgICAgICBjb25zdCBzbGlkZUluZGV4ID0gZ2V0U2xpZGVJbmRleChpKTtcbiAgICAgICAgICBzd2lwZXIuc2xpZGVzLmZpbHRlcihlbCA9PiBlbC5tYXRjaGVzKGAuJHtzd2lwZXIucGFyYW1zLnNsaWRlQ2xhc3N9W2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4PVwiJHtzbGlkZUluZGV4fVwiXSwgc3dpcGVyLXNsaWRlW2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4PVwiJHtzbGlkZUluZGV4fVwiXWApKS5mb3JFYWNoKHNsaWRlRWwgPT4ge1xuICAgICAgICAgICAgc2xpZGVFbC5yZW1vdmUoKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBjb25zdCBsb29wRnJvbSA9IGlzTG9vcCA/IC1zbGlkZXMubGVuZ3RoIDogMDtcbiAgICBjb25zdCBsb29wVG8gPSBpc0xvb3AgPyBzbGlkZXMubGVuZ3RoICogMiA6IHNsaWRlcy5sZW5ndGg7XG4gICAgZm9yIChsZXQgaSA9IGxvb3BGcm9tOyBpIDwgbG9vcFRvOyBpICs9IDEpIHtcbiAgICAgIGlmIChpID49IGZyb20gJiYgaSA8PSB0bykge1xuICAgICAgICBjb25zdCBzbGlkZUluZGV4ID0gZ2V0U2xpZGVJbmRleChpKTtcbiAgICAgICAgaWYgKHR5cGVvZiBwcmV2aW91c1RvID09PSAndW5kZWZpbmVkJyB8fCBmb3JjZSkge1xuICAgICAgICAgIGFwcGVuZEluZGV4ZXMucHVzaChzbGlkZUluZGV4KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAoaSA+IHByZXZpb3VzVG8pIGFwcGVuZEluZGV4ZXMucHVzaChzbGlkZUluZGV4KTtcbiAgICAgICAgICBpZiAoaSA8IHByZXZpb3VzRnJvbSkgcHJlcGVuZEluZGV4ZXMucHVzaChzbGlkZUluZGV4KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBhcHBlbmRJbmRleGVzLmZvckVhY2goaW5kZXggPT4ge1xuICAgICAgc3dpcGVyLnNsaWRlc0VsLmFwcGVuZChyZW5kZXJTbGlkZShzbGlkZXNbaW5kZXhdLCBpbmRleCkpO1xuICAgIH0pO1xuICAgIGlmIChpc0xvb3ApIHtcbiAgICAgIGZvciAobGV0IGkgPSBwcmVwZW5kSW5kZXhlcy5sZW5ndGggLSAxOyBpID49IDA7IGkgLT0gMSkge1xuICAgICAgICBjb25zdCBpbmRleCA9IHByZXBlbmRJbmRleGVzW2ldO1xuICAgICAgICBzd2lwZXIuc2xpZGVzRWwucHJlcGVuZChyZW5kZXJTbGlkZShzbGlkZXNbaW5kZXhdLCBpbmRleCkpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBwcmVwZW5kSW5kZXhlcy5zb3J0KChhLCBiKSA9PiBiIC0gYSk7XG4gICAgICBwcmVwZW5kSW5kZXhlcy5mb3JFYWNoKGluZGV4ID0+IHtcbiAgICAgICAgc3dpcGVyLnNsaWRlc0VsLnByZXBlbmQocmVuZGVyU2xpZGUoc2xpZGVzW2luZGV4XSwgaW5kZXgpKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICBlbGVtZW50Q2hpbGRyZW4oc3dpcGVyLnNsaWRlc0VsLCAnLnN3aXBlci1zbGlkZSwgc3dpcGVyLXNsaWRlJykuZm9yRWFjaChzbGlkZUVsID0+IHtcbiAgICAgIHNsaWRlRWwuc3R5bGVbb2Zmc2V0UHJvcF0gPSBgJHtvZmZzZXQgLSBNYXRoLmFicyhzd2lwZXIuY3NzT3ZlcmZsb3dBZGp1c3RtZW50KCkpfXB4YDtcbiAgICB9KTtcbiAgICBvblJlbmRlcmVkKCk7XG4gIH1cbiAgZnVuY3Rpb24gYXBwZW5kU2xpZGUoc2xpZGVzKSB7XG4gICAgaWYgKHR5cGVvZiBzbGlkZXMgPT09ICdvYmplY3QnICYmICdsZW5ndGgnIGluIHNsaWRlcykge1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzbGlkZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgaWYgKHNsaWRlc1tpXSkgc3dpcGVyLnZpcnR1YWwuc2xpZGVzLnB1c2goc2xpZGVzW2ldKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgc3dpcGVyLnZpcnR1YWwuc2xpZGVzLnB1c2goc2xpZGVzKTtcbiAgICB9XG4gICAgdXBkYXRlKHRydWUpO1xuICB9XG4gIGZ1bmN0aW9uIHByZXBlbmRTbGlkZShzbGlkZXMpIHtcbiAgICBjb25zdCBhY3RpdmVJbmRleCA9IHN3aXBlci5hY3RpdmVJbmRleDtcbiAgICBsZXQgbmV3QWN0aXZlSW5kZXggPSBhY3RpdmVJbmRleCArIDE7XG4gICAgbGV0IG51bWJlck9mTmV3U2xpZGVzID0gMTtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShzbGlkZXMpKSB7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNsaWRlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBpZiAoc2xpZGVzW2ldKSBzd2lwZXIudmlydHVhbC5zbGlkZXMudW5zaGlmdChzbGlkZXNbaV0pO1xuICAgICAgfVxuICAgICAgbmV3QWN0aXZlSW5kZXggPSBhY3RpdmVJbmRleCArIHNsaWRlcy5sZW5ndGg7XG4gICAgICBudW1iZXJPZk5ld1NsaWRlcyA9IHNsaWRlcy5sZW5ndGg7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN3aXBlci52aXJ0dWFsLnNsaWRlcy51bnNoaWZ0KHNsaWRlcyk7XG4gICAgfVxuICAgIGlmIChzd2lwZXIucGFyYW1zLnZpcnR1YWwuY2FjaGUpIHtcbiAgICAgIGNvbnN0IGNhY2hlID0gc3dpcGVyLnZpcnR1YWwuY2FjaGU7XG4gICAgICBjb25zdCBuZXdDYWNoZSA9IHt9O1xuICAgICAgT2JqZWN0LmtleXMoY2FjaGUpLmZvckVhY2goY2FjaGVkSW5kZXggPT4ge1xuICAgICAgICBjb25zdCBjYWNoZWRFbCA9IGNhY2hlW2NhY2hlZEluZGV4XTtcbiAgICAgICAgY29uc3QgY2FjaGVkRWxJbmRleCA9IGNhY2hlZEVsLmdldEF0dHJpYnV0ZSgnZGF0YS1zd2lwZXItc2xpZGUtaW5kZXgnKTtcbiAgICAgICAgaWYgKGNhY2hlZEVsSW5kZXgpIHtcbiAgICAgICAgICBjYWNoZWRFbC5zZXRBdHRyaWJ1dGUoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4JywgcGFyc2VJbnQoY2FjaGVkRWxJbmRleCwgMTApICsgbnVtYmVyT2ZOZXdTbGlkZXMpO1xuICAgICAgICB9XG4gICAgICAgIG5ld0NhY2hlW3BhcnNlSW50KGNhY2hlZEluZGV4LCAxMCkgKyBudW1iZXJPZk5ld1NsaWRlc10gPSBjYWNoZWRFbDtcbiAgICAgIH0pO1xuICAgICAgc3dpcGVyLnZpcnR1YWwuY2FjaGUgPSBuZXdDYWNoZTtcbiAgICB9XG4gICAgdXBkYXRlKHRydWUpO1xuICAgIHN3aXBlci5zbGlkZVRvKG5ld0FjdGl2ZUluZGV4LCAwKTtcbiAgfVxuICBmdW5jdGlvbiByZW1vdmVTbGlkZShzbGlkZXNJbmRleGVzKSB7XG4gICAgaWYgKHR5cGVvZiBzbGlkZXNJbmRleGVzID09PSAndW5kZWZpbmVkJyB8fCBzbGlkZXNJbmRleGVzID09PSBudWxsKSByZXR1cm47XG4gICAgbGV0IGFjdGl2ZUluZGV4ID0gc3dpcGVyLmFjdGl2ZUluZGV4O1xuICAgIGlmIChBcnJheS5pc0FycmF5KHNsaWRlc0luZGV4ZXMpKSB7XG4gICAgICBmb3IgKGxldCBpID0gc2xpZGVzSW5kZXhlcy5sZW5ndGggLSAxOyBpID49IDA7IGkgLT0gMSkge1xuICAgICAgICBpZiAoc3dpcGVyLnBhcmFtcy52aXJ0dWFsLmNhY2hlKSB7XG4gICAgICAgICAgZGVsZXRlIHN3aXBlci52aXJ0dWFsLmNhY2hlW3NsaWRlc0luZGV4ZXNbaV1dO1xuICAgICAgICAgIC8vIHNoaWZ0IGNhY2hlIGluZGV4ZXNcbiAgICAgICAgICBPYmplY3Qua2V5cyhzd2lwZXIudmlydHVhbC5jYWNoZSkuZm9yRWFjaChrZXkgPT4ge1xuICAgICAgICAgICAgaWYgKGtleSA+IHNsaWRlc0luZGV4ZXMpIHtcbiAgICAgICAgICAgICAgc3dpcGVyLnZpcnR1YWwuY2FjaGVba2V5IC0gMV0gPSBzd2lwZXIudmlydHVhbC5jYWNoZVtrZXldO1xuICAgICAgICAgICAgICBzd2lwZXIudmlydHVhbC5jYWNoZVtrZXkgLSAxXS5zZXRBdHRyaWJ1dGUoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4Jywga2V5IC0gMSk7XG4gICAgICAgICAgICAgIGRlbGV0ZSBzd2lwZXIudmlydHVhbC5jYWNoZVtrZXldO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHN3aXBlci52aXJ0dWFsLnNsaWRlcy5zcGxpY2Uoc2xpZGVzSW5kZXhlc1tpXSwgMSk7XG4gICAgICAgIGlmIChzbGlkZXNJbmRleGVzW2ldIDwgYWN0aXZlSW5kZXgpIGFjdGl2ZUluZGV4IC09IDE7XG4gICAgICAgIGFjdGl2ZUluZGV4ID0gTWF0aC5tYXgoYWN0aXZlSW5kZXgsIDApO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy52aXJ0dWFsLmNhY2hlKSB7XG4gICAgICAgIGRlbGV0ZSBzd2lwZXIudmlydHVhbC5jYWNoZVtzbGlkZXNJbmRleGVzXTtcbiAgICAgICAgLy8gc2hpZnQgY2FjaGUgaW5kZXhlc1xuICAgICAgICBPYmplY3Qua2V5cyhzd2lwZXIudmlydHVhbC5jYWNoZSkuZm9yRWFjaChrZXkgPT4ge1xuICAgICAgICAgIGlmIChrZXkgPiBzbGlkZXNJbmRleGVzKSB7XG4gICAgICAgICAgICBzd2lwZXIudmlydHVhbC5jYWNoZVtrZXkgLSAxXSA9IHN3aXBlci52aXJ0dWFsLmNhY2hlW2tleV07XG4gICAgICAgICAgICBzd2lwZXIudmlydHVhbC5jYWNoZVtrZXkgLSAxXS5zZXRBdHRyaWJ1dGUoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4Jywga2V5IC0gMSk7XG4gICAgICAgICAgICBkZWxldGUgc3dpcGVyLnZpcnR1YWwuY2FjaGVba2V5XTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgc3dpcGVyLnZpcnR1YWwuc2xpZGVzLnNwbGljZShzbGlkZXNJbmRleGVzLCAxKTtcbiAgICAgIGlmIChzbGlkZXNJbmRleGVzIDwgYWN0aXZlSW5kZXgpIGFjdGl2ZUluZGV4IC09IDE7XG4gICAgICBhY3RpdmVJbmRleCA9IE1hdGgubWF4KGFjdGl2ZUluZGV4LCAwKTtcbiAgICB9XG4gICAgdXBkYXRlKHRydWUpO1xuICAgIHN3aXBlci5zbGlkZVRvKGFjdGl2ZUluZGV4LCAwKTtcbiAgfVxuICBmdW5jdGlvbiByZW1vdmVBbGxTbGlkZXMoKSB7XG4gICAgc3dpcGVyLnZpcnR1YWwuc2xpZGVzID0gW107XG4gICAgaWYgKHN3aXBlci5wYXJhbXMudmlydHVhbC5jYWNoZSkge1xuICAgICAgc3dpcGVyLnZpcnR1YWwuY2FjaGUgPSB7fTtcbiAgICB9XG4gICAgdXBkYXRlKHRydWUpO1xuICAgIHN3aXBlci5zbGlkZVRvKDAsIDApO1xuICB9XG4gIG9uKCdiZWZvcmVJbml0JywgKCkgPT4ge1xuICAgIGlmICghc3dpcGVyLnBhcmFtcy52aXJ0dWFsLmVuYWJsZWQpIHJldHVybjtcbiAgICBsZXQgZG9tU2xpZGVzQXNzaWduZWQ7XG4gICAgaWYgKHR5cGVvZiBzd2lwZXIucGFzc2VkUGFyYW1zLnZpcnR1YWwuc2xpZGVzID09PSAndW5kZWZpbmVkJykge1xuICAgICAgY29uc3Qgc2xpZGVzID0gWy4uLnN3aXBlci5zbGlkZXNFbC5jaGlsZHJlbl0uZmlsdGVyKGVsID0+IGVsLm1hdGNoZXMoYC4ke3N3aXBlci5wYXJhbXMuc2xpZGVDbGFzc30sIHN3aXBlci1zbGlkZWApKTtcbiAgICAgIGlmIChzbGlkZXMgJiYgc2xpZGVzLmxlbmd0aCkge1xuICAgICAgICBzd2lwZXIudmlydHVhbC5zbGlkZXMgPSBbLi4uc2xpZGVzXTtcbiAgICAgICAgZG9tU2xpZGVzQXNzaWduZWQgPSB0cnVlO1xuICAgICAgICBzbGlkZXMuZm9yRWFjaCgoc2xpZGVFbCwgc2xpZGVJbmRleCkgPT4ge1xuICAgICAgICAgIHNsaWRlRWwuc2V0QXR0cmlidXRlKCdkYXRhLXN3aXBlci1zbGlkZS1pbmRleCcsIHNsaWRlSW5kZXgpO1xuICAgICAgICAgIHN3aXBlci52aXJ0dWFsLmNhY2hlW3NsaWRlSW5kZXhdID0gc2xpZGVFbDtcbiAgICAgICAgICBzbGlkZUVsLnJlbW92ZSgpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKCFkb21TbGlkZXNBc3NpZ25lZCkge1xuICAgICAgc3dpcGVyLnZpcnR1YWwuc2xpZGVzID0gc3dpcGVyLnBhcmFtcy52aXJ0dWFsLnNsaWRlcztcbiAgICB9XG4gICAgc3dpcGVyLmNsYXNzTmFtZXMucHVzaChgJHtzd2lwZXIucGFyYW1zLmNvbnRhaW5lck1vZGlmaWVyQ2xhc3N9dmlydHVhbGApO1xuICAgIHN3aXBlci5wYXJhbXMud2F0Y2hTbGlkZXNQcm9ncmVzcyA9IHRydWU7XG4gICAgc3dpcGVyLm9yaWdpbmFsUGFyYW1zLndhdGNoU2xpZGVzUHJvZ3Jlc3MgPSB0cnVlO1xuICAgIHVwZGF0ZShmYWxzZSwgdHJ1ZSk7XG4gIH0pO1xuICBvbignc2V0VHJhbnNsYXRlJywgKCkgPT4ge1xuICAgIGlmICghc3dpcGVyLnBhcmFtcy52aXJ0dWFsLmVuYWJsZWQpIHJldHVybjtcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5jc3NNb2RlICYmICFzd2lwZXIuX2ltbWVkaWF0ZVZpcnR1YWwpIHtcbiAgICAgIGNsZWFyVGltZW91dChjc3NNb2RlVGltZW91dCk7XG4gICAgICBjc3NNb2RlVGltZW91dCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICB1cGRhdGUoKTtcbiAgICAgIH0sIDEwMCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHVwZGF0ZSgpO1xuICAgIH1cbiAgfSk7XG4gIG9uKCdpbml0IHVwZGF0ZSByZXNpemUnLCAoKSA9PiB7XG4gICAgaWYgKCFzd2lwZXIucGFyYW1zLnZpcnR1YWwuZW5hYmxlZCkgcmV0dXJuO1xuICAgIGlmIChzd2lwZXIucGFyYW1zLmNzc01vZGUpIHtcbiAgICAgIHNldENTU1Byb3BlcnR5KHN3aXBlci53cmFwcGVyRWwsICctLXN3aXBlci12aXJ0dWFsLXNpemUnLCBgJHtzd2lwZXIudmlydHVhbFNpemV9cHhgKTtcbiAgICB9XG4gIH0pO1xuICBPYmplY3QuYXNzaWduKHN3aXBlci52aXJ0dWFsLCB7XG4gICAgYXBwZW5kU2xpZGUsXG4gICAgcHJlcGVuZFNsaWRlLFxuICAgIHJlbW92ZVNsaWRlLFxuICAgIHJlbW92ZUFsbFNsaWRlcyxcbiAgICB1cGRhdGVcbiAgfSk7XG59XG5cbmV4cG9ydCB7IFZpcnR1YWwgYXMgZGVmYXVsdCB9O1xuIiwiaW1wb3J0IHsgZyBhcyBnZXREb2N1bWVudCwgYSBhcyBnZXRXaW5kb3cgfSBmcm9tICcuLi9zaGFyZWQvc3NyLXdpbmRvdy5lc20ubWpzJztcbmltcG9ydCB7IGEgYXMgZWxlbWVudFBhcmVudHMsIGIgYXMgZWxlbWVudE9mZnNldCB9IGZyb20gJy4uL3NoYXJlZC91dGlscy5tanMnO1xuXG4vKiBlc2xpbnQtZGlzYWJsZSBjb25zaXN0ZW50LXJldHVybiAqL1xuZnVuY3Rpb24gS2V5Ym9hcmQoX3JlZikge1xuICBsZXQge1xuICAgIHN3aXBlcixcbiAgICBleHRlbmRQYXJhbXMsXG4gICAgb24sXG4gICAgZW1pdFxuICB9ID0gX3JlZjtcbiAgY29uc3QgZG9jdW1lbnQgPSBnZXREb2N1bWVudCgpO1xuICBjb25zdCB3aW5kb3cgPSBnZXRXaW5kb3coKTtcbiAgc3dpcGVyLmtleWJvYXJkID0ge1xuICAgIGVuYWJsZWQ6IGZhbHNlXG4gIH07XG4gIGV4dGVuZFBhcmFtcyh7XG4gICAga2V5Ym9hcmQ6IHtcbiAgICAgIGVuYWJsZWQ6IGZhbHNlLFxuICAgICAgb25seUluVmlld3BvcnQ6IHRydWUsXG4gICAgICBwYWdlVXBEb3duOiB0cnVlXG4gICAgfVxuICB9KTtcbiAgZnVuY3Rpb24gaGFuZGxlKGV2ZW50KSB7XG4gICAgaWYgKCFzd2lwZXIuZW5hYmxlZCkgcmV0dXJuO1xuICAgIGNvbnN0IHtcbiAgICAgIHJ0bFRyYW5zbGF0ZTogcnRsXG4gICAgfSA9IHN3aXBlcjtcbiAgICBsZXQgZSA9IGV2ZW50O1xuICAgIGlmIChlLm9yaWdpbmFsRXZlbnQpIGUgPSBlLm9yaWdpbmFsRXZlbnQ7IC8vIGpxdWVyeSBmaXhcbiAgICBjb25zdCBrYyA9IGUua2V5Q29kZSB8fCBlLmNoYXJDb2RlO1xuICAgIGNvbnN0IHBhZ2VVcERvd24gPSBzd2lwZXIucGFyYW1zLmtleWJvYXJkLnBhZ2VVcERvd247XG4gICAgY29uc3QgaXNQYWdlVXAgPSBwYWdlVXBEb3duICYmIGtjID09PSAzMztcbiAgICBjb25zdCBpc1BhZ2VEb3duID0gcGFnZVVwRG93biAmJiBrYyA9PT0gMzQ7XG4gICAgY29uc3QgaXNBcnJvd0xlZnQgPSBrYyA9PT0gMzc7XG4gICAgY29uc3QgaXNBcnJvd1JpZ2h0ID0ga2MgPT09IDM5O1xuICAgIGNvbnN0IGlzQXJyb3dVcCA9IGtjID09PSAzODtcbiAgICBjb25zdCBpc0Fycm93RG93biA9IGtjID09PSA0MDtcbiAgICAvLyBEaXJlY3Rpb25zIGxvY2tzXG4gICAgaWYgKCFzd2lwZXIuYWxsb3dTbGlkZU5leHQgJiYgKHN3aXBlci5pc0hvcml6b250YWwoKSAmJiBpc0Fycm93UmlnaHQgfHwgc3dpcGVyLmlzVmVydGljYWwoKSAmJiBpc0Fycm93RG93biB8fCBpc1BhZ2VEb3duKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAoIXN3aXBlci5hbGxvd1NsaWRlUHJldiAmJiAoc3dpcGVyLmlzSG9yaXpvbnRhbCgpICYmIGlzQXJyb3dMZWZ0IHx8IHN3aXBlci5pc1ZlcnRpY2FsKCkgJiYgaXNBcnJvd1VwIHx8IGlzUGFnZVVwKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAoZS5zaGlmdEtleSB8fCBlLmFsdEtleSB8fCBlLmN0cmxLZXkgfHwgZS5tZXRhS2V5KSB7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBpZiAoZG9jdW1lbnQuYWN0aXZlRWxlbWVudCAmJiBkb2N1bWVudC5hY3RpdmVFbGVtZW50Lm5vZGVOYW1lICYmIChkb2N1bWVudC5hY3RpdmVFbGVtZW50Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09ICdpbnB1dCcgfHwgZG9jdW1lbnQuYWN0aXZlRWxlbWVudC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSAndGV4dGFyZWEnKSkge1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gICAgaWYgKHN3aXBlci5wYXJhbXMua2V5Ym9hcmQub25seUluVmlld3BvcnQgJiYgKGlzUGFnZVVwIHx8IGlzUGFnZURvd24gfHwgaXNBcnJvd0xlZnQgfHwgaXNBcnJvd1JpZ2h0IHx8IGlzQXJyb3dVcCB8fCBpc0Fycm93RG93bikpIHtcbiAgICAgIGxldCBpblZpZXcgPSBmYWxzZTtcbiAgICAgIC8vIENoZWNrIHRoYXQgc3dpcGVyIHNob3VsZCBiZSBpbnNpZGUgb2YgdmlzaWJsZSBhcmVhIG9mIHdpbmRvd1xuICAgICAgaWYgKGVsZW1lbnRQYXJlbnRzKHN3aXBlci5lbCwgYC4ke3N3aXBlci5wYXJhbXMuc2xpZGVDbGFzc30sIHN3aXBlci1zbGlkZWApLmxlbmd0aCA+IDAgJiYgZWxlbWVudFBhcmVudHMoc3dpcGVyLmVsLCBgLiR7c3dpcGVyLnBhcmFtcy5zbGlkZUFjdGl2ZUNsYXNzfWApLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgY29uc3QgZWwgPSBzd2lwZXIuZWw7XG4gICAgICBjb25zdCBzd2lwZXJXaWR0aCA9IGVsLmNsaWVudFdpZHRoO1xuICAgICAgY29uc3Qgc3dpcGVySGVpZ2h0ID0gZWwuY2xpZW50SGVpZ2h0O1xuICAgICAgY29uc3Qgd2luZG93V2lkdGggPSB3aW5kb3cuaW5uZXJXaWR0aDtcbiAgICAgIGNvbnN0IHdpbmRvd0hlaWdodCA9IHdpbmRvdy5pbm5lckhlaWdodDtcbiAgICAgIGNvbnN0IHN3aXBlck9mZnNldCA9IGVsZW1lbnRPZmZzZXQoZWwpO1xuICAgICAgaWYgKHJ0bCkgc3dpcGVyT2Zmc2V0LmxlZnQgLT0gZWwuc2Nyb2xsTGVmdDtcbiAgICAgIGNvbnN0IHN3aXBlckNvb3JkID0gW1tzd2lwZXJPZmZzZXQubGVmdCwgc3dpcGVyT2Zmc2V0LnRvcF0sIFtzd2lwZXJPZmZzZXQubGVmdCArIHN3aXBlcldpZHRoLCBzd2lwZXJPZmZzZXQudG9wXSwgW3N3aXBlck9mZnNldC5sZWZ0LCBzd2lwZXJPZmZzZXQudG9wICsgc3dpcGVySGVpZ2h0XSwgW3N3aXBlck9mZnNldC5sZWZ0ICsgc3dpcGVyV2lkdGgsIHN3aXBlck9mZnNldC50b3AgKyBzd2lwZXJIZWlnaHRdXTtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc3dpcGVyQ29vcmQubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgY29uc3QgcG9pbnQgPSBzd2lwZXJDb29yZFtpXTtcbiAgICAgICAgaWYgKHBvaW50WzBdID49IDAgJiYgcG9pbnRbMF0gPD0gd2luZG93V2lkdGggJiYgcG9pbnRbMV0gPj0gMCAmJiBwb2ludFsxXSA8PSB3aW5kb3dIZWlnaHQpIHtcbiAgICAgICAgICBpZiAocG9pbnRbMF0gPT09IDAgJiYgcG9pbnRbMV0gPT09IDApIGNvbnRpbnVlOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gICAgICAgICAgaW5WaWV3ID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKCFpblZpZXcpIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGlmIChzd2lwZXIuaXNIb3Jpem9udGFsKCkpIHtcbiAgICAgIGlmIChpc1BhZ2VVcCB8fCBpc1BhZ2VEb3duIHx8IGlzQXJyb3dMZWZ0IHx8IGlzQXJyb3dSaWdodCkge1xuICAgICAgICBpZiAoZS5wcmV2ZW50RGVmYXVsdCkgZS5wcmV2ZW50RGVmYXVsdCgpO2Vsc2UgZS5yZXR1cm5WYWx1ZSA9IGZhbHNlO1xuICAgICAgfVxuICAgICAgaWYgKChpc1BhZ2VEb3duIHx8IGlzQXJyb3dSaWdodCkgJiYgIXJ0bCB8fCAoaXNQYWdlVXAgfHwgaXNBcnJvd0xlZnQpICYmIHJ0bCkgc3dpcGVyLnNsaWRlTmV4dCgpO1xuICAgICAgaWYgKChpc1BhZ2VVcCB8fCBpc0Fycm93TGVmdCkgJiYgIXJ0bCB8fCAoaXNQYWdlRG93biB8fCBpc0Fycm93UmlnaHQpICYmIHJ0bCkgc3dpcGVyLnNsaWRlUHJldigpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoaXNQYWdlVXAgfHwgaXNQYWdlRG93biB8fCBpc0Fycm93VXAgfHwgaXNBcnJvd0Rvd24pIHtcbiAgICAgICAgaWYgKGUucHJldmVudERlZmF1bHQpIGUucHJldmVudERlZmF1bHQoKTtlbHNlIGUucmV0dXJuVmFsdWUgPSBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGlmIChpc1BhZ2VEb3duIHx8IGlzQXJyb3dEb3duKSBzd2lwZXIuc2xpZGVOZXh0KCk7XG4gICAgICBpZiAoaXNQYWdlVXAgfHwgaXNBcnJvd1VwKSBzd2lwZXIuc2xpZGVQcmV2KCk7XG4gICAgfVxuICAgIGVtaXQoJ2tleVByZXNzJywga2MpO1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cbiAgZnVuY3Rpb24gZW5hYmxlKCkge1xuICAgIGlmIChzd2lwZXIua2V5Ym9hcmQuZW5hYmxlZCkgcmV0dXJuO1xuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBoYW5kbGUpO1xuICAgIHN3aXBlci5rZXlib2FyZC5lbmFibGVkID0gdHJ1ZTtcbiAgfVxuICBmdW5jdGlvbiBkaXNhYmxlKCkge1xuICAgIGlmICghc3dpcGVyLmtleWJvYXJkLmVuYWJsZWQpIHJldHVybjtcbiAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdrZXlkb3duJywgaGFuZGxlKTtcbiAgICBzd2lwZXIua2V5Ym9hcmQuZW5hYmxlZCA9IGZhbHNlO1xuICB9XG4gIG9uKCdpbml0JywgKCkgPT4ge1xuICAgIGlmIChzd2lwZXIucGFyYW1zLmtleWJvYXJkLmVuYWJsZWQpIHtcbiAgICAgIGVuYWJsZSgpO1xuICAgIH1cbiAgfSk7XG4gIG9uKCdkZXN0cm95JywgKCkgPT4ge1xuICAgIGlmIChzd2lwZXIua2V5Ym9hcmQuZW5hYmxlZCkge1xuICAgICAgZGlzYWJsZSgpO1xuICAgIH1cbiAgfSk7XG4gIE9iamVjdC5hc3NpZ24oc3dpcGVyLmtleWJvYXJkLCB7XG4gICAgZW5hYmxlLFxuICAgIGRpc2FibGVcbiAgfSk7XG59XG5cbmV4cG9ydCB7IEtleWJvYXJkIGFzIGRlZmF1bHQgfTtcbiIsImltcG9ydCB7IGEgYXMgZ2V0V2luZG93IH0gZnJvbSAnLi4vc2hhcmVkL3Nzci13aW5kb3cuZXNtLm1qcyc7XG5pbXBvcnQgeyBuIGFzIG5leHRUaWNrLCBkIGFzIG5vdyB9IGZyb20gJy4uL3NoYXJlZC91dGlscy5tanMnO1xuXG4vKiBlc2xpbnQtZGlzYWJsZSBjb25zaXN0ZW50LXJldHVybiAqL1xuZnVuY3Rpb24gTW91c2V3aGVlbChfcmVmKSB7XG4gIGxldCB7XG4gICAgc3dpcGVyLFxuICAgIGV4dGVuZFBhcmFtcyxcbiAgICBvbixcbiAgICBlbWl0XG4gIH0gPSBfcmVmO1xuICBjb25zdCB3aW5kb3cgPSBnZXRXaW5kb3coKTtcbiAgZXh0ZW5kUGFyYW1zKHtcbiAgICBtb3VzZXdoZWVsOiB7XG4gICAgICBlbmFibGVkOiBmYWxzZSxcbiAgICAgIHJlbGVhc2VPbkVkZ2VzOiBmYWxzZSxcbiAgICAgIGludmVydDogZmFsc2UsXG4gICAgICBmb3JjZVRvQXhpczogZmFsc2UsXG4gICAgICBzZW5zaXRpdml0eTogMSxcbiAgICAgIGV2ZW50c1RhcmdldDogJ2NvbnRhaW5lcicsXG4gICAgICB0aHJlc2hvbGREZWx0YTogbnVsbCxcbiAgICAgIHRocmVzaG9sZFRpbWU6IG51bGwsXG4gICAgICBub01vdXNld2hlZWxDbGFzczogJ3N3aXBlci1uby1tb3VzZXdoZWVsJ1xuICAgIH1cbiAgfSk7XG4gIHN3aXBlci5tb3VzZXdoZWVsID0ge1xuICAgIGVuYWJsZWQ6IGZhbHNlXG4gIH07XG4gIGxldCB0aW1lb3V0O1xuICBsZXQgbGFzdFNjcm9sbFRpbWUgPSBub3coKTtcbiAgbGV0IGxhc3RFdmVudEJlZm9yZVNuYXA7XG4gIGNvbnN0IHJlY2VudFdoZWVsRXZlbnRzID0gW107XG4gIGZ1bmN0aW9uIG5vcm1hbGl6ZShlKSB7XG4gICAgLy8gUmVhc29uYWJsZSBkZWZhdWx0c1xuICAgIGNvbnN0IFBJWEVMX1NURVAgPSAxMDtcbiAgICBjb25zdCBMSU5FX0hFSUdIVCA9IDQwO1xuICAgIGNvbnN0IFBBR0VfSEVJR0hUID0gODAwO1xuICAgIGxldCBzWCA9IDA7XG4gICAgbGV0IHNZID0gMDsgLy8gc3BpblgsIHNwaW5ZXG4gICAgbGV0IHBYID0gMDtcbiAgICBsZXQgcFkgPSAwOyAvLyBwaXhlbFgsIHBpeGVsWVxuXG4gICAgLy8gTGVnYWN5XG4gICAgaWYgKCdkZXRhaWwnIGluIGUpIHtcbiAgICAgIHNZID0gZS5kZXRhaWw7XG4gICAgfVxuICAgIGlmICgnd2hlZWxEZWx0YScgaW4gZSkge1xuICAgICAgc1kgPSAtZS53aGVlbERlbHRhIC8gMTIwO1xuICAgIH1cbiAgICBpZiAoJ3doZWVsRGVsdGFZJyBpbiBlKSB7XG4gICAgICBzWSA9IC1lLndoZWVsRGVsdGFZIC8gMTIwO1xuICAgIH1cbiAgICBpZiAoJ3doZWVsRGVsdGFYJyBpbiBlKSB7XG4gICAgICBzWCA9IC1lLndoZWVsRGVsdGFYIC8gMTIwO1xuICAgIH1cblxuICAgIC8vIHNpZGUgc2Nyb2xsaW5nIG9uIEZGIHdpdGggRE9NTW91c2VTY3JvbGxcbiAgICBpZiAoJ2F4aXMnIGluIGUgJiYgZS5heGlzID09PSBlLkhPUklaT05UQUxfQVhJUykge1xuICAgICAgc1ggPSBzWTtcbiAgICAgIHNZID0gMDtcbiAgICB9XG4gICAgcFggPSBzWCAqIFBJWEVMX1NURVA7XG4gICAgcFkgPSBzWSAqIFBJWEVMX1NURVA7XG4gICAgaWYgKCdkZWx0YVknIGluIGUpIHtcbiAgICAgIHBZID0gZS5kZWx0YVk7XG4gICAgfVxuICAgIGlmICgnZGVsdGFYJyBpbiBlKSB7XG4gICAgICBwWCA9IGUuZGVsdGFYO1xuICAgIH1cbiAgICBpZiAoZS5zaGlmdEtleSAmJiAhcFgpIHtcbiAgICAgIC8vIGlmIHVzZXIgc2Nyb2xscyB3aXRoIHNoaWZ0IGhlIHdhbnRzIGhvcml6b250YWwgc2Nyb2xsXG4gICAgICBwWCA9IHBZO1xuICAgICAgcFkgPSAwO1xuICAgIH1cbiAgICBpZiAoKHBYIHx8IHBZKSAmJiBlLmRlbHRhTW9kZSkge1xuICAgICAgaWYgKGUuZGVsdGFNb2RlID09PSAxKSB7XG4gICAgICAgIC8vIGRlbHRhIGluIExJTkUgdW5pdHNcbiAgICAgICAgcFggKj0gTElORV9IRUlHSFQ7XG4gICAgICAgIHBZICo9IExJTkVfSEVJR0hUO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gZGVsdGEgaW4gUEFHRSB1bml0c1xuICAgICAgICBwWCAqPSBQQUdFX0hFSUdIVDtcbiAgICAgICAgcFkgKj0gUEFHRV9IRUlHSFQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gRmFsbC1iYWNrIGlmIHNwaW4gY2Fubm90IGJlIGRldGVybWluZWRcbiAgICBpZiAocFggJiYgIXNYKSB7XG4gICAgICBzWCA9IHBYIDwgMSA/IC0xIDogMTtcbiAgICB9XG4gICAgaWYgKHBZICYmICFzWSkge1xuICAgICAgc1kgPSBwWSA8IDEgPyAtMSA6IDE7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICBzcGluWDogc1gsXG4gICAgICBzcGluWTogc1ksXG4gICAgICBwaXhlbFg6IHBYLFxuICAgICAgcGl4ZWxZOiBwWVxuICAgIH07XG4gIH1cbiAgZnVuY3Rpb24gaGFuZGxlTW91c2VFbnRlcigpIHtcbiAgICBpZiAoIXN3aXBlci5lbmFibGVkKSByZXR1cm47XG4gICAgc3dpcGVyLm1vdXNlRW50ZXJlZCA9IHRydWU7XG4gIH1cbiAgZnVuY3Rpb24gaGFuZGxlTW91c2VMZWF2ZSgpIHtcbiAgICBpZiAoIXN3aXBlci5lbmFibGVkKSByZXR1cm47XG4gICAgc3dpcGVyLm1vdXNlRW50ZXJlZCA9IGZhbHNlO1xuICB9XG4gIGZ1bmN0aW9uIGFuaW1hdGVTbGlkZXIobmV3RXZlbnQpIHtcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5tb3VzZXdoZWVsLnRocmVzaG9sZERlbHRhICYmIG5ld0V2ZW50LmRlbHRhIDwgc3dpcGVyLnBhcmFtcy5tb3VzZXdoZWVsLnRocmVzaG9sZERlbHRhKSB7XG4gICAgICAvLyBQcmV2ZW50IGlmIGRlbHRhIG9mIHdoZWVsIHNjcm9sbCBkZWx0YSBpcyBiZWxvdyBjb25maWd1cmVkIHRocmVzaG9sZFxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5tb3VzZXdoZWVsLnRocmVzaG9sZFRpbWUgJiYgbm93KCkgLSBsYXN0U2Nyb2xsVGltZSA8IHN3aXBlci5wYXJhbXMubW91c2V3aGVlbC50aHJlc2hvbGRUaW1lKSB7XG4gICAgICAvLyBQcmV2ZW50IGlmIHRpbWUgYmV0d2VlbiBzY3JvbGxzIGlzIGJlbG93IGNvbmZpZ3VyZWQgdGhyZXNob2xkXG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgLy8gSWYgdGhlIG1vdmVtZW50IGlzIE5PVCBiaWcgZW5vdWdoIGFuZFxuICAgIC8vIGlmIHRoZSBsYXN0IHRpbWUgdGhlIHVzZXIgc2Nyb2xsZWQgd2FzIHRvbyBjbG9zZSB0byB0aGUgY3VycmVudCBvbmUgKGF2b2lkIGNvbnRpbnVvdXNseSB0cmlnZ2VyaW5nIHRoZSBzbGlkZXIpOlxuICAgIC8vICAgRG9uJ3QgZ28gYW55IGZ1cnRoZXIgKGF2b2lkIGluc2lnbmlmaWNhbnQgc2Nyb2xsIG1vdmVtZW50KS5cbiAgICBpZiAobmV3RXZlbnQuZGVsdGEgPj0gNiAmJiBub3coKSAtIGxhc3RTY3JvbGxUaW1lIDwgNjApIHtcbiAgICAgIC8vIFJldHVybiBmYWxzZSBhcyBhIGRlZmF1bHRcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICAvLyBJZiB1c2VyIGlzIHNjcm9sbGluZyB0b3dhcmRzIHRoZSBlbmQ6XG4gICAgLy8gICBJZiB0aGUgc2xpZGVyIGhhc24ndCBoaXQgdGhlIGxhdGVzdCBzbGlkZSBvclxuICAgIC8vICAgaWYgdGhlIHNsaWRlciBpcyBhIGxvb3AgYW5kXG4gICAgLy8gICBpZiB0aGUgc2xpZGVyIGlzbid0IG1vdmluZyByaWdodCBub3c6XG4gICAgLy8gICAgIEdvIHRvIG5leHQgc2xpZGUgYW5kXG4gICAgLy8gICAgIGVtaXQgYSBzY3JvbGwgZXZlbnQuXG4gICAgLy8gRWxzZSAodGhlIHVzZXIgaXMgc2Nyb2xsaW5nIHRvd2FyZHMgdGhlIGJlZ2lubmluZykgYW5kXG4gICAgLy8gaWYgdGhlIHNsaWRlciBoYXNuJ3QgaGl0IHRoZSBmaXJzdCBzbGlkZSBvclxuICAgIC8vIGlmIHRoZSBzbGlkZXIgaXMgYSBsb29wIGFuZFxuICAgIC8vIGlmIHRoZSBzbGlkZXIgaXNuJ3QgbW92aW5nIHJpZ2h0IG5vdzpcbiAgICAvLyAgIEdvIHRvIHByZXYgc2xpZGUgYW5kXG4gICAgLy8gICBlbWl0IGEgc2Nyb2xsIGV2ZW50LlxuICAgIGlmIChuZXdFdmVudC5kaXJlY3Rpb24gPCAwKSB7XG4gICAgICBpZiAoKCFzd2lwZXIuaXNFbmQgfHwgc3dpcGVyLnBhcmFtcy5sb29wKSAmJiAhc3dpcGVyLmFuaW1hdGluZykge1xuICAgICAgICBzd2lwZXIuc2xpZGVOZXh0KCk7XG4gICAgICAgIGVtaXQoJ3Njcm9sbCcsIG5ld0V2ZW50LnJhdyk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICgoIXN3aXBlci5pc0JlZ2lubmluZyB8fCBzd2lwZXIucGFyYW1zLmxvb3ApICYmICFzd2lwZXIuYW5pbWF0aW5nKSB7XG4gICAgICBzd2lwZXIuc2xpZGVQcmV2KCk7XG4gICAgICBlbWl0KCdzY3JvbGwnLCBuZXdFdmVudC5yYXcpO1xuICAgIH1cbiAgICAvLyBJZiB5b3UgZ290IGhlcmUgaXMgYmVjYXVzZSBhbiBhbmltYXRpb24gaGFzIGJlZW4gdHJpZ2dlcmVkIHNvIHN0b3JlIHRoZSBjdXJyZW50IHRpbWVcbiAgICBsYXN0U2Nyb2xsVGltZSA9IG5ldyB3aW5kb3cuRGF0ZSgpLmdldFRpbWUoKTtcbiAgICAvLyBSZXR1cm4gZmFsc2UgYXMgYSBkZWZhdWx0XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGZ1bmN0aW9uIHJlbGVhc2VTY3JvbGwobmV3RXZlbnQpIHtcbiAgICBjb25zdCBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLm1vdXNld2hlZWw7XG4gICAgaWYgKG5ld0V2ZW50LmRpcmVjdGlvbiA8IDApIHtcbiAgICAgIGlmIChzd2lwZXIuaXNFbmQgJiYgIXN3aXBlci5wYXJhbXMubG9vcCAmJiBwYXJhbXMucmVsZWFzZU9uRWRnZXMpIHtcbiAgICAgICAgLy8gUmV0dXJuIHRydWUgdG8gYW5pbWF0ZSBzY3JvbGwgb24gZWRnZXNcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChzd2lwZXIuaXNCZWdpbm5pbmcgJiYgIXN3aXBlci5wYXJhbXMubG9vcCAmJiBwYXJhbXMucmVsZWFzZU9uRWRnZXMpIHtcbiAgICAgIC8vIFJldHVybiB0cnVlIHRvIGFuaW1hdGUgc2Nyb2xsIG9uIGVkZ2VzXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGZ1bmN0aW9uIGhhbmRsZShldmVudCkge1xuICAgIGxldCBlID0gZXZlbnQ7XG4gICAgbGV0IGRpc2FibGVQYXJlbnRTd2lwZXIgPSB0cnVlO1xuICAgIGlmICghc3dpcGVyLmVuYWJsZWQpIHJldHVybjtcblxuICAgIC8vIElnbm9yZSBldmVudCBpZiB0aGUgdGFyZ2V0IG9yIGl0cyBwYXJlbnRzIGhhdmUgdGhlIHN3aXBlci1uby1tb3VzZXdoZWVsIGNsYXNzXG4gICAgaWYgKGV2ZW50LnRhcmdldC5jbG9zZXN0KGAuJHtzd2lwZXIucGFyYW1zLm1vdXNld2hlZWwubm9Nb3VzZXdoZWVsQ2xhc3N9YCkpIHJldHVybjtcbiAgICBjb25zdCBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLm1vdXNld2hlZWw7XG4gICAgaWYgKHN3aXBlci5wYXJhbXMuY3NzTW9kZSkge1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH1cbiAgICBsZXQgdGFyZ2V0RWwgPSBzd2lwZXIuZWw7XG4gICAgaWYgKHN3aXBlci5wYXJhbXMubW91c2V3aGVlbC5ldmVudHNUYXJnZXQgIT09ICdjb250YWluZXInKSB7XG4gICAgICB0YXJnZXRFbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3Ioc3dpcGVyLnBhcmFtcy5tb3VzZXdoZWVsLmV2ZW50c1RhcmdldCk7XG4gICAgfVxuICAgIGNvbnN0IHRhcmdldEVsQ29udGFpbnNUYXJnZXQgPSB0YXJnZXRFbCAmJiB0YXJnZXRFbC5jb250YWlucyhlLnRhcmdldCk7XG4gICAgaWYgKCFzd2lwZXIubW91c2VFbnRlcmVkICYmICF0YXJnZXRFbENvbnRhaW5zVGFyZ2V0ICYmICFwYXJhbXMucmVsZWFzZU9uRWRnZXMpIHJldHVybiB0cnVlO1xuICAgIGlmIChlLm9yaWdpbmFsRXZlbnQpIGUgPSBlLm9yaWdpbmFsRXZlbnQ7IC8vIGpxdWVyeSBmaXhcbiAgICBsZXQgZGVsdGEgPSAwO1xuICAgIGNvbnN0IHJ0bEZhY3RvciA9IHN3aXBlci5ydGxUcmFuc2xhdGUgPyAtMSA6IDE7XG4gICAgY29uc3QgZGF0YSA9IG5vcm1hbGl6ZShlKTtcbiAgICBpZiAocGFyYW1zLmZvcmNlVG9BeGlzKSB7XG4gICAgICBpZiAoc3dpcGVyLmlzSG9yaXpvbnRhbCgpKSB7XG4gICAgICAgIGlmIChNYXRoLmFicyhkYXRhLnBpeGVsWCkgPiBNYXRoLmFicyhkYXRhLnBpeGVsWSkpIGRlbHRhID0gLWRhdGEucGl4ZWxYICogcnRsRmFjdG9yO2Vsc2UgcmV0dXJuIHRydWU7XG4gICAgICB9IGVsc2UgaWYgKE1hdGguYWJzKGRhdGEucGl4ZWxZKSA+IE1hdGguYWJzKGRhdGEucGl4ZWxYKSkgZGVsdGEgPSAtZGF0YS5waXhlbFk7ZWxzZSByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgZGVsdGEgPSBNYXRoLmFicyhkYXRhLnBpeGVsWCkgPiBNYXRoLmFicyhkYXRhLnBpeGVsWSkgPyAtZGF0YS5waXhlbFggKiBydGxGYWN0b3IgOiAtZGF0YS5waXhlbFk7XG4gICAgfVxuICAgIGlmIChkZWx0YSA9PT0gMCkgcmV0dXJuIHRydWU7XG4gICAgaWYgKHBhcmFtcy5pbnZlcnQpIGRlbHRhID0gLWRlbHRhO1xuXG4gICAgLy8gR2V0IHRoZSBzY3JvbGwgcG9zaXRpb25zXG4gICAgbGV0IHBvc2l0aW9ucyA9IHN3aXBlci5nZXRUcmFuc2xhdGUoKSArIGRlbHRhICogcGFyYW1zLnNlbnNpdGl2aXR5O1xuICAgIGlmIChwb3NpdGlvbnMgPj0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpKSBwb3NpdGlvbnMgPSBzd2lwZXIubWluVHJhbnNsYXRlKCk7XG4gICAgaWYgKHBvc2l0aW9ucyA8PSBzd2lwZXIubWF4VHJhbnNsYXRlKCkpIHBvc2l0aW9ucyA9IHN3aXBlci5tYXhUcmFuc2xhdGUoKTtcblxuICAgIC8vIFdoZW4gbG9vcCBpcyB0cnVlOlxuICAgIC8vICAgICB0aGUgZGlzYWJsZVBhcmVudFN3aXBlciB3aWxsIGJlIHRydWUuXG4gICAgLy8gV2hlbiBsb29wIGlzIGZhbHNlOlxuICAgIC8vICAgICBpZiB0aGUgc2Nyb2xsIHBvc2l0aW9ucyBpcyBub3Qgb24gZWRnZSxcbiAgICAvLyAgICAgdGhlbiB0aGUgZGlzYWJsZVBhcmVudFN3aXBlciB3aWxsIGJlIHRydWUuXG4gICAgLy8gICAgIGlmIHRoZSBzY3JvbGwgb24gZWRnZSBwb3NpdGlvbnMsXG4gICAgLy8gICAgIHRoZW4gdGhlIGRpc2FibGVQYXJlbnRTd2lwZXIgd2lsbCBiZSBmYWxzZS5cbiAgICBkaXNhYmxlUGFyZW50U3dpcGVyID0gc3dpcGVyLnBhcmFtcy5sb29wID8gdHJ1ZSA6ICEocG9zaXRpb25zID09PSBzd2lwZXIubWluVHJhbnNsYXRlKCkgfHwgcG9zaXRpb25zID09PSBzd2lwZXIubWF4VHJhbnNsYXRlKCkpO1xuICAgIGlmIChkaXNhYmxlUGFyZW50U3dpcGVyICYmIHN3aXBlci5wYXJhbXMubmVzdGVkKSBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIGlmICghc3dpcGVyLnBhcmFtcy5mcmVlTW9kZSB8fCAhc3dpcGVyLnBhcmFtcy5mcmVlTW9kZS5lbmFibGVkKSB7XG4gICAgICAvLyBSZWdpc3RlciB0aGUgbmV3IGV2ZW50IGluIGEgdmFyaWFibGUgd2hpY2ggc3RvcmVzIHRoZSByZWxldmFudCBkYXRhXG4gICAgICBjb25zdCBuZXdFdmVudCA9IHtcbiAgICAgICAgdGltZTogbm93KCksXG4gICAgICAgIGRlbHRhOiBNYXRoLmFicyhkZWx0YSksXG4gICAgICAgIGRpcmVjdGlvbjogTWF0aC5zaWduKGRlbHRhKSxcbiAgICAgICAgcmF3OiBldmVudFxuICAgICAgfTtcblxuICAgICAgLy8gS2VlcCB0aGUgbW9zdCByZWNlbnQgZXZlbnRzXG4gICAgICBpZiAocmVjZW50V2hlZWxFdmVudHMubGVuZ3RoID49IDIpIHtcbiAgICAgICAgcmVjZW50V2hlZWxFdmVudHMuc2hpZnQoKTsgLy8gb25seSBzdG9yZSB0aGUgbGFzdCBOIGV2ZW50c1xuICAgICAgfVxuXG4gICAgICBjb25zdCBwcmV2RXZlbnQgPSByZWNlbnRXaGVlbEV2ZW50cy5sZW5ndGggPyByZWNlbnRXaGVlbEV2ZW50c1tyZWNlbnRXaGVlbEV2ZW50cy5sZW5ndGggLSAxXSA6IHVuZGVmaW5lZDtcbiAgICAgIHJlY2VudFdoZWVsRXZlbnRzLnB1c2gobmV3RXZlbnQpO1xuXG4gICAgICAvLyBJZiB0aGVyZSBpcyBhdCBsZWFzdCBvbmUgcHJldmlvdXMgcmVjb3JkZWQgZXZlbnQ6XG4gICAgICAvLyAgIElmIGRpcmVjdGlvbiBoYXMgY2hhbmdlZCBvclxuICAgICAgLy8gICBpZiB0aGUgc2Nyb2xsIGlzIHF1aWNrZXIgdGhhbiB0aGUgcHJldmlvdXMgb25lOlxuICAgICAgLy8gICAgIEFuaW1hdGUgdGhlIHNsaWRlci5cbiAgICAgIC8vIEVsc2UgKHRoaXMgaXMgdGhlIGZpcnN0IHRpbWUgdGhlIHdoZWVsIGlzIG1vdmVkKTpcbiAgICAgIC8vICAgICBBbmltYXRlIHRoZSBzbGlkZXIuXG4gICAgICBpZiAocHJldkV2ZW50KSB7XG4gICAgICAgIGlmIChuZXdFdmVudC5kaXJlY3Rpb24gIT09IHByZXZFdmVudC5kaXJlY3Rpb24gfHwgbmV3RXZlbnQuZGVsdGEgPiBwcmV2RXZlbnQuZGVsdGEgfHwgbmV3RXZlbnQudGltZSA+IHByZXZFdmVudC50aW1lICsgMTUwKSB7XG4gICAgICAgICAgYW5pbWF0ZVNsaWRlcihuZXdFdmVudCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGFuaW1hdGVTbGlkZXIobmV3RXZlbnQpO1xuICAgICAgfVxuXG4gICAgICAvLyBJZiBpdCdzIHRpbWUgdG8gcmVsZWFzZSB0aGUgc2Nyb2xsOlxuICAgICAgLy8gICBSZXR1cm4gbm93IHNvIHlvdSBkb24ndCBoaXQgdGhlIHByZXZlbnREZWZhdWx0LlxuICAgICAgaWYgKHJlbGVhc2VTY3JvbGwobmV3RXZlbnQpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBGcmVlbW9kZSBvciBzY3JvbGxDb250YWluZXI6XG5cbiAgICAgIC8vIElmIHdlIHJlY2VudGx5IHNuYXBwZWQgYWZ0ZXIgYSBtb21lbnR1bSBzY3JvbGwsIHRoZW4gaWdub3JlIHdoZWVsIGV2ZW50c1xuICAgICAgLy8gdG8gZ2l2ZSB0aW1lIGZvciB0aGUgZGVjZWxlcmF0aW9uIHRvIGZpbmlzaC4gU3RvcCBpZ25vcmluZyBhZnRlciA1MDAgbXNlY3NcbiAgICAgIC8vIG9yIGlmIGl0J3MgYSBuZXcgc2Nyb2xsIChsYXJnZXIgZGVsdGEgb3IgaW52ZXJzZSBzaWduIGFzIGxhc3QgZXZlbnQgYmVmb3JlXG4gICAgICAvLyBhbiBlbmQtb2YtbW9tZW50dW0gc25hcCkuXG4gICAgICBjb25zdCBuZXdFdmVudCA9IHtcbiAgICAgICAgdGltZTogbm93KCksXG4gICAgICAgIGRlbHRhOiBNYXRoLmFicyhkZWx0YSksXG4gICAgICAgIGRpcmVjdGlvbjogTWF0aC5zaWduKGRlbHRhKVxuICAgICAgfTtcbiAgICAgIGNvbnN0IGlnbm9yZVdoZWVsRXZlbnRzID0gbGFzdEV2ZW50QmVmb3JlU25hcCAmJiBuZXdFdmVudC50aW1lIDwgbGFzdEV2ZW50QmVmb3JlU25hcC50aW1lICsgNTAwICYmIG5ld0V2ZW50LmRlbHRhIDw9IGxhc3RFdmVudEJlZm9yZVNuYXAuZGVsdGEgJiYgbmV3RXZlbnQuZGlyZWN0aW9uID09PSBsYXN0RXZlbnRCZWZvcmVTbmFwLmRpcmVjdGlvbjtcbiAgICAgIGlmICghaWdub3JlV2hlZWxFdmVudHMpIHtcbiAgICAgICAgbGFzdEV2ZW50QmVmb3JlU25hcCA9IHVuZGVmaW5lZDtcbiAgICAgICAgbGV0IHBvc2l0aW9uID0gc3dpcGVyLmdldFRyYW5zbGF0ZSgpICsgZGVsdGEgKiBwYXJhbXMuc2Vuc2l0aXZpdHk7XG4gICAgICAgIGNvbnN0IHdhc0JlZ2lubmluZyA9IHN3aXBlci5pc0JlZ2lubmluZztcbiAgICAgICAgY29uc3Qgd2FzRW5kID0gc3dpcGVyLmlzRW5kO1xuICAgICAgICBpZiAocG9zaXRpb24gPj0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpKSBwb3NpdGlvbiA9IHN3aXBlci5taW5UcmFuc2xhdGUoKTtcbiAgICAgICAgaWYgKHBvc2l0aW9uIDw9IHN3aXBlci5tYXhUcmFuc2xhdGUoKSkgcG9zaXRpb24gPSBzd2lwZXIubWF4VHJhbnNsYXRlKCk7XG4gICAgICAgIHN3aXBlci5zZXRUcmFuc2l0aW9uKDApO1xuICAgICAgICBzd2lwZXIuc2V0VHJhbnNsYXRlKHBvc2l0aW9uKTtcbiAgICAgICAgc3dpcGVyLnVwZGF0ZVByb2dyZXNzKCk7XG4gICAgICAgIHN3aXBlci51cGRhdGVBY3RpdmVJbmRleCgpO1xuICAgICAgICBzd2lwZXIudXBkYXRlU2xpZGVzQ2xhc3NlcygpO1xuICAgICAgICBpZiAoIXdhc0JlZ2lubmluZyAmJiBzd2lwZXIuaXNCZWdpbm5pbmcgfHwgIXdhc0VuZCAmJiBzd2lwZXIuaXNFbmQpIHtcbiAgICAgICAgICBzd2lwZXIudXBkYXRlU2xpZGVzQ2xhc3NlcygpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzd2lwZXIucGFyYW1zLmxvb3ApIHtcbiAgICAgICAgICBzd2lwZXIubG9vcEZpeCh7XG4gICAgICAgICAgICBkaXJlY3Rpb246IG5ld0V2ZW50LmRpcmVjdGlvbiA8IDAgPyAnbmV4dCcgOiAncHJldicsXG4gICAgICAgICAgICBieU1vdXNld2hlZWw6IHRydWVcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc3dpcGVyLnBhcmFtcy5mcmVlTW9kZS5zdGlja3kpIHtcbiAgICAgICAgICAvLyBXaGVuIHdoZWVsIHNjcm9sbGluZyBzdGFydHMgd2l0aCBzdGlja3kgKGFrYSBzbmFwKSBlbmFibGVkLCB0aGVuIGRldGVjdFxuICAgICAgICAgIC8vIHRoZSBlbmQgb2YgYSBtb21lbnR1bSBzY3JvbGwgYnkgc3RvcmluZyByZWNlbnQgKE49MTU/KSB3aGVlbCBldmVudHMuXG4gICAgICAgICAgLy8gMS4gZG8gYWxsIE4gZXZlbnRzIGhhdmUgZGVjcmVhc2luZyBvciBzYW1lIChhYnNvbHV0ZSB2YWx1ZSkgZGVsdGE/XG4gICAgICAgICAgLy8gMi4gZGlkIGFsbCBOIGV2ZW50cyBhcnJpdmUgaW4gdGhlIGxhc3QgTSAoTT01MDA/KSBtc2Vjcz9cbiAgICAgICAgICAvLyAzLiBkb2VzIHRoZSBlYXJsaWVzdCBldmVudCBoYXZlIGFuIChhYnNvbHV0ZSB2YWx1ZSkgZGVsdGEgdGhhdCdzXG4gICAgICAgICAgLy8gICAgYXQgbGVhc3QgUCAoUD0xPykgbGFyZ2VyIHRoYW4gdGhlIG1vc3QgcmVjZW50IGV2ZW50J3MgZGVsdGE/XG4gICAgICAgICAgLy8gNC4gZG9lcyB0aGUgbGF0ZXN0IGV2ZW50IGhhdmUgYSBkZWx0YSB0aGF0J3Mgc21hbGxlciB0aGFuIFEgKFE9Nj8pIHBpeGVscz9cbiAgICAgICAgICAvLyBJZiAxLTQgYXJlIFwieWVzXCIgdGhlbiB3ZSdyZSBuZWFyIHRoZSBlbmQgb2YgYSBtb21lbnR1bSBzY3JvbGwgZGVjZWxlcmF0aW9uLlxuICAgICAgICAgIC8vIFNuYXAgaW1tZWRpYXRlbHkgYW5kIGlnbm9yZSByZW1haW5pbmcgd2hlZWwgZXZlbnRzIGluIHRoaXMgc2Nyb2xsLlxuICAgICAgICAgIC8vIFNlZSBjb21tZW50IGFib3ZlIGZvciBcInJlbWFpbmluZyB3aGVlbCBldmVudHMgaW4gdGhpcyBzY3JvbGxcIiBkZXRlcm1pbmF0aW9uLlxuICAgICAgICAgIC8vIElmIDEtNCBhcmVuJ3Qgc2F0aXNmaWVkLCB0aGVuIHdhaXQgdG8gc25hcCB1bnRpbCA1MDBtcyBhZnRlciB0aGUgbGFzdCBldmVudC5cbiAgICAgICAgICBjbGVhclRpbWVvdXQodGltZW91dCk7XG4gICAgICAgICAgdGltZW91dCA9IHVuZGVmaW5lZDtcbiAgICAgICAgICBpZiAocmVjZW50V2hlZWxFdmVudHMubGVuZ3RoID49IDE1KSB7XG4gICAgICAgICAgICByZWNlbnRXaGVlbEV2ZW50cy5zaGlmdCgpOyAvLyBvbmx5IHN0b3JlIHRoZSBsYXN0IE4gZXZlbnRzXG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29uc3QgcHJldkV2ZW50ID0gcmVjZW50V2hlZWxFdmVudHMubGVuZ3RoID8gcmVjZW50V2hlZWxFdmVudHNbcmVjZW50V2hlZWxFdmVudHMubGVuZ3RoIC0gMV0gOiB1bmRlZmluZWQ7XG4gICAgICAgICAgY29uc3QgZmlyc3RFdmVudCA9IHJlY2VudFdoZWVsRXZlbnRzWzBdO1xuICAgICAgICAgIHJlY2VudFdoZWVsRXZlbnRzLnB1c2gobmV3RXZlbnQpO1xuICAgICAgICAgIGlmIChwcmV2RXZlbnQgJiYgKG5ld0V2ZW50LmRlbHRhID4gcHJldkV2ZW50LmRlbHRhIHx8IG5ld0V2ZW50LmRpcmVjdGlvbiAhPT0gcHJldkV2ZW50LmRpcmVjdGlvbikpIHtcbiAgICAgICAgICAgIC8vIEluY3JlYXNpbmcgb3IgcmV2ZXJzZS1zaWduIGRlbHRhIG1lYW5zIHRoZSB1c2VyIHN0YXJ0ZWQgc2Nyb2xsaW5nIGFnYWluLiBDbGVhciB0aGUgd2hlZWwgZXZlbnQgbG9nLlxuICAgICAgICAgICAgcmVjZW50V2hlZWxFdmVudHMuc3BsaWNlKDApO1xuICAgICAgICAgIH0gZWxzZSBpZiAocmVjZW50V2hlZWxFdmVudHMubGVuZ3RoID49IDE1ICYmIG5ld0V2ZW50LnRpbWUgLSBmaXJzdEV2ZW50LnRpbWUgPCA1MDAgJiYgZmlyc3RFdmVudC5kZWx0YSAtIG5ld0V2ZW50LmRlbHRhID49IDEgJiYgbmV3RXZlbnQuZGVsdGEgPD0gNikge1xuICAgICAgICAgICAgLy8gV2UncmUgYXQgdGhlIGVuZCBvZiB0aGUgZGVjZWxlcmF0aW9uIG9mIGEgbW9tZW50dW0gc2Nyb2xsLCBzbyB0aGVyZSdzIG5vIG5lZWRcbiAgICAgICAgICAgIC8vIHRvIHdhaXQgZm9yIG1vcmUgZXZlbnRzLiBTbmFwIEFTQVAgb24gdGhlIG5leHQgdGljay5cbiAgICAgICAgICAgIC8vIEFsc28sIGJlY2F1c2UgdGhlcmUncyBzb21lIHJlbWFpbmluZyBtb21lbnR1bSB3ZSdsbCBiaWFzIHRoZSBzbmFwIGluIHRoZVxuICAgICAgICAgICAgLy8gZGlyZWN0aW9uIG9mIHRoZSBvbmdvaW5nIHNjcm9sbCBiZWNhdXNlIGl0J3MgYmV0dGVyIFVYIGZvciB0aGUgc2Nyb2xsIHRvIHNuYXBcbiAgICAgICAgICAgIC8vIGluIHRoZSBzYW1lIGRpcmVjdGlvbiBhcyB0aGUgc2Nyb2xsIGluc3RlYWQgb2YgcmV2ZXJzaW5nIHRvIHNuYXAuICBUaGVyZWZvcmUsXG4gICAgICAgICAgICAvLyBpZiBpdCdzIGFscmVhZHkgc2Nyb2xsZWQgbW9yZSB0aGFuIDIwJSBpbiB0aGUgY3VycmVudCBkaXJlY3Rpb24sIGtlZXAgZ29pbmcuXG4gICAgICAgICAgICBjb25zdCBzbmFwVG9UaHJlc2hvbGQgPSBkZWx0YSA+IDAgPyAwLjggOiAwLjI7XG4gICAgICAgICAgICBsYXN0RXZlbnRCZWZvcmVTbmFwID0gbmV3RXZlbnQ7XG4gICAgICAgICAgICByZWNlbnRXaGVlbEV2ZW50cy5zcGxpY2UoMCk7XG4gICAgICAgICAgICB0aW1lb3V0ID0gbmV4dFRpY2soKCkgPT4ge1xuICAgICAgICAgICAgICBzd2lwZXIuc2xpZGVUb0Nsb3Nlc3Qoc3dpcGVyLnBhcmFtcy5zcGVlZCwgdHJ1ZSwgdW5kZWZpbmVkLCBzbmFwVG9UaHJlc2hvbGQpO1xuICAgICAgICAgICAgfSwgMCk7IC8vIG5vIGRlbGF5OyBtb3ZlIG9uIG5leHQgdGlja1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICghdGltZW91dCkge1xuICAgICAgICAgICAgLy8gaWYgd2UgZ2V0IGhlcmUsIHRoZW4gd2UgaGF2ZW4ndCBkZXRlY3RlZCB0aGUgZW5kIG9mIGEgbW9tZW50dW0gc2Nyb2xsLCBzb1xuICAgICAgICAgICAgLy8gd2UnbGwgY29uc2lkZXIgYSBzY3JvbGwgXCJjb21wbGV0ZVwiIHdoZW4gdGhlcmUgaGF2ZW4ndCBiZWVuIGFueSB3aGVlbCBldmVudHNcbiAgICAgICAgICAgIC8vIGZvciA1MDBtcy5cbiAgICAgICAgICAgIHRpbWVvdXQgPSBuZXh0VGljaygoKSA9PiB7XG4gICAgICAgICAgICAgIGNvbnN0IHNuYXBUb1RocmVzaG9sZCA9IDAuNTtcbiAgICAgICAgICAgICAgbGFzdEV2ZW50QmVmb3JlU25hcCA9IG5ld0V2ZW50O1xuICAgICAgICAgICAgICByZWNlbnRXaGVlbEV2ZW50cy5zcGxpY2UoMCk7XG4gICAgICAgICAgICAgIHN3aXBlci5zbGlkZVRvQ2xvc2VzdChzd2lwZXIucGFyYW1zLnNwZWVkLCB0cnVlLCB1bmRlZmluZWQsIHNuYXBUb1RocmVzaG9sZCk7XG4gICAgICAgICAgICB9LCA1MDApO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEVtaXQgZXZlbnRcbiAgICAgICAgaWYgKCFpZ25vcmVXaGVlbEV2ZW50cykgZW1pdCgnc2Nyb2xsJywgZSk7XG5cbiAgICAgICAgLy8gU3RvcCBhdXRvcGxheVxuICAgICAgICBpZiAoc3dpcGVyLnBhcmFtcy5hdXRvcGxheSAmJiBzd2lwZXIucGFyYW1zLmF1dG9wbGF5RGlzYWJsZU9uSW50ZXJhY3Rpb24pIHN3aXBlci5hdXRvcGxheS5zdG9wKCk7XG4gICAgICAgIC8vIFJldHVybiBwYWdlIHNjcm9sbCBvbiBlZGdlIHBvc2l0aW9uc1xuICAgICAgICBpZiAocGFyYW1zLnJlbGVhc2VPbkVkZ2VzICYmIChwb3NpdGlvbiA9PT0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpIHx8IHBvc2l0aW9uID09PSBzd2lwZXIubWF4VHJhbnNsYXRlKCkpKSB7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGUucHJldmVudERlZmF1bHQpIGUucHJldmVudERlZmF1bHQoKTtlbHNlIGUucmV0dXJuVmFsdWUgPSBmYWxzZTtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgZnVuY3Rpb24gZXZlbnRzKG1ldGhvZCkge1xuICAgIGxldCB0YXJnZXRFbCA9IHN3aXBlci5lbDtcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5tb3VzZXdoZWVsLmV2ZW50c1RhcmdldCAhPT0gJ2NvbnRhaW5lcicpIHtcbiAgICAgIHRhcmdldEVsID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcihzd2lwZXIucGFyYW1zLm1vdXNld2hlZWwuZXZlbnRzVGFyZ2V0KTtcbiAgICB9XG4gICAgdGFyZ2V0RWxbbWV0aG9kXSgnbW91c2VlbnRlcicsIGhhbmRsZU1vdXNlRW50ZXIpO1xuICAgIHRhcmdldEVsW21ldGhvZF0oJ21vdXNlbGVhdmUnLCBoYW5kbGVNb3VzZUxlYXZlKTtcbiAgICB0YXJnZXRFbFttZXRob2RdKCd3aGVlbCcsIGhhbmRsZSk7XG4gIH1cbiAgZnVuY3Rpb24gZW5hYmxlKCkge1xuICAgIGlmIChzd2lwZXIucGFyYW1zLmNzc01vZGUpIHtcbiAgICAgIHN3aXBlci53cmFwcGVyRWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignd2hlZWwnLCBoYW5kbGUpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGlmIChzd2lwZXIubW91c2V3aGVlbC5lbmFibGVkKSByZXR1cm4gZmFsc2U7XG4gICAgZXZlbnRzKCdhZGRFdmVudExpc3RlbmVyJyk7XG4gICAgc3dpcGVyLm1vdXNld2hlZWwuZW5hYmxlZCA9IHRydWU7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgZnVuY3Rpb24gZGlzYWJsZSgpIHtcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5jc3NNb2RlKSB7XG4gICAgICBzd2lwZXIud3JhcHBlckVsLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnQsIGhhbmRsZSk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKCFzd2lwZXIubW91c2V3aGVlbC5lbmFibGVkKSByZXR1cm4gZmFsc2U7XG4gICAgZXZlbnRzKCdyZW1vdmVFdmVudExpc3RlbmVyJyk7XG4gICAgc3dpcGVyLm1vdXNld2hlZWwuZW5hYmxlZCA9IGZhbHNlO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIG9uKCdpbml0JywgKCkgPT4ge1xuICAgIGlmICghc3dpcGVyLnBhcmFtcy5tb3VzZXdoZWVsLmVuYWJsZWQgJiYgc3dpcGVyLnBhcmFtcy5jc3NNb2RlKSB7XG4gICAgICBkaXNhYmxlKCk7XG4gICAgfVxuICAgIGlmIChzd2lwZXIucGFyYW1zLm1vdXNld2hlZWwuZW5hYmxlZCkgZW5hYmxlKCk7XG4gIH0pO1xuICBvbignZGVzdHJveScsICgpID0+IHtcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5jc3NNb2RlKSB7XG4gICAgICBlbmFibGUoKTtcbiAgICB9XG4gICAgaWYgKHN3aXBlci5tb3VzZXdoZWVsLmVuYWJsZWQpIGRpc2FibGUoKTtcbiAgfSk7XG4gIE9iamVjdC5hc3NpZ24oc3dpcGVyLm1vdXNld2hlZWwsIHtcbiAgICBlbmFibGUsXG4gICAgZGlzYWJsZVxuICB9KTtcbn1cblxuZXhwb3J0IHsgTW91c2V3aGVlbCBhcyBkZWZhdWx0IH07XG4iLCJpbXBvcnQgeyBlIGFzIGVsZW1lbnRDaGlsZHJlbiwgYyBhcyBjcmVhdGVFbGVtZW50IH0gZnJvbSAnLi91dGlscy5tanMnO1xuXG5mdW5jdGlvbiBjcmVhdGVFbGVtZW50SWZOb3REZWZpbmVkKHN3aXBlciwgb3JpZ2luYWxQYXJhbXMsIHBhcmFtcywgY2hlY2tQcm9wcykge1xuICBpZiAoc3dpcGVyLnBhcmFtcy5jcmVhdGVFbGVtZW50cykge1xuICAgIE9iamVjdC5rZXlzKGNoZWNrUHJvcHMpLmZvckVhY2goa2V5ID0+IHtcbiAgICAgIGlmICghcGFyYW1zW2tleV0gJiYgcGFyYW1zLmF1dG8gPT09IHRydWUpIHtcbiAgICAgICAgbGV0IGVsZW1lbnQgPSBlbGVtZW50Q2hpbGRyZW4oc3dpcGVyLmVsLCBgLiR7Y2hlY2tQcm9wc1trZXldfWApWzBdO1xuICAgICAgICBpZiAoIWVsZW1lbnQpIHtcbiAgICAgICAgICBlbGVtZW50ID0gY3JlYXRlRWxlbWVudCgnZGl2JywgY2hlY2tQcm9wc1trZXldKTtcbiAgICAgICAgICBlbGVtZW50LmNsYXNzTmFtZSA9IGNoZWNrUHJvcHNba2V5XTtcbiAgICAgICAgICBzd2lwZXIuZWwuYXBwZW5kKGVsZW1lbnQpO1xuICAgICAgICB9XG4gICAgICAgIHBhcmFtc1trZXldID0gZWxlbWVudDtcbiAgICAgICAgb3JpZ2luYWxQYXJhbXNba2V5XSA9IGVsZW1lbnQ7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIHBhcmFtcztcbn1cblxuZXhwb3J0IHsgY3JlYXRlRWxlbWVudElmTm90RGVmaW5lZCBhcyBjIH07XG4iLCJpbXBvcnQgeyBjIGFzIGNyZWF0ZUVsZW1lbnRJZk5vdERlZmluZWQgfSBmcm9tICcuLi9zaGFyZWQvY3JlYXRlLWVsZW1lbnQtaWYtbm90LWRlZmluZWQubWpzJztcbmltcG9ydCB7IG0gYXMgbWFrZUVsZW1lbnRzQXJyYXkgfSBmcm9tICcuLi9zaGFyZWQvdXRpbHMubWpzJztcblxuZnVuY3Rpb24gTmF2aWdhdGlvbihfcmVmKSB7XG4gIGxldCB7XG4gICAgc3dpcGVyLFxuICAgIGV4dGVuZFBhcmFtcyxcbiAgICBvbixcbiAgICBlbWl0XG4gIH0gPSBfcmVmO1xuICBleHRlbmRQYXJhbXMoe1xuICAgIG5hdmlnYXRpb246IHtcbiAgICAgIG5leHRFbDogbnVsbCxcbiAgICAgIHByZXZFbDogbnVsbCxcbiAgICAgIGhpZGVPbkNsaWNrOiBmYWxzZSxcbiAgICAgIGRpc2FibGVkQ2xhc3M6ICdzd2lwZXItYnV0dG9uLWRpc2FibGVkJyxcbiAgICAgIGhpZGRlbkNsYXNzOiAnc3dpcGVyLWJ1dHRvbi1oaWRkZW4nLFxuICAgICAgbG9ja0NsYXNzOiAnc3dpcGVyLWJ1dHRvbi1sb2NrJyxcbiAgICAgIG5hdmlnYXRpb25EaXNhYmxlZENsYXNzOiAnc3dpcGVyLW5hdmlnYXRpb24tZGlzYWJsZWQnXG4gICAgfVxuICB9KTtcbiAgc3dpcGVyLm5hdmlnYXRpb24gPSB7XG4gICAgbmV4dEVsOiBudWxsLFxuICAgIHByZXZFbDogbnVsbFxuICB9O1xuICBmdW5jdGlvbiBnZXRFbChlbCkge1xuICAgIGxldCByZXM7XG4gICAgaWYgKGVsICYmIHR5cGVvZiBlbCA9PT0gJ3N0cmluZycgJiYgc3dpcGVyLmlzRWxlbWVudCkge1xuICAgICAgcmVzID0gc3dpcGVyLmVsLnF1ZXJ5U2VsZWN0b3IoZWwpO1xuICAgICAgaWYgKHJlcykgcmV0dXJuIHJlcztcbiAgICB9XG4gICAgaWYgKGVsKSB7XG4gICAgICBpZiAodHlwZW9mIGVsID09PSAnc3RyaW5nJykgcmVzID0gWy4uLmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoZWwpXTtcbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLnVuaXF1ZU5hdkVsZW1lbnRzICYmIHR5cGVvZiBlbCA9PT0gJ3N0cmluZycgJiYgcmVzICYmIHJlcy5sZW5ndGggPiAxICYmIHN3aXBlci5lbC5xdWVyeVNlbGVjdG9yQWxsKGVsKS5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgcmVzID0gc3dpcGVyLmVsLnF1ZXJ5U2VsZWN0b3IoZWwpO1xuICAgICAgfSBlbHNlIGlmIChyZXMgJiYgcmVzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICByZXMgPSByZXNbMF07XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChlbCAmJiAhcmVzKSByZXR1cm4gZWw7XG4gICAgLy8gaWYgKEFycmF5LmlzQXJyYXkocmVzKSAmJiByZXMubGVuZ3RoID09PSAxKSByZXMgPSByZXNbMF07XG4gICAgcmV0dXJuIHJlcztcbiAgfVxuICBmdW5jdGlvbiB0b2dnbGVFbChlbCwgZGlzYWJsZWQpIHtcbiAgICBjb25zdCBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLm5hdmlnYXRpb247XG4gICAgZWwgPSBtYWtlRWxlbWVudHNBcnJheShlbCk7XG4gICAgZWwuZm9yRWFjaChzdWJFbCA9PiB7XG4gICAgICBpZiAoc3ViRWwpIHtcbiAgICAgICAgc3ViRWwuY2xhc3NMaXN0W2Rpc2FibGVkID8gJ2FkZCcgOiAncmVtb3ZlJ10oLi4ucGFyYW1zLmRpc2FibGVkQ2xhc3Muc3BsaXQoJyAnKSk7XG4gICAgICAgIGlmIChzdWJFbC50YWdOYW1lID09PSAnQlVUVE9OJykgc3ViRWwuZGlzYWJsZWQgPSBkaXNhYmxlZDtcbiAgICAgICAgaWYgKHN3aXBlci5wYXJhbXMud2F0Y2hPdmVyZmxvdyAmJiBzd2lwZXIuZW5hYmxlZCkge1xuICAgICAgICAgIHN1YkVsLmNsYXNzTGlzdFtzd2lwZXIuaXNMb2NrZWQgPyAnYWRkJyA6ICdyZW1vdmUnXShwYXJhbXMubG9ja0NsYXNzKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICB9XG4gIGZ1bmN0aW9uIHVwZGF0ZSgpIHtcbiAgICAvLyBVcGRhdGUgTmF2aWdhdGlvbiBCdXR0b25zXG4gICAgY29uc3Qge1xuICAgICAgbmV4dEVsLFxuICAgICAgcHJldkVsXG4gICAgfSA9IHN3aXBlci5uYXZpZ2F0aW9uO1xuICAgIGlmIChzd2lwZXIucGFyYW1zLmxvb3ApIHtcbiAgICAgIHRvZ2dsZUVsKHByZXZFbCwgZmFsc2UpO1xuICAgICAgdG9nZ2xlRWwobmV4dEVsLCBmYWxzZSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRvZ2dsZUVsKHByZXZFbCwgc3dpcGVyLmlzQmVnaW5uaW5nICYmICFzd2lwZXIucGFyYW1zLnJld2luZCk7XG4gICAgdG9nZ2xlRWwobmV4dEVsLCBzd2lwZXIuaXNFbmQgJiYgIXN3aXBlci5wYXJhbXMucmV3aW5kKTtcbiAgfVxuICBmdW5jdGlvbiBvblByZXZDbGljayhlKSB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGlmIChzd2lwZXIuaXNCZWdpbm5pbmcgJiYgIXN3aXBlci5wYXJhbXMubG9vcCAmJiAhc3dpcGVyLnBhcmFtcy5yZXdpbmQpIHJldHVybjtcbiAgICBzd2lwZXIuc2xpZGVQcmV2KCk7XG4gICAgZW1pdCgnbmF2aWdhdGlvblByZXYnKTtcbiAgfVxuICBmdW5jdGlvbiBvbk5leHRDbGljayhlKSB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGlmIChzd2lwZXIuaXNFbmQgJiYgIXN3aXBlci5wYXJhbXMubG9vcCAmJiAhc3dpcGVyLnBhcmFtcy5yZXdpbmQpIHJldHVybjtcbiAgICBzd2lwZXIuc2xpZGVOZXh0KCk7XG4gICAgZW1pdCgnbmF2aWdhdGlvbk5leHQnKTtcbiAgfVxuICBmdW5jdGlvbiBpbml0KCkge1xuICAgIGNvbnN0IHBhcmFtcyA9IHN3aXBlci5wYXJhbXMubmF2aWdhdGlvbjtcbiAgICBzd2lwZXIucGFyYW1zLm5hdmlnYXRpb24gPSBjcmVhdGVFbGVtZW50SWZOb3REZWZpbmVkKHN3aXBlciwgc3dpcGVyLm9yaWdpbmFsUGFyYW1zLm5hdmlnYXRpb24sIHN3aXBlci5wYXJhbXMubmF2aWdhdGlvbiwge1xuICAgICAgbmV4dEVsOiAnc3dpcGVyLWJ1dHRvbi1uZXh0JyxcbiAgICAgIHByZXZFbDogJ3N3aXBlci1idXR0b24tcHJldidcbiAgICB9KTtcbiAgICBpZiAoIShwYXJhbXMubmV4dEVsIHx8IHBhcmFtcy5wcmV2RWwpKSByZXR1cm47XG4gICAgbGV0IG5leHRFbCA9IGdldEVsKHBhcmFtcy5uZXh0RWwpO1xuICAgIGxldCBwcmV2RWwgPSBnZXRFbChwYXJhbXMucHJldkVsKTtcbiAgICBPYmplY3QuYXNzaWduKHN3aXBlci5uYXZpZ2F0aW9uLCB7XG4gICAgICBuZXh0RWwsXG4gICAgICBwcmV2RWxcbiAgICB9KTtcbiAgICBuZXh0RWwgPSBtYWtlRWxlbWVudHNBcnJheShuZXh0RWwpO1xuICAgIHByZXZFbCA9IG1ha2VFbGVtZW50c0FycmF5KHByZXZFbCk7XG4gICAgY29uc3QgaW5pdEJ1dHRvbiA9IChlbCwgZGlyKSA9PiB7XG4gICAgICBpZiAoZWwpIHtcbiAgICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBkaXIgPT09ICduZXh0JyA/IG9uTmV4dENsaWNrIDogb25QcmV2Q2xpY2spO1xuICAgICAgfVxuICAgICAgaWYgKCFzd2lwZXIuZW5hYmxlZCAmJiBlbCkge1xuICAgICAgICBlbC5jbGFzc0xpc3QuYWRkKC4uLnBhcmFtcy5sb2NrQ2xhc3Muc3BsaXQoJyAnKSk7XG4gICAgICB9XG4gICAgfTtcbiAgICBuZXh0RWwuZm9yRWFjaChlbCA9PiBpbml0QnV0dG9uKGVsLCAnbmV4dCcpKTtcbiAgICBwcmV2RWwuZm9yRWFjaChlbCA9PiBpbml0QnV0dG9uKGVsLCAncHJldicpKTtcbiAgfVxuICBmdW5jdGlvbiBkZXN0cm95KCkge1xuICAgIGxldCB7XG4gICAgICBuZXh0RWwsXG4gICAgICBwcmV2RWxcbiAgICB9ID0gc3dpcGVyLm5hdmlnYXRpb247XG4gICAgbmV4dEVsID0gbWFrZUVsZW1lbnRzQXJyYXkobmV4dEVsKTtcbiAgICBwcmV2RWwgPSBtYWtlRWxlbWVudHNBcnJheShwcmV2RWwpO1xuICAgIGNvbnN0IGRlc3Ryb3lCdXR0b24gPSAoZWwsIGRpcikgPT4ge1xuICAgICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2xpY2snLCBkaXIgPT09ICduZXh0JyA/IG9uTmV4dENsaWNrIDogb25QcmV2Q2xpY2spO1xuICAgICAgZWwuY2xhc3NMaXN0LnJlbW92ZSguLi5zd2lwZXIucGFyYW1zLm5hdmlnYXRpb24uZGlzYWJsZWRDbGFzcy5zcGxpdCgnICcpKTtcbiAgICB9O1xuICAgIG5leHRFbC5mb3JFYWNoKGVsID0+IGRlc3Ryb3lCdXR0b24oZWwsICduZXh0JykpO1xuICAgIHByZXZFbC5mb3JFYWNoKGVsID0+IGRlc3Ryb3lCdXR0b24oZWwsICdwcmV2JykpO1xuICB9XG4gIG9uKCdpbml0JywgKCkgPT4ge1xuICAgIGlmIChzd2lwZXIucGFyYW1zLm5hdmlnYXRpb24uZW5hYmxlZCA9PT0gZmFsc2UpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgICAgZGlzYWJsZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpbml0KCk7XG4gICAgICB1cGRhdGUoKTtcbiAgICB9XG4gIH0pO1xuICBvbigndG9FZGdlIGZyb21FZGdlIGxvY2sgdW5sb2NrJywgKCkgPT4ge1xuICAgIHVwZGF0ZSgpO1xuICB9KTtcbiAgb24oJ2Rlc3Ryb3knLCAoKSA9PiB7XG4gICAgZGVzdHJveSgpO1xuICB9KTtcbiAgb24oJ2VuYWJsZSBkaXNhYmxlJywgKCkgPT4ge1xuICAgIGxldCB7XG4gICAgICBuZXh0RWwsXG4gICAgICBwcmV2RWxcbiAgICB9ID0gc3dpcGVyLm5hdmlnYXRpb247XG4gICAgbmV4dEVsID0gbWFrZUVsZW1lbnRzQXJyYXkobmV4dEVsKTtcbiAgICBwcmV2RWwgPSBtYWtlRWxlbWVudHNBcnJheShwcmV2RWwpO1xuICAgIGlmIChzd2lwZXIuZW5hYmxlZCkge1xuICAgICAgdXBkYXRlKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIFsuLi5uZXh0RWwsIC4uLnByZXZFbF0uZmlsdGVyKGVsID0+ICEhZWwpLmZvckVhY2goZWwgPT4gZWwuY2xhc3NMaXN0LmFkZChzd2lwZXIucGFyYW1zLm5hdmlnYXRpb24ubG9ja0NsYXNzKSk7XG4gIH0pO1xuICBvbignY2xpY2snLCAoX3MsIGUpID0+IHtcbiAgICBsZXQge1xuICAgICAgbmV4dEVsLFxuICAgICAgcHJldkVsXG4gICAgfSA9IHN3aXBlci5uYXZpZ2F0aW9uO1xuICAgIG5leHRFbCA9IG1ha2VFbGVtZW50c0FycmF5KG5leHRFbCk7XG4gICAgcHJldkVsID0gbWFrZUVsZW1lbnRzQXJyYXkocHJldkVsKTtcbiAgICBjb25zdCB0YXJnZXRFbCA9IGUudGFyZ2V0O1xuICAgIGxldCB0YXJnZXRJc0J1dHRvbiA9IHByZXZFbC5pbmNsdWRlcyh0YXJnZXRFbCkgfHwgbmV4dEVsLmluY2x1ZGVzKHRhcmdldEVsKTtcbiAgICBpZiAoc3dpcGVyLmlzRWxlbWVudCAmJiAhdGFyZ2V0SXNCdXR0b24pIHtcbiAgICAgIGNvbnN0IHBhdGggPSBlLnBhdGggfHwgZS5jb21wb3NlZFBhdGggJiYgZS5jb21wb3NlZFBhdGgoKTtcbiAgICAgIGlmIChwYXRoKSB7XG4gICAgICAgIHRhcmdldElzQnV0dG9uID0gcGF0aC5maW5kKHBhdGhFbCA9PiBuZXh0RWwuaW5jbHVkZXMocGF0aEVsKSB8fCBwcmV2RWwuaW5jbHVkZXMocGF0aEVsKSk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChzd2lwZXIucGFyYW1zLm5hdmlnYXRpb24uaGlkZU9uQ2xpY2sgJiYgIXRhcmdldElzQnV0dG9uKSB7XG4gICAgICBpZiAoc3dpcGVyLnBhZ2luYXRpb24gJiYgc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uICYmIHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbi5jbGlja2FibGUgJiYgKHN3aXBlci5wYWdpbmF0aW9uLmVsID09PSB0YXJnZXRFbCB8fCBzd2lwZXIucGFnaW5hdGlvbi5lbC5jb250YWlucyh0YXJnZXRFbCkpKSByZXR1cm47XG4gICAgICBsZXQgaXNIaWRkZW47XG4gICAgICBpZiAobmV4dEVsLmxlbmd0aCkge1xuICAgICAgICBpc0hpZGRlbiA9IG5leHRFbFswXS5jbGFzc0xpc3QuY29udGFpbnMoc3dpcGVyLnBhcmFtcy5uYXZpZ2F0aW9uLmhpZGRlbkNsYXNzKTtcbiAgICAgIH0gZWxzZSBpZiAocHJldkVsLmxlbmd0aCkge1xuICAgICAgICBpc0hpZGRlbiA9IHByZXZFbFswXS5jbGFzc0xpc3QuY29udGFpbnMoc3dpcGVyLnBhcmFtcy5uYXZpZ2F0aW9uLmhpZGRlbkNsYXNzKTtcbiAgICAgIH1cbiAgICAgIGlmIChpc0hpZGRlbiA9PT0gdHJ1ZSkge1xuICAgICAgICBlbWl0KCduYXZpZ2F0aW9uU2hvdycpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZW1pdCgnbmF2aWdhdGlvbkhpZGUnKTtcbiAgICAgIH1cbiAgICAgIFsuLi5uZXh0RWwsIC4uLnByZXZFbF0uZmlsdGVyKGVsID0+ICEhZWwpLmZvckVhY2goZWwgPT4gZWwuY2xhc3NMaXN0LnRvZ2dsZShzd2lwZXIucGFyYW1zLm5hdmlnYXRpb24uaGlkZGVuQ2xhc3MpKTtcbiAgICB9XG4gIH0pO1xuICBjb25zdCBlbmFibGUgPSAoKSA9PiB7XG4gICAgc3dpcGVyLmVsLmNsYXNzTGlzdC5yZW1vdmUoLi4uc3dpcGVyLnBhcmFtcy5uYXZpZ2F0aW9uLm5hdmlnYXRpb25EaXNhYmxlZENsYXNzLnNwbGl0KCcgJykpO1xuICAgIGluaXQoKTtcbiAgICB1cGRhdGUoKTtcbiAgfTtcbiAgY29uc3QgZGlzYWJsZSA9ICgpID0+IHtcbiAgICBzd2lwZXIuZWwuY2xhc3NMaXN0LmFkZCguLi5zd2lwZXIucGFyYW1zLm5hdmlnYXRpb24ubmF2aWdhdGlvbkRpc2FibGVkQ2xhc3Muc3BsaXQoJyAnKSk7XG4gICAgZGVzdHJveSgpO1xuICB9O1xuICBPYmplY3QuYXNzaWduKHN3aXBlci5uYXZpZ2F0aW9uLCB7XG4gICAgZW5hYmxlLFxuICAgIGRpc2FibGUsXG4gICAgdXBkYXRlLFxuICAgIGluaXQsXG4gICAgZGVzdHJveVxuICB9KTtcbn1cblxuZXhwb3J0IHsgTmF2aWdhdGlvbiBhcyBkZWZhdWx0IH07XG4iLCJmdW5jdGlvbiBjbGFzc2VzVG9TZWxlY3RvcihjbGFzc2VzKSB7XG4gIGlmIChjbGFzc2VzID09PSB2b2lkIDApIHtcbiAgICBjbGFzc2VzID0gJyc7XG4gIH1cbiAgcmV0dXJuIGAuJHtjbGFzc2VzLnRyaW0oKS5yZXBsYWNlKC8oW1xcLjohK1xcL10pL2csICdcXFxcJDEnKSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gIC5yZXBsYWNlKC8gL2csICcuJyl9YDtcbn1cblxuZXhwb3J0IHsgY2xhc3Nlc1RvU2VsZWN0b3IgYXMgYyB9O1xuIiwiaW1wb3J0IHsgYyBhcyBjbGFzc2VzVG9TZWxlY3RvciB9IGZyb20gJy4uL3NoYXJlZC9jbGFzc2VzLXRvLXNlbGVjdG9yLm1qcyc7XG5pbXBvcnQgeyBjIGFzIGNyZWF0ZUVsZW1lbnRJZk5vdERlZmluZWQgfSBmcm9tICcuLi9zaGFyZWQvY3JlYXRlLWVsZW1lbnQtaWYtbm90LWRlZmluZWQubWpzJztcbmltcG9ydCB7IG0gYXMgbWFrZUVsZW1lbnRzQXJyYXksIGYgYXMgZWxlbWVudE91dGVyU2l6ZSwgaCBhcyBlbGVtZW50SW5kZXgsIGEgYXMgZWxlbWVudFBhcmVudHMgfSBmcm9tICcuLi9zaGFyZWQvdXRpbHMubWpzJztcblxuZnVuY3Rpb24gUGFnaW5hdGlvbihfcmVmKSB7XG4gIGxldCB7XG4gICAgc3dpcGVyLFxuICAgIGV4dGVuZFBhcmFtcyxcbiAgICBvbixcbiAgICBlbWl0XG4gIH0gPSBfcmVmO1xuICBjb25zdCBwZnggPSAnc3dpcGVyLXBhZ2luYXRpb24nO1xuICBleHRlbmRQYXJhbXMoe1xuICAgIHBhZ2luYXRpb246IHtcbiAgICAgIGVsOiBudWxsLFxuICAgICAgYnVsbGV0RWxlbWVudDogJ3NwYW4nLFxuICAgICAgY2xpY2thYmxlOiBmYWxzZSxcbiAgICAgIGhpZGVPbkNsaWNrOiBmYWxzZSxcbiAgICAgIHJlbmRlckJ1bGxldDogbnVsbCxcbiAgICAgIHJlbmRlclByb2dyZXNzYmFyOiBudWxsLFxuICAgICAgcmVuZGVyRnJhY3Rpb246IG51bGwsXG4gICAgICByZW5kZXJDdXN0b206IG51bGwsXG4gICAgICBwcm9ncmVzc2Jhck9wcG9zaXRlOiBmYWxzZSxcbiAgICAgIHR5cGU6ICdidWxsZXRzJyxcbiAgICAgIC8vICdidWxsZXRzJyBvciAncHJvZ3Jlc3NiYXInIG9yICdmcmFjdGlvbicgb3IgJ2N1c3RvbSdcbiAgICAgIGR5bmFtaWNCdWxsZXRzOiBmYWxzZSxcbiAgICAgIGR5bmFtaWNNYWluQnVsbGV0czogMSxcbiAgICAgIGZvcm1hdEZyYWN0aW9uQ3VycmVudDogbnVtYmVyID0+IG51bWJlcixcbiAgICAgIGZvcm1hdEZyYWN0aW9uVG90YWw6IG51bWJlciA9PiBudW1iZXIsXG4gICAgICBidWxsZXRDbGFzczogYCR7cGZ4fS1idWxsZXRgLFxuICAgICAgYnVsbGV0QWN0aXZlQ2xhc3M6IGAke3BmeH0tYnVsbGV0LWFjdGl2ZWAsXG4gICAgICBtb2RpZmllckNsYXNzOiBgJHtwZnh9LWAsXG4gICAgICBjdXJyZW50Q2xhc3M6IGAke3BmeH0tY3VycmVudGAsXG4gICAgICB0b3RhbENsYXNzOiBgJHtwZnh9LXRvdGFsYCxcbiAgICAgIGhpZGRlbkNsYXNzOiBgJHtwZnh9LWhpZGRlbmAsXG4gICAgICBwcm9ncmVzc2JhckZpbGxDbGFzczogYCR7cGZ4fS1wcm9ncmVzc2Jhci1maWxsYCxcbiAgICAgIHByb2dyZXNzYmFyT3Bwb3NpdGVDbGFzczogYCR7cGZ4fS1wcm9ncmVzc2Jhci1vcHBvc2l0ZWAsXG4gICAgICBjbGlja2FibGVDbGFzczogYCR7cGZ4fS1jbGlja2FibGVgLFxuICAgICAgbG9ja0NsYXNzOiBgJHtwZnh9LWxvY2tgLFxuICAgICAgaG9yaXpvbnRhbENsYXNzOiBgJHtwZnh9LWhvcml6b250YWxgLFxuICAgICAgdmVydGljYWxDbGFzczogYCR7cGZ4fS12ZXJ0aWNhbGAsXG4gICAgICBwYWdpbmF0aW9uRGlzYWJsZWRDbGFzczogYCR7cGZ4fS1kaXNhYmxlZGBcbiAgICB9XG4gIH0pO1xuICBzd2lwZXIucGFnaW5hdGlvbiA9IHtcbiAgICBlbDogbnVsbCxcbiAgICBidWxsZXRzOiBbXVxuICB9O1xuICBsZXQgYnVsbGV0U2l6ZTtcbiAgbGV0IGR5bmFtaWNCdWxsZXRJbmRleCA9IDA7XG4gIGZ1bmN0aW9uIGlzUGFnaW5hdGlvbkRpc2FibGVkKCkge1xuICAgIHJldHVybiAhc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uLmVsIHx8ICFzd2lwZXIucGFnaW5hdGlvbi5lbCB8fCBBcnJheS5pc0FycmF5KHN3aXBlci5wYWdpbmF0aW9uLmVsKSAmJiBzd2lwZXIucGFnaW5hdGlvbi5lbC5sZW5ndGggPT09IDA7XG4gIH1cbiAgZnVuY3Rpb24gc2V0U2lkZUJ1bGxldHMoYnVsbGV0RWwsIHBvc2l0aW9uKSB7XG4gICAgY29uc3Qge1xuICAgICAgYnVsbGV0QWN0aXZlQ2xhc3NcbiAgICB9ID0gc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uO1xuICAgIGlmICghYnVsbGV0RWwpIHJldHVybjtcbiAgICBidWxsZXRFbCA9IGJ1bGxldEVsW2Ake3Bvc2l0aW9uID09PSAncHJldicgPyAncHJldmlvdXMnIDogJ25leHQnfUVsZW1lbnRTaWJsaW5nYF07XG4gICAgaWYgKGJ1bGxldEVsKSB7XG4gICAgICBidWxsZXRFbC5jbGFzc0xpc3QuYWRkKGAke2J1bGxldEFjdGl2ZUNsYXNzfS0ke3Bvc2l0aW9ufWApO1xuICAgICAgYnVsbGV0RWwgPSBidWxsZXRFbFtgJHtwb3NpdGlvbiA9PT0gJ3ByZXYnID8gJ3ByZXZpb3VzJyA6ICduZXh0J31FbGVtZW50U2libGluZ2BdO1xuICAgICAgaWYgKGJ1bGxldEVsKSB7XG4gICAgICAgIGJ1bGxldEVsLmNsYXNzTGlzdC5hZGQoYCR7YnVsbGV0QWN0aXZlQ2xhc3N9LSR7cG9zaXRpb259LSR7cG9zaXRpb259YCk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIG9uQnVsbGV0Q2xpY2soZSkge1xuICAgIGNvbnN0IGJ1bGxldEVsID0gZS50YXJnZXQuY2xvc2VzdChjbGFzc2VzVG9TZWxlY3Rvcihzd2lwZXIucGFyYW1zLnBhZ2luYXRpb24uYnVsbGV0Q2xhc3MpKTtcbiAgICBpZiAoIWJ1bGxldEVsKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICBjb25zdCBpbmRleCA9IGVsZW1lbnRJbmRleChidWxsZXRFbCkgKiBzd2lwZXIucGFyYW1zLnNsaWRlc1Blckdyb3VwO1xuICAgIGlmIChzd2lwZXIucGFyYW1zLmxvb3ApIHtcbiAgICAgIGlmIChzd2lwZXIucmVhbEluZGV4ID09PSBpbmRleCkgcmV0dXJuO1xuICAgICAgc3dpcGVyLnNsaWRlVG9Mb29wKGluZGV4KTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3dpcGVyLnNsaWRlVG8oaW5kZXgpO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiB1cGRhdGUoKSB7XG4gICAgLy8gUmVuZGVyIHx8IFVwZGF0ZSBQYWdpbmF0aW9uIGJ1bGxldHMvaXRlbXNcbiAgICBjb25zdCBydGwgPSBzd2lwZXIucnRsO1xuICAgIGNvbnN0IHBhcmFtcyA9IHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbjtcbiAgICBpZiAoaXNQYWdpbmF0aW9uRGlzYWJsZWQoKSkgcmV0dXJuO1xuICAgIGxldCBlbCA9IHN3aXBlci5wYWdpbmF0aW9uLmVsO1xuICAgIGVsID0gbWFrZUVsZW1lbnRzQXJyYXkoZWwpO1xuICAgIC8vIEN1cnJlbnQvVG90YWxcbiAgICBsZXQgY3VycmVudDtcbiAgICBsZXQgcHJldmlvdXNJbmRleDtcbiAgICBjb25zdCBzbGlkZXNMZW5ndGggPSBzd2lwZXIudmlydHVhbCAmJiBzd2lwZXIucGFyYW1zLnZpcnR1YWwuZW5hYmxlZCA/IHN3aXBlci52aXJ0dWFsLnNsaWRlcy5sZW5ndGggOiBzd2lwZXIuc2xpZGVzLmxlbmd0aDtcbiAgICBjb25zdCB0b3RhbCA9IHN3aXBlci5wYXJhbXMubG9vcCA/IE1hdGguY2VpbChzbGlkZXNMZW5ndGggLyBzd2lwZXIucGFyYW1zLnNsaWRlc1Blckdyb3VwKSA6IHN3aXBlci5zbmFwR3JpZC5sZW5ndGg7XG4gICAgaWYgKHN3aXBlci5wYXJhbXMubG9vcCkge1xuICAgICAgcHJldmlvdXNJbmRleCA9IHN3aXBlci5wcmV2aW91c1JlYWxJbmRleCB8fCAwO1xuICAgICAgY3VycmVudCA9IHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyR3JvdXAgPiAxID8gTWF0aC5mbG9vcihzd2lwZXIucmVhbEluZGV4IC8gc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJHcm91cCkgOiBzd2lwZXIucmVhbEluZGV4O1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIHN3aXBlci5zbmFwSW5kZXggIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBjdXJyZW50ID0gc3dpcGVyLnNuYXBJbmRleDtcbiAgICAgIHByZXZpb3VzSW5kZXggPSBzd2lwZXIucHJldmlvdXNTbmFwSW5kZXg7XG4gICAgfSBlbHNlIHtcbiAgICAgIHByZXZpb3VzSW5kZXggPSBzd2lwZXIucHJldmlvdXNJbmRleCB8fCAwO1xuICAgICAgY3VycmVudCA9IHN3aXBlci5hY3RpdmVJbmRleCB8fCAwO1xuICAgIH1cbiAgICAvLyBUeXBlc1xuICAgIGlmIChwYXJhbXMudHlwZSA9PT0gJ2J1bGxldHMnICYmIHN3aXBlci5wYWdpbmF0aW9uLmJ1bGxldHMgJiYgc3dpcGVyLnBhZ2luYXRpb24uYnVsbGV0cy5sZW5ndGggPiAwKSB7XG4gICAgICBjb25zdCBidWxsZXRzID0gc3dpcGVyLnBhZ2luYXRpb24uYnVsbGV0cztcbiAgICAgIGxldCBmaXJzdEluZGV4O1xuICAgICAgbGV0IGxhc3RJbmRleDtcbiAgICAgIGxldCBtaWRJbmRleDtcbiAgICAgIGlmIChwYXJhbXMuZHluYW1pY0J1bGxldHMpIHtcbiAgICAgICAgYnVsbGV0U2l6ZSA9IGVsZW1lbnRPdXRlclNpemUoYnVsbGV0c1swXSwgc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gJ3dpZHRoJyA6ICdoZWlnaHQnLCB0cnVlKTtcbiAgICAgICAgZWwuZm9yRWFjaChzdWJFbCA9PiB7XG4gICAgICAgICAgc3ViRWwuc3R5bGVbc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gJ3dpZHRoJyA6ICdoZWlnaHQnXSA9IGAke2J1bGxldFNpemUgKiAocGFyYW1zLmR5bmFtaWNNYWluQnVsbGV0cyArIDQpfXB4YDtcbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChwYXJhbXMuZHluYW1pY01haW5CdWxsZXRzID4gMSAmJiBwcmV2aW91c0luZGV4ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBkeW5hbWljQnVsbGV0SW5kZXggKz0gY3VycmVudCAtIChwcmV2aW91c0luZGV4IHx8IDApO1xuICAgICAgICAgIGlmIChkeW5hbWljQnVsbGV0SW5kZXggPiBwYXJhbXMuZHluYW1pY01haW5CdWxsZXRzIC0gMSkge1xuICAgICAgICAgICAgZHluYW1pY0J1bGxldEluZGV4ID0gcGFyYW1zLmR5bmFtaWNNYWluQnVsbGV0cyAtIDE7XG4gICAgICAgICAgfSBlbHNlIGlmIChkeW5hbWljQnVsbGV0SW5kZXggPCAwKSB7XG4gICAgICAgICAgICBkeW5hbWljQnVsbGV0SW5kZXggPSAwO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBmaXJzdEluZGV4ID0gTWF0aC5tYXgoY3VycmVudCAtIGR5bmFtaWNCdWxsZXRJbmRleCwgMCk7XG4gICAgICAgIGxhc3RJbmRleCA9IGZpcnN0SW5kZXggKyAoTWF0aC5taW4oYnVsbGV0cy5sZW5ndGgsIHBhcmFtcy5keW5hbWljTWFpbkJ1bGxldHMpIC0gMSk7XG4gICAgICAgIG1pZEluZGV4ID0gKGxhc3RJbmRleCArIGZpcnN0SW5kZXgpIC8gMjtcbiAgICAgIH1cbiAgICAgIGJ1bGxldHMuZm9yRWFjaChidWxsZXRFbCA9PiB7XG4gICAgICAgIGNvbnN0IGNsYXNzZXNUb1JlbW92ZSA9IFsuLi5bJycsICctbmV4dCcsICctbmV4dC1uZXh0JywgJy1wcmV2JywgJy1wcmV2LXByZXYnLCAnLW1haW4nXS5tYXAoc3VmZml4ID0+IGAke3BhcmFtcy5idWxsZXRBY3RpdmVDbGFzc30ke3N1ZmZpeH1gKV0ubWFwKHMgPT4gdHlwZW9mIHMgPT09ICdzdHJpbmcnICYmIHMuaW5jbHVkZXMoJyAnKSA/IHMuc3BsaXQoJyAnKSA6IHMpLmZsYXQoKTtcbiAgICAgICAgYnVsbGV0RWwuY2xhc3NMaXN0LnJlbW92ZSguLi5jbGFzc2VzVG9SZW1vdmUpO1xuICAgICAgfSk7XG4gICAgICBpZiAoZWwubGVuZ3RoID4gMSkge1xuICAgICAgICBidWxsZXRzLmZvckVhY2goYnVsbGV0ID0+IHtcbiAgICAgICAgICBjb25zdCBidWxsZXRJbmRleCA9IGVsZW1lbnRJbmRleChidWxsZXQpO1xuICAgICAgICAgIGlmIChidWxsZXRJbmRleCA9PT0gY3VycmVudCkge1xuICAgICAgICAgICAgYnVsbGV0LmNsYXNzTGlzdC5hZGQoLi4ucGFyYW1zLmJ1bGxldEFjdGl2ZUNsYXNzLnNwbGl0KCcgJykpO1xuICAgICAgICAgIH0gZWxzZSBpZiAoc3dpcGVyLmlzRWxlbWVudCkge1xuICAgICAgICAgICAgYnVsbGV0LnNldEF0dHJpYnV0ZSgncGFydCcsICdidWxsZXQnKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHBhcmFtcy5keW5hbWljQnVsbGV0cykge1xuICAgICAgICAgICAgaWYgKGJ1bGxldEluZGV4ID49IGZpcnN0SW5kZXggJiYgYnVsbGV0SW5kZXggPD0gbGFzdEluZGV4KSB7XG4gICAgICAgICAgICAgIGJ1bGxldC5jbGFzc0xpc3QuYWRkKC4uLmAke3BhcmFtcy5idWxsZXRBY3RpdmVDbGFzc30tbWFpbmAuc3BsaXQoJyAnKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoYnVsbGV0SW5kZXggPT09IGZpcnN0SW5kZXgpIHtcbiAgICAgICAgICAgICAgc2V0U2lkZUJ1bGxldHMoYnVsbGV0LCAncHJldicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGJ1bGxldEluZGV4ID09PSBsYXN0SW5kZXgpIHtcbiAgICAgICAgICAgICAgc2V0U2lkZUJ1bGxldHMoYnVsbGV0LCAnbmV4dCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCBidWxsZXQgPSBidWxsZXRzW2N1cnJlbnRdO1xuICAgICAgICBpZiAoYnVsbGV0KSB7XG4gICAgICAgICAgYnVsbGV0LmNsYXNzTGlzdC5hZGQoLi4ucGFyYW1zLmJ1bGxldEFjdGl2ZUNsYXNzLnNwbGl0KCcgJykpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzd2lwZXIuaXNFbGVtZW50KSB7XG4gICAgICAgICAgYnVsbGV0cy5mb3JFYWNoKChidWxsZXRFbCwgYnVsbGV0SW5kZXgpID0+IHtcbiAgICAgICAgICAgIGJ1bGxldEVsLnNldEF0dHJpYnV0ZSgncGFydCcsIGJ1bGxldEluZGV4ID09PSBjdXJyZW50ID8gJ2J1bGxldC1hY3RpdmUnIDogJ2J1bGxldCcpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwYXJhbXMuZHluYW1pY0J1bGxldHMpIHtcbiAgICAgICAgICBjb25zdCBmaXJzdERpc3BsYXllZEJ1bGxldCA9IGJ1bGxldHNbZmlyc3RJbmRleF07XG4gICAgICAgICAgY29uc3QgbGFzdERpc3BsYXllZEJ1bGxldCA9IGJ1bGxldHNbbGFzdEluZGV4XTtcbiAgICAgICAgICBmb3IgKGxldCBpID0gZmlyc3RJbmRleDsgaSA8PSBsYXN0SW5kZXg7IGkgKz0gMSkge1xuICAgICAgICAgICAgaWYgKGJ1bGxldHNbaV0pIHtcbiAgICAgICAgICAgICAgYnVsbGV0c1tpXS5jbGFzc0xpc3QuYWRkKC4uLmAke3BhcmFtcy5idWxsZXRBY3RpdmVDbGFzc30tbWFpbmAuc3BsaXQoJyAnKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHNldFNpZGVCdWxsZXRzKGZpcnN0RGlzcGxheWVkQnVsbGV0LCAncHJldicpO1xuICAgICAgICAgIHNldFNpZGVCdWxsZXRzKGxhc3REaXNwbGF5ZWRCdWxsZXQsICduZXh0Jyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChwYXJhbXMuZHluYW1pY0J1bGxldHMpIHtcbiAgICAgICAgY29uc3QgZHluYW1pY0J1bGxldHNMZW5ndGggPSBNYXRoLm1pbihidWxsZXRzLmxlbmd0aCwgcGFyYW1zLmR5bmFtaWNNYWluQnVsbGV0cyArIDQpO1xuICAgICAgICBjb25zdCBidWxsZXRzT2Zmc2V0ID0gKGJ1bGxldFNpemUgKiBkeW5hbWljQnVsbGV0c0xlbmd0aCAtIGJ1bGxldFNpemUpIC8gMiAtIG1pZEluZGV4ICogYnVsbGV0U2l6ZTtcbiAgICAgICAgY29uc3Qgb2Zmc2V0UHJvcCA9IHJ0bCA/ICdyaWdodCcgOiAnbGVmdCc7XG4gICAgICAgIGJ1bGxldHMuZm9yRWFjaChidWxsZXQgPT4ge1xuICAgICAgICAgIGJ1bGxldC5zdHlsZVtzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyBvZmZzZXRQcm9wIDogJ3RvcCddID0gYCR7YnVsbGV0c09mZnNldH1weGA7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgICBlbC5mb3JFYWNoKChzdWJFbCwgc3ViRWxJbmRleCkgPT4ge1xuICAgICAgaWYgKHBhcmFtcy50eXBlID09PSAnZnJhY3Rpb24nKSB7XG4gICAgICAgIHN1YkVsLnF1ZXJ5U2VsZWN0b3JBbGwoY2xhc3Nlc1RvU2VsZWN0b3IocGFyYW1zLmN1cnJlbnRDbGFzcykpLmZvckVhY2goZnJhY3Rpb25FbCA9PiB7XG4gICAgICAgICAgZnJhY3Rpb25FbC50ZXh0Q29udGVudCA9IHBhcmFtcy5mb3JtYXRGcmFjdGlvbkN1cnJlbnQoY3VycmVudCArIDEpO1xuICAgICAgICB9KTtcbiAgICAgICAgc3ViRWwucXVlcnlTZWxlY3RvckFsbChjbGFzc2VzVG9TZWxlY3RvcihwYXJhbXMudG90YWxDbGFzcykpLmZvckVhY2godG90YWxFbCA9PiB7XG4gICAgICAgICAgdG90YWxFbC50ZXh0Q29udGVudCA9IHBhcmFtcy5mb3JtYXRGcmFjdGlvblRvdGFsKHRvdGFsKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBpZiAocGFyYW1zLnR5cGUgPT09ICdwcm9ncmVzc2JhcicpIHtcbiAgICAgICAgbGV0IHByb2dyZXNzYmFyRGlyZWN0aW9uO1xuICAgICAgICBpZiAocGFyYW1zLnByb2dyZXNzYmFyT3Bwb3NpdGUpIHtcbiAgICAgICAgICBwcm9ncmVzc2JhckRpcmVjdGlvbiA9IHN3aXBlci5pc0hvcml6b250YWwoKSA/ICd2ZXJ0aWNhbCcgOiAnaG9yaXpvbnRhbCc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcHJvZ3Jlc3NiYXJEaXJlY3Rpb24gPSBzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyAnaG9yaXpvbnRhbCcgOiAndmVydGljYWwnO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHNjYWxlID0gKGN1cnJlbnQgKyAxKSAvIHRvdGFsO1xuICAgICAgICBsZXQgc2NhbGVYID0gMTtcbiAgICAgICAgbGV0IHNjYWxlWSA9IDE7XG4gICAgICAgIGlmIChwcm9ncmVzc2JhckRpcmVjdGlvbiA9PT0gJ2hvcml6b250YWwnKSB7XG4gICAgICAgICAgc2NhbGVYID0gc2NhbGU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc2NhbGVZID0gc2NhbGU7XG4gICAgICAgIH1cbiAgICAgICAgc3ViRWwucXVlcnlTZWxlY3RvckFsbChjbGFzc2VzVG9TZWxlY3RvcihwYXJhbXMucHJvZ3Jlc3NiYXJGaWxsQ2xhc3MpKS5mb3JFYWNoKHByb2dyZXNzRWwgPT4ge1xuICAgICAgICAgIHByb2dyZXNzRWwuc3R5bGUudHJhbnNmb3JtID0gYHRyYW5zbGF0ZTNkKDAsMCwwKSBzY2FsZVgoJHtzY2FsZVh9KSBzY2FsZVkoJHtzY2FsZVl9KWA7XG4gICAgICAgICAgcHJvZ3Jlc3NFbC5zdHlsZS50cmFuc2l0aW9uRHVyYXRpb24gPSBgJHtzd2lwZXIucGFyYW1zLnNwZWVkfW1zYDtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBpZiAocGFyYW1zLnR5cGUgPT09ICdjdXN0b20nICYmIHBhcmFtcy5yZW5kZXJDdXN0b20pIHtcbiAgICAgICAgc3ViRWwuaW5uZXJIVE1MID0gcGFyYW1zLnJlbmRlckN1c3RvbShzd2lwZXIsIGN1cnJlbnQgKyAxLCB0b3RhbCk7XG4gICAgICAgIGlmIChzdWJFbEluZGV4ID09PSAwKSBlbWl0KCdwYWdpbmF0aW9uUmVuZGVyJywgc3ViRWwpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHN1YkVsSW5kZXggPT09IDApIGVtaXQoJ3BhZ2luYXRpb25SZW5kZXInLCBzdWJFbCk7XG4gICAgICAgIGVtaXQoJ3BhZ2luYXRpb25VcGRhdGUnLCBzdWJFbCk7XG4gICAgICB9XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy53YXRjaE92ZXJmbG93ICYmIHN3aXBlci5lbmFibGVkKSB7XG4gICAgICAgIHN1YkVsLmNsYXNzTGlzdFtzd2lwZXIuaXNMb2NrZWQgPyAnYWRkJyA6ICdyZW1vdmUnXShwYXJhbXMubG9ja0NsYXNzKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgLy8gUmVuZGVyIENvbnRhaW5lclxuICAgIGNvbnN0IHBhcmFtcyA9IHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbjtcbiAgICBpZiAoaXNQYWdpbmF0aW9uRGlzYWJsZWQoKSkgcmV0dXJuO1xuICAgIGNvbnN0IHNsaWRlc0xlbmd0aCA9IHN3aXBlci52aXJ0dWFsICYmIHN3aXBlci5wYXJhbXMudmlydHVhbC5lbmFibGVkID8gc3dpcGVyLnZpcnR1YWwuc2xpZGVzLmxlbmd0aCA6IHN3aXBlci5ncmlkICYmIHN3aXBlci5wYXJhbXMuZ3JpZC5yb3dzID4gMSA/IHN3aXBlci5zbGlkZXMubGVuZ3RoIC8gTWF0aC5jZWlsKHN3aXBlci5wYXJhbXMuZ3JpZC5yb3dzKSA6IHN3aXBlci5zbGlkZXMubGVuZ3RoO1xuICAgIGxldCBlbCA9IHN3aXBlci5wYWdpbmF0aW9uLmVsO1xuICAgIGVsID0gbWFrZUVsZW1lbnRzQXJyYXkoZWwpO1xuICAgIGxldCBwYWdpbmF0aW9uSFRNTCA9ICcnO1xuICAgIGlmIChwYXJhbXMudHlwZSA9PT0gJ2J1bGxldHMnKSB7XG4gICAgICBsZXQgbnVtYmVyT2ZCdWxsZXRzID0gc3dpcGVyLnBhcmFtcy5sb29wID8gTWF0aC5jZWlsKHNsaWRlc0xlbmd0aCAvIHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyR3JvdXApIDogc3dpcGVyLnNuYXBHcmlkLmxlbmd0aDtcbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLmZyZWVNb2RlICYmIHN3aXBlci5wYXJhbXMuZnJlZU1vZGUuZW5hYmxlZCAmJiBudW1iZXJPZkJ1bGxldHMgPiBzbGlkZXNMZW5ndGgpIHtcbiAgICAgICAgbnVtYmVyT2ZCdWxsZXRzID0gc2xpZGVzTGVuZ3RoO1xuICAgICAgfVxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBudW1iZXJPZkJ1bGxldHM7IGkgKz0gMSkge1xuICAgICAgICBpZiAocGFyYW1zLnJlbmRlckJ1bGxldCkge1xuICAgICAgICAgIHBhZ2luYXRpb25IVE1MICs9IHBhcmFtcy5yZW5kZXJCdWxsZXQuY2FsbChzd2lwZXIsIGksIHBhcmFtcy5idWxsZXRDbGFzcyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gcHJldHRpZXItaWdub3JlXG4gICAgICAgICAgcGFnaW5hdGlvbkhUTUwgKz0gYDwke3BhcmFtcy5idWxsZXRFbGVtZW50fSAke3N3aXBlci5pc0VsZW1lbnQgPyAncGFydD1cImJ1bGxldFwiJyA6ICcnfSBjbGFzcz1cIiR7cGFyYW1zLmJ1bGxldENsYXNzfVwiPjwvJHtwYXJhbXMuYnVsbGV0RWxlbWVudH0+YDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAocGFyYW1zLnR5cGUgPT09ICdmcmFjdGlvbicpIHtcbiAgICAgIGlmIChwYXJhbXMucmVuZGVyRnJhY3Rpb24pIHtcbiAgICAgICAgcGFnaW5hdGlvbkhUTUwgPSBwYXJhbXMucmVuZGVyRnJhY3Rpb24uY2FsbChzd2lwZXIsIHBhcmFtcy5jdXJyZW50Q2xhc3MsIHBhcmFtcy50b3RhbENsYXNzKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBhZ2luYXRpb25IVE1MID0gYDxzcGFuIGNsYXNzPVwiJHtwYXJhbXMuY3VycmVudENsYXNzfVwiPjwvc3Bhbj5gICsgJyAvICcgKyBgPHNwYW4gY2xhc3M9XCIke3BhcmFtcy50b3RhbENsYXNzfVwiPjwvc3Bhbj5gO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAocGFyYW1zLnR5cGUgPT09ICdwcm9ncmVzc2JhcicpIHtcbiAgICAgIGlmIChwYXJhbXMucmVuZGVyUHJvZ3Jlc3NiYXIpIHtcbiAgICAgICAgcGFnaW5hdGlvbkhUTUwgPSBwYXJhbXMucmVuZGVyUHJvZ3Jlc3NiYXIuY2FsbChzd2lwZXIsIHBhcmFtcy5wcm9ncmVzc2JhckZpbGxDbGFzcyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwYWdpbmF0aW9uSFRNTCA9IGA8c3BhbiBjbGFzcz1cIiR7cGFyYW1zLnByb2dyZXNzYmFyRmlsbENsYXNzfVwiPjwvc3Bhbj5gO1xuICAgICAgfVxuICAgIH1cbiAgICBzd2lwZXIucGFnaW5hdGlvbi5idWxsZXRzID0gW107XG4gICAgZWwuZm9yRWFjaChzdWJFbCA9PiB7XG4gICAgICBpZiAocGFyYW1zLnR5cGUgIT09ICdjdXN0b20nKSB7XG4gICAgICAgIHN1YkVsLmlubmVySFRNTCA9IHBhZ2luYXRpb25IVE1MIHx8ICcnO1xuICAgICAgfVxuICAgICAgaWYgKHBhcmFtcy50eXBlID09PSAnYnVsbGV0cycpIHtcbiAgICAgICAgc3dpcGVyLnBhZ2luYXRpb24uYnVsbGV0cy5wdXNoKC4uLnN1YkVsLnF1ZXJ5U2VsZWN0b3JBbGwoY2xhc3Nlc1RvU2VsZWN0b3IocGFyYW1zLmJ1bGxldENsYXNzKSkpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIGlmIChwYXJhbXMudHlwZSAhPT0gJ2N1c3RvbScpIHtcbiAgICAgIGVtaXQoJ3BhZ2luYXRpb25SZW5kZXInLCBlbFswXSk7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIGluaXQoKSB7XG4gICAgc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uID0gY3JlYXRlRWxlbWVudElmTm90RGVmaW5lZChzd2lwZXIsIHN3aXBlci5vcmlnaW5hbFBhcmFtcy5wYWdpbmF0aW9uLCBzd2lwZXIucGFyYW1zLnBhZ2luYXRpb24sIHtcbiAgICAgIGVsOiAnc3dpcGVyLXBhZ2luYXRpb24nXG4gICAgfSk7XG4gICAgY29uc3QgcGFyYW1zID0gc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uO1xuICAgIGlmICghcGFyYW1zLmVsKSByZXR1cm47XG4gICAgbGV0IGVsO1xuICAgIGlmICh0eXBlb2YgcGFyYW1zLmVsID09PSAnc3RyaW5nJyAmJiBzd2lwZXIuaXNFbGVtZW50KSB7XG4gICAgICBlbCA9IHN3aXBlci5lbC5xdWVyeVNlbGVjdG9yKHBhcmFtcy5lbCk7XG4gICAgfVxuICAgIGlmICghZWwgJiYgdHlwZW9mIHBhcmFtcy5lbCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGVsID0gWy4uLmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwocGFyYW1zLmVsKV07XG4gICAgfVxuICAgIGlmICghZWwpIHtcbiAgICAgIGVsID0gcGFyYW1zLmVsO1xuICAgIH1cbiAgICBpZiAoIWVsIHx8IGVsLmxlbmd0aCA9PT0gMCkgcmV0dXJuO1xuICAgIGlmIChzd2lwZXIucGFyYW1zLnVuaXF1ZU5hdkVsZW1lbnRzICYmIHR5cGVvZiBwYXJhbXMuZWwgPT09ICdzdHJpbmcnICYmIEFycmF5LmlzQXJyYXkoZWwpICYmIGVsLmxlbmd0aCA+IDEpIHtcbiAgICAgIGVsID0gWy4uLnN3aXBlci5lbC5xdWVyeVNlbGVjdG9yQWxsKHBhcmFtcy5lbCldO1xuICAgICAgLy8gY2hlY2sgaWYgaXQgYmVsb25ncyB0byBhbm90aGVyIG5lc3RlZCBTd2lwZXJcbiAgICAgIGlmIChlbC5sZW5ndGggPiAxKSB7XG4gICAgICAgIGVsID0gZWwuZmlsdGVyKHN1YkVsID0+IHtcbiAgICAgICAgICBpZiAoZWxlbWVudFBhcmVudHMoc3ViRWwsICcuc3dpcGVyJylbMF0gIT09IHN3aXBlci5lbCkgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9KVswXTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoZWwpICYmIGVsLmxlbmd0aCA9PT0gMSkgZWwgPSBlbFswXTtcbiAgICBPYmplY3QuYXNzaWduKHN3aXBlci5wYWdpbmF0aW9uLCB7XG4gICAgICBlbFxuICAgIH0pO1xuICAgIGVsID0gbWFrZUVsZW1lbnRzQXJyYXkoZWwpO1xuICAgIGVsLmZvckVhY2goc3ViRWwgPT4ge1xuICAgICAgaWYgKHBhcmFtcy50eXBlID09PSAnYnVsbGV0cycgJiYgcGFyYW1zLmNsaWNrYWJsZSkge1xuICAgICAgICBzdWJFbC5jbGFzc0xpc3QuYWRkKC4uLihwYXJhbXMuY2xpY2thYmxlQ2xhc3MgfHwgJycpLnNwbGl0KCcgJykpO1xuICAgICAgfVxuICAgICAgc3ViRWwuY2xhc3NMaXN0LmFkZChwYXJhbXMubW9kaWZpZXJDbGFzcyArIHBhcmFtcy50eXBlKTtcbiAgICAgIHN1YkVsLmNsYXNzTGlzdC5hZGQoc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gcGFyYW1zLmhvcml6b250YWxDbGFzcyA6IHBhcmFtcy52ZXJ0aWNhbENsYXNzKTtcbiAgICAgIGlmIChwYXJhbXMudHlwZSA9PT0gJ2J1bGxldHMnICYmIHBhcmFtcy5keW5hbWljQnVsbGV0cykge1xuICAgICAgICBzdWJFbC5jbGFzc0xpc3QuYWRkKGAke3BhcmFtcy5tb2RpZmllckNsYXNzfSR7cGFyYW1zLnR5cGV9LWR5bmFtaWNgKTtcbiAgICAgICAgZHluYW1pY0J1bGxldEluZGV4ID0gMDtcbiAgICAgICAgaWYgKHBhcmFtcy5keW5hbWljTWFpbkJ1bGxldHMgPCAxKSB7XG4gICAgICAgICAgcGFyYW1zLmR5bmFtaWNNYWluQnVsbGV0cyA9IDE7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChwYXJhbXMudHlwZSA9PT0gJ3Byb2dyZXNzYmFyJyAmJiBwYXJhbXMucHJvZ3Jlc3NiYXJPcHBvc2l0ZSkge1xuICAgICAgICBzdWJFbC5jbGFzc0xpc3QuYWRkKHBhcmFtcy5wcm9ncmVzc2Jhck9wcG9zaXRlQ2xhc3MpO1xuICAgICAgfVxuICAgICAgaWYgKHBhcmFtcy5jbGlja2FibGUpIHtcbiAgICAgICAgc3ViRWwuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBvbkJ1bGxldENsaWNrKTtcbiAgICAgIH1cbiAgICAgIGlmICghc3dpcGVyLmVuYWJsZWQpIHtcbiAgICAgICAgc3ViRWwuY2xhc3NMaXN0LmFkZChwYXJhbXMubG9ja0NsYXNzKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICBmdW5jdGlvbiBkZXN0cm95KCkge1xuICAgIGNvbnN0IHBhcmFtcyA9IHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbjtcbiAgICBpZiAoaXNQYWdpbmF0aW9uRGlzYWJsZWQoKSkgcmV0dXJuO1xuICAgIGxldCBlbCA9IHN3aXBlci5wYWdpbmF0aW9uLmVsO1xuICAgIGlmIChlbCkge1xuICAgICAgZWwgPSBtYWtlRWxlbWVudHNBcnJheShlbCk7XG4gICAgICBlbC5mb3JFYWNoKHN1YkVsID0+IHtcbiAgICAgICAgc3ViRWwuY2xhc3NMaXN0LnJlbW92ZShwYXJhbXMuaGlkZGVuQ2xhc3MpO1xuICAgICAgICBzdWJFbC5jbGFzc0xpc3QucmVtb3ZlKHBhcmFtcy5tb2RpZmllckNsYXNzICsgcGFyYW1zLnR5cGUpO1xuICAgICAgICBzdWJFbC5jbGFzc0xpc3QucmVtb3ZlKHN3aXBlci5pc0hvcml6b250YWwoKSA/IHBhcmFtcy5ob3Jpem9udGFsQ2xhc3MgOiBwYXJhbXMudmVydGljYWxDbGFzcyk7XG4gICAgICAgIGlmIChwYXJhbXMuY2xpY2thYmxlKSB7XG4gICAgICAgICAgc3ViRWwuY2xhc3NMaXN0LnJlbW92ZSguLi4ocGFyYW1zLmNsaWNrYWJsZUNsYXNzIHx8ICcnKS5zcGxpdCgnICcpKTtcbiAgICAgICAgICBzdWJFbC5yZW1vdmVFdmVudExpc3RlbmVyKCdjbGljaycsIG9uQnVsbGV0Q2xpY2spO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gICAgaWYgKHN3aXBlci5wYWdpbmF0aW9uLmJ1bGxldHMpIHN3aXBlci5wYWdpbmF0aW9uLmJ1bGxldHMuZm9yRWFjaChzdWJFbCA9PiBzdWJFbC5jbGFzc0xpc3QucmVtb3ZlKC4uLnBhcmFtcy5idWxsZXRBY3RpdmVDbGFzcy5zcGxpdCgnICcpKSk7XG4gIH1cbiAgb24oJ2NoYW5nZURpcmVjdGlvbicsICgpID0+IHtcbiAgICBpZiAoIXN3aXBlci5wYWdpbmF0aW9uIHx8ICFzd2lwZXIucGFnaW5hdGlvbi5lbCkgcmV0dXJuO1xuICAgIGNvbnN0IHBhcmFtcyA9IHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbjtcbiAgICBsZXQge1xuICAgICAgZWxcbiAgICB9ID0gc3dpcGVyLnBhZ2luYXRpb247XG4gICAgZWwgPSBtYWtlRWxlbWVudHNBcnJheShlbCk7XG4gICAgZWwuZm9yRWFjaChzdWJFbCA9PiB7XG4gICAgICBzdWJFbC5jbGFzc0xpc3QucmVtb3ZlKHBhcmFtcy5ob3Jpem9udGFsQ2xhc3MsIHBhcmFtcy52ZXJ0aWNhbENsYXNzKTtcbiAgICAgIHN1YkVsLmNsYXNzTGlzdC5hZGQoc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gcGFyYW1zLmhvcml6b250YWxDbGFzcyA6IHBhcmFtcy52ZXJ0aWNhbENsYXNzKTtcbiAgICB9KTtcbiAgfSk7XG4gIG9uKCdpbml0JywgKCkgPT4ge1xuICAgIGlmIChzd2lwZXIucGFyYW1zLnBhZ2luYXRpb24uZW5hYmxlZCA9PT0gZmFsc2UpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgICAgZGlzYWJsZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpbml0KCk7XG4gICAgICByZW5kZXIoKTtcbiAgICAgIHVwZGF0ZSgpO1xuICAgIH1cbiAgfSk7XG4gIG9uKCdhY3RpdmVJbmRleENoYW5nZScsICgpID0+IHtcbiAgICBpZiAodHlwZW9mIHN3aXBlci5zbmFwSW5kZXggPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB1cGRhdGUoKTtcbiAgICB9XG4gIH0pO1xuICBvbignc25hcEluZGV4Q2hhbmdlJywgKCkgPT4ge1xuICAgIHVwZGF0ZSgpO1xuICB9KTtcbiAgb24oJ3NuYXBHcmlkTGVuZ3RoQ2hhbmdlJywgKCkgPT4ge1xuICAgIHJlbmRlcigpO1xuICAgIHVwZGF0ZSgpO1xuICB9KTtcbiAgb24oJ2Rlc3Ryb3knLCAoKSA9PiB7XG4gICAgZGVzdHJveSgpO1xuICB9KTtcbiAgb24oJ2VuYWJsZSBkaXNhYmxlJywgKCkgPT4ge1xuICAgIGxldCB7XG4gICAgICBlbFxuICAgIH0gPSBzd2lwZXIucGFnaW5hdGlvbjtcbiAgICBpZiAoZWwpIHtcbiAgICAgIGVsID0gbWFrZUVsZW1lbnRzQXJyYXkoZWwpO1xuICAgICAgZWwuZm9yRWFjaChzdWJFbCA9PiBzdWJFbC5jbGFzc0xpc3Rbc3dpcGVyLmVuYWJsZWQgPyAncmVtb3ZlJyA6ICdhZGQnXShzd2lwZXIucGFyYW1zLnBhZ2luYXRpb24ubG9ja0NsYXNzKSk7XG4gICAgfVxuICB9KTtcbiAgb24oJ2xvY2sgdW5sb2NrJywgKCkgPT4ge1xuICAgIHVwZGF0ZSgpO1xuICB9KTtcbiAgb24oJ2NsaWNrJywgKF9zLCBlKSA9PiB7XG4gICAgY29uc3QgdGFyZ2V0RWwgPSBlLnRhcmdldDtcbiAgICBjb25zdCBlbCA9IG1ha2VFbGVtZW50c0FycmF5KHN3aXBlci5wYWdpbmF0aW9uLmVsKTtcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uLmVsICYmIHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbi5oaWRlT25DbGljayAmJiBlbCAmJiBlbC5sZW5ndGggPiAwICYmICF0YXJnZXRFbC5jbGFzc0xpc3QuY29udGFpbnMoc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uLmJ1bGxldENsYXNzKSkge1xuICAgICAgaWYgKHN3aXBlci5uYXZpZ2F0aW9uICYmIChzd2lwZXIubmF2aWdhdGlvbi5uZXh0RWwgJiYgdGFyZ2V0RWwgPT09IHN3aXBlci5uYXZpZ2F0aW9uLm5leHRFbCB8fCBzd2lwZXIubmF2aWdhdGlvbi5wcmV2RWwgJiYgdGFyZ2V0RWwgPT09IHN3aXBlci5uYXZpZ2F0aW9uLnByZXZFbCkpIHJldHVybjtcbiAgICAgIGNvbnN0IGlzSGlkZGVuID0gZWxbMF0uY2xhc3NMaXN0LmNvbnRhaW5zKHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbi5oaWRkZW5DbGFzcyk7XG4gICAgICBpZiAoaXNIaWRkZW4gPT09IHRydWUpIHtcbiAgICAgICAgZW1pdCgncGFnaW5hdGlvblNob3cnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGVtaXQoJ3BhZ2luYXRpb25IaWRlJyk7XG4gICAgICB9XG4gICAgICBlbC5mb3JFYWNoKHN1YkVsID0+IHN1YkVsLmNsYXNzTGlzdC50b2dnbGUoc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uLmhpZGRlbkNsYXNzKSk7XG4gICAgfVxuICB9KTtcbiAgY29uc3QgZW5hYmxlID0gKCkgPT4ge1xuICAgIHN3aXBlci5lbC5jbGFzc0xpc3QucmVtb3ZlKHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbi5wYWdpbmF0aW9uRGlzYWJsZWRDbGFzcyk7XG4gICAgbGV0IHtcbiAgICAgIGVsXG4gICAgfSA9IHN3aXBlci5wYWdpbmF0aW9uO1xuICAgIGlmIChlbCkge1xuICAgICAgZWwgPSBtYWtlRWxlbWVudHNBcnJheShlbCk7XG4gICAgICBlbC5mb3JFYWNoKHN1YkVsID0+IHN1YkVsLmNsYXNzTGlzdC5yZW1vdmUoc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uLnBhZ2luYXRpb25EaXNhYmxlZENsYXNzKSk7XG4gICAgfVxuICAgIGluaXQoKTtcbiAgICByZW5kZXIoKTtcbiAgICB1cGRhdGUoKTtcbiAgfTtcbiAgY29uc3QgZGlzYWJsZSA9ICgpID0+IHtcbiAgICBzd2lwZXIuZWwuY2xhc3NMaXN0LmFkZChzd2lwZXIucGFyYW1zLnBhZ2luYXRpb24ucGFnaW5hdGlvbkRpc2FibGVkQ2xhc3MpO1xuICAgIGxldCB7XG4gICAgICBlbFxuICAgIH0gPSBzd2lwZXIucGFnaW5hdGlvbjtcbiAgICBpZiAoZWwpIHtcbiAgICAgIGVsID0gbWFrZUVsZW1lbnRzQXJyYXkoZWwpO1xuICAgICAgZWwuZm9yRWFjaChzdWJFbCA9PiBzdWJFbC5jbGFzc0xpc3QuYWRkKHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbi5wYWdpbmF0aW9uRGlzYWJsZWRDbGFzcykpO1xuICAgIH1cbiAgICBkZXN0cm95KCk7XG4gIH07XG4gIE9iamVjdC5hc3NpZ24oc3dpcGVyLnBhZ2luYXRpb24sIHtcbiAgICBlbmFibGUsXG4gICAgZGlzYWJsZSxcbiAgICByZW5kZXIsXG4gICAgdXBkYXRlLFxuICAgIGluaXQsXG4gICAgZGVzdHJveVxuICB9KTtcbn1cblxuZXhwb3J0IHsgUGFnaW5hdGlvbiBhcyBkZWZhdWx0IH07XG4iLCJpbXBvcnQgeyBnIGFzIGdldERvY3VtZW50IH0gZnJvbSAnLi4vc2hhcmVkL3Nzci13aW5kb3cuZXNtLm1qcyc7XG5pbXBvcnQgeyBtIGFzIG1ha2VFbGVtZW50c0FycmF5LCBpIGFzIGNsYXNzZXNUb1Rva2VucywgYyBhcyBjcmVhdGVFbGVtZW50LCBuIGFzIG5leHRUaWNrLCBiIGFzIGVsZW1lbnRPZmZzZXQgfSBmcm9tICcuLi9zaGFyZWQvdXRpbHMubWpzJztcbmltcG9ydCB7IGMgYXMgY3JlYXRlRWxlbWVudElmTm90RGVmaW5lZCB9IGZyb20gJy4uL3NoYXJlZC9jcmVhdGUtZWxlbWVudC1pZi1ub3QtZGVmaW5lZC5tanMnO1xuaW1wb3J0IHsgYyBhcyBjbGFzc2VzVG9TZWxlY3RvciB9IGZyb20gJy4uL3NoYXJlZC9jbGFzc2VzLXRvLXNlbGVjdG9yLm1qcyc7XG5cbmZ1bmN0aW9uIFNjcm9sbGJhcihfcmVmKSB7XG4gIGxldCB7XG4gICAgc3dpcGVyLFxuICAgIGV4dGVuZFBhcmFtcyxcbiAgICBvbixcbiAgICBlbWl0XG4gIH0gPSBfcmVmO1xuICBjb25zdCBkb2N1bWVudCA9IGdldERvY3VtZW50KCk7XG4gIGxldCBpc1RvdWNoZWQgPSBmYWxzZTtcbiAgbGV0IHRpbWVvdXQgPSBudWxsO1xuICBsZXQgZHJhZ1RpbWVvdXQgPSBudWxsO1xuICBsZXQgZHJhZ1N0YXJ0UG9zO1xuICBsZXQgZHJhZ1NpemU7XG4gIGxldCB0cmFja1NpemU7XG4gIGxldCBkaXZpZGVyO1xuICBleHRlbmRQYXJhbXMoe1xuICAgIHNjcm9sbGJhcjoge1xuICAgICAgZWw6IG51bGwsXG4gICAgICBkcmFnU2l6ZTogJ2F1dG8nLFxuICAgICAgaGlkZTogZmFsc2UsXG4gICAgICBkcmFnZ2FibGU6IGZhbHNlLFxuICAgICAgc25hcE9uUmVsZWFzZTogdHJ1ZSxcbiAgICAgIGxvY2tDbGFzczogJ3N3aXBlci1zY3JvbGxiYXItbG9jaycsXG4gICAgICBkcmFnQ2xhc3M6ICdzd2lwZXItc2Nyb2xsYmFyLWRyYWcnLFxuICAgICAgc2Nyb2xsYmFyRGlzYWJsZWRDbGFzczogJ3N3aXBlci1zY3JvbGxiYXItZGlzYWJsZWQnLFxuICAgICAgaG9yaXpvbnRhbENsYXNzOiBgc3dpcGVyLXNjcm9sbGJhci1ob3Jpem9udGFsYCxcbiAgICAgIHZlcnRpY2FsQ2xhc3M6IGBzd2lwZXItc2Nyb2xsYmFyLXZlcnRpY2FsYFxuICAgIH1cbiAgfSk7XG4gIHN3aXBlci5zY3JvbGxiYXIgPSB7XG4gICAgZWw6IG51bGwsXG4gICAgZHJhZ0VsOiBudWxsXG4gIH07XG4gIGZ1bmN0aW9uIHNldFRyYW5zbGF0ZSgpIHtcbiAgICBpZiAoIXN3aXBlci5wYXJhbXMuc2Nyb2xsYmFyLmVsIHx8ICFzd2lwZXIuc2Nyb2xsYmFyLmVsKSByZXR1cm47XG4gICAgY29uc3Qge1xuICAgICAgc2Nyb2xsYmFyLFxuICAgICAgcnRsVHJhbnNsYXRlOiBydGxcbiAgICB9ID0gc3dpcGVyO1xuICAgIGNvbnN0IHtcbiAgICAgIGRyYWdFbCxcbiAgICAgIGVsXG4gICAgfSA9IHNjcm9sbGJhcjtcbiAgICBjb25zdCBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLnNjcm9sbGJhcjtcbiAgICBjb25zdCBwcm9ncmVzcyA9IHN3aXBlci5wYXJhbXMubG9vcCA/IHN3aXBlci5wcm9ncmVzc0xvb3AgOiBzd2lwZXIucHJvZ3Jlc3M7XG4gICAgbGV0IG5ld1NpemUgPSBkcmFnU2l6ZTtcbiAgICBsZXQgbmV3UG9zID0gKHRyYWNrU2l6ZSAtIGRyYWdTaXplKSAqIHByb2dyZXNzO1xuICAgIGlmIChydGwpIHtcbiAgICAgIG5ld1BvcyA9IC1uZXdQb3M7XG4gICAgICBpZiAobmV3UG9zID4gMCkge1xuICAgICAgICBuZXdTaXplID0gZHJhZ1NpemUgLSBuZXdQb3M7XG4gICAgICAgIG5ld1BvcyA9IDA7XG4gICAgICB9IGVsc2UgaWYgKC1uZXdQb3MgKyBkcmFnU2l6ZSA+IHRyYWNrU2l6ZSkge1xuICAgICAgICBuZXdTaXplID0gdHJhY2tTaXplICsgbmV3UG9zO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAobmV3UG9zIDwgMCkge1xuICAgICAgbmV3U2l6ZSA9IGRyYWdTaXplICsgbmV3UG9zO1xuICAgICAgbmV3UG9zID0gMDtcbiAgICB9IGVsc2UgaWYgKG5ld1BvcyArIGRyYWdTaXplID4gdHJhY2tTaXplKSB7XG4gICAgICBuZXdTaXplID0gdHJhY2tTaXplIC0gbmV3UG9zO1xuICAgIH1cbiAgICBpZiAoc3dpcGVyLmlzSG9yaXpvbnRhbCgpKSB7XG4gICAgICBkcmFnRWwuc3R5bGUudHJhbnNmb3JtID0gYHRyYW5zbGF0ZTNkKCR7bmV3UG9zfXB4LCAwLCAwKWA7XG4gICAgICBkcmFnRWwuc3R5bGUud2lkdGggPSBgJHtuZXdTaXplfXB4YDtcbiAgICB9IGVsc2Uge1xuICAgICAgZHJhZ0VsLnN0eWxlLnRyYW5zZm9ybSA9IGB0cmFuc2xhdGUzZCgwcHgsICR7bmV3UG9zfXB4LCAwKWA7XG4gICAgICBkcmFnRWwuc3R5bGUuaGVpZ2h0ID0gYCR7bmV3U2l6ZX1weGA7XG4gICAgfVxuICAgIGlmIChwYXJhbXMuaGlkZSkge1xuICAgICAgY2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xuICAgICAgZWwuc3R5bGUub3BhY2l0eSA9IDE7XG4gICAgICB0aW1lb3V0ID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIGVsLnN0eWxlLm9wYWNpdHkgPSAwO1xuICAgICAgICBlbC5zdHlsZS50cmFuc2l0aW9uRHVyYXRpb24gPSAnNDAwbXMnO1xuICAgICAgfSwgMTAwMCk7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIHNldFRyYW5zaXRpb24oZHVyYXRpb24pIHtcbiAgICBpZiAoIXN3aXBlci5wYXJhbXMuc2Nyb2xsYmFyLmVsIHx8ICFzd2lwZXIuc2Nyb2xsYmFyLmVsKSByZXR1cm47XG4gICAgc3dpcGVyLnNjcm9sbGJhci5kcmFnRWwuc3R5bGUudHJhbnNpdGlvbkR1cmF0aW9uID0gYCR7ZHVyYXRpb259bXNgO1xuICB9XG4gIGZ1bmN0aW9uIHVwZGF0ZVNpemUoKSB7XG4gICAgaWYgKCFzd2lwZXIucGFyYW1zLnNjcm9sbGJhci5lbCB8fCAhc3dpcGVyLnNjcm9sbGJhci5lbCkgcmV0dXJuO1xuICAgIGNvbnN0IHtcbiAgICAgIHNjcm9sbGJhclxuICAgIH0gPSBzd2lwZXI7XG4gICAgY29uc3Qge1xuICAgICAgZHJhZ0VsLFxuICAgICAgZWxcbiAgICB9ID0gc2Nyb2xsYmFyO1xuICAgIGRyYWdFbC5zdHlsZS53aWR0aCA9ICcnO1xuICAgIGRyYWdFbC5zdHlsZS5oZWlnaHQgPSAnJztcbiAgICB0cmFja1NpemUgPSBzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyBlbC5vZmZzZXRXaWR0aCA6IGVsLm9mZnNldEhlaWdodDtcbiAgICBkaXZpZGVyID0gc3dpcGVyLnNpemUgLyAoc3dpcGVyLnZpcnR1YWxTaXplICsgc3dpcGVyLnBhcmFtcy5zbGlkZXNPZmZzZXRCZWZvcmUgLSAoc3dpcGVyLnBhcmFtcy5jZW50ZXJlZFNsaWRlcyA/IHN3aXBlci5zbmFwR3JpZFswXSA6IDApKTtcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5zY3JvbGxiYXIuZHJhZ1NpemUgPT09ICdhdXRvJykge1xuICAgICAgZHJhZ1NpemUgPSB0cmFja1NpemUgKiBkaXZpZGVyO1xuICAgIH0gZWxzZSB7XG4gICAgICBkcmFnU2l6ZSA9IHBhcnNlSW50KHN3aXBlci5wYXJhbXMuc2Nyb2xsYmFyLmRyYWdTaXplLCAxMCk7XG4gICAgfVxuICAgIGlmIChzd2lwZXIuaXNIb3Jpem9udGFsKCkpIHtcbiAgICAgIGRyYWdFbC5zdHlsZS53aWR0aCA9IGAke2RyYWdTaXplfXB4YDtcbiAgICB9IGVsc2Uge1xuICAgICAgZHJhZ0VsLnN0eWxlLmhlaWdodCA9IGAke2RyYWdTaXplfXB4YDtcbiAgICB9XG4gICAgaWYgKGRpdmlkZXIgPj0gMSkge1xuICAgICAgZWwuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICB9IGVsc2Uge1xuICAgICAgZWwuc3R5bGUuZGlzcGxheSA9ICcnO1xuICAgIH1cbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5zY3JvbGxiYXIuaGlkZSkge1xuICAgICAgZWwuc3R5bGUub3BhY2l0eSA9IDA7XG4gICAgfVxuICAgIGlmIChzd2lwZXIucGFyYW1zLndhdGNoT3ZlcmZsb3cgJiYgc3dpcGVyLmVuYWJsZWQpIHtcbiAgICAgIHNjcm9sbGJhci5lbC5jbGFzc0xpc3Rbc3dpcGVyLmlzTG9ja2VkID8gJ2FkZCcgOiAncmVtb3ZlJ10oc3dpcGVyLnBhcmFtcy5zY3JvbGxiYXIubG9ja0NsYXNzKTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gZ2V0UG9pbnRlclBvc2l0aW9uKGUpIHtcbiAgICByZXR1cm4gc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gZS5jbGllbnRYIDogZS5jbGllbnRZO1xuICB9XG4gIGZ1bmN0aW9uIHNldERyYWdQb3NpdGlvbihlKSB7XG4gICAgY29uc3Qge1xuICAgICAgc2Nyb2xsYmFyLFxuICAgICAgcnRsVHJhbnNsYXRlOiBydGxcbiAgICB9ID0gc3dpcGVyO1xuICAgIGNvbnN0IHtcbiAgICAgIGVsXG4gICAgfSA9IHNjcm9sbGJhcjtcbiAgICBsZXQgcG9zaXRpb25SYXRpbztcbiAgICBwb3NpdGlvblJhdGlvID0gKGdldFBvaW50ZXJQb3NpdGlvbihlKSAtIGVsZW1lbnRPZmZzZXQoZWwpW3N3aXBlci5pc0hvcml6b250YWwoKSA/ICdsZWZ0JyA6ICd0b3AnXSAtIChkcmFnU3RhcnRQb3MgIT09IG51bGwgPyBkcmFnU3RhcnRQb3MgOiBkcmFnU2l6ZSAvIDIpKSAvICh0cmFja1NpemUgLSBkcmFnU2l6ZSk7XG4gICAgcG9zaXRpb25SYXRpbyA9IE1hdGgubWF4KE1hdGgubWluKHBvc2l0aW9uUmF0aW8sIDEpLCAwKTtcbiAgICBpZiAocnRsKSB7XG4gICAgICBwb3NpdGlvblJhdGlvID0gMSAtIHBvc2l0aW9uUmF0aW87XG4gICAgfVxuICAgIGNvbnN0IHBvc2l0aW9uID0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpICsgKHN3aXBlci5tYXhUcmFuc2xhdGUoKSAtIHN3aXBlci5taW5UcmFuc2xhdGUoKSkgKiBwb3NpdGlvblJhdGlvO1xuICAgIHN3aXBlci51cGRhdGVQcm9ncmVzcyhwb3NpdGlvbik7XG4gICAgc3dpcGVyLnNldFRyYW5zbGF0ZShwb3NpdGlvbik7XG4gICAgc3dpcGVyLnVwZGF0ZUFjdGl2ZUluZGV4KCk7XG4gICAgc3dpcGVyLnVwZGF0ZVNsaWRlc0NsYXNzZXMoKTtcbiAgfVxuICBmdW5jdGlvbiBvbkRyYWdTdGFydChlKSB7XG4gICAgY29uc3QgcGFyYW1zID0gc3dpcGVyLnBhcmFtcy5zY3JvbGxiYXI7XG4gICAgY29uc3Qge1xuICAgICAgc2Nyb2xsYmFyLFxuICAgICAgd3JhcHBlckVsXG4gICAgfSA9IHN3aXBlcjtcbiAgICBjb25zdCB7XG4gICAgICBlbCxcbiAgICAgIGRyYWdFbFxuICAgIH0gPSBzY3JvbGxiYXI7XG4gICAgaXNUb3VjaGVkID0gdHJ1ZTtcbiAgICBkcmFnU3RhcnRQb3MgPSBlLnRhcmdldCA9PT0gZHJhZ0VsID8gZ2V0UG9pbnRlclBvc2l0aW9uKGUpIC0gZS50YXJnZXQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KClbc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gJ2xlZnQnIDogJ3RvcCddIDogbnVsbDtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICB3cmFwcGVyRWwuc3R5bGUudHJhbnNpdGlvbkR1cmF0aW9uID0gJzEwMG1zJztcbiAgICBkcmFnRWwuc3R5bGUudHJhbnNpdGlvbkR1cmF0aW9uID0gJzEwMG1zJztcbiAgICBzZXREcmFnUG9zaXRpb24oZSk7XG4gICAgY2xlYXJUaW1lb3V0KGRyYWdUaW1lb3V0KTtcbiAgICBlbC5zdHlsZS50cmFuc2l0aW9uRHVyYXRpb24gPSAnMG1zJztcbiAgICBpZiAocGFyYW1zLmhpZGUpIHtcbiAgICAgIGVsLnN0eWxlLm9wYWNpdHkgPSAxO1xuICAgIH1cbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5jc3NNb2RlKSB7XG4gICAgICBzd2lwZXIud3JhcHBlckVsLnN0eWxlWydzY3JvbGwtc25hcC10eXBlJ10gPSAnbm9uZSc7XG4gICAgfVxuICAgIGVtaXQoJ3Njcm9sbGJhckRyYWdTdGFydCcsIGUpO1xuICB9XG4gIGZ1bmN0aW9uIG9uRHJhZ01vdmUoZSkge1xuICAgIGNvbnN0IHtcbiAgICAgIHNjcm9sbGJhcixcbiAgICAgIHdyYXBwZXJFbFxuICAgIH0gPSBzd2lwZXI7XG4gICAgY29uc3Qge1xuICAgICAgZWwsXG4gICAgICBkcmFnRWxcbiAgICB9ID0gc2Nyb2xsYmFyO1xuICAgIGlmICghaXNUb3VjaGVkKSByZXR1cm47XG4gICAgaWYgKGUucHJldmVudERlZmF1bHQgJiYgZS5jYW5jZWxhYmxlKSBlLnByZXZlbnREZWZhdWx0KCk7ZWxzZSBlLnJldHVyblZhbHVlID0gZmFsc2U7XG4gICAgc2V0RHJhZ1Bvc2l0aW9uKGUpO1xuICAgIHdyYXBwZXJFbC5zdHlsZS50cmFuc2l0aW9uRHVyYXRpb24gPSAnMG1zJztcbiAgICBlbC5zdHlsZS50cmFuc2l0aW9uRHVyYXRpb24gPSAnMG1zJztcbiAgICBkcmFnRWwuc3R5bGUudHJhbnNpdGlvbkR1cmF0aW9uID0gJzBtcyc7XG4gICAgZW1pdCgnc2Nyb2xsYmFyRHJhZ01vdmUnLCBlKTtcbiAgfVxuICBmdW5jdGlvbiBvbkRyYWdFbmQoZSkge1xuICAgIGNvbnN0IHBhcmFtcyA9IHN3aXBlci5wYXJhbXMuc2Nyb2xsYmFyO1xuICAgIGNvbnN0IHtcbiAgICAgIHNjcm9sbGJhcixcbiAgICAgIHdyYXBwZXJFbFxuICAgIH0gPSBzd2lwZXI7XG4gICAgY29uc3Qge1xuICAgICAgZWxcbiAgICB9ID0gc2Nyb2xsYmFyO1xuICAgIGlmICghaXNUb3VjaGVkKSByZXR1cm47XG4gICAgaXNUb3VjaGVkID0gZmFsc2U7XG4gICAgaWYgKHN3aXBlci5wYXJhbXMuY3NzTW9kZSkge1xuICAgICAgc3dpcGVyLndyYXBwZXJFbC5zdHlsZVsnc2Nyb2xsLXNuYXAtdHlwZSddID0gJyc7XG4gICAgICB3cmFwcGVyRWwuc3R5bGUudHJhbnNpdGlvbkR1cmF0aW9uID0gJyc7XG4gICAgfVxuICAgIGlmIChwYXJhbXMuaGlkZSkge1xuICAgICAgY2xlYXJUaW1lb3V0KGRyYWdUaW1lb3V0KTtcbiAgICAgIGRyYWdUaW1lb3V0ID0gbmV4dFRpY2soKCkgPT4ge1xuICAgICAgICBlbC5zdHlsZS5vcGFjaXR5ID0gMDtcbiAgICAgICAgZWwuc3R5bGUudHJhbnNpdGlvbkR1cmF0aW9uID0gJzQwMG1zJztcbiAgICAgIH0sIDEwMDApO1xuICAgIH1cbiAgICBlbWl0KCdzY3JvbGxiYXJEcmFnRW5kJywgZSk7XG4gICAgaWYgKHBhcmFtcy5zbmFwT25SZWxlYXNlKSB7XG4gICAgICBzd2lwZXIuc2xpZGVUb0Nsb3Nlc3QoKTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gZXZlbnRzKG1ldGhvZCkge1xuICAgIGNvbnN0IHtcbiAgICAgIHNjcm9sbGJhcixcbiAgICAgIHBhcmFtc1xuICAgIH0gPSBzd2lwZXI7XG4gICAgY29uc3QgZWwgPSBzY3JvbGxiYXIuZWw7XG4gICAgaWYgKCFlbCkgcmV0dXJuO1xuICAgIGNvbnN0IHRhcmdldCA9IGVsO1xuICAgIGNvbnN0IGFjdGl2ZUxpc3RlbmVyID0gcGFyYW1zLnBhc3NpdmVMaXN0ZW5lcnMgPyB7XG4gICAgICBwYXNzaXZlOiBmYWxzZSxcbiAgICAgIGNhcHR1cmU6IGZhbHNlXG4gICAgfSA6IGZhbHNlO1xuICAgIGNvbnN0IHBhc3NpdmVMaXN0ZW5lciA9IHBhcmFtcy5wYXNzaXZlTGlzdGVuZXJzID8ge1xuICAgICAgcGFzc2l2ZTogdHJ1ZSxcbiAgICAgIGNhcHR1cmU6IGZhbHNlXG4gICAgfSA6IGZhbHNlO1xuICAgIGlmICghdGFyZ2V0KSByZXR1cm47XG4gICAgY29uc3QgZXZlbnRNZXRob2QgPSBtZXRob2QgPT09ICdvbicgPyAnYWRkRXZlbnRMaXN0ZW5lcicgOiAncmVtb3ZlRXZlbnRMaXN0ZW5lcic7XG4gICAgdGFyZ2V0W2V2ZW50TWV0aG9kXSgncG9pbnRlcmRvd24nLCBvbkRyYWdTdGFydCwgYWN0aXZlTGlzdGVuZXIpO1xuICAgIGRvY3VtZW50W2V2ZW50TWV0aG9kXSgncG9pbnRlcm1vdmUnLCBvbkRyYWdNb3ZlLCBhY3RpdmVMaXN0ZW5lcik7XG4gICAgZG9jdW1lbnRbZXZlbnRNZXRob2RdKCdwb2ludGVydXAnLCBvbkRyYWdFbmQsIHBhc3NpdmVMaXN0ZW5lcik7XG4gIH1cbiAgZnVuY3Rpb24gZW5hYmxlRHJhZ2dhYmxlKCkge1xuICAgIGlmICghc3dpcGVyLnBhcmFtcy5zY3JvbGxiYXIuZWwgfHwgIXN3aXBlci5zY3JvbGxiYXIuZWwpIHJldHVybjtcbiAgICBldmVudHMoJ29uJyk7XG4gIH1cbiAgZnVuY3Rpb24gZGlzYWJsZURyYWdnYWJsZSgpIHtcbiAgICBpZiAoIXN3aXBlci5wYXJhbXMuc2Nyb2xsYmFyLmVsIHx8ICFzd2lwZXIuc2Nyb2xsYmFyLmVsKSByZXR1cm47XG4gICAgZXZlbnRzKCdvZmYnKTtcbiAgfVxuICBmdW5jdGlvbiBpbml0KCkge1xuICAgIGNvbnN0IHtcbiAgICAgIHNjcm9sbGJhcixcbiAgICAgIGVsOiBzd2lwZXJFbFxuICAgIH0gPSBzd2lwZXI7XG4gICAgc3dpcGVyLnBhcmFtcy5zY3JvbGxiYXIgPSBjcmVhdGVFbGVtZW50SWZOb3REZWZpbmVkKHN3aXBlciwgc3dpcGVyLm9yaWdpbmFsUGFyYW1zLnNjcm9sbGJhciwgc3dpcGVyLnBhcmFtcy5zY3JvbGxiYXIsIHtcbiAgICAgIGVsOiAnc3dpcGVyLXNjcm9sbGJhcidcbiAgICB9KTtcbiAgICBjb25zdCBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLnNjcm9sbGJhcjtcbiAgICBpZiAoIXBhcmFtcy5lbCkgcmV0dXJuO1xuICAgIGxldCBlbDtcbiAgICBpZiAodHlwZW9mIHBhcmFtcy5lbCA9PT0gJ3N0cmluZycgJiYgc3dpcGVyLmlzRWxlbWVudCkge1xuICAgICAgZWwgPSBzd2lwZXIuZWwucXVlcnlTZWxlY3RvcihwYXJhbXMuZWwpO1xuICAgIH1cbiAgICBpZiAoIWVsICYmIHR5cGVvZiBwYXJhbXMuZWwgPT09ICdzdHJpbmcnKSB7XG4gICAgICBlbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwocGFyYW1zLmVsKTtcbiAgICAgIGlmICghZWwubGVuZ3RoKSByZXR1cm47XG4gICAgfSBlbHNlIGlmICghZWwpIHtcbiAgICAgIGVsID0gcGFyYW1zLmVsO1xuICAgIH1cbiAgICBpZiAoc3dpcGVyLnBhcmFtcy51bmlxdWVOYXZFbGVtZW50cyAmJiB0eXBlb2YgcGFyYW1zLmVsID09PSAnc3RyaW5nJyAmJiBlbC5sZW5ndGggPiAxICYmIHN3aXBlckVsLnF1ZXJ5U2VsZWN0b3JBbGwocGFyYW1zLmVsKS5sZW5ndGggPT09IDEpIHtcbiAgICAgIGVsID0gc3dpcGVyRWwucXVlcnlTZWxlY3RvcihwYXJhbXMuZWwpO1xuICAgIH1cbiAgICBpZiAoZWwubGVuZ3RoID4gMCkgZWwgPSBlbFswXTtcbiAgICBlbC5jbGFzc0xpc3QuYWRkKHN3aXBlci5pc0hvcml6b250YWwoKSA/IHBhcmFtcy5ob3Jpem9udGFsQ2xhc3MgOiBwYXJhbXMudmVydGljYWxDbGFzcyk7XG4gICAgbGV0IGRyYWdFbDtcbiAgICBpZiAoZWwpIHtcbiAgICAgIGRyYWdFbCA9IGVsLnF1ZXJ5U2VsZWN0b3IoY2xhc3Nlc1RvU2VsZWN0b3Ioc3dpcGVyLnBhcmFtcy5zY3JvbGxiYXIuZHJhZ0NsYXNzKSk7XG4gICAgICBpZiAoIWRyYWdFbCkge1xuICAgICAgICBkcmFnRWwgPSBjcmVhdGVFbGVtZW50KCdkaXYnLCBzd2lwZXIucGFyYW1zLnNjcm9sbGJhci5kcmFnQ2xhc3MpO1xuICAgICAgICBlbC5hcHBlbmQoZHJhZ0VsKTtcbiAgICAgIH1cbiAgICB9XG4gICAgT2JqZWN0LmFzc2lnbihzY3JvbGxiYXIsIHtcbiAgICAgIGVsLFxuICAgICAgZHJhZ0VsXG4gICAgfSk7XG4gICAgaWYgKHBhcmFtcy5kcmFnZ2FibGUpIHtcbiAgICAgIGVuYWJsZURyYWdnYWJsZSgpO1xuICAgIH1cbiAgICBpZiAoZWwpIHtcbiAgICAgIGVsLmNsYXNzTGlzdFtzd2lwZXIuZW5hYmxlZCA/ICdyZW1vdmUnIDogJ2FkZCddKC4uLmNsYXNzZXNUb1Rva2Vucyhzd2lwZXIucGFyYW1zLnNjcm9sbGJhci5sb2NrQ2xhc3MpKTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgICBjb25zdCBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLnNjcm9sbGJhcjtcbiAgICBjb25zdCBlbCA9IHN3aXBlci5zY3JvbGxiYXIuZWw7XG4gICAgaWYgKGVsKSB7XG4gICAgICBlbC5jbGFzc0xpc3QucmVtb3ZlKC4uLmNsYXNzZXNUb1Rva2Vucyhzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyBwYXJhbXMuaG9yaXpvbnRhbENsYXNzIDogcGFyYW1zLnZlcnRpY2FsQ2xhc3MpKTtcbiAgICB9XG4gICAgZGlzYWJsZURyYWdnYWJsZSgpO1xuICB9XG4gIG9uKCdjaGFuZ2VEaXJlY3Rpb24nLCAoKSA9PiB7XG4gICAgaWYgKCFzd2lwZXIuc2Nyb2xsYmFyIHx8ICFzd2lwZXIuc2Nyb2xsYmFyLmVsKSByZXR1cm47XG4gICAgY29uc3QgcGFyYW1zID0gc3dpcGVyLnBhcmFtcy5zY3JvbGxiYXI7XG4gICAgbGV0IHtcbiAgICAgIGVsXG4gICAgfSA9IHN3aXBlci5zY3JvbGxiYXI7XG4gICAgZWwgPSBtYWtlRWxlbWVudHNBcnJheShlbCk7XG4gICAgZWwuZm9yRWFjaChzdWJFbCA9PiB7XG4gICAgICBzdWJFbC5jbGFzc0xpc3QucmVtb3ZlKHBhcmFtcy5ob3Jpem9udGFsQ2xhc3MsIHBhcmFtcy52ZXJ0aWNhbENsYXNzKTtcbiAgICAgIHN1YkVsLmNsYXNzTGlzdC5hZGQoc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gcGFyYW1zLmhvcml6b250YWxDbGFzcyA6IHBhcmFtcy52ZXJ0aWNhbENsYXNzKTtcbiAgICB9KTtcbiAgfSk7XG4gIG9uKCdpbml0JywgKCkgPT4ge1xuICAgIGlmIChzd2lwZXIucGFyYW1zLnNjcm9sbGJhci5lbmFibGVkID09PSBmYWxzZSkge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgICBkaXNhYmxlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGluaXQoKTtcbiAgICAgIHVwZGF0ZVNpemUoKTtcbiAgICAgIHNldFRyYW5zbGF0ZSgpO1xuICAgIH1cbiAgfSk7XG4gIG9uKCd1cGRhdGUgcmVzaXplIG9ic2VydmVyVXBkYXRlIGxvY2sgdW5sb2NrIGNoYW5nZURpcmVjdGlvbicsICgpID0+IHtcbiAgICB1cGRhdGVTaXplKCk7XG4gIH0pO1xuICBvbignc2V0VHJhbnNsYXRlJywgKCkgPT4ge1xuICAgIHNldFRyYW5zbGF0ZSgpO1xuICB9KTtcbiAgb24oJ3NldFRyYW5zaXRpb24nLCAoX3MsIGR1cmF0aW9uKSA9PiB7XG4gICAgc2V0VHJhbnNpdGlvbihkdXJhdGlvbik7XG4gIH0pO1xuICBvbignZW5hYmxlIGRpc2FibGUnLCAoKSA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgZWxcbiAgICB9ID0gc3dpcGVyLnNjcm9sbGJhcjtcbiAgICBpZiAoZWwpIHtcbiAgICAgIGVsLmNsYXNzTGlzdFtzd2lwZXIuZW5hYmxlZCA/ICdyZW1vdmUnIDogJ2FkZCddKC4uLmNsYXNzZXNUb1Rva2Vucyhzd2lwZXIucGFyYW1zLnNjcm9sbGJhci5sb2NrQ2xhc3MpKTtcbiAgICB9XG4gIH0pO1xuICBvbignZGVzdHJveScsICgpID0+IHtcbiAgICBkZXN0cm95KCk7XG4gIH0pO1xuICBjb25zdCBlbmFibGUgPSAoKSA9PiB7XG4gICAgc3dpcGVyLmVsLmNsYXNzTGlzdC5yZW1vdmUoLi4uY2xhc3Nlc1RvVG9rZW5zKHN3aXBlci5wYXJhbXMuc2Nyb2xsYmFyLnNjcm9sbGJhckRpc2FibGVkQ2xhc3MpKTtcbiAgICBpZiAoc3dpcGVyLnNjcm9sbGJhci5lbCkge1xuICAgICAgc3dpcGVyLnNjcm9sbGJhci5lbC5jbGFzc0xpc3QucmVtb3ZlKC4uLmNsYXNzZXNUb1Rva2Vucyhzd2lwZXIucGFyYW1zLnNjcm9sbGJhci5zY3JvbGxiYXJEaXNhYmxlZENsYXNzKSk7XG4gICAgfVxuICAgIGluaXQoKTtcbiAgICB1cGRhdGVTaXplKCk7XG4gICAgc2V0VHJhbnNsYXRlKCk7XG4gIH07XG4gIGNvbnN0IGRpc2FibGUgPSAoKSA9PiB7XG4gICAgc3dpcGVyLmVsLmNsYXNzTGlzdC5hZGQoLi4uY2xhc3Nlc1RvVG9rZW5zKHN3aXBlci5wYXJhbXMuc2Nyb2xsYmFyLnNjcm9sbGJhckRpc2FibGVkQ2xhc3MpKTtcbiAgICBpZiAoc3dpcGVyLnNjcm9sbGJhci5lbCkge1xuICAgICAgc3dpcGVyLnNjcm9sbGJhci5lbC5jbGFzc0xpc3QuYWRkKC4uLmNsYXNzZXNUb1Rva2Vucyhzd2lwZXIucGFyYW1zLnNjcm9sbGJhci5zY3JvbGxiYXJEaXNhYmxlZENsYXNzKSk7XG4gICAgfVxuICAgIGRlc3Ryb3koKTtcbiAgfTtcbiAgT2JqZWN0LmFzc2lnbihzd2lwZXIuc2Nyb2xsYmFyLCB7XG4gICAgZW5hYmxlLFxuICAgIGRpc2FibGUsXG4gICAgdXBkYXRlU2l6ZSxcbiAgICBzZXRUcmFuc2xhdGUsXG4gICAgaW5pdCxcbiAgICBkZXN0cm95XG4gIH0pO1xufVxuXG5leHBvcnQgeyBTY3JvbGxiYXIgYXMgZGVmYXVsdCB9O1xuIiwiaW1wb3J0IHsgZSBhcyBlbGVtZW50Q2hpbGRyZW4gfSBmcm9tICcuLi9zaGFyZWQvdXRpbHMubWpzJztcblxuZnVuY3Rpb24gUGFyYWxsYXgoX3JlZikge1xuICBsZXQge1xuICAgIHN3aXBlcixcbiAgICBleHRlbmRQYXJhbXMsXG4gICAgb25cbiAgfSA9IF9yZWY7XG4gIGV4dGVuZFBhcmFtcyh7XG4gICAgcGFyYWxsYXg6IHtcbiAgICAgIGVuYWJsZWQ6IGZhbHNlXG4gICAgfVxuICB9KTtcbiAgY29uc3QgZWxlbWVudHNTZWxlY3RvciA9ICdbZGF0YS1zd2lwZXItcGFyYWxsYXhdLCBbZGF0YS1zd2lwZXItcGFyYWxsYXgteF0sIFtkYXRhLXN3aXBlci1wYXJhbGxheC15XSwgW2RhdGEtc3dpcGVyLXBhcmFsbGF4LW9wYWNpdHldLCBbZGF0YS1zd2lwZXItcGFyYWxsYXgtc2NhbGVdJztcbiAgY29uc3Qgc2V0VHJhbnNmb3JtID0gKGVsLCBwcm9ncmVzcykgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIHJ0bFxuICAgIH0gPSBzd2lwZXI7XG4gICAgY29uc3QgcnRsRmFjdG9yID0gcnRsID8gLTEgOiAxO1xuICAgIGNvbnN0IHAgPSBlbC5nZXRBdHRyaWJ1dGUoJ2RhdGEtc3dpcGVyLXBhcmFsbGF4JykgfHwgJzAnO1xuICAgIGxldCB4ID0gZWwuZ2V0QXR0cmlidXRlKCdkYXRhLXN3aXBlci1wYXJhbGxheC14Jyk7XG4gICAgbGV0IHkgPSBlbC5nZXRBdHRyaWJ1dGUoJ2RhdGEtc3dpcGVyLXBhcmFsbGF4LXknKTtcbiAgICBjb25zdCBzY2FsZSA9IGVsLmdldEF0dHJpYnV0ZSgnZGF0YS1zd2lwZXItcGFyYWxsYXgtc2NhbGUnKTtcbiAgICBjb25zdCBvcGFjaXR5ID0gZWwuZ2V0QXR0cmlidXRlKCdkYXRhLXN3aXBlci1wYXJhbGxheC1vcGFjaXR5Jyk7XG4gICAgY29uc3Qgcm90YXRlID0gZWwuZ2V0QXR0cmlidXRlKCdkYXRhLXN3aXBlci1wYXJhbGxheC1yb3RhdGUnKTtcbiAgICBpZiAoeCB8fCB5KSB7XG4gICAgICB4ID0geCB8fCAnMCc7XG4gICAgICB5ID0geSB8fCAnMCc7XG4gICAgfSBlbHNlIGlmIChzd2lwZXIuaXNIb3Jpem9udGFsKCkpIHtcbiAgICAgIHggPSBwO1xuICAgICAgeSA9ICcwJztcbiAgICB9IGVsc2Uge1xuICAgICAgeSA9IHA7XG4gICAgICB4ID0gJzAnO1xuICAgIH1cbiAgICBpZiAoeC5pbmRleE9mKCclJykgPj0gMCkge1xuICAgICAgeCA9IGAke3BhcnNlSW50KHgsIDEwKSAqIHByb2dyZXNzICogcnRsRmFjdG9yfSVgO1xuICAgIH0gZWxzZSB7XG4gICAgICB4ID0gYCR7eCAqIHByb2dyZXNzICogcnRsRmFjdG9yfXB4YDtcbiAgICB9XG4gICAgaWYgKHkuaW5kZXhPZignJScpID49IDApIHtcbiAgICAgIHkgPSBgJHtwYXJzZUludCh5LCAxMCkgKiBwcm9ncmVzc30lYDtcbiAgICB9IGVsc2Uge1xuICAgICAgeSA9IGAke3kgKiBwcm9ncmVzc31weGA7XG4gICAgfVxuICAgIGlmICh0eXBlb2Ygb3BhY2l0eSAhPT0gJ3VuZGVmaW5lZCcgJiYgb3BhY2l0eSAhPT0gbnVsbCkge1xuICAgICAgY29uc3QgY3VycmVudE9wYWNpdHkgPSBvcGFjaXR5IC0gKG9wYWNpdHkgLSAxKSAqICgxIC0gTWF0aC5hYnMocHJvZ3Jlc3MpKTtcbiAgICAgIGVsLnN0eWxlLm9wYWNpdHkgPSBjdXJyZW50T3BhY2l0eTtcbiAgICB9XG4gICAgbGV0IHRyYW5zZm9ybSA9IGB0cmFuc2xhdGUzZCgke3h9LCAke3l9LCAwcHgpYDtcbiAgICBpZiAodHlwZW9mIHNjYWxlICE9PSAndW5kZWZpbmVkJyAmJiBzY2FsZSAhPT0gbnVsbCkge1xuICAgICAgY29uc3QgY3VycmVudFNjYWxlID0gc2NhbGUgLSAoc2NhbGUgLSAxKSAqICgxIC0gTWF0aC5hYnMocHJvZ3Jlc3MpKTtcbiAgICAgIHRyYW5zZm9ybSArPSBgIHNjYWxlKCR7Y3VycmVudFNjYWxlfSlgO1xuICAgIH1cbiAgICBpZiAocm90YXRlICYmIHR5cGVvZiByb3RhdGUgIT09ICd1bmRlZmluZWQnICYmIHJvdGF0ZSAhPT0gbnVsbCkge1xuICAgICAgY29uc3QgY3VycmVudFJvdGF0ZSA9IHJvdGF0ZSAqIHByb2dyZXNzICogLTE7XG4gICAgICB0cmFuc2Zvcm0gKz0gYCByb3RhdGUoJHtjdXJyZW50Um90YXRlfWRlZylgO1xuICAgIH1cbiAgICBlbC5zdHlsZS50cmFuc2Zvcm0gPSB0cmFuc2Zvcm07XG4gIH07XG4gIGNvbnN0IHNldFRyYW5zbGF0ZSA9ICgpID0+IHtcbiAgICBjb25zdCB7XG4gICAgICBlbCxcbiAgICAgIHNsaWRlcyxcbiAgICAgIHByb2dyZXNzLFxuICAgICAgc25hcEdyaWQsXG4gICAgICBpc0VsZW1lbnRcbiAgICB9ID0gc3dpcGVyO1xuICAgIGNvbnN0IGVsZW1lbnRzID0gZWxlbWVudENoaWxkcmVuKGVsLCBlbGVtZW50c1NlbGVjdG9yKTtcbiAgICBpZiAoc3dpcGVyLmlzRWxlbWVudCkge1xuICAgICAgZWxlbWVudHMucHVzaCguLi5lbGVtZW50Q2hpbGRyZW4oc3dpcGVyLmhvc3RFbCwgZWxlbWVudHNTZWxlY3RvcikpO1xuICAgIH1cbiAgICBlbGVtZW50cy5mb3JFYWNoKHN1YkVsID0+IHtcbiAgICAgIHNldFRyYW5zZm9ybShzdWJFbCwgcHJvZ3Jlc3MpO1xuICAgIH0pO1xuICAgIHNsaWRlcy5mb3JFYWNoKChzbGlkZUVsLCBzbGlkZUluZGV4KSA9PiB7XG4gICAgICBsZXQgc2xpZGVQcm9ncmVzcyA9IHNsaWRlRWwucHJvZ3Jlc3M7XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJHcm91cCA+IDEgJiYgc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJWaWV3ICE9PSAnYXV0bycpIHtcbiAgICAgICAgc2xpZGVQcm9ncmVzcyArPSBNYXRoLmNlaWwoc2xpZGVJbmRleCAvIDIpIC0gcHJvZ3Jlc3MgKiAoc25hcEdyaWQubGVuZ3RoIC0gMSk7XG4gICAgICB9XG4gICAgICBzbGlkZVByb2dyZXNzID0gTWF0aC5taW4oTWF0aC5tYXgoc2xpZGVQcm9ncmVzcywgLTEpLCAxKTtcbiAgICAgIHNsaWRlRWwucXVlcnlTZWxlY3RvckFsbChgJHtlbGVtZW50c1NlbGVjdG9yfSwgW2RhdGEtc3dpcGVyLXBhcmFsbGF4LXJvdGF0ZV1gKS5mb3JFYWNoKHN1YkVsID0+IHtcbiAgICAgICAgc2V0VHJhbnNmb3JtKHN1YkVsLCBzbGlkZVByb2dyZXNzKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9O1xuICBjb25zdCBzZXRUcmFuc2l0aW9uID0gZnVuY3Rpb24gKGR1cmF0aW9uKSB7XG4gICAgaWYgKGR1cmF0aW9uID09PSB2b2lkIDApIHtcbiAgICAgIGR1cmF0aW9uID0gc3dpcGVyLnBhcmFtcy5zcGVlZDtcbiAgICB9XG4gICAgY29uc3Qge1xuICAgICAgZWwsXG4gICAgICBob3N0RWxcbiAgICB9ID0gc3dpcGVyO1xuICAgIGNvbnN0IGVsZW1lbnRzID0gWy4uLmVsLnF1ZXJ5U2VsZWN0b3JBbGwoZWxlbWVudHNTZWxlY3RvcildO1xuICAgIGlmIChzd2lwZXIuaXNFbGVtZW50KSB7XG4gICAgICBlbGVtZW50cy5wdXNoKC4uLmhvc3RFbC5xdWVyeVNlbGVjdG9yQWxsKGVsZW1lbnRzU2VsZWN0b3IpKTtcbiAgICB9XG4gICAgZWxlbWVudHMuZm9yRWFjaChwYXJhbGxheEVsID0+IHtcbiAgICAgIGxldCBwYXJhbGxheER1cmF0aW9uID0gcGFyc2VJbnQocGFyYWxsYXhFbC5nZXRBdHRyaWJ1dGUoJ2RhdGEtc3dpcGVyLXBhcmFsbGF4LWR1cmF0aW9uJyksIDEwKSB8fCBkdXJhdGlvbjtcbiAgICAgIGlmIChkdXJhdGlvbiA9PT0gMCkgcGFyYWxsYXhEdXJhdGlvbiA9IDA7XG4gICAgICBwYXJhbGxheEVsLnN0eWxlLnRyYW5zaXRpb25EdXJhdGlvbiA9IGAke3BhcmFsbGF4RHVyYXRpb259bXNgO1xuICAgIH0pO1xuICB9O1xuICBvbignYmVmb3JlSW5pdCcsICgpID0+IHtcbiAgICBpZiAoIXN3aXBlci5wYXJhbXMucGFyYWxsYXguZW5hYmxlZCkgcmV0dXJuO1xuICAgIHN3aXBlci5wYXJhbXMud2F0Y2hTbGlkZXNQcm9ncmVzcyA9IHRydWU7XG4gICAgc3dpcGVyLm9yaWdpbmFsUGFyYW1zLndhdGNoU2xpZGVzUHJvZ3Jlc3MgPSB0cnVlO1xuICB9KTtcbiAgb24oJ2luaXQnLCAoKSA9PiB7XG4gICAgaWYgKCFzd2lwZXIucGFyYW1zLnBhcmFsbGF4LmVuYWJsZWQpIHJldHVybjtcbiAgICBzZXRUcmFuc2xhdGUoKTtcbiAgfSk7XG4gIG9uKCdzZXRUcmFuc2xhdGUnLCAoKSA9PiB7XG4gICAgaWYgKCFzd2lwZXIucGFyYW1zLnBhcmFsbGF4LmVuYWJsZWQpIHJldHVybjtcbiAgICBzZXRUcmFuc2xhdGUoKTtcbiAgfSk7XG4gIG9uKCdzZXRUcmFuc2l0aW9uJywgKF9zd2lwZXIsIGR1cmF0aW9uKSA9PiB7XG4gICAgaWYgKCFzd2lwZXIucGFyYW1zLnBhcmFsbGF4LmVuYWJsZWQpIHJldHVybjtcbiAgICBzZXRUcmFuc2l0aW9uKGR1cmF0aW9uKTtcbiAgfSk7XG59XG5cbmV4cG9ydCB7IFBhcmFsbGF4IGFzIGRlZmF1bHQgfTtcbiIsImltcG9ydCB7IGEgYXMgZ2V0V2luZG93IH0gZnJvbSAnLi4vc2hhcmVkL3Nzci13aW5kb3cuZXNtLm1qcyc7XG5pbXBvcnQgeyBlIGFzIGVsZW1lbnRDaGlsZHJlbiwgYSBhcyBlbGVtZW50UGFyZW50cywgYiBhcyBlbGVtZW50T2Zmc2V0LCBqIGFzIGdldFRyYW5zbGF0ZSB9IGZyb20gJy4uL3NoYXJlZC91dGlscy5tanMnO1xuXG5mdW5jdGlvbiBab29tKF9yZWYpIHtcbiAgbGV0IHtcbiAgICBzd2lwZXIsXG4gICAgZXh0ZW5kUGFyYW1zLFxuICAgIG9uLFxuICAgIGVtaXRcbiAgfSA9IF9yZWY7XG4gIGNvbnN0IHdpbmRvdyA9IGdldFdpbmRvdygpO1xuICBleHRlbmRQYXJhbXMoe1xuICAgIHpvb206IHtcbiAgICAgIGVuYWJsZWQ6IGZhbHNlLFxuICAgICAgbGltaXRUb09yaWdpbmFsU2l6ZTogZmFsc2UsXG4gICAgICBtYXhSYXRpbzogMyxcbiAgICAgIG1pblJhdGlvOiAxLFxuICAgICAgdG9nZ2xlOiB0cnVlLFxuICAgICAgY29udGFpbmVyQ2xhc3M6ICdzd2lwZXItem9vbS1jb250YWluZXInLFxuICAgICAgem9vbWVkU2xpZGVDbGFzczogJ3N3aXBlci1zbGlkZS16b29tZWQnXG4gICAgfVxuICB9KTtcbiAgc3dpcGVyLnpvb20gPSB7XG4gICAgZW5hYmxlZDogZmFsc2VcbiAgfTtcbiAgbGV0IGN1cnJlbnRTY2FsZSA9IDE7XG4gIGxldCBpc1NjYWxpbmcgPSBmYWxzZTtcbiAgbGV0IGZha2VHZXN0dXJlVG91Y2hlZDtcbiAgbGV0IGZha2VHZXN0dXJlTW92ZWQ7XG4gIGNvbnN0IGV2Q2FjaGUgPSBbXTtcbiAgY29uc3QgZ2VzdHVyZSA9IHtcbiAgICBvcmlnaW5YOiAwLFxuICAgIG9yaWdpblk6IDAsXG4gICAgc2xpZGVFbDogdW5kZWZpbmVkLFxuICAgIHNsaWRlV2lkdGg6IHVuZGVmaW5lZCxcbiAgICBzbGlkZUhlaWdodDogdW5kZWZpbmVkLFxuICAgIGltYWdlRWw6IHVuZGVmaW5lZCxcbiAgICBpbWFnZVdyYXBFbDogdW5kZWZpbmVkLFxuICAgIG1heFJhdGlvOiAzXG4gIH07XG4gIGNvbnN0IGltYWdlID0ge1xuICAgIGlzVG91Y2hlZDogdW5kZWZpbmVkLFxuICAgIGlzTW92ZWQ6IHVuZGVmaW5lZCxcbiAgICBjdXJyZW50WDogdW5kZWZpbmVkLFxuICAgIGN1cnJlbnRZOiB1bmRlZmluZWQsXG4gICAgbWluWDogdW5kZWZpbmVkLFxuICAgIG1pblk6IHVuZGVmaW5lZCxcbiAgICBtYXhYOiB1bmRlZmluZWQsXG4gICAgbWF4WTogdW5kZWZpbmVkLFxuICAgIHdpZHRoOiB1bmRlZmluZWQsXG4gICAgaGVpZ2h0OiB1bmRlZmluZWQsXG4gICAgc3RhcnRYOiB1bmRlZmluZWQsXG4gICAgc3RhcnRZOiB1bmRlZmluZWQsXG4gICAgdG91Y2hlc1N0YXJ0OiB7fSxcbiAgICB0b3VjaGVzQ3VycmVudDoge31cbiAgfTtcbiAgY29uc3QgdmVsb2NpdHkgPSB7XG4gICAgeDogdW5kZWZpbmVkLFxuICAgIHk6IHVuZGVmaW5lZCxcbiAgICBwcmV2UG9zaXRpb25YOiB1bmRlZmluZWQsXG4gICAgcHJldlBvc2l0aW9uWTogdW5kZWZpbmVkLFxuICAgIHByZXZUaW1lOiB1bmRlZmluZWRcbiAgfTtcbiAgbGV0IHNjYWxlID0gMTtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHN3aXBlci56b29tLCAnc2NhbGUnLCB7XG4gICAgZ2V0KCkge1xuICAgICAgcmV0dXJuIHNjYWxlO1xuICAgIH0sXG4gICAgc2V0KHZhbHVlKSB7XG4gICAgICBpZiAoc2NhbGUgIT09IHZhbHVlKSB7XG4gICAgICAgIGNvbnN0IGltYWdlRWwgPSBnZXN0dXJlLmltYWdlRWw7XG4gICAgICAgIGNvbnN0IHNsaWRlRWwgPSBnZXN0dXJlLnNsaWRlRWw7XG4gICAgICAgIGVtaXQoJ3pvb21DaGFuZ2UnLCB2YWx1ZSwgaW1hZ2VFbCwgc2xpZGVFbCk7XG4gICAgICB9XG4gICAgICBzY2FsZSA9IHZhbHVlO1xuICAgIH1cbiAgfSk7XG4gIGZ1bmN0aW9uIGdldERpc3RhbmNlQmV0d2VlblRvdWNoZXMoKSB7XG4gICAgaWYgKGV2Q2FjaGUubGVuZ3RoIDwgMikgcmV0dXJuIDE7XG4gICAgY29uc3QgeDEgPSBldkNhY2hlWzBdLnBhZ2VYO1xuICAgIGNvbnN0IHkxID0gZXZDYWNoZVswXS5wYWdlWTtcbiAgICBjb25zdCB4MiA9IGV2Q2FjaGVbMV0ucGFnZVg7XG4gICAgY29uc3QgeTIgPSBldkNhY2hlWzFdLnBhZ2VZO1xuICAgIGNvbnN0IGRpc3RhbmNlID0gTWF0aC5zcXJ0KCh4MiAtIHgxKSAqKiAyICsgKHkyIC0geTEpICoqIDIpO1xuICAgIHJldHVybiBkaXN0YW5jZTtcbiAgfVxuICBmdW5jdGlvbiBnZXRNYXhSYXRpbygpIHtcbiAgICBjb25zdCBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLnpvb207XG4gICAgY29uc3QgbWF4UmF0aW8gPSBnZXN0dXJlLmltYWdlV3JhcEVsLmdldEF0dHJpYnV0ZSgnZGF0YS1zd2lwZXItem9vbScpIHx8IHBhcmFtcy5tYXhSYXRpbztcbiAgICBpZiAocGFyYW1zLmxpbWl0VG9PcmlnaW5hbFNpemUgJiYgZ2VzdHVyZS5pbWFnZUVsICYmIGdlc3R1cmUuaW1hZ2VFbC5uYXR1cmFsV2lkdGgpIHtcbiAgICAgIGNvbnN0IGltYWdlTWF4UmF0aW8gPSBnZXN0dXJlLmltYWdlRWwubmF0dXJhbFdpZHRoIC8gZ2VzdHVyZS5pbWFnZUVsLm9mZnNldFdpZHRoO1xuICAgICAgcmV0dXJuIE1hdGgubWluKGltYWdlTWF4UmF0aW8sIG1heFJhdGlvKTtcbiAgICB9XG4gICAgcmV0dXJuIG1heFJhdGlvO1xuICB9XG4gIGZ1bmN0aW9uIGdldFNjYWxlT3JpZ2luKCkge1xuICAgIGlmIChldkNhY2hlLmxlbmd0aCA8IDIpIHJldHVybiB7XG4gICAgICB4OiBudWxsLFxuICAgICAgeTogbnVsbFxuICAgIH07XG4gICAgY29uc3QgYm94ID0gZ2VzdHVyZS5pbWFnZUVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgIHJldHVybiBbKGV2Q2FjaGVbMF0ucGFnZVggKyAoZXZDYWNoZVsxXS5wYWdlWCAtIGV2Q2FjaGVbMF0ucGFnZVgpIC8gMiAtIGJveC54IC0gd2luZG93LnNjcm9sbFgpIC8gY3VycmVudFNjYWxlLCAoZXZDYWNoZVswXS5wYWdlWSArIChldkNhY2hlWzFdLnBhZ2VZIC0gZXZDYWNoZVswXS5wYWdlWSkgLyAyIC0gYm94LnkgLSB3aW5kb3cuc2Nyb2xsWSkgLyBjdXJyZW50U2NhbGVdO1xuICB9XG4gIGZ1bmN0aW9uIGdldFNsaWRlU2VsZWN0b3IoKSB7XG4gICAgcmV0dXJuIHN3aXBlci5pc0VsZW1lbnQgPyBgc3dpcGVyLXNsaWRlYCA6IGAuJHtzd2lwZXIucGFyYW1zLnNsaWRlQ2xhc3N9YDtcbiAgfVxuICBmdW5jdGlvbiBldmVudFdpdGhpblNsaWRlKGUpIHtcbiAgICBjb25zdCBzbGlkZVNlbGVjdG9yID0gZ2V0U2xpZGVTZWxlY3RvcigpO1xuICAgIGlmIChlLnRhcmdldC5tYXRjaGVzKHNsaWRlU2VsZWN0b3IpKSByZXR1cm4gdHJ1ZTtcbiAgICBpZiAoc3dpcGVyLnNsaWRlcy5maWx0ZXIoc2xpZGVFbCA9PiBzbGlkZUVsLmNvbnRhaW5zKGUudGFyZ2V0KSkubGVuZ3RoID4gMCkgcmV0dXJuIHRydWU7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGZ1bmN0aW9uIGV2ZW50V2l0aGluWm9vbUNvbnRhaW5lcihlKSB7XG4gICAgY29uc3Qgc2VsZWN0b3IgPSBgLiR7c3dpcGVyLnBhcmFtcy56b29tLmNvbnRhaW5lckNsYXNzfWA7XG4gICAgaWYgKGUudGFyZ2V0Lm1hdGNoZXMoc2VsZWN0b3IpKSByZXR1cm4gdHJ1ZTtcbiAgICBpZiAoWy4uLnN3aXBlci5ob3N0RWwucXVlcnlTZWxlY3RvckFsbChzZWxlY3RvcildLmZpbHRlcihjb250YWluZXJFbCA9PiBjb250YWluZXJFbC5jb250YWlucyhlLnRhcmdldCkpLmxlbmd0aCA+IDApIHJldHVybiB0cnVlO1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8vIEV2ZW50c1xuICBmdW5jdGlvbiBvbkdlc3R1cmVTdGFydChlKSB7XG4gICAgaWYgKGUucG9pbnRlclR5cGUgPT09ICdtb3VzZScpIHtcbiAgICAgIGV2Q2FjaGUuc3BsaWNlKDAsIGV2Q2FjaGUubGVuZ3RoKTtcbiAgICB9XG4gICAgaWYgKCFldmVudFdpdGhpblNsaWRlKGUpKSByZXR1cm47XG4gICAgY29uc3QgcGFyYW1zID0gc3dpcGVyLnBhcmFtcy56b29tO1xuICAgIGZha2VHZXN0dXJlVG91Y2hlZCA9IGZhbHNlO1xuICAgIGZha2VHZXN0dXJlTW92ZWQgPSBmYWxzZTtcbiAgICBldkNhY2hlLnB1c2goZSk7XG4gICAgaWYgKGV2Q2FjaGUubGVuZ3RoIDwgMikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBmYWtlR2VzdHVyZVRvdWNoZWQgPSB0cnVlO1xuICAgIGdlc3R1cmUuc2NhbGVTdGFydCA9IGdldERpc3RhbmNlQmV0d2VlblRvdWNoZXMoKTtcbiAgICBpZiAoIWdlc3R1cmUuc2xpZGVFbCkge1xuICAgICAgZ2VzdHVyZS5zbGlkZUVsID0gZS50YXJnZXQuY2xvc2VzdChgLiR7c3dpcGVyLnBhcmFtcy5zbGlkZUNsYXNzfSwgc3dpcGVyLXNsaWRlYCk7XG4gICAgICBpZiAoIWdlc3R1cmUuc2xpZGVFbCkgZ2VzdHVyZS5zbGlkZUVsID0gc3dpcGVyLnNsaWRlc1tzd2lwZXIuYWN0aXZlSW5kZXhdO1xuICAgICAgbGV0IGltYWdlRWwgPSBnZXN0dXJlLnNsaWRlRWwucXVlcnlTZWxlY3RvcihgLiR7cGFyYW1zLmNvbnRhaW5lckNsYXNzfWApO1xuICAgICAgaWYgKGltYWdlRWwpIHtcbiAgICAgICAgaW1hZ2VFbCA9IGltYWdlRWwucXVlcnlTZWxlY3RvckFsbCgncGljdHVyZSwgaW1nLCBzdmcsIGNhbnZhcywgLnN3aXBlci16b29tLXRhcmdldCcpWzBdO1xuICAgICAgfVxuICAgICAgZ2VzdHVyZS5pbWFnZUVsID0gaW1hZ2VFbDtcbiAgICAgIGlmIChpbWFnZUVsKSB7XG4gICAgICAgIGdlc3R1cmUuaW1hZ2VXcmFwRWwgPSBlbGVtZW50UGFyZW50cyhnZXN0dXJlLmltYWdlRWwsIGAuJHtwYXJhbXMuY29udGFpbmVyQ2xhc3N9YClbMF07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBnZXN0dXJlLmltYWdlV3JhcEVsID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgaWYgKCFnZXN0dXJlLmltYWdlV3JhcEVsKSB7XG4gICAgICAgIGdlc3R1cmUuaW1hZ2VFbCA9IHVuZGVmaW5lZDtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgZ2VzdHVyZS5tYXhSYXRpbyA9IGdldE1heFJhdGlvKCk7XG4gICAgfVxuICAgIGlmIChnZXN0dXJlLmltYWdlRWwpIHtcbiAgICAgIGNvbnN0IFtvcmlnaW5YLCBvcmlnaW5ZXSA9IGdldFNjYWxlT3JpZ2luKCk7XG4gICAgICBnZXN0dXJlLm9yaWdpblggPSBvcmlnaW5YO1xuICAgICAgZ2VzdHVyZS5vcmlnaW5ZID0gb3JpZ2luWTtcbiAgICAgIGdlc3R1cmUuaW1hZ2VFbC5zdHlsZS50cmFuc2l0aW9uRHVyYXRpb24gPSAnMG1zJztcbiAgICB9XG4gICAgaXNTY2FsaW5nID0gdHJ1ZTtcbiAgfVxuICBmdW5jdGlvbiBvbkdlc3R1cmVDaGFuZ2UoZSkge1xuICAgIGlmICghZXZlbnRXaXRoaW5TbGlkZShlKSkgcmV0dXJuO1xuICAgIGNvbnN0IHBhcmFtcyA9IHN3aXBlci5wYXJhbXMuem9vbTtcbiAgICBjb25zdCB6b29tID0gc3dpcGVyLnpvb207XG4gICAgY29uc3QgcG9pbnRlckluZGV4ID0gZXZDYWNoZS5maW5kSW5kZXgoY2FjaGVkRXYgPT4gY2FjaGVkRXYucG9pbnRlcklkID09PSBlLnBvaW50ZXJJZCk7XG4gICAgaWYgKHBvaW50ZXJJbmRleCA+PSAwKSBldkNhY2hlW3BvaW50ZXJJbmRleF0gPSBlO1xuICAgIGlmIChldkNhY2hlLmxlbmd0aCA8IDIpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZmFrZUdlc3R1cmVNb3ZlZCA9IHRydWU7XG4gICAgZ2VzdHVyZS5zY2FsZU1vdmUgPSBnZXREaXN0YW5jZUJldHdlZW5Ub3VjaGVzKCk7XG4gICAgaWYgKCFnZXN0dXJlLmltYWdlRWwpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgem9vbS5zY2FsZSA9IGdlc3R1cmUuc2NhbGVNb3ZlIC8gZ2VzdHVyZS5zY2FsZVN0YXJ0ICogY3VycmVudFNjYWxlO1xuICAgIGlmICh6b29tLnNjYWxlID4gZ2VzdHVyZS5tYXhSYXRpbykge1xuICAgICAgem9vbS5zY2FsZSA9IGdlc3R1cmUubWF4UmF0aW8gLSAxICsgKHpvb20uc2NhbGUgLSBnZXN0dXJlLm1heFJhdGlvICsgMSkgKiogMC41O1xuICAgIH1cbiAgICBpZiAoem9vbS5zY2FsZSA8IHBhcmFtcy5taW5SYXRpbykge1xuICAgICAgem9vbS5zY2FsZSA9IHBhcmFtcy5taW5SYXRpbyArIDEgLSAocGFyYW1zLm1pblJhdGlvIC0gem9vbS5zY2FsZSArIDEpICoqIDAuNTtcbiAgICB9XG4gICAgZ2VzdHVyZS5pbWFnZUVsLnN0eWxlLnRyYW5zZm9ybSA9IGB0cmFuc2xhdGUzZCgwLDAsMCkgc2NhbGUoJHt6b29tLnNjYWxlfSlgO1xuICB9XG4gIGZ1bmN0aW9uIG9uR2VzdHVyZUVuZChlKSB7XG4gICAgaWYgKCFldmVudFdpdGhpblNsaWRlKGUpKSByZXR1cm47XG4gICAgaWYgKGUucG9pbnRlclR5cGUgPT09ICdtb3VzZScgJiYgZS50eXBlID09PSAncG9pbnRlcm91dCcpIHJldHVybjtcbiAgICBjb25zdCBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLnpvb207XG4gICAgY29uc3Qgem9vbSA9IHN3aXBlci56b29tO1xuICAgIGNvbnN0IHBvaW50ZXJJbmRleCA9IGV2Q2FjaGUuZmluZEluZGV4KGNhY2hlZEV2ID0+IGNhY2hlZEV2LnBvaW50ZXJJZCA9PT0gZS5wb2ludGVySWQpO1xuICAgIGlmIChwb2ludGVySW5kZXggPj0gMCkgZXZDYWNoZS5zcGxpY2UocG9pbnRlckluZGV4LCAxKTtcbiAgICBpZiAoIWZha2VHZXN0dXJlVG91Y2hlZCB8fCAhZmFrZUdlc3R1cmVNb3ZlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBmYWtlR2VzdHVyZVRvdWNoZWQgPSBmYWxzZTtcbiAgICBmYWtlR2VzdHVyZU1vdmVkID0gZmFsc2U7XG4gICAgaWYgKCFnZXN0dXJlLmltYWdlRWwpIHJldHVybjtcbiAgICB6b29tLnNjYWxlID0gTWF0aC5tYXgoTWF0aC5taW4oem9vbS5zY2FsZSwgZ2VzdHVyZS5tYXhSYXRpbyksIHBhcmFtcy5taW5SYXRpbyk7XG4gICAgZ2VzdHVyZS5pbWFnZUVsLnN0eWxlLnRyYW5zaXRpb25EdXJhdGlvbiA9IGAke3N3aXBlci5wYXJhbXMuc3BlZWR9bXNgO1xuICAgIGdlc3R1cmUuaW1hZ2VFbC5zdHlsZS50cmFuc2Zvcm0gPSBgdHJhbnNsYXRlM2QoMCwwLDApIHNjYWxlKCR7em9vbS5zY2FsZX0pYDtcbiAgICBjdXJyZW50U2NhbGUgPSB6b29tLnNjYWxlO1xuICAgIGlzU2NhbGluZyA9IGZhbHNlO1xuICAgIGlmICh6b29tLnNjYWxlID4gMSAmJiBnZXN0dXJlLnNsaWRlRWwpIHtcbiAgICAgIGdlc3R1cmUuc2xpZGVFbC5jbGFzc0xpc3QuYWRkKGAke3BhcmFtcy56b29tZWRTbGlkZUNsYXNzfWApO1xuICAgIH0gZWxzZSBpZiAoem9vbS5zY2FsZSA8PSAxICYmIGdlc3R1cmUuc2xpZGVFbCkge1xuICAgICAgZ2VzdHVyZS5zbGlkZUVsLmNsYXNzTGlzdC5yZW1vdmUoYCR7cGFyYW1zLnpvb21lZFNsaWRlQ2xhc3N9YCk7XG4gICAgfVxuICAgIGlmICh6b29tLnNjYWxlID09PSAxKSB7XG4gICAgICBnZXN0dXJlLm9yaWdpblggPSAwO1xuICAgICAgZ2VzdHVyZS5vcmlnaW5ZID0gMDtcbiAgICAgIGdlc3R1cmUuc2xpZGVFbCA9IHVuZGVmaW5lZDtcbiAgICB9XG4gIH1cbiAgbGV0IGFsbG93VG91Y2hNb3ZlVGltZW91dDtcbiAgZnVuY3Rpb24gYWxsb3dUb3VjaE1vdmUoKSB7XG4gICAgc3dpcGVyLnRvdWNoRXZlbnRzRGF0YS5wcmV2ZW50VG91Y2hNb3ZlRnJvbVBvaW50ZXJNb3ZlID0gZmFsc2U7XG4gIH1cbiAgZnVuY3Rpb24gcHJldmVudFRvdWNoTW92ZSgpIHtcbiAgICBjbGVhclRpbWVvdXQoYWxsb3dUb3VjaE1vdmVUaW1lb3V0KTtcbiAgICBzd2lwZXIudG91Y2hFdmVudHNEYXRhLnByZXZlbnRUb3VjaE1vdmVGcm9tUG9pbnRlck1vdmUgPSB0cnVlO1xuICAgIGFsbG93VG91Y2hNb3ZlVGltZW91dCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgYWxsb3dUb3VjaE1vdmUoKTtcbiAgICB9KTtcbiAgfVxuICBmdW5jdGlvbiBvblRvdWNoU3RhcnQoZSkge1xuICAgIGNvbnN0IGRldmljZSA9IHN3aXBlci5kZXZpY2U7XG4gICAgaWYgKCFnZXN0dXJlLmltYWdlRWwpIHJldHVybjtcbiAgICBpZiAoaW1hZ2UuaXNUb3VjaGVkKSByZXR1cm47XG4gICAgaWYgKGRldmljZS5hbmRyb2lkICYmIGUuY2FuY2VsYWJsZSkgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGltYWdlLmlzVG91Y2hlZCA9IHRydWU7XG4gICAgY29uc3QgZXZlbnQgPSBldkNhY2hlLmxlbmd0aCA+IDAgPyBldkNhY2hlWzBdIDogZTtcbiAgICBpbWFnZS50b3VjaGVzU3RhcnQueCA9IGV2ZW50LnBhZ2VYO1xuICAgIGltYWdlLnRvdWNoZXNTdGFydC55ID0gZXZlbnQucGFnZVk7XG4gIH1cbiAgZnVuY3Rpb24gb25Ub3VjaE1vdmUoZSkge1xuICAgIGlmICghZXZlbnRXaXRoaW5TbGlkZShlKSB8fCAhZXZlbnRXaXRoaW5ab29tQ29udGFpbmVyKGUpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IHpvb20gPSBzd2lwZXIuem9vbTtcbiAgICBpZiAoIWdlc3R1cmUuaW1hZ2VFbCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoIWltYWdlLmlzVG91Y2hlZCB8fCAhZ2VzdHVyZS5zbGlkZUVsKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICghaW1hZ2UuaXNNb3ZlZCkge1xuICAgICAgaW1hZ2Uud2lkdGggPSBnZXN0dXJlLmltYWdlRWwub2Zmc2V0V2lkdGggfHwgZ2VzdHVyZS5pbWFnZUVsLmNsaWVudFdpZHRoO1xuICAgICAgaW1hZ2UuaGVpZ2h0ID0gZ2VzdHVyZS5pbWFnZUVsLm9mZnNldEhlaWdodCB8fCBnZXN0dXJlLmltYWdlRWwuY2xpZW50SGVpZ2h0O1xuICAgICAgaW1hZ2Uuc3RhcnRYID0gZ2V0VHJhbnNsYXRlKGdlc3R1cmUuaW1hZ2VXcmFwRWwsICd4JykgfHwgMDtcbiAgICAgIGltYWdlLnN0YXJ0WSA9IGdldFRyYW5zbGF0ZShnZXN0dXJlLmltYWdlV3JhcEVsLCAneScpIHx8IDA7XG4gICAgICBnZXN0dXJlLnNsaWRlV2lkdGggPSBnZXN0dXJlLnNsaWRlRWwub2Zmc2V0V2lkdGg7XG4gICAgICBnZXN0dXJlLnNsaWRlSGVpZ2h0ID0gZ2VzdHVyZS5zbGlkZUVsLm9mZnNldEhlaWdodDtcbiAgICAgIGdlc3R1cmUuaW1hZ2VXcmFwRWwuc3R5bGUudHJhbnNpdGlvbkR1cmF0aW9uID0gJzBtcyc7XG4gICAgfVxuICAgIC8vIERlZmluZSBpZiB3ZSBuZWVkIGltYWdlIGRyYWdcbiAgICBjb25zdCBzY2FsZWRXaWR0aCA9IGltYWdlLndpZHRoICogem9vbS5zY2FsZTtcbiAgICBjb25zdCBzY2FsZWRIZWlnaHQgPSBpbWFnZS5oZWlnaHQgKiB6b29tLnNjYWxlO1xuICAgIGltYWdlLm1pblggPSBNYXRoLm1pbihnZXN0dXJlLnNsaWRlV2lkdGggLyAyIC0gc2NhbGVkV2lkdGggLyAyLCAwKTtcbiAgICBpbWFnZS5tYXhYID0gLWltYWdlLm1pblg7XG4gICAgaW1hZ2UubWluWSA9IE1hdGgubWluKGdlc3R1cmUuc2xpZGVIZWlnaHQgLyAyIC0gc2NhbGVkSGVpZ2h0IC8gMiwgMCk7XG4gICAgaW1hZ2UubWF4WSA9IC1pbWFnZS5taW5ZO1xuICAgIGltYWdlLnRvdWNoZXNDdXJyZW50LnggPSBldkNhY2hlLmxlbmd0aCA+IDAgPyBldkNhY2hlWzBdLnBhZ2VYIDogZS5wYWdlWDtcbiAgICBpbWFnZS50b3VjaGVzQ3VycmVudC55ID0gZXZDYWNoZS5sZW5ndGggPiAwID8gZXZDYWNoZVswXS5wYWdlWSA6IGUucGFnZVk7XG4gICAgY29uc3QgdG91Y2hlc0RpZmYgPSBNYXRoLm1heChNYXRoLmFicyhpbWFnZS50b3VjaGVzQ3VycmVudC54IC0gaW1hZ2UudG91Y2hlc1N0YXJ0LngpLCBNYXRoLmFicyhpbWFnZS50b3VjaGVzQ3VycmVudC55IC0gaW1hZ2UudG91Y2hlc1N0YXJ0LnkpKTtcbiAgICBpZiAodG91Y2hlc0RpZmYgPiA1KSB7XG4gICAgICBzd2lwZXIuYWxsb3dDbGljayA9IGZhbHNlO1xuICAgIH1cbiAgICBpZiAoIWltYWdlLmlzTW92ZWQgJiYgIWlzU2NhbGluZykge1xuICAgICAgaWYgKHN3aXBlci5pc0hvcml6b250YWwoKSAmJiAoTWF0aC5mbG9vcihpbWFnZS5taW5YKSA9PT0gTWF0aC5mbG9vcihpbWFnZS5zdGFydFgpICYmIGltYWdlLnRvdWNoZXNDdXJyZW50LnggPCBpbWFnZS50b3VjaGVzU3RhcnQueCB8fCBNYXRoLmZsb29yKGltYWdlLm1heFgpID09PSBNYXRoLmZsb29yKGltYWdlLnN0YXJ0WCkgJiYgaW1hZ2UudG91Y2hlc0N1cnJlbnQueCA+IGltYWdlLnRvdWNoZXNTdGFydC54KSkge1xuICAgICAgICBpbWFnZS5pc1RvdWNoZWQgPSBmYWxzZTtcbiAgICAgICAgYWxsb3dUb3VjaE1vdmUoKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKCFzd2lwZXIuaXNIb3Jpem9udGFsKCkgJiYgKE1hdGguZmxvb3IoaW1hZ2UubWluWSkgPT09IE1hdGguZmxvb3IoaW1hZ2Uuc3RhcnRZKSAmJiBpbWFnZS50b3VjaGVzQ3VycmVudC55IDwgaW1hZ2UudG91Y2hlc1N0YXJ0LnkgfHwgTWF0aC5mbG9vcihpbWFnZS5tYXhZKSA9PT0gTWF0aC5mbG9vcihpbWFnZS5zdGFydFkpICYmIGltYWdlLnRvdWNoZXNDdXJyZW50LnkgPiBpbWFnZS50b3VjaGVzU3RhcnQueSkpIHtcbiAgICAgICAgaW1hZ2UuaXNUb3VjaGVkID0gZmFsc2U7XG4gICAgICAgIGFsbG93VG91Y2hNb3ZlKCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGUuY2FuY2VsYWJsZSkge1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH1cbiAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIHByZXZlbnRUb3VjaE1vdmUoKTtcbiAgICBpbWFnZS5pc01vdmVkID0gdHJ1ZTtcbiAgICBjb25zdCBzY2FsZVJhdGlvID0gKHpvb20uc2NhbGUgLSBjdXJyZW50U2NhbGUpIC8gKGdlc3R1cmUubWF4UmF0aW8gLSBzd2lwZXIucGFyYW1zLnpvb20ubWluUmF0aW8pO1xuICAgIGNvbnN0IHtcbiAgICAgIG9yaWdpblgsXG4gICAgICBvcmlnaW5ZXG4gICAgfSA9IGdlc3R1cmU7XG4gICAgaW1hZ2UuY3VycmVudFggPSBpbWFnZS50b3VjaGVzQ3VycmVudC54IC0gaW1hZ2UudG91Y2hlc1N0YXJ0LnggKyBpbWFnZS5zdGFydFggKyBzY2FsZVJhdGlvICogKGltYWdlLndpZHRoIC0gb3JpZ2luWCAqIDIpO1xuICAgIGltYWdlLmN1cnJlbnRZID0gaW1hZ2UudG91Y2hlc0N1cnJlbnQueSAtIGltYWdlLnRvdWNoZXNTdGFydC55ICsgaW1hZ2Uuc3RhcnRZICsgc2NhbGVSYXRpbyAqIChpbWFnZS5oZWlnaHQgLSBvcmlnaW5ZICogMik7XG4gICAgaWYgKGltYWdlLmN1cnJlbnRYIDwgaW1hZ2UubWluWCkge1xuICAgICAgaW1hZ2UuY3VycmVudFggPSBpbWFnZS5taW5YICsgMSAtIChpbWFnZS5taW5YIC0gaW1hZ2UuY3VycmVudFggKyAxKSAqKiAwLjg7XG4gICAgfVxuICAgIGlmIChpbWFnZS5jdXJyZW50WCA+IGltYWdlLm1heFgpIHtcbiAgICAgIGltYWdlLmN1cnJlbnRYID0gaW1hZ2UubWF4WCAtIDEgKyAoaW1hZ2UuY3VycmVudFggLSBpbWFnZS5tYXhYICsgMSkgKiogMC44O1xuICAgIH1cbiAgICBpZiAoaW1hZ2UuY3VycmVudFkgPCBpbWFnZS5taW5ZKSB7XG4gICAgICBpbWFnZS5jdXJyZW50WSA9IGltYWdlLm1pblkgKyAxIC0gKGltYWdlLm1pblkgLSBpbWFnZS5jdXJyZW50WSArIDEpICoqIDAuODtcbiAgICB9XG4gICAgaWYgKGltYWdlLmN1cnJlbnRZID4gaW1hZ2UubWF4WSkge1xuICAgICAgaW1hZ2UuY3VycmVudFkgPSBpbWFnZS5tYXhZIC0gMSArIChpbWFnZS5jdXJyZW50WSAtIGltYWdlLm1heFkgKyAxKSAqKiAwLjg7XG4gICAgfVxuXG4gICAgLy8gVmVsb2NpdHlcbiAgICBpZiAoIXZlbG9jaXR5LnByZXZQb3NpdGlvblgpIHZlbG9jaXR5LnByZXZQb3NpdGlvblggPSBpbWFnZS50b3VjaGVzQ3VycmVudC54O1xuICAgIGlmICghdmVsb2NpdHkucHJldlBvc2l0aW9uWSkgdmVsb2NpdHkucHJldlBvc2l0aW9uWSA9IGltYWdlLnRvdWNoZXNDdXJyZW50Lnk7XG4gICAgaWYgKCF2ZWxvY2l0eS5wcmV2VGltZSkgdmVsb2NpdHkucHJldlRpbWUgPSBEYXRlLm5vdygpO1xuICAgIHZlbG9jaXR5LnggPSAoaW1hZ2UudG91Y2hlc0N1cnJlbnQueCAtIHZlbG9jaXR5LnByZXZQb3NpdGlvblgpIC8gKERhdGUubm93KCkgLSB2ZWxvY2l0eS5wcmV2VGltZSkgLyAyO1xuICAgIHZlbG9jaXR5LnkgPSAoaW1hZ2UudG91Y2hlc0N1cnJlbnQueSAtIHZlbG9jaXR5LnByZXZQb3NpdGlvblkpIC8gKERhdGUubm93KCkgLSB2ZWxvY2l0eS5wcmV2VGltZSkgLyAyO1xuICAgIGlmIChNYXRoLmFicyhpbWFnZS50b3VjaGVzQ3VycmVudC54IC0gdmVsb2NpdHkucHJldlBvc2l0aW9uWCkgPCAyKSB2ZWxvY2l0eS54ID0gMDtcbiAgICBpZiAoTWF0aC5hYnMoaW1hZ2UudG91Y2hlc0N1cnJlbnQueSAtIHZlbG9jaXR5LnByZXZQb3NpdGlvblkpIDwgMikgdmVsb2NpdHkueSA9IDA7XG4gICAgdmVsb2NpdHkucHJldlBvc2l0aW9uWCA9IGltYWdlLnRvdWNoZXNDdXJyZW50Lng7XG4gICAgdmVsb2NpdHkucHJldlBvc2l0aW9uWSA9IGltYWdlLnRvdWNoZXNDdXJyZW50Lnk7XG4gICAgdmVsb2NpdHkucHJldlRpbWUgPSBEYXRlLm5vdygpO1xuICAgIGdlc3R1cmUuaW1hZ2VXcmFwRWwuc3R5bGUudHJhbnNmb3JtID0gYHRyYW5zbGF0ZTNkKCR7aW1hZ2UuY3VycmVudFh9cHgsICR7aW1hZ2UuY3VycmVudFl9cHgsMClgO1xuICB9XG4gIGZ1bmN0aW9uIG9uVG91Y2hFbmQoKSB7XG4gICAgY29uc3Qgem9vbSA9IHN3aXBlci56b29tO1xuICAgIGlmICghZ2VzdHVyZS5pbWFnZUVsKSByZXR1cm47XG4gICAgaWYgKCFpbWFnZS5pc1RvdWNoZWQgfHwgIWltYWdlLmlzTW92ZWQpIHtcbiAgICAgIGltYWdlLmlzVG91Y2hlZCA9IGZhbHNlO1xuICAgICAgaW1hZ2UuaXNNb3ZlZCA9IGZhbHNlO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpbWFnZS5pc1RvdWNoZWQgPSBmYWxzZTtcbiAgICBpbWFnZS5pc01vdmVkID0gZmFsc2U7XG4gICAgbGV0IG1vbWVudHVtRHVyYXRpb25YID0gMzAwO1xuICAgIGxldCBtb21lbnR1bUR1cmF0aW9uWSA9IDMwMDtcbiAgICBjb25zdCBtb21lbnR1bURpc3RhbmNlWCA9IHZlbG9jaXR5LnggKiBtb21lbnR1bUR1cmF0aW9uWDtcbiAgICBjb25zdCBuZXdQb3NpdGlvblggPSBpbWFnZS5jdXJyZW50WCArIG1vbWVudHVtRGlzdGFuY2VYO1xuICAgIGNvbnN0IG1vbWVudHVtRGlzdGFuY2VZID0gdmVsb2NpdHkueSAqIG1vbWVudHVtRHVyYXRpb25ZO1xuICAgIGNvbnN0IG5ld1Bvc2l0aW9uWSA9IGltYWdlLmN1cnJlbnRZICsgbW9tZW50dW1EaXN0YW5jZVk7XG5cbiAgICAvLyBGaXggZHVyYXRpb25cbiAgICBpZiAodmVsb2NpdHkueCAhPT0gMCkgbW9tZW50dW1EdXJhdGlvblggPSBNYXRoLmFicygobmV3UG9zaXRpb25YIC0gaW1hZ2UuY3VycmVudFgpIC8gdmVsb2NpdHkueCk7XG4gICAgaWYgKHZlbG9jaXR5LnkgIT09IDApIG1vbWVudHVtRHVyYXRpb25ZID0gTWF0aC5hYnMoKG5ld1Bvc2l0aW9uWSAtIGltYWdlLmN1cnJlbnRZKSAvIHZlbG9jaXR5LnkpO1xuICAgIGNvbnN0IG1vbWVudHVtRHVyYXRpb24gPSBNYXRoLm1heChtb21lbnR1bUR1cmF0aW9uWCwgbW9tZW50dW1EdXJhdGlvblkpO1xuICAgIGltYWdlLmN1cnJlbnRYID0gbmV3UG9zaXRpb25YO1xuICAgIGltYWdlLmN1cnJlbnRZID0gbmV3UG9zaXRpb25ZO1xuICAgIC8vIERlZmluZSBpZiB3ZSBuZWVkIGltYWdlIGRyYWdcbiAgICBjb25zdCBzY2FsZWRXaWR0aCA9IGltYWdlLndpZHRoICogem9vbS5zY2FsZTtcbiAgICBjb25zdCBzY2FsZWRIZWlnaHQgPSBpbWFnZS5oZWlnaHQgKiB6b29tLnNjYWxlO1xuICAgIGltYWdlLm1pblggPSBNYXRoLm1pbihnZXN0dXJlLnNsaWRlV2lkdGggLyAyIC0gc2NhbGVkV2lkdGggLyAyLCAwKTtcbiAgICBpbWFnZS5tYXhYID0gLWltYWdlLm1pblg7XG4gICAgaW1hZ2UubWluWSA9IE1hdGgubWluKGdlc3R1cmUuc2xpZGVIZWlnaHQgLyAyIC0gc2NhbGVkSGVpZ2h0IC8gMiwgMCk7XG4gICAgaW1hZ2UubWF4WSA9IC1pbWFnZS5taW5ZO1xuICAgIGltYWdlLmN1cnJlbnRYID0gTWF0aC5tYXgoTWF0aC5taW4oaW1hZ2UuY3VycmVudFgsIGltYWdlLm1heFgpLCBpbWFnZS5taW5YKTtcbiAgICBpbWFnZS5jdXJyZW50WSA9IE1hdGgubWF4KE1hdGgubWluKGltYWdlLmN1cnJlbnRZLCBpbWFnZS5tYXhZKSwgaW1hZ2UubWluWSk7XG4gICAgZ2VzdHVyZS5pbWFnZVdyYXBFbC5zdHlsZS50cmFuc2l0aW9uRHVyYXRpb24gPSBgJHttb21lbnR1bUR1cmF0aW9ufW1zYDtcbiAgICBnZXN0dXJlLmltYWdlV3JhcEVsLnN0eWxlLnRyYW5zZm9ybSA9IGB0cmFuc2xhdGUzZCgke2ltYWdlLmN1cnJlbnRYfXB4LCAke2ltYWdlLmN1cnJlbnRZfXB4LDApYDtcbiAgfVxuICBmdW5jdGlvbiBvblRyYW5zaXRpb25FbmQoKSB7XG4gICAgY29uc3Qgem9vbSA9IHN3aXBlci56b29tO1xuICAgIGlmIChnZXN0dXJlLnNsaWRlRWwgJiYgc3dpcGVyLmFjdGl2ZUluZGV4ICE9PSBzd2lwZXIuc2xpZGVzLmluZGV4T2YoZ2VzdHVyZS5zbGlkZUVsKSkge1xuICAgICAgaWYgKGdlc3R1cmUuaW1hZ2VFbCkge1xuICAgICAgICBnZXN0dXJlLmltYWdlRWwuc3R5bGUudHJhbnNmb3JtID0gJ3RyYW5zbGF0ZTNkKDAsMCwwKSBzY2FsZSgxKSc7XG4gICAgICB9XG4gICAgICBpZiAoZ2VzdHVyZS5pbWFnZVdyYXBFbCkge1xuICAgICAgICBnZXN0dXJlLmltYWdlV3JhcEVsLnN0eWxlLnRyYW5zZm9ybSA9ICd0cmFuc2xhdGUzZCgwLDAsMCknO1xuICAgICAgfVxuICAgICAgZ2VzdHVyZS5zbGlkZUVsLmNsYXNzTGlzdC5yZW1vdmUoYCR7c3dpcGVyLnBhcmFtcy56b29tLnpvb21lZFNsaWRlQ2xhc3N9YCk7XG4gICAgICB6b29tLnNjYWxlID0gMTtcbiAgICAgIGN1cnJlbnRTY2FsZSA9IDE7XG4gICAgICBnZXN0dXJlLnNsaWRlRWwgPSB1bmRlZmluZWQ7XG4gICAgICBnZXN0dXJlLmltYWdlRWwgPSB1bmRlZmluZWQ7XG4gICAgICBnZXN0dXJlLmltYWdlV3JhcEVsID0gdW5kZWZpbmVkO1xuICAgICAgZ2VzdHVyZS5vcmlnaW5YID0gMDtcbiAgICAgIGdlc3R1cmUub3JpZ2luWSA9IDA7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIHpvb21JbihlKSB7XG4gICAgY29uc3Qgem9vbSA9IHN3aXBlci56b29tO1xuICAgIGNvbnN0IHBhcmFtcyA9IHN3aXBlci5wYXJhbXMuem9vbTtcbiAgICBpZiAoIWdlc3R1cmUuc2xpZGVFbCkge1xuICAgICAgaWYgKGUgJiYgZS50YXJnZXQpIHtcbiAgICAgICAgZ2VzdHVyZS5zbGlkZUVsID0gZS50YXJnZXQuY2xvc2VzdChgLiR7c3dpcGVyLnBhcmFtcy5zbGlkZUNsYXNzfSwgc3dpcGVyLXNsaWRlYCk7XG4gICAgICB9XG4gICAgICBpZiAoIWdlc3R1cmUuc2xpZGVFbCkge1xuICAgICAgICBpZiAoc3dpcGVyLnBhcmFtcy52aXJ0dWFsICYmIHN3aXBlci5wYXJhbXMudmlydHVhbC5lbmFibGVkICYmIHN3aXBlci52aXJ0dWFsKSB7XG4gICAgICAgICAgZ2VzdHVyZS5zbGlkZUVsID0gZWxlbWVudENoaWxkcmVuKHN3aXBlci5zbGlkZXNFbCwgYC4ke3N3aXBlci5wYXJhbXMuc2xpZGVBY3RpdmVDbGFzc31gKVswXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBnZXN0dXJlLnNsaWRlRWwgPSBzd2lwZXIuc2xpZGVzW3N3aXBlci5hY3RpdmVJbmRleF07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGxldCBpbWFnZUVsID0gZ2VzdHVyZS5zbGlkZUVsLnF1ZXJ5U2VsZWN0b3IoYC4ke3BhcmFtcy5jb250YWluZXJDbGFzc31gKTtcbiAgICAgIGlmIChpbWFnZUVsKSB7XG4gICAgICAgIGltYWdlRWwgPSBpbWFnZUVsLnF1ZXJ5U2VsZWN0b3JBbGwoJ3BpY3R1cmUsIGltZywgc3ZnLCBjYW52YXMsIC5zd2lwZXItem9vbS10YXJnZXQnKVswXTtcbiAgICAgIH1cbiAgICAgIGdlc3R1cmUuaW1hZ2VFbCA9IGltYWdlRWw7XG4gICAgICBpZiAoaW1hZ2VFbCkge1xuICAgICAgICBnZXN0dXJlLmltYWdlV3JhcEVsID0gZWxlbWVudFBhcmVudHMoZ2VzdHVyZS5pbWFnZUVsLCBgLiR7cGFyYW1zLmNvbnRhaW5lckNsYXNzfWApWzBdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZ2VzdHVyZS5pbWFnZVdyYXBFbCA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKCFnZXN0dXJlLmltYWdlRWwgfHwgIWdlc3R1cmUuaW1hZ2VXcmFwRWwpIHJldHVybjtcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5jc3NNb2RlKSB7XG4gICAgICBzd2lwZXIud3JhcHBlckVsLnN0eWxlLm92ZXJmbG93ID0gJ2hpZGRlbic7XG4gICAgICBzd2lwZXIud3JhcHBlckVsLnN0eWxlLnRvdWNoQWN0aW9uID0gJ25vbmUnO1xuICAgIH1cbiAgICBnZXN0dXJlLnNsaWRlRWwuY2xhc3NMaXN0LmFkZChgJHtwYXJhbXMuem9vbWVkU2xpZGVDbGFzc31gKTtcbiAgICBsZXQgdG91Y2hYO1xuICAgIGxldCB0b3VjaFk7XG4gICAgbGV0IG9mZnNldFg7XG4gICAgbGV0IG9mZnNldFk7XG4gICAgbGV0IGRpZmZYO1xuICAgIGxldCBkaWZmWTtcbiAgICBsZXQgdHJhbnNsYXRlWDtcbiAgICBsZXQgdHJhbnNsYXRlWTtcbiAgICBsZXQgaW1hZ2VXaWR0aDtcbiAgICBsZXQgaW1hZ2VIZWlnaHQ7XG4gICAgbGV0IHNjYWxlZFdpZHRoO1xuICAgIGxldCBzY2FsZWRIZWlnaHQ7XG4gICAgbGV0IHRyYW5zbGF0ZU1pblg7XG4gICAgbGV0IHRyYW5zbGF0ZU1pblk7XG4gICAgbGV0IHRyYW5zbGF0ZU1heFg7XG4gICAgbGV0IHRyYW5zbGF0ZU1heFk7XG4gICAgbGV0IHNsaWRlV2lkdGg7XG4gICAgbGV0IHNsaWRlSGVpZ2h0O1xuICAgIGlmICh0eXBlb2YgaW1hZ2UudG91Y2hlc1N0YXJ0LnggPT09ICd1bmRlZmluZWQnICYmIGUpIHtcbiAgICAgIHRvdWNoWCA9IGUucGFnZVg7XG4gICAgICB0b3VjaFkgPSBlLnBhZ2VZO1xuICAgIH0gZWxzZSB7XG4gICAgICB0b3VjaFggPSBpbWFnZS50b3VjaGVzU3RhcnQueDtcbiAgICAgIHRvdWNoWSA9IGltYWdlLnRvdWNoZXNTdGFydC55O1xuICAgIH1cbiAgICBjb25zdCBmb3JjZVpvb21SYXRpbyA9IHR5cGVvZiBlID09PSAnbnVtYmVyJyA/IGUgOiBudWxsO1xuICAgIGlmIChjdXJyZW50U2NhbGUgPT09IDEgJiYgZm9yY2Vab29tUmF0aW8pIHtcbiAgICAgIHRvdWNoWCA9IHVuZGVmaW5lZDtcbiAgICAgIHRvdWNoWSA9IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgY29uc3QgbWF4UmF0aW8gPSBnZXRNYXhSYXRpbygpO1xuICAgIHpvb20uc2NhbGUgPSBmb3JjZVpvb21SYXRpbyB8fCBtYXhSYXRpbztcbiAgICBjdXJyZW50U2NhbGUgPSBmb3JjZVpvb21SYXRpbyB8fCBtYXhSYXRpbztcbiAgICBpZiAoZSAmJiAhKGN1cnJlbnRTY2FsZSA9PT0gMSAmJiBmb3JjZVpvb21SYXRpbykpIHtcbiAgICAgIHNsaWRlV2lkdGggPSBnZXN0dXJlLnNsaWRlRWwub2Zmc2V0V2lkdGg7XG4gICAgICBzbGlkZUhlaWdodCA9IGdlc3R1cmUuc2xpZGVFbC5vZmZzZXRIZWlnaHQ7XG4gICAgICBvZmZzZXRYID0gZWxlbWVudE9mZnNldChnZXN0dXJlLnNsaWRlRWwpLmxlZnQgKyB3aW5kb3cuc2Nyb2xsWDtcbiAgICAgIG9mZnNldFkgPSBlbGVtZW50T2Zmc2V0KGdlc3R1cmUuc2xpZGVFbCkudG9wICsgd2luZG93LnNjcm9sbFk7XG4gICAgICBkaWZmWCA9IG9mZnNldFggKyBzbGlkZVdpZHRoIC8gMiAtIHRvdWNoWDtcbiAgICAgIGRpZmZZID0gb2Zmc2V0WSArIHNsaWRlSGVpZ2h0IC8gMiAtIHRvdWNoWTtcbiAgICAgIGltYWdlV2lkdGggPSBnZXN0dXJlLmltYWdlRWwub2Zmc2V0V2lkdGggfHwgZ2VzdHVyZS5pbWFnZUVsLmNsaWVudFdpZHRoO1xuICAgICAgaW1hZ2VIZWlnaHQgPSBnZXN0dXJlLmltYWdlRWwub2Zmc2V0SGVpZ2h0IHx8IGdlc3R1cmUuaW1hZ2VFbC5jbGllbnRIZWlnaHQ7XG4gICAgICBzY2FsZWRXaWR0aCA9IGltYWdlV2lkdGggKiB6b29tLnNjYWxlO1xuICAgICAgc2NhbGVkSGVpZ2h0ID0gaW1hZ2VIZWlnaHQgKiB6b29tLnNjYWxlO1xuICAgICAgdHJhbnNsYXRlTWluWCA9IE1hdGgubWluKHNsaWRlV2lkdGggLyAyIC0gc2NhbGVkV2lkdGggLyAyLCAwKTtcbiAgICAgIHRyYW5zbGF0ZU1pblkgPSBNYXRoLm1pbihzbGlkZUhlaWdodCAvIDIgLSBzY2FsZWRIZWlnaHQgLyAyLCAwKTtcbiAgICAgIHRyYW5zbGF0ZU1heFggPSAtdHJhbnNsYXRlTWluWDtcbiAgICAgIHRyYW5zbGF0ZU1heFkgPSAtdHJhbnNsYXRlTWluWTtcbiAgICAgIHRyYW5zbGF0ZVggPSBkaWZmWCAqIHpvb20uc2NhbGU7XG4gICAgICB0cmFuc2xhdGVZID0gZGlmZlkgKiB6b29tLnNjYWxlO1xuICAgICAgaWYgKHRyYW5zbGF0ZVggPCB0cmFuc2xhdGVNaW5YKSB7XG4gICAgICAgIHRyYW5zbGF0ZVggPSB0cmFuc2xhdGVNaW5YO1xuICAgICAgfVxuICAgICAgaWYgKHRyYW5zbGF0ZVggPiB0cmFuc2xhdGVNYXhYKSB7XG4gICAgICAgIHRyYW5zbGF0ZVggPSB0cmFuc2xhdGVNYXhYO1xuICAgICAgfVxuICAgICAgaWYgKHRyYW5zbGF0ZVkgPCB0cmFuc2xhdGVNaW5ZKSB7XG4gICAgICAgIHRyYW5zbGF0ZVkgPSB0cmFuc2xhdGVNaW5ZO1xuICAgICAgfVxuICAgICAgaWYgKHRyYW5zbGF0ZVkgPiB0cmFuc2xhdGVNYXhZKSB7XG4gICAgICAgIHRyYW5zbGF0ZVkgPSB0cmFuc2xhdGVNYXhZO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0cmFuc2xhdGVYID0gMDtcbiAgICAgIHRyYW5zbGF0ZVkgPSAwO1xuICAgIH1cbiAgICBpZiAoZm9yY2Vab29tUmF0aW8gJiYgem9vbS5zY2FsZSA9PT0gMSkge1xuICAgICAgZ2VzdHVyZS5vcmlnaW5YID0gMDtcbiAgICAgIGdlc3R1cmUub3JpZ2luWSA9IDA7XG4gICAgfVxuICAgIGdlc3R1cmUuaW1hZ2VXcmFwRWwuc3R5bGUudHJhbnNpdGlvbkR1cmF0aW9uID0gJzMwMG1zJztcbiAgICBnZXN0dXJlLmltYWdlV3JhcEVsLnN0eWxlLnRyYW5zZm9ybSA9IGB0cmFuc2xhdGUzZCgke3RyYW5zbGF0ZVh9cHgsICR7dHJhbnNsYXRlWX1weCwwKWA7XG4gICAgZ2VzdHVyZS5pbWFnZUVsLnN0eWxlLnRyYW5zaXRpb25EdXJhdGlvbiA9ICczMDBtcyc7XG4gICAgZ2VzdHVyZS5pbWFnZUVsLnN0eWxlLnRyYW5zZm9ybSA9IGB0cmFuc2xhdGUzZCgwLDAsMCkgc2NhbGUoJHt6b29tLnNjYWxlfSlgO1xuICB9XG4gIGZ1bmN0aW9uIHpvb21PdXQoKSB7XG4gICAgY29uc3Qgem9vbSA9IHN3aXBlci56b29tO1xuICAgIGNvbnN0IHBhcmFtcyA9IHN3aXBlci5wYXJhbXMuem9vbTtcbiAgICBpZiAoIWdlc3R1cmUuc2xpZGVFbCkge1xuICAgICAgaWYgKHN3aXBlci5wYXJhbXMudmlydHVhbCAmJiBzd2lwZXIucGFyYW1zLnZpcnR1YWwuZW5hYmxlZCAmJiBzd2lwZXIudmlydHVhbCkge1xuICAgICAgICBnZXN0dXJlLnNsaWRlRWwgPSBlbGVtZW50Q2hpbGRyZW4oc3dpcGVyLnNsaWRlc0VsLCBgLiR7c3dpcGVyLnBhcmFtcy5zbGlkZUFjdGl2ZUNsYXNzfWApWzBdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZ2VzdHVyZS5zbGlkZUVsID0gc3dpcGVyLnNsaWRlc1tzd2lwZXIuYWN0aXZlSW5kZXhdO1xuICAgICAgfVxuICAgICAgbGV0IGltYWdlRWwgPSBnZXN0dXJlLnNsaWRlRWwucXVlcnlTZWxlY3RvcihgLiR7cGFyYW1zLmNvbnRhaW5lckNsYXNzfWApO1xuICAgICAgaWYgKGltYWdlRWwpIHtcbiAgICAgICAgaW1hZ2VFbCA9IGltYWdlRWwucXVlcnlTZWxlY3RvckFsbCgncGljdHVyZSwgaW1nLCBzdmcsIGNhbnZhcywgLnN3aXBlci16b29tLXRhcmdldCcpWzBdO1xuICAgICAgfVxuICAgICAgZ2VzdHVyZS5pbWFnZUVsID0gaW1hZ2VFbDtcbiAgICAgIGlmIChpbWFnZUVsKSB7XG4gICAgICAgIGdlc3R1cmUuaW1hZ2VXcmFwRWwgPSBlbGVtZW50UGFyZW50cyhnZXN0dXJlLmltYWdlRWwsIGAuJHtwYXJhbXMuY29udGFpbmVyQ2xhc3N9YClbMF07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBnZXN0dXJlLmltYWdlV3JhcEVsID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoIWdlc3R1cmUuaW1hZ2VFbCB8fCAhZ2VzdHVyZS5pbWFnZVdyYXBFbCkgcmV0dXJuO1xuICAgIGlmIChzd2lwZXIucGFyYW1zLmNzc01vZGUpIHtcbiAgICAgIHN3aXBlci53cmFwcGVyRWwuc3R5bGUub3ZlcmZsb3cgPSAnJztcbiAgICAgIHN3aXBlci53cmFwcGVyRWwuc3R5bGUudG91Y2hBY3Rpb24gPSAnJztcbiAgICB9XG4gICAgem9vbS5zY2FsZSA9IDE7XG4gICAgY3VycmVudFNjYWxlID0gMTtcbiAgICBnZXN0dXJlLmltYWdlV3JhcEVsLnN0eWxlLnRyYW5zaXRpb25EdXJhdGlvbiA9ICczMDBtcyc7XG4gICAgZ2VzdHVyZS5pbWFnZVdyYXBFbC5zdHlsZS50cmFuc2Zvcm0gPSAndHJhbnNsYXRlM2QoMCwwLDApJztcbiAgICBnZXN0dXJlLmltYWdlRWwuc3R5bGUudHJhbnNpdGlvbkR1cmF0aW9uID0gJzMwMG1zJztcbiAgICBnZXN0dXJlLmltYWdlRWwuc3R5bGUudHJhbnNmb3JtID0gJ3RyYW5zbGF0ZTNkKDAsMCwwKSBzY2FsZSgxKSc7XG4gICAgZ2VzdHVyZS5zbGlkZUVsLmNsYXNzTGlzdC5yZW1vdmUoYCR7cGFyYW1zLnpvb21lZFNsaWRlQ2xhc3N9YCk7XG4gICAgZ2VzdHVyZS5zbGlkZUVsID0gdW5kZWZpbmVkO1xuICAgIGdlc3R1cmUub3JpZ2luWCA9IDA7XG4gICAgZ2VzdHVyZS5vcmlnaW5ZID0gMDtcbiAgfVxuXG4gIC8vIFRvZ2dsZSBab29tXG4gIGZ1bmN0aW9uIHpvb21Ub2dnbGUoZSkge1xuICAgIGNvbnN0IHpvb20gPSBzd2lwZXIuem9vbTtcbiAgICBpZiAoem9vbS5zY2FsZSAmJiB6b29tLnNjYWxlICE9PSAxKSB7XG4gICAgICAvLyBab29tIE91dFxuICAgICAgem9vbU91dCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBab29tIEluXG4gICAgICB6b29tSW4oZSk7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIGdldExpc3RlbmVycygpIHtcbiAgICBjb25zdCBwYXNzaXZlTGlzdGVuZXIgPSBzd2lwZXIucGFyYW1zLnBhc3NpdmVMaXN0ZW5lcnMgPyB7XG4gICAgICBwYXNzaXZlOiB0cnVlLFxuICAgICAgY2FwdHVyZTogZmFsc2VcbiAgICB9IDogZmFsc2U7XG4gICAgY29uc3QgYWN0aXZlTGlzdGVuZXJXaXRoQ2FwdHVyZSA9IHN3aXBlci5wYXJhbXMucGFzc2l2ZUxpc3RlbmVycyA/IHtcbiAgICAgIHBhc3NpdmU6IGZhbHNlLFxuICAgICAgY2FwdHVyZTogdHJ1ZVxuICAgIH0gOiB0cnVlO1xuICAgIHJldHVybiB7XG4gICAgICBwYXNzaXZlTGlzdGVuZXIsXG4gICAgICBhY3RpdmVMaXN0ZW5lcldpdGhDYXB0dXJlXG4gICAgfTtcbiAgfVxuXG4gIC8vIEF0dGFjaC9EZXRhY2ggRXZlbnRzXG4gIGZ1bmN0aW9uIGVuYWJsZSgpIHtcbiAgICBjb25zdCB6b29tID0gc3dpcGVyLnpvb207XG4gICAgaWYgKHpvb20uZW5hYmxlZCkgcmV0dXJuO1xuICAgIHpvb20uZW5hYmxlZCA9IHRydWU7XG4gICAgY29uc3Qge1xuICAgICAgcGFzc2l2ZUxpc3RlbmVyLFxuICAgICAgYWN0aXZlTGlzdGVuZXJXaXRoQ2FwdHVyZVxuICAgIH0gPSBnZXRMaXN0ZW5lcnMoKTtcblxuICAgIC8vIFNjYWxlIGltYWdlXG4gICAgc3dpcGVyLndyYXBwZXJFbC5hZGRFdmVudExpc3RlbmVyKCdwb2ludGVyZG93bicsIG9uR2VzdHVyZVN0YXJ0LCBwYXNzaXZlTGlzdGVuZXIpO1xuICAgIHN3aXBlci53cmFwcGVyRWwuYWRkRXZlbnRMaXN0ZW5lcigncG9pbnRlcm1vdmUnLCBvbkdlc3R1cmVDaGFuZ2UsIGFjdGl2ZUxpc3RlbmVyV2l0aENhcHR1cmUpO1xuICAgIFsncG9pbnRlcnVwJywgJ3BvaW50ZXJjYW5jZWwnLCAncG9pbnRlcm91dCddLmZvckVhY2goZXZlbnROYW1lID0+IHtcbiAgICAgIHN3aXBlci53cmFwcGVyRWwuYWRkRXZlbnRMaXN0ZW5lcihldmVudE5hbWUsIG9uR2VzdHVyZUVuZCwgcGFzc2l2ZUxpc3RlbmVyKTtcbiAgICB9KTtcblxuICAgIC8vIE1vdmUgaW1hZ2VcbiAgICBzd2lwZXIud3JhcHBlckVsLmFkZEV2ZW50TGlzdGVuZXIoJ3BvaW50ZXJtb3ZlJywgb25Ub3VjaE1vdmUsIGFjdGl2ZUxpc3RlbmVyV2l0aENhcHR1cmUpO1xuICB9XG4gIGZ1bmN0aW9uIGRpc2FibGUoKSB7XG4gICAgY29uc3Qgem9vbSA9IHN3aXBlci56b29tO1xuICAgIGlmICghem9vbS5lbmFibGVkKSByZXR1cm47XG4gICAgem9vbS5lbmFibGVkID0gZmFsc2U7XG4gICAgY29uc3Qge1xuICAgICAgcGFzc2l2ZUxpc3RlbmVyLFxuICAgICAgYWN0aXZlTGlzdGVuZXJXaXRoQ2FwdHVyZVxuICAgIH0gPSBnZXRMaXN0ZW5lcnMoKTtcblxuICAgIC8vIFNjYWxlIGltYWdlXG4gICAgc3dpcGVyLndyYXBwZXJFbC5yZW1vdmVFdmVudExpc3RlbmVyKCdwb2ludGVyZG93bicsIG9uR2VzdHVyZVN0YXJ0LCBwYXNzaXZlTGlzdGVuZXIpO1xuICAgIHN3aXBlci53cmFwcGVyRWwucmVtb3ZlRXZlbnRMaXN0ZW5lcigncG9pbnRlcm1vdmUnLCBvbkdlc3R1cmVDaGFuZ2UsIGFjdGl2ZUxpc3RlbmVyV2l0aENhcHR1cmUpO1xuICAgIFsncG9pbnRlcnVwJywgJ3BvaW50ZXJjYW5jZWwnLCAncG9pbnRlcm91dCddLmZvckVhY2goZXZlbnROYW1lID0+IHtcbiAgICAgIHN3aXBlci53cmFwcGVyRWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudE5hbWUsIG9uR2VzdHVyZUVuZCwgcGFzc2l2ZUxpc3RlbmVyKTtcbiAgICB9KTtcblxuICAgIC8vIE1vdmUgaW1hZ2VcbiAgICBzd2lwZXIud3JhcHBlckVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3BvaW50ZXJtb3ZlJywgb25Ub3VjaE1vdmUsIGFjdGl2ZUxpc3RlbmVyV2l0aENhcHR1cmUpO1xuICB9XG4gIG9uKCdpbml0JywgKCkgPT4ge1xuICAgIGlmIChzd2lwZXIucGFyYW1zLnpvb20uZW5hYmxlZCkge1xuICAgICAgZW5hYmxlKCk7XG4gICAgfVxuICB9KTtcbiAgb24oJ2Rlc3Ryb3knLCAoKSA9PiB7XG4gICAgZGlzYWJsZSgpO1xuICB9KTtcbiAgb24oJ3RvdWNoU3RhcnQnLCAoX3MsIGUpID0+IHtcbiAgICBpZiAoIXN3aXBlci56b29tLmVuYWJsZWQpIHJldHVybjtcbiAgICBvblRvdWNoU3RhcnQoZSk7XG4gIH0pO1xuICBvbigndG91Y2hFbmQnLCAoX3MsIGUpID0+IHtcbiAgICBpZiAoIXN3aXBlci56b29tLmVuYWJsZWQpIHJldHVybjtcbiAgICBvblRvdWNoRW5kKCk7XG4gIH0pO1xuICBvbignZG91YmxlVGFwJywgKF9zLCBlKSA9PiB7XG4gICAgaWYgKCFzd2lwZXIuYW5pbWF0aW5nICYmIHN3aXBlci5wYXJhbXMuem9vbS5lbmFibGVkICYmIHN3aXBlci56b29tLmVuYWJsZWQgJiYgc3dpcGVyLnBhcmFtcy56b29tLnRvZ2dsZSkge1xuICAgICAgem9vbVRvZ2dsZShlKTtcbiAgICB9XG4gIH0pO1xuICBvbigndHJhbnNpdGlvbkVuZCcsICgpID0+IHtcbiAgICBpZiAoc3dpcGVyLnpvb20uZW5hYmxlZCAmJiBzd2lwZXIucGFyYW1zLnpvb20uZW5hYmxlZCkge1xuICAgICAgb25UcmFuc2l0aW9uRW5kKCk7XG4gICAgfVxuICB9KTtcbiAgb24oJ3NsaWRlQ2hhbmdlJywgKCkgPT4ge1xuICAgIGlmIChzd2lwZXIuem9vbS5lbmFibGVkICYmIHN3aXBlci5wYXJhbXMuem9vbS5lbmFibGVkICYmIHN3aXBlci5wYXJhbXMuY3NzTW9kZSkge1xuICAgICAgb25UcmFuc2l0aW9uRW5kKCk7XG4gICAgfVxuICB9KTtcbiAgT2JqZWN0LmFzc2lnbihzd2lwZXIuem9vbSwge1xuICAgIGVuYWJsZSxcbiAgICBkaXNhYmxlLFxuICAgIGluOiB6b29tSW4sXG4gICAgb3V0OiB6b29tT3V0LFxuICAgIHRvZ2dsZTogem9vbVRvZ2dsZVxuICB9KTtcbn1cblxuZXhwb3J0IHsgWm9vbSBhcyBkZWZhdWx0IH07XG4iLCJpbXBvcnQgeyBuIGFzIG5leHRUaWNrLCBrIGFzIGVsZW1lbnRUcmFuc2l0aW9uRW5kIH0gZnJvbSAnLi4vc2hhcmVkL3V0aWxzLm1qcyc7XG5cbi8qIGVzbGludCBuby1iaXR3aXNlOiBbXCJlcnJvclwiLCB7IFwiYWxsb3dcIjogW1wiPj5cIl0gfV0gKi9cbmZ1bmN0aW9uIENvbnRyb2xsZXIoX3JlZikge1xuICBsZXQge1xuICAgIHN3aXBlcixcbiAgICBleHRlbmRQYXJhbXMsXG4gICAgb25cbiAgfSA9IF9yZWY7XG4gIGV4dGVuZFBhcmFtcyh7XG4gICAgY29udHJvbGxlcjoge1xuICAgICAgY29udHJvbDogdW5kZWZpbmVkLFxuICAgICAgaW52ZXJzZTogZmFsc2UsXG4gICAgICBieTogJ3NsaWRlJyAvLyBvciAnY29udGFpbmVyJ1xuICAgIH1cbiAgfSk7XG5cbiAgc3dpcGVyLmNvbnRyb2xsZXIgPSB7XG4gICAgY29udHJvbDogdW5kZWZpbmVkXG4gIH07XG4gIGZ1bmN0aW9uIExpbmVhclNwbGluZSh4LCB5KSB7XG4gICAgY29uc3QgYmluYXJ5U2VhcmNoID0gZnVuY3Rpb24gc2VhcmNoKCkge1xuICAgICAgbGV0IG1heEluZGV4O1xuICAgICAgbGV0IG1pbkluZGV4O1xuICAgICAgbGV0IGd1ZXNzO1xuICAgICAgcmV0dXJuIChhcnJheSwgdmFsKSA9PiB7XG4gICAgICAgIG1pbkluZGV4ID0gLTE7XG4gICAgICAgIG1heEluZGV4ID0gYXJyYXkubGVuZ3RoO1xuICAgICAgICB3aGlsZSAobWF4SW5kZXggLSBtaW5JbmRleCA+IDEpIHtcbiAgICAgICAgICBndWVzcyA9IG1heEluZGV4ICsgbWluSW5kZXggPj4gMTtcbiAgICAgICAgICBpZiAoYXJyYXlbZ3Vlc3NdIDw9IHZhbCkge1xuICAgICAgICAgICAgbWluSW5kZXggPSBndWVzcztcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbWF4SW5kZXggPSBndWVzcztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1heEluZGV4O1xuICAgICAgfTtcbiAgICB9KCk7XG4gICAgdGhpcy54ID0geDtcbiAgICB0aGlzLnkgPSB5O1xuICAgIHRoaXMubGFzdEluZGV4ID0geC5sZW5ndGggLSAxO1xuICAgIC8vIEdpdmVuIGFuIHggdmFsdWUgKHgyKSwgcmV0dXJuIHRoZSBleHBlY3RlZCB5MiB2YWx1ZTpcbiAgICAvLyAoeDEseTEpIGlzIHRoZSBrbm93biBwb2ludCBiZWZvcmUgZ2l2ZW4gdmFsdWUsXG4gICAgLy8gKHgzLHkzKSBpcyB0aGUga25vd24gcG9pbnQgYWZ0ZXIgZ2l2ZW4gdmFsdWUuXG4gICAgbGV0IGkxO1xuICAgIGxldCBpMztcbiAgICB0aGlzLmludGVycG9sYXRlID0gZnVuY3Rpb24gaW50ZXJwb2xhdGUoeDIpIHtcbiAgICAgIGlmICgheDIpIHJldHVybiAwO1xuXG4gICAgICAvLyBHZXQgdGhlIGluZGV4ZXMgb2YgeDEgYW5kIHgzICh0aGUgYXJyYXkgaW5kZXhlcyBiZWZvcmUgYW5kIGFmdGVyIGdpdmVuIHgyKTpcbiAgICAgIGkzID0gYmluYXJ5U2VhcmNoKHRoaXMueCwgeDIpO1xuICAgICAgaTEgPSBpMyAtIDE7XG5cbiAgICAgIC8vIFdlIGhhdmUgb3VyIGluZGV4ZXMgaTEgJiBpMywgc28gd2UgY2FuIGNhbGN1bGF0ZSBhbHJlYWR5OlxuICAgICAgLy8geTIgOj0gKCh4MuKIkngxKSDDlyAoeTPiiJJ5MSkpIMO3ICh4M+KIkngxKSArIHkxXG4gICAgICByZXR1cm4gKHgyIC0gdGhpcy54W2kxXSkgKiAodGhpcy55W2kzXSAtIHRoaXMueVtpMV0pIC8gKHRoaXMueFtpM10gLSB0aGlzLnhbaTFdKSArIHRoaXMueVtpMV07XG4gICAgfTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICBmdW5jdGlvbiBnZXRJbnRlcnBvbGF0ZUZ1bmN0aW9uKGMpIHtcbiAgICBzd2lwZXIuY29udHJvbGxlci5zcGxpbmUgPSBzd2lwZXIucGFyYW1zLmxvb3AgPyBuZXcgTGluZWFyU3BsaW5lKHN3aXBlci5zbGlkZXNHcmlkLCBjLnNsaWRlc0dyaWQpIDogbmV3IExpbmVhclNwbGluZShzd2lwZXIuc25hcEdyaWQsIGMuc25hcEdyaWQpO1xuICB9XG4gIGZ1bmN0aW9uIHNldFRyYW5zbGF0ZShfdCwgYnlDb250cm9sbGVyKSB7XG4gICAgY29uc3QgY29udHJvbGxlZCA9IHN3aXBlci5jb250cm9sbGVyLmNvbnRyb2w7XG4gICAgbGV0IG11bHRpcGxpZXI7XG4gICAgbGV0IGNvbnRyb2xsZWRUcmFuc2xhdGU7XG4gICAgY29uc3QgU3dpcGVyID0gc3dpcGVyLmNvbnN0cnVjdG9yO1xuICAgIGZ1bmN0aW9uIHNldENvbnRyb2xsZWRUcmFuc2xhdGUoYykge1xuICAgICAgaWYgKGMuZGVzdHJveWVkKSByZXR1cm47XG5cbiAgICAgIC8vIHRoaXMgd2lsbCBjcmVhdGUgYW4gSW50ZXJwb2xhdGUgZnVuY3Rpb24gYmFzZWQgb24gdGhlIHNuYXBHcmlkc1xuICAgICAgLy8geCBpcyB0aGUgR3JpZCBvZiB0aGUgc2Nyb2xsZWQgc2Nyb2xsZXIgYW5kIHkgd2lsbCBiZSB0aGUgY29udHJvbGxlZCBzY3JvbGxlclxuICAgICAgLy8gaXQgbWFrZXMgc2Vuc2UgdG8gY3JlYXRlIHRoaXMgb25seSBvbmNlIGFuZCByZWNhbGwgaXQgZm9yIHRoZSBpbnRlcnBvbGF0aW9uXG4gICAgICAvLyB0aGUgZnVuY3Rpb24gZG9lcyBhIGxvdCBvZiB2YWx1ZSBjYWNoaW5nIGZvciBwZXJmb3JtYW5jZVxuICAgICAgY29uc3QgdHJhbnNsYXRlID0gc3dpcGVyLnJ0bFRyYW5zbGF0ZSA/IC1zd2lwZXIudHJhbnNsYXRlIDogc3dpcGVyLnRyYW5zbGF0ZTtcbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLmNvbnRyb2xsZXIuYnkgPT09ICdzbGlkZScpIHtcbiAgICAgICAgZ2V0SW50ZXJwb2xhdGVGdW5jdGlvbihjKTtcbiAgICAgICAgLy8gaSBhbSBub3Qgc3VyZSB3aHkgdGhlIHZhbHVlcyBoYXZlIHRvIGJlIG11bHRpcGxpY2F0ZWQgdGhpcyB3YXksIHRyaWVkIHRvIGludmVydCB0aGUgc25hcEdyaWRcbiAgICAgICAgLy8gYnV0IGl0IGRpZCBub3Qgd29yayBvdXRcbiAgICAgICAgY29udHJvbGxlZFRyYW5zbGF0ZSA9IC1zd2lwZXIuY29udHJvbGxlci5zcGxpbmUuaW50ZXJwb2xhdGUoLXRyYW5zbGF0ZSk7XG4gICAgICB9XG4gICAgICBpZiAoIWNvbnRyb2xsZWRUcmFuc2xhdGUgfHwgc3dpcGVyLnBhcmFtcy5jb250cm9sbGVyLmJ5ID09PSAnY29udGFpbmVyJykge1xuICAgICAgICBtdWx0aXBsaWVyID0gKGMubWF4VHJhbnNsYXRlKCkgLSBjLm1pblRyYW5zbGF0ZSgpKSAvIChzd2lwZXIubWF4VHJhbnNsYXRlKCkgLSBzd2lwZXIubWluVHJhbnNsYXRlKCkpO1xuICAgICAgICBpZiAoTnVtYmVyLmlzTmFOKG11bHRpcGxpZXIpIHx8ICFOdW1iZXIuaXNGaW5pdGUobXVsdGlwbGllcikpIHtcbiAgICAgICAgICBtdWx0aXBsaWVyID0gMTtcbiAgICAgICAgfVxuICAgICAgICBjb250cm9sbGVkVHJhbnNsYXRlID0gKHRyYW5zbGF0ZSAtIHN3aXBlci5taW5UcmFuc2xhdGUoKSkgKiBtdWx0aXBsaWVyICsgYy5taW5UcmFuc2xhdGUoKTtcbiAgICAgIH1cbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLmNvbnRyb2xsZXIuaW52ZXJzZSkge1xuICAgICAgICBjb250cm9sbGVkVHJhbnNsYXRlID0gYy5tYXhUcmFuc2xhdGUoKSAtIGNvbnRyb2xsZWRUcmFuc2xhdGU7XG4gICAgICB9XG4gICAgICBjLnVwZGF0ZVByb2dyZXNzKGNvbnRyb2xsZWRUcmFuc2xhdGUpO1xuICAgICAgYy5zZXRUcmFuc2xhdGUoY29udHJvbGxlZFRyYW5zbGF0ZSwgc3dpcGVyKTtcbiAgICAgIGMudXBkYXRlQWN0aXZlSW5kZXgoKTtcbiAgICAgIGMudXBkYXRlU2xpZGVzQ2xhc3NlcygpO1xuICAgIH1cbiAgICBpZiAoQXJyYXkuaXNBcnJheShjb250cm9sbGVkKSkge1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb250cm9sbGVkLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIGlmIChjb250cm9sbGVkW2ldICE9PSBieUNvbnRyb2xsZXIgJiYgY29udHJvbGxlZFtpXSBpbnN0YW5jZW9mIFN3aXBlcikge1xuICAgICAgICAgIHNldENvbnRyb2xsZWRUcmFuc2xhdGUoY29udHJvbGxlZFtpXSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGNvbnRyb2xsZWQgaW5zdGFuY2VvZiBTd2lwZXIgJiYgYnlDb250cm9sbGVyICE9PSBjb250cm9sbGVkKSB7XG4gICAgICBzZXRDb250cm9sbGVkVHJhbnNsYXRlKGNvbnRyb2xsZWQpO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBzZXRUcmFuc2l0aW9uKGR1cmF0aW9uLCBieUNvbnRyb2xsZXIpIHtcbiAgICBjb25zdCBTd2lwZXIgPSBzd2lwZXIuY29uc3RydWN0b3I7XG4gICAgY29uc3QgY29udHJvbGxlZCA9IHN3aXBlci5jb250cm9sbGVyLmNvbnRyb2w7XG4gICAgbGV0IGk7XG4gICAgZnVuY3Rpb24gc2V0Q29udHJvbGxlZFRyYW5zaXRpb24oYykge1xuICAgICAgaWYgKGMuZGVzdHJveWVkKSByZXR1cm47XG4gICAgICBjLnNldFRyYW5zaXRpb24oZHVyYXRpb24sIHN3aXBlcik7XG4gICAgICBpZiAoZHVyYXRpb24gIT09IDApIHtcbiAgICAgICAgYy50cmFuc2l0aW9uU3RhcnQoKTtcbiAgICAgICAgaWYgKGMucGFyYW1zLmF1dG9IZWlnaHQpIHtcbiAgICAgICAgICBuZXh0VGljaygoKSA9PiB7XG4gICAgICAgICAgICBjLnVwZGF0ZUF1dG9IZWlnaHQoKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBlbGVtZW50VHJhbnNpdGlvbkVuZChjLndyYXBwZXJFbCwgKCkgPT4ge1xuICAgICAgICAgIGlmICghY29udHJvbGxlZCkgcmV0dXJuO1xuICAgICAgICAgIGMudHJhbnNpdGlvbkVuZCgpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoY29udHJvbGxlZCkpIHtcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBjb250cm9sbGVkLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIGlmIChjb250cm9sbGVkW2ldICE9PSBieUNvbnRyb2xsZXIgJiYgY29udHJvbGxlZFtpXSBpbnN0YW5jZW9mIFN3aXBlcikge1xuICAgICAgICAgIHNldENvbnRyb2xsZWRUcmFuc2l0aW9uKGNvbnRyb2xsZWRbaV0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChjb250cm9sbGVkIGluc3RhbmNlb2YgU3dpcGVyICYmIGJ5Q29udHJvbGxlciAhPT0gY29udHJvbGxlZCkge1xuICAgICAgc2V0Q29udHJvbGxlZFRyYW5zaXRpb24oY29udHJvbGxlZCk7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIHJlbW92ZVNwbGluZSgpIHtcbiAgICBpZiAoIXN3aXBlci5jb250cm9sbGVyLmNvbnRyb2wpIHJldHVybjtcbiAgICBpZiAoc3dpcGVyLmNvbnRyb2xsZXIuc3BsaW5lKSB7XG4gICAgICBzd2lwZXIuY29udHJvbGxlci5zcGxpbmUgPSB1bmRlZmluZWQ7XG4gICAgICBkZWxldGUgc3dpcGVyLmNvbnRyb2xsZXIuc3BsaW5lO1xuICAgIH1cbiAgfVxuICBvbignYmVmb3JlSW5pdCcsICgpID0+IHtcbiAgICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgKFxuICAgIC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgICB0eXBlb2Ygc3dpcGVyLnBhcmFtcy5jb250cm9sbGVyLmNvbnRyb2wgPT09ICdzdHJpbmcnIHx8IHN3aXBlci5wYXJhbXMuY29udHJvbGxlci5jb250cm9sIGluc3RhbmNlb2YgSFRNTEVsZW1lbnQpKSB7XG4gICAgICBjb25zdCBjb250cm9sRWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3Ioc3dpcGVyLnBhcmFtcy5jb250cm9sbGVyLmNvbnRyb2wpO1xuICAgICAgaWYgKGNvbnRyb2xFbGVtZW50ICYmIGNvbnRyb2xFbGVtZW50LnN3aXBlcikge1xuICAgICAgICBzd2lwZXIuY29udHJvbGxlci5jb250cm9sID0gY29udHJvbEVsZW1lbnQuc3dpcGVyO1xuICAgICAgfSBlbHNlIGlmIChjb250cm9sRWxlbWVudCkge1xuICAgICAgICBjb25zdCBvbkNvbnRyb2xsZXJTd2lwZXIgPSBlID0+IHtcbiAgICAgICAgICBzd2lwZXIuY29udHJvbGxlci5jb250cm9sID0gZS5kZXRhaWxbMF07XG4gICAgICAgICAgc3dpcGVyLnVwZGF0ZSgpO1xuICAgICAgICAgIGNvbnRyb2xFbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2luaXQnLCBvbkNvbnRyb2xsZXJTd2lwZXIpO1xuICAgICAgICB9O1xuICAgICAgICBjb250cm9sRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdpbml0Jywgb25Db250cm9sbGVyU3dpcGVyKTtcbiAgICAgIH1cbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgc3dpcGVyLmNvbnRyb2xsZXIuY29udHJvbCA9IHN3aXBlci5wYXJhbXMuY29udHJvbGxlci5jb250cm9sO1xuICB9KTtcbiAgb24oJ3VwZGF0ZScsICgpID0+IHtcbiAgICByZW1vdmVTcGxpbmUoKTtcbiAgfSk7XG4gIG9uKCdyZXNpemUnLCAoKSA9PiB7XG4gICAgcmVtb3ZlU3BsaW5lKCk7XG4gIH0pO1xuICBvbignb2JzZXJ2ZXJVcGRhdGUnLCAoKSA9PiB7XG4gICAgcmVtb3ZlU3BsaW5lKCk7XG4gIH0pO1xuICBvbignc2V0VHJhbnNsYXRlJywgKF9zLCB0cmFuc2xhdGUsIGJ5Q29udHJvbGxlcikgPT4ge1xuICAgIGlmICghc3dpcGVyLmNvbnRyb2xsZXIuY29udHJvbCB8fCBzd2lwZXIuY29udHJvbGxlci5jb250cm9sLmRlc3Ryb3llZCkgcmV0dXJuO1xuICAgIHN3aXBlci5jb250cm9sbGVyLnNldFRyYW5zbGF0ZSh0cmFuc2xhdGUsIGJ5Q29udHJvbGxlcik7XG4gIH0pO1xuICBvbignc2V0VHJhbnNpdGlvbicsIChfcywgZHVyYXRpb24sIGJ5Q29udHJvbGxlcikgPT4ge1xuICAgIGlmICghc3dpcGVyLmNvbnRyb2xsZXIuY29udHJvbCB8fCBzd2lwZXIuY29udHJvbGxlci5jb250cm9sLmRlc3Ryb3llZCkgcmV0dXJuO1xuICAgIHN3aXBlci5jb250cm9sbGVyLnNldFRyYW5zaXRpb24oZHVyYXRpb24sIGJ5Q29udHJvbGxlcik7XG4gIH0pO1xuICBPYmplY3QuYXNzaWduKHN3aXBlci5jb250cm9sbGVyLCB7XG4gICAgc2V0VHJhbnNsYXRlLFxuICAgIHNldFRyYW5zaXRpb25cbiAgfSk7XG59XG5cbmV4cG9ydCB7IENvbnRyb2xsZXIgYXMgZGVmYXVsdCB9O1xuIiwiaW1wb3J0IHsgZyBhcyBnZXREb2N1bWVudCB9IGZyb20gJy4uL3NoYXJlZC9zc3Itd2luZG93LmVzbS5tanMnO1xuaW1wb3J0IHsgYyBhcyBjbGFzc2VzVG9TZWxlY3RvciB9IGZyb20gJy4uL3NoYXJlZC9jbGFzc2VzLXRvLXNlbGVjdG9yLm1qcyc7XG5pbXBvcnQgeyBjIGFzIGNyZWF0ZUVsZW1lbnQsIGggYXMgZWxlbWVudEluZGV4LCBtIGFzIG1ha2VFbGVtZW50c0FycmF5IH0gZnJvbSAnLi4vc2hhcmVkL3V0aWxzLm1qcyc7XG5cbmZ1bmN0aW9uIEExMXkoX3JlZikge1xuICBsZXQge1xuICAgIHN3aXBlcixcbiAgICBleHRlbmRQYXJhbXMsXG4gICAgb25cbiAgfSA9IF9yZWY7XG4gIGV4dGVuZFBhcmFtcyh7XG4gICAgYTExeToge1xuICAgICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAgIG5vdGlmaWNhdGlvbkNsYXNzOiAnc3dpcGVyLW5vdGlmaWNhdGlvbicsXG4gICAgICBwcmV2U2xpZGVNZXNzYWdlOiAnUHJldmlvdXMgc2xpZGUnLFxuICAgICAgbmV4dFNsaWRlTWVzc2FnZTogJ05leHQgc2xpZGUnLFxuICAgICAgZmlyc3RTbGlkZU1lc3NhZ2U6ICdUaGlzIGlzIHRoZSBmaXJzdCBzbGlkZScsXG4gICAgICBsYXN0U2xpZGVNZXNzYWdlOiAnVGhpcyBpcyB0aGUgbGFzdCBzbGlkZScsXG4gICAgICBwYWdpbmF0aW9uQnVsbGV0TWVzc2FnZTogJ0dvIHRvIHNsaWRlIHt7aW5kZXh9fScsXG4gICAgICBzbGlkZUxhYmVsTWVzc2FnZTogJ3t7aW5kZXh9fSAvIHt7c2xpZGVzTGVuZ3RofX0nLFxuICAgICAgY29udGFpbmVyTWVzc2FnZTogbnVsbCxcbiAgICAgIGNvbnRhaW5lclJvbGVEZXNjcmlwdGlvbk1lc3NhZ2U6IG51bGwsXG4gICAgICBpdGVtUm9sZURlc2NyaXB0aW9uTWVzc2FnZTogbnVsbCxcbiAgICAgIHNsaWRlUm9sZTogJ2dyb3VwJyxcbiAgICAgIGlkOiBudWxsXG4gICAgfVxuICB9KTtcbiAgc3dpcGVyLmExMXkgPSB7XG4gICAgY2xpY2tlZDogZmFsc2VcbiAgfTtcbiAgbGV0IGxpdmVSZWdpb24gPSBudWxsO1xuICBsZXQgcHJldmVudEZvY3VzSGFuZGxlcjtcbiAgbGV0IGZvY3VzVGFyZ2V0U2xpZGVFbDtcbiAgbGV0IHZpc2liaWxpdHlDaGFuZ2VkVGltZXN0YW1wID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XG4gIGZ1bmN0aW9uIG5vdGlmeShtZXNzYWdlKSB7XG4gICAgY29uc3Qgbm90aWZpY2F0aW9uID0gbGl2ZVJlZ2lvbjtcbiAgICBpZiAobm90aWZpY2F0aW9uLmxlbmd0aCA9PT0gMCkgcmV0dXJuO1xuICAgIG5vdGlmaWNhdGlvbi5pbm5lckhUTUwgPSAnJztcbiAgICBub3RpZmljYXRpb24uaW5uZXJIVE1MID0gbWVzc2FnZTtcbiAgfVxuICBmdW5jdGlvbiBnZXRSYW5kb21OdW1iZXIoc2l6ZSkge1xuICAgIGlmIChzaXplID09PSB2b2lkIDApIHtcbiAgICAgIHNpemUgPSAxNjtcbiAgICB9XG4gICAgY29uc3QgcmFuZG9tQ2hhciA9ICgpID0+IE1hdGgucm91bmQoMTYgKiBNYXRoLnJhbmRvbSgpKS50b1N0cmluZygxNik7XG4gICAgcmV0dXJuICd4Jy5yZXBlYXQoc2l6ZSkucmVwbGFjZSgveC9nLCByYW5kb21DaGFyKTtcbiAgfVxuICBmdW5jdGlvbiBtYWtlRWxGb2N1c2FibGUoZWwpIHtcbiAgICBlbCA9IG1ha2VFbGVtZW50c0FycmF5KGVsKTtcbiAgICBlbC5mb3JFYWNoKHN1YkVsID0+IHtcbiAgICAgIHN1YkVsLnNldEF0dHJpYnV0ZSgndGFiSW5kZXgnLCAnMCcpO1xuICAgIH0pO1xuICB9XG4gIGZ1bmN0aW9uIG1ha2VFbE5vdEZvY3VzYWJsZShlbCkge1xuICAgIGVsID0gbWFrZUVsZW1lbnRzQXJyYXkoZWwpO1xuICAgIGVsLmZvckVhY2goc3ViRWwgPT4ge1xuICAgICAgc3ViRWwuc2V0QXR0cmlidXRlKCd0YWJJbmRleCcsICctMScpO1xuICAgIH0pO1xuICB9XG4gIGZ1bmN0aW9uIGFkZEVsUm9sZShlbCwgcm9sZSkge1xuICAgIGVsID0gbWFrZUVsZW1lbnRzQXJyYXkoZWwpO1xuICAgIGVsLmZvckVhY2goc3ViRWwgPT4ge1xuICAgICAgc3ViRWwuc2V0QXR0cmlidXRlKCdyb2xlJywgcm9sZSk7XG4gICAgfSk7XG4gIH1cbiAgZnVuY3Rpb24gYWRkRWxSb2xlRGVzY3JpcHRpb24oZWwsIGRlc2NyaXB0aW9uKSB7XG4gICAgZWwgPSBtYWtlRWxlbWVudHNBcnJheShlbCk7XG4gICAgZWwuZm9yRWFjaChzdWJFbCA9PiB7XG4gICAgICBzdWJFbC5zZXRBdHRyaWJ1dGUoJ2FyaWEtcm9sZWRlc2NyaXB0aW9uJywgZGVzY3JpcHRpb24pO1xuICAgIH0pO1xuICB9XG4gIGZ1bmN0aW9uIGFkZEVsQ29udHJvbHMoZWwsIGNvbnRyb2xzKSB7XG4gICAgZWwgPSBtYWtlRWxlbWVudHNBcnJheShlbCk7XG4gICAgZWwuZm9yRWFjaChzdWJFbCA9PiB7XG4gICAgICBzdWJFbC5zZXRBdHRyaWJ1dGUoJ2FyaWEtY29udHJvbHMnLCBjb250cm9scyk7XG4gICAgfSk7XG4gIH1cbiAgZnVuY3Rpb24gYWRkRWxMYWJlbChlbCwgbGFiZWwpIHtcbiAgICBlbCA9IG1ha2VFbGVtZW50c0FycmF5KGVsKTtcbiAgICBlbC5mb3JFYWNoKHN1YkVsID0+IHtcbiAgICAgIHN1YkVsLnNldEF0dHJpYnV0ZSgnYXJpYS1sYWJlbCcsIGxhYmVsKTtcbiAgICB9KTtcbiAgfVxuICBmdW5jdGlvbiBhZGRFbElkKGVsLCBpZCkge1xuICAgIGVsID0gbWFrZUVsZW1lbnRzQXJyYXkoZWwpO1xuICAgIGVsLmZvckVhY2goc3ViRWwgPT4ge1xuICAgICAgc3ViRWwuc2V0QXR0cmlidXRlKCdpZCcsIGlkKTtcbiAgICB9KTtcbiAgfVxuICBmdW5jdGlvbiBhZGRFbExpdmUoZWwsIGxpdmUpIHtcbiAgICBlbCA9IG1ha2VFbGVtZW50c0FycmF5KGVsKTtcbiAgICBlbC5mb3JFYWNoKHN1YkVsID0+IHtcbiAgICAgIHN1YkVsLnNldEF0dHJpYnV0ZSgnYXJpYS1saXZlJywgbGl2ZSk7XG4gICAgfSk7XG4gIH1cbiAgZnVuY3Rpb24gZGlzYWJsZUVsKGVsKSB7XG4gICAgZWwgPSBtYWtlRWxlbWVudHNBcnJheShlbCk7XG4gICAgZWwuZm9yRWFjaChzdWJFbCA9PiB7XG4gICAgICBzdWJFbC5zZXRBdHRyaWJ1dGUoJ2FyaWEtZGlzYWJsZWQnLCB0cnVlKTtcbiAgICB9KTtcbiAgfVxuICBmdW5jdGlvbiBlbmFibGVFbChlbCkge1xuICAgIGVsID0gbWFrZUVsZW1lbnRzQXJyYXkoZWwpO1xuICAgIGVsLmZvckVhY2goc3ViRWwgPT4ge1xuICAgICAgc3ViRWwuc2V0QXR0cmlidXRlKCdhcmlhLWRpc2FibGVkJywgZmFsc2UpO1xuICAgIH0pO1xuICB9XG4gIGZ1bmN0aW9uIG9uRW50ZXJPclNwYWNlS2V5KGUpIHtcbiAgICBpZiAoZS5rZXlDb2RlICE9PSAxMyAmJiBlLmtleUNvZGUgIT09IDMyKSByZXR1cm47XG4gICAgY29uc3QgcGFyYW1zID0gc3dpcGVyLnBhcmFtcy5hMTF5O1xuICAgIGNvbnN0IHRhcmdldEVsID0gZS50YXJnZXQ7XG4gICAgaWYgKHN3aXBlci5wYWdpbmF0aW9uICYmIHN3aXBlci5wYWdpbmF0aW9uLmVsICYmICh0YXJnZXRFbCA9PT0gc3dpcGVyLnBhZ2luYXRpb24uZWwgfHwgc3dpcGVyLnBhZ2luYXRpb24uZWwuY29udGFpbnMoZS50YXJnZXQpKSkge1xuICAgICAgaWYgKCFlLnRhcmdldC5tYXRjaGVzKGNsYXNzZXNUb1NlbGVjdG9yKHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbi5idWxsZXRDbGFzcykpKSByZXR1cm47XG4gICAgfVxuICAgIGlmIChzd2lwZXIubmF2aWdhdGlvbiAmJiBzd2lwZXIubmF2aWdhdGlvbi5wcmV2RWwgJiYgc3dpcGVyLm5hdmlnYXRpb24ubmV4dEVsKSB7XG4gICAgICBjb25zdCBwcmV2RWxzID0gbWFrZUVsZW1lbnRzQXJyYXkoc3dpcGVyLm5hdmlnYXRpb24ucHJldkVsKTtcbiAgICAgIGNvbnN0IG5leHRFbHMgPSBtYWtlRWxlbWVudHNBcnJheShzd2lwZXIubmF2aWdhdGlvbi5uZXh0RWwpO1xuICAgICAgaWYgKG5leHRFbHMuaW5jbHVkZXModGFyZ2V0RWwpKSB7XG4gICAgICAgIGlmICghKHN3aXBlci5pc0VuZCAmJiAhc3dpcGVyLnBhcmFtcy5sb29wKSkge1xuICAgICAgICAgIHN3aXBlci5zbGlkZU5leHQoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc3dpcGVyLmlzRW5kKSB7XG4gICAgICAgICAgbm90aWZ5KHBhcmFtcy5sYXN0U2xpZGVNZXNzYWdlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBub3RpZnkocGFyYW1zLm5leHRTbGlkZU1lc3NhZ2UpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAocHJldkVscy5pbmNsdWRlcyh0YXJnZXRFbCkpIHtcbiAgICAgICAgaWYgKCEoc3dpcGVyLmlzQmVnaW5uaW5nICYmICFzd2lwZXIucGFyYW1zLmxvb3ApKSB7XG4gICAgICAgICAgc3dpcGVyLnNsaWRlUHJldigpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzd2lwZXIuaXNCZWdpbm5pbmcpIHtcbiAgICAgICAgICBub3RpZnkocGFyYW1zLmZpcnN0U2xpZGVNZXNzYWdlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBub3RpZnkocGFyYW1zLnByZXZTbGlkZU1lc3NhZ2UpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChzd2lwZXIucGFnaW5hdGlvbiAmJiB0YXJnZXRFbC5tYXRjaGVzKGNsYXNzZXNUb1NlbGVjdG9yKHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbi5idWxsZXRDbGFzcykpKSB7XG4gICAgICB0YXJnZXRFbC5jbGljaygpO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiB1cGRhdGVOYXZpZ2F0aW9uKCkge1xuICAgIGlmIChzd2lwZXIucGFyYW1zLmxvb3AgfHwgc3dpcGVyLnBhcmFtcy5yZXdpbmQgfHwgIXN3aXBlci5uYXZpZ2F0aW9uKSByZXR1cm47XG4gICAgY29uc3Qge1xuICAgICAgbmV4dEVsLFxuICAgICAgcHJldkVsXG4gICAgfSA9IHN3aXBlci5uYXZpZ2F0aW9uO1xuICAgIGlmIChwcmV2RWwpIHtcbiAgICAgIGlmIChzd2lwZXIuaXNCZWdpbm5pbmcpIHtcbiAgICAgICAgZGlzYWJsZUVsKHByZXZFbCk7XG4gICAgICAgIG1ha2VFbE5vdEZvY3VzYWJsZShwcmV2RWwpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZW5hYmxlRWwocHJldkVsKTtcbiAgICAgICAgbWFrZUVsRm9jdXNhYmxlKHByZXZFbCk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChuZXh0RWwpIHtcbiAgICAgIGlmIChzd2lwZXIuaXNFbmQpIHtcbiAgICAgICAgZGlzYWJsZUVsKG5leHRFbCk7XG4gICAgICAgIG1ha2VFbE5vdEZvY3VzYWJsZShuZXh0RWwpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZW5hYmxlRWwobmV4dEVsKTtcbiAgICAgICAgbWFrZUVsRm9jdXNhYmxlKG5leHRFbCk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIGhhc1BhZ2luYXRpb24oKSB7XG4gICAgcmV0dXJuIHN3aXBlci5wYWdpbmF0aW9uICYmIHN3aXBlci5wYWdpbmF0aW9uLmJ1bGxldHMgJiYgc3dpcGVyLnBhZ2luYXRpb24uYnVsbGV0cy5sZW5ndGg7XG4gIH1cbiAgZnVuY3Rpb24gaGFzQ2xpY2thYmxlUGFnaW5hdGlvbigpIHtcbiAgICByZXR1cm4gaGFzUGFnaW5hdGlvbigpICYmIHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbi5jbGlja2FibGU7XG4gIH1cbiAgZnVuY3Rpb24gdXBkYXRlUGFnaW5hdGlvbigpIHtcbiAgICBjb25zdCBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLmExMXk7XG4gICAgaWYgKCFoYXNQYWdpbmF0aW9uKCkpIHJldHVybjtcbiAgICBzd2lwZXIucGFnaW5hdGlvbi5idWxsZXRzLmZvckVhY2goYnVsbGV0RWwgPT4ge1xuICAgICAgaWYgKHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbi5jbGlja2FibGUpIHtcbiAgICAgICAgbWFrZUVsRm9jdXNhYmxlKGJ1bGxldEVsKTtcbiAgICAgICAgaWYgKCFzd2lwZXIucGFyYW1zLnBhZ2luYXRpb24ucmVuZGVyQnVsbGV0KSB7XG4gICAgICAgICAgYWRkRWxSb2xlKGJ1bGxldEVsLCAnYnV0dG9uJyk7XG4gICAgICAgICAgYWRkRWxMYWJlbChidWxsZXRFbCwgcGFyYW1zLnBhZ2luYXRpb25CdWxsZXRNZXNzYWdlLnJlcGxhY2UoL1xce1xce2luZGV4XFx9XFx9LywgZWxlbWVudEluZGV4KGJ1bGxldEVsKSArIDEpKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGJ1bGxldEVsLm1hdGNoZXMoY2xhc3Nlc1RvU2VsZWN0b3Ioc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uLmJ1bGxldEFjdGl2ZUNsYXNzKSkpIHtcbiAgICAgICAgYnVsbGV0RWwuc2V0QXR0cmlidXRlKCdhcmlhLWN1cnJlbnQnLCAndHJ1ZScpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYnVsbGV0RWwucmVtb3ZlQXR0cmlidXRlKCdhcmlhLWN1cnJlbnQnKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICBjb25zdCBpbml0TmF2RWwgPSAoZWwsIHdyYXBwZXJJZCwgbWVzc2FnZSkgPT4ge1xuICAgIG1ha2VFbEZvY3VzYWJsZShlbCk7XG4gICAgaWYgKGVsLnRhZ05hbWUgIT09ICdCVVRUT04nKSB7XG4gICAgICBhZGRFbFJvbGUoZWwsICdidXR0b24nKTtcbiAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBvbkVudGVyT3JTcGFjZUtleSk7XG4gICAgfVxuICAgIGFkZEVsTGFiZWwoZWwsIG1lc3NhZ2UpO1xuICAgIGFkZEVsQ29udHJvbHMoZWwsIHdyYXBwZXJJZCk7XG4gIH07XG4gIGNvbnN0IGhhbmRsZVBvaW50ZXJEb3duID0gZSA9PiB7XG4gICAgaWYgKGZvY3VzVGFyZ2V0U2xpZGVFbCAmJiBmb2N1c1RhcmdldFNsaWRlRWwgIT09IGUudGFyZ2V0ICYmICFmb2N1c1RhcmdldFNsaWRlRWwuY29udGFpbnMoZS50YXJnZXQpKSB7XG4gICAgICBwcmV2ZW50Rm9jdXNIYW5kbGVyID0gdHJ1ZTtcbiAgICB9XG4gICAgc3dpcGVyLmExMXkuY2xpY2tlZCA9IHRydWU7XG4gIH07XG4gIGNvbnN0IGhhbmRsZVBvaW50ZXJVcCA9ICgpID0+IHtcbiAgICBwcmV2ZW50Rm9jdXNIYW5kbGVyID0gZmFsc2U7XG4gICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgICAgIGlmICghc3dpcGVyLmRlc3Ryb3llZCkge1xuICAgICAgICAgIHN3aXBlci5hMTF5LmNsaWNrZWQgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG4gIH07XG4gIGNvbnN0IG9uVmlzaWJpbGl0eUNoYW5nZSA9IGUgPT4ge1xuICAgIHZpc2liaWxpdHlDaGFuZ2VkVGltZXN0YW1wID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XG4gIH07XG4gIGNvbnN0IGhhbmRsZUZvY3VzID0gZSA9PiB7XG4gICAgaWYgKHN3aXBlci5hMTF5LmNsaWNrZWQpIHJldHVybjtcbiAgICBpZiAobmV3IERhdGUoKS5nZXRUaW1lKCkgLSB2aXNpYmlsaXR5Q2hhbmdlZFRpbWVzdGFtcCA8IDEwMCkgcmV0dXJuO1xuICAgIGNvbnN0IHNsaWRlRWwgPSBlLnRhcmdldC5jbG9zZXN0KGAuJHtzd2lwZXIucGFyYW1zLnNsaWRlQ2xhc3N9LCBzd2lwZXItc2xpZGVgKTtcbiAgICBpZiAoIXNsaWRlRWwgfHwgIXN3aXBlci5zbGlkZXMuaW5jbHVkZXMoc2xpZGVFbCkpIHJldHVybjtcbiAgICBmb2N1c1RhcmdldFNsaWRlRWwgPSBzbGlkZUVsO1xuICAgIGNvbnN0IGlzQWN0aXZlID0gc3dpcGVyLnNsaWRlcy5pbmRleE9mKHNsaWRlRWwpID09PSBzd2lwZXIuYWN0aXZlSW5kZXg7XG4gICAgY29uc3QgaXNWaXNpYmxlID0gc3dpcGVyLnBhcmFtcy53YXRjaFNsaWRlc1Byb2dyZXNzICYmIHN3aXBlci52aXNpYmxlU2xpZGVzICYmIHN3aXBlci52aXNpYmxlU2xpZGVzLmluY2x1ZGVzKHNsaWRlRWwpO1xuICAgIGlmIChpc0FjdGl2ZSB8fCBpc1Zpc2libGUpIHJldHVybjtcbiAgICBpZiAoZS5zb3VyY2VDYXBhYmlsaXRpZXMgJiYgZS5zb3VyY2VDYXBhYmlsaXRpZXMuZmlyZXNUb3VjaEV2ZW50cykgcmV0dXJuO1xuICAgIGlmIChzd2lwZXIuaXNIb3Jpem9udGFsKCkpIHtcbiAgICAgIHN3aXBlci5lbC5zY3JvbGxMZWZ0ID0gMDtcbiAgICB9IGVsc2Uge1xuICAgICAgc3dpcGVyLmVsLnNjcm9sbFRvcCA9IDA7XG4gICAgfVxuICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgICBpZiAocHJldmVudEZvY3VzSGFuZGxlcikgcmV0dXJuO1xuICAgICAgaWYgKHN3aXBlci5wYXJhbXMubG9vcCkge1xuICAgICAgICBzd2lwZXIuc2xpZGVUb0xvb3AocGFyc2VJbnQoc2xpZGVFbC5nZXRBdHRyaWJ1dGUoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4JykpLCAwKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN3aXBlci5zbGlkZVRvKHN3aXBlci5zbGlkZXMuaW5kZXhPZihzbGlkZUVsKSwgMCk7XG4gICAgICB9XG4gICAgICBwcmV2ZW50Rm9jdXNIYW5kbGVyID0gZmFsc2U7XG4gICAgfSk7XG4gIH07XG4gIGNvbnN0IGluaXRTbGlkZXMgPSAoKSA9PiB7XG4gICAgY29uc3QgcGFyYW1zID0gc3dpcGVyLnBhcmFtcy5hMTF5O1xuICAgIGlmIChwYXJhbXMuaXRlbVJvbGVEZXNjcmlwdGlvbk1lc3NhZ2UpIHtcbiAgICAgIGFkZEVsUm9sZURlc2NyaXB0aW9uKHN3aXBlci5zbGlkZXMsIHBhcmFtcy5pdGVtUm9sZURlc2NyaXB0aW9uTWVzc2FnZSk7XG4gICAgfVxuICAgIGlmIChwYXJhbXMuc2xpZGVSb2xlKSB7XG4gICAgICBhZGRFbFJvbGUoc3dpcGVyLnNsaWRlcywgcGFyYW1zLnNsaWRlUm9sZSk7XG4gICAgfVxuICAgIGNvbnN0IHNsaWRlc0xlbmd0aCA9IHN3aXBlci5zbGlkZXMubGVuZ3RoO1xuICAgIGlmIChwYXJhbXMuc2xpZGVMYWJlbE1lc3NhZ2UpIHtcbiAgICAgIHN3aXBlci5zbGlkZXMuZm9yRWFjaCgoc2xpZGVFbCwgaW5kZXgpID0+IHtcbiAgICAgICAgY29uc3Qgc2xpZGVJbmRleCA9IHN3aXBlci5wYXJhbXMubG9vcCA/IHBhcnNlSW50KHNsaWRlRWwuZ2V0QXR0cmlidXRlKCdkYXRhLXN3aXBlci1zbGlkZS1pbmRleCcpLCAxMCkgOiBpbmRleDtcbiAgICAgICAgY29uc3QgYXJpYUxhYmVsTWVzc2FnZSA9IHBhcmFtcy5zbGlkZUxhYmVsTWVzc2FnZS5yZXBsYWNlKC9cXHtcXHtpbmRleFxcfVxcfS8sIHNsaWRlSW5kZXggKyAxKS5yZXBsYWNlKC9cXHtcXHtzbGlkZXNMZW5ndGhcXH1cXH0vLCBzbGlkZXNMZW5ndGgpO1xuICAgICAgICBhZGRFbExhYmVsKHNsaWRlRWwsIGFyaWFMYWJlbE1lc3NhZ2UpO1xuICAgICAgfSk7XG4gICAgfVxuICB9O1xuICBjb25zdCBpbml0ID0gKCkgPT4ge1xuICAgIGNvbnN0IHBhcmFtcyA9IHN3aXBlci5wYXJhbXMuYTExeTtcbiAgICBzd2lwZXIuZWwuYXBwZW5kKGxpdmVSZWdpb24pO1xuXG4gICAgLy8gQ29udGFpbmVyXG4gICAgY29uc3QgY29udGFpbmVyRWwgPSBzd2lwZXIuZWw7XG4gICAgaWYgKHBhcmFtcy5jb250YWluZXJSb2xlRGVzY3JpcHRpb25NZXNzYWdlKSB7XG4gICAgICBhZGRFbFJvbGVEZXNjcmlwdGlvbihjb250YWluZXJFbCwgcGFyYW1zLmNvbnRhaW5lclJvbGVEZXNjcmlwdGlvbk1lc3NhZ2UpO1xuICAgIH1cbiAgICBpZiAocGFyYW1zLmNvbnRhaW5lck1lc3NhZ2UpIHtcbiAgICAgIGFkZEVsTGFiZWwoY29udGFpbmVyRWwsIHBhcmFtcy5jb250YWluZXJNZXNzYWdlKTtcbiAgICB9XG5cbiAgICAvLyBXcmFwcGVyXG4gICAgY29uc3Qgd3JhcHBlckVsID0gc3dpcGVyLndyYXBwZXJFbDtcbiAgICBjb25zdCB3cmFwcGVySWQgPSBwYXJhbXMuaWQgfHwgd3JhcHBlckVsLmdldEF0dHJpYnV0ZSgnaWQnKSB8fCBgc3dpcGVyLXdyYXBwZXItJHtnZXRSYW5kb21OdW1iZXIoMTYpfWA7XG4gICAgY29uc3QgbGl2ZSA9IHN3aXBlci5wYXJhbXMuYXV0b3BsYXkgJiYgc3dpcGVyLnBhcmFtcy5hdXRvcGxheS5lbmFibGVkID8gJ29mZicgOiAncG9saXRlJztcbiAgICBhZGRFbElkKHdyYXBwZXJFbCwgd3JhcHBlcklkKTtcbiAgICBhZGRFbExpdmUod3JhcHBlckVsLCBsaXZlKTtcblxuICAgIC8vIFNsaWRlXG4gICAgaW5pdFNsaWRlcygpO1xuXG4gICAgLy8gTmF2aWdhdGlvblxuICAgIGxldCB7XG4gICAgICBuZXh0RWwsXG4gICAgICBwcmV2RWxcbiAgICB9ID0gc3dpcGVyLm5hdmlnYXRpb24gPyBzd2lwZXIubmF2aWdhdGlvbiA6IHt9O1xuICAgIG5leHRFbCA9IG1ha2VFbGVtZW50c0FycmF5KG5leHRFbCk7XG4gICAgcHJldkVsID0gbWFrZUVsZW1lbnRzQXJyYXkocHJldkVsKTtcbiAgICBpZiAobmV4dEVsKSB7XG4gICAgICBuZXh0RWwuZm9yRWFjaChlbCA9PiBpbml0TmF2RWwoZWwsIHdyYXBwZXJJZCwgcGFyYW1zLm5leHRTbGlkZU1lc3NhZ2UpKTtcbiAgICB9XG4gICAgaWYgKHByZXZFbCkge1xuICAgICAgcHJldkVsLmZvckVhY2goZWwgPT4gaW5pdE5hdkVsKGVsLCB3cmFwcGVySWQsIHBhcmFtcy5wcmV2U2xpZGVNZXNzYWdlKSk7XG4gICAgfVxuXG4gICAgLy8gUGFnaW5hdGlvblxuICAgIGlmIChoYXNDbGlja2FibGVQYWdpbmF0aW9uKCkpIHtcbiAgICAgIGNvbnN0IHBhZ2luYXRpb25FbCA9IG1ha2VFbGVtZW50c0FycmF5KHN3aXBlci5wYWdpbmF0aW9uLmVsKTtcbiAgICAgIHBhZ2luYXRpb25FbC5mb3JFYWNoKGVsID0+IHtcbiAgICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIG9uRW50ZXJPclNwYWNlS2V5KTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIFRhYiBmb2N1c1xuICAgIGNvbnN0IGRvY3VtZW50ID0gZ2V0RG9jdW1lbnQoKTtcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCd2aXNpYmlsaXR5Y2hhbmdlJywgb25WaXNpYmlsaXR5Q2hhbmdlKTtcbiAgICBzd2lwZXIuZWwuYWRkRXZlbnRMaXN0ZW5lcignZm9jdXMnLCBoYW5kbGVGb2N1cywgdHJ1ZSk7XG4gICAgc3dpcGVyLmVsLmFkZEV2ZW50TGlzdGVuZXIoJ2ZvY3VzJywgaGFuZGxlRm9jdXMsIHRydWUpO1xuICAgIHN3aXBlci5lbC5hZGRFdmVudExpc3RlbmVyKCdwb2ludGVyZG93bicsIGhhbmRsZVBvaW50ZXJEb3duLCB0cnVlKTtcbiAgICBzd2lwZXIuZWwuYWRkRXZlbnRMaXN0ZW5lcigncG9pbnRlcnVwJywgaGFuZGxlUG9pbnRlclVwLCB0cnVlKTtcbiAgfTtcbiAgZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgICBpZiAobGl2ZVJlZ2lvbikgbGl2ZVJlZ2lvbi5yZW1vdmUoKTtcbiAgICBsZXQge1xuICAgICAgbmV4dEVsLFxuICAgICAgcHJldkVsXG4gICAgfSA9IHN3aXBlci5uYXZpZ2F0aW9uID8gc3dpcGVyLm5hdmlnYXRpb24gOiB7fTtcbiAgICBuZXh0RWwgPSBtYWtlRWxlbWVudHNBcnJheShuZXh0RWwpO1xuICAgIHByZXZFbCA9IG1ha2VFbGVtZW50c0FycmF5KHByZXZFbCk7XG4gICAgaWYgKG5leHRFbCkge1xuICAgICAgbmV4dEVsLmZvckVhY2goZWwgPT4gZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIG9uRW50ZXJPclNwYWNlS2V5KSk7XG4gICAgfVxuICAgIGlmIChwcmV2RWwpIHtcbiAgICAgIHByZXZFbC5mb3JFYWNoKGVsID0+IGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBvbkVudGVyT3JTcGFjZUtleSkpO1xuICAgIH1cblxuICAgIC8vIFBhZ2luYXRpb25cbiAgICBpZiAoaGFzQ2xpY2thYmxlUGFnaW5hdGlvbigpKSB7XG4gICAgICBjb25zdCBwYWdpbmF0aW9uRWwgPSBtYWtlRWxlbWVudHNBcnJheShzd2lwZXIucGFnaW5hdGlvbi5lbCk7XG4gICAgICBwYWdpbmF0aW9uRWwuZm9yRWFjaChlbCA9PiB7XG4gICAgICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBvbkVudGVyT3JTcGFjZUtleSk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgY29uc3QgZG9jdW1lbnQgPSBnZXREb2N1bWVudCgpO1xuICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Zpc2liaWxpdHljaGFuZ2UnLCBvblZpc2liaWxpdHlDaGFuZ2UpO1xuICAgIC8vIFRhYiBmb2N1c1xuICAgIGlmIChzd2lwZXIuZWwgJiYgdHlwZW9mIHN3aXBlci5lbCAhPT0gJ3N0cmluZycpIHtcbiAgICAgIHN3aXBlci5lbC5yZW1vdmVFdmVudExpc3RlbmVyKCdmb2N1cycsIGhhbmRsZUZvY3VzLCB0cnVlKTtcbiAgICAgIHN3aXBlci5lbC5yZW1vdmVFdmVudExpc3RlbmVyKCdwb2ludGVyZG93bicsIGhhbmRsZVBvaW50ZXJEb3duLCB0cnVlKTtcbiAgICAgIHN3aXBlci5lbC5yZW1vdmVFdmVudExpc3RlbmVyKCdwb2ludGVydXAnLCBoYW5kbGVQb2ludGVyVXAsIHRydWUpO1xuICAgIH1cbiAgfVxuICBvbignYmVmb3JlSW5pdCcsICgpID0+IHtcbiAgICBsaXZlUmVnaW9uID0gY3JlYXRlRWxlbWVudCgnc3BhbicsIHN3aXBlci5wYXJhbXMuYTExeS5ub3RpZmljYXRpb25DbGFzcyk7XG4gICAgbGl2ZVJlZ2lvbi5zZXRBdHRyaWJ1dGUoJ2FyaWEtbGl2ZScsICdhc3NlcnRpdmUnKTtcbiAgICBsaXZlUmVnaW9uLnNldEF0dHJpYnV0ZSgnYXJpYS1hdG9taWMnLCAndHJ1ZScpO1xuICB9KTtcbiAgb24oJ2FmdGVySW5pdCcsICgpID0+IHtcbiAgICBpZiAoIXN3aXBlci5wYXJhbXMuYTExeS5lbmFibGVkKSByZXR1cm47XG4gICAgaW5pdCgpO1xuICB9KTtcbiAgb24oJ3NsaWRlc0xlbmd0aENoYW5nZSBzbmFwR3JpZExlbmd0aENoYW5nZSBzbGlkZXNHcmlkTGVuZ3RoQ2hhbmdlJywgKCkgPT4ge1xuICAgIGlmICghc3dpcGVyLnBhcmFtcy5hMTF5LmVuYWJsZWQpIHJldHVybjtcbiAgICBpbml0U2xpZGVzKCk7XG4gIH0pO1xuICBvbignZnJvbUVkZ2UgdG9FZGdlIGFmdGVySW5pdCBsb2NrIHVubG9jaycsICgpID0+IHtcbiAgICBpZiAoIXN3aXBlci5wYXJhbXMuYTExeS5lbmFibGVkKSByZXR1cm47XG4gICAgdXBkYXRlTmF2aWdhdGlvbigpO1xuICB9KTtcbiAgb24oJ3BhZ2luYXRpb25VcGRhdGUnLCAoKSA9PiB7XG4gICAgaWYgKCFzd2lwZXIucGFyYW1zLmExMXkuZW5hYmxlZCkgcmV0dXJuO1xuICAgIHVwZGF0ZVBhZ2luYXRpb24oKTtcbiAgfSk7XG4gIG9uKCdkZXN0cm95JywgKCkgPT4ge1xuICAgIGlmICghc3dpcGVyLnBhcmFtcy5hMTF5LmVuYWJsZWQpIHJldHVybjtcbiAgICBkZXN0cm95KCk7XG4gIH0pO1xufVxuXG5leHBvcnQgeyBBMTF5IGFzIGRlZmF1bHQgfTtcbiIsImltcG9ydCB7IGEgYXMgZ2V0V2luZG93IH0gZnJvbSAnLi4vc2hhcmVkL3Nzci13aW5kb3cuZXNtLm1qcyc7XG5cbmZ1bmN0aW9uIEhpc3RvcnkoX3JlZikge1xuICBsZXQge1xuICAgIHN3aXBlcixcbiAgICBleHRlbmRQYXJhbXMsXG4gICAgb25cbiAgfSA9IF9yZWY7XG4gIGV4dGVuZFBhcmFtcyh7XG4gICAgaGlzdG9yeToge1xuICAgICAgZW5hYmxlZDogZmFsc2UsXG4gICAgICByb290OiAnJyxcbiAgICAgIHJlcGxhY2VTdGF0ZTogZmFsc2UsXG4gICAgICBrZXk6ICdzbGlkZXMnLFxuICAgICAga2VlcFF1ZXJ5OiBmYWxzZVxuICAgIH1cbiAgfSk7XG4gIGxldCBpbml0aWFsaXplZCA9IGZhbHNlO1xuICBsZXQgcGF0aHMgPSB7fTtcbiAgY29uc3Qgc2x1Z2lmeSA9IHRleHQgPT4ge1xuICAgIHJldHVybiB0ZXh0LnRvU3RyaW5nKCkucmVwbGFjZSgvXFxzKy9nLCAnLScpLnJlcGxhY2UoL1teXFx3LV0rL2csICcnKS5yZXBsYWNlKC8tLSsvZywgJy0nKS5yZXBsYWNlKC9eLSsvLCAnJykucmVwbGFjZSgvLSskLywgJycpO1xuICB9O1xuICBjb25zdCBnZXRQYXRoVmFsdWVzID0gdXJsT3ZlcnJpZGUgPT4ge1xuICAgIGNvbnN0IHdpbmRvdyA9IGdldFdpbmRvdygpO1xuICAgIGxldCBsb2NhdGlvbjtcbiAgICBpZiAodXJsT3ZlcnJpZGUpIHtcbiAgICAgIGxvY2F0aW9uID0gbmV3IFVSTCh1cmxPdmVycmlkZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxvY2F0aW9uID0gd2luZG93LmxvY2F0aW9uO1xuICAgIH1cbiAgICBjb25zdCBwYXRoQXJyYXkgPSBsb2NhdGlvbi5wYXRobmFtZS5zbGljZSgxKS5zcGxpdCgnLycpLmZpbHRlcihwYXJ0ID0+IHBhcnQgIT09ICcnKTtcbiAgICBjb25zdCB0b3RhbCA9IHBhdGhBcnJheS5sZW5ndGg7XG4gICAgY29uc3Qga2V5ID0gcGF0aEFycmF5W3RvdGFsIC0gMl07XG4gICAgY29uc3QgdmFsdWUgPSBwYXRoQXJyYXlbdG90YWwgLSAxXTtcbiAgICByZXR1cm4ge1xuICAgICAga2V5LFxuICAgICAgdmFsdWVcbiAgICB9O1xuICB9O1xuICBjb25zdCBzZXRIaXN0b3J5ID0gKGtleSwgaW5kZXgpID0+IHtcbiAgICBjb25zdCB3aW5kb3cgPSBnZXRXaW5kb3coKTtcbiAgICBpZiAoIWluaXRpYWxpemVkIHx8ICFzd2lwZXIucGFyYW1zLmhpc3RvcnkuZW5hYmxlZCkgcmV0dXJuO1xuICAgIGxldCBsb2NhdGlvbjtcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy51cmwpIHtcbiAgICAgIGxvY2F0aW9uID0gbmV3IFVSTChzd2lwZXIucGFyYW1zLnVybCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxvY2F0aW9uID0gd2luZG93LmxvY2F0aW9uO1xuICAgIH1cbiAgICBjb25zdCBzbGlkZSA9IHN3aXBlci52aXJ0dWFsICYmIHN3aXBlci5wYXJhbXMudmlydHVhbC5lbmFibGVkID8gc3dpcGVyLnNsaWRlc0VsLnF1ZXJ5U2VsZWN0b3IoYFtkYXRhLXN3aXBlci1zbGlkZS1pbmRleD1cIiR7aW5kZXh9XCJdYCkgOiBzd2lwZXIuc2xpZGVzW2luZGV4XTtcbiAgICBsZXQgdmFsdWUgPSBzbHVnaWZ5KHNsaWRlLmdldEF0dHJpYnV0ZSgnZGF0YS1oaXN0b3J5JykpO1xuICAgIGlmIChzd2lwZXIucGFyYW1zLmhpc3Rvcnkucm9vdC5sZW5ndGggPiAwKSB7XG4gICAgICBsZXQgcm9vdCA9IHN3aXBlci5wYXJhbXMuaGlzdG9yeS5yb290O1xuICAgICAgaWYgKHJvb3Rbcm9vdC5sZW5ndGggLSAxXSA9PT0gJy8nKSByb290ID0gcm9vdC5zbGljZSgwLCByb290Lmxlbmd0aCAtIDEpO1xuICAgICAgdmFsdWUgPSBgJHtyb290fS8ke2tleSA/IGAke2tleX0vYCA6ICcnfSR7dmFsdWV9YDtcbiAgICB9IGVsc2UgaWYgKCFsb2NhdGlvbi5wYXRobmFtZS5pbmNsdWRlcyhrZXkpKSB7XG4gICAgICB2YWx1ZSA9IGAke2tleSA/IGAke2tleX0vYCA6ICcnfSR7dmFsdWV9YDtcbiAgICB9XG4gICAgaWYgKHN3aXBlci5wYXJhbXMuaGlzdG9yeS5rZWVwUXVlcnkpIHtcbiAgICAgIHZhbHVlICs9IGxvY2F0aW9uLnNlYXJjaDtcbiAgICB9XG4gICAgY29uc3QgY3VycmVudFN0YXRlID0gd2luZG93Lmhpc3Rvcnkuc3RhdGU7XG4gICAgaWYgKGN1cnJlbnRTdGF0ZSAmJiBjdXJyZW50U3RhdGUudmFsdWUgPT09IHZhbHVlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChzd2lwZXIucGFyYW1zLmhpc3RvcnkucmVwbGFjZVN0YXRlKSB7XG4gICAgICB3aW5kb3cuaGlzdG9yeS5yZXBsYWNlU3RhdGUoe1xuICAgICAgICB2YWx1ZVxuICAgICAgfSwgbnVsbCwgdmFsdWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICB3aW5kb3cuaGlzdG9yeS5wdXNoU3RhdGUoe1xuICAgICAgICB2YWx1ZVxuICAgICAgfSwgbnVsbCwgdmFsdWUpO1xuICAgIH1cbiAgfTtcbiAgY29uc3Qgc2Nyb2xsVG9TbGlkZSA9IChzcGVlZCwgdmFsdWUsIHJ1bkNhbGxiYWNrcykgPT4ge1xuICAgIGlmICh2YWx1ZSkge1xuICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbmd0aCA9IHN3aXBlci5zbGlkZXMubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgY29uc3Qgc2xpZGUgPSBzd2lwZXIuc2xpZGVzW2ldO1xuICAgICAgICBjb25zdCBzbGlkZUhpc3RvcnkgPSBzbHVnaWZ5KHNsaWRlLmdldEF0dHJpYnV0ZSgnZGF0YS1oaXN0b3J5JykpO1xuICAgICAgICBpZiAoc2xpZGVIaXN0b3J5ID09PSB2YWx1ZSkge1xuICAgICAgICAgIGNvbnN0IGluZGV4ID0gc3dpcGVyLmdldFNsaWRlSW5kZXgoc2xpZGUpO1xuICAgICAgICAgIHN3aXBlci5zbGlkZVRvKGluZGV4LCBzcGVlZCwgcnVuQ2FsbGJhY2tzKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBzd2lwZXIuc2xpZGVUbygwLCBzcGVlZCwgcnVuQ2FsbGJhY2tzKTtcbiAgICB9XG4gIH07XG4gIGNvbnN0IHNldEhpc3RvcnlQb3BTdGF0ZSA9ICgpID0+IHtcbiAgICBwYXRocyA9IGdldFBhdGhWYWx1ZXMoc3dpcGVyLnBhcmFtcy51cmwpO1xuICAgIHNjcm9sbFRvU2xpZGUoc3dpcGVyLnBhcmFtcy5zcGVlZCwgcGF0aHMudmFsdWUsIGZhbHNlKTtcbiAgfTtcbiAgY29uc3QgaW5pdCA9ICgpID0+IHtcbiAgICBjb25zdCB3aW5kb3cgPSBnZXRXaW5kb3coKTtcbiAgICBpZiAoIXN3aXBlci5wYXJhbXMuaGlzdG9yeSkgcmV0dXJuO1xuICAgIGlmICghd2luZG93Lmhpc3RvcnkgfHwgIXdpbmRvdy5oaXN0b3J5LnB1c2hTdGF0ZSkge1xuICAgICAgc3dpcGVyLnBhcmFtcy5oaXN0b3J5LmVuYWJsZWQgPSBmYWxzZTtcbiAgICAgIHN3aXBlci5wYXJhbXMuaGFzaE5hdmlnYXRpb24uZW5hYmxlZCA9IHRydWU7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGluaXRpYWxpemVkID0gdHJ1ZTtcbiAgICBwYXRocyA9IGdldFBhdGhWYWx1ZXMoc3dpcGVyLnBhcmFtcy51cmwpO1xuICAgIGlmICghcGF0aHMua2V5ICYmICFwYXRocy52YWx1ZSkge1xuICAgICAgaWYgKCFzd2lwZXIucGFyYW1zLmhpc3RvcnkucmVwbGFjZVN0YXRlKSB7XG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdwb3BzdGF0ZScsIHNldEhpc3RvcnlQb3BTdGF0ZSk7XG4gICAgICB9XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHNjcm9sbFRvU2xpZGUoMCwgcGF0aHMudmFsdWUsIHN3aXBlci5wYXJhbXMucnVuQ2FsbGJhY2tzT25Jbml0KTtcbiAgICBpZiAoIXN3aXBlci5wYXJhbXMuaGlzdG9yeS5yZXBsYWNlU3RhdGUpIHtcbiAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdwb3BzdGF0ZScsIHNldEhpc3RvcnlQb3BTdGF0ZSk7XG4gICAgfVxuICB9O1xuICBjb25zdCBkZXN0cm95ID0gKCkgPT4ge1xuICAgIGNvbnN0IHdpbmRvdyA9IGdldFdpbmRvdygpO1xuICAgIGlmICghc3dpcGVyLnBhcmFtcy5oaXN0b3J5LnJlcGxhY2VTdGF0ZSkge1xuICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3BvcHN0YXRlJywgc2V0SGlzdG9yeVBvcFN0YXRlKTtcbiAgICB9XG4gIH07XG4gIG9uKCdpbml0JywgKCkgPT4ge1xuICAgIGlmIChzd2lwZXIucGFyYW1zLmhpc3RvcnkuZW5hYmxlZCkge1xuICAgICAgaW5pdCgpO1xuICAgIH1cbiAgfSk7XG4gIG9uKCdkZXN0cm95JywgKCkgPT4ge1xuICAgIGlmIChzd2lwZXIucGFyYW1zLmhpc3RvcnkuZW5hYmxlZCkge1xuICAgICAgZGVzdHJveSgpO1xuICAgIH1cbiAgfSk7XG4gIG9uKCd0cmFuc2l0aW9uRW5kIF9mcmVlTW9kZU5vTW9tZW50dW1SZWxlYXNlJywgKCkgPT4ge1xuICAgIGlmIChpbml0aWFsaXplZCkge1xuICAgICAgc2V0SGlzdG9yeShzd2lwZXIucGFyYW1zLmhpc3Rvcnkua2V5LCBzd2lwZXIuYWN0aXZlSW5kZXgpO1xuICAgIH1cbiAgfSk7XG4gIG9uKCdzbGlkZUNoYW5nZScsICgpID0+IHtcbiAgICBpZiAoaW5pdGlhbGl6ZWQgJiYgc3dpcGVyLnBhcmFtcy5jc3NNb2RlKSB7XG4gICAgICBzZXRIaXN0b3J5KHN3aXBlci5wYXJhbXMuaGlzdG9yeS5rZXksIHN3aXBlci5hY3RpdmVJbmRleCk7XG4gICAgfVxuICB9KTtcbn1cblxuZXhwb3J0IHsgSGlzdG9yeSBhcyBkZWZhdWx0IH07XG4iLCJpbXBvcnQgeyBnIGFzIGdldERvY3VtZW50LCBhIGFzIGdldFdpbmRvdyB9IGZyb20gJy4uL3NoYXJlZC9zc3Itd2luZG93LmVzbS5tanMnO1xuaW1wb3J0IHsgZSBhcyBlbGVtZW50Q2hpbGRyZW4gfSBmcm9tICcuLi9zaGFyZWQvdXRpbHMubWpzJztcblxuZnVuY3Rpb24gSGFzaE5hdmlnYXRpb24oX3JlZikge1xuICBsZXQge1xuICAgIHN3aXBlcixcbiAgICBleHRlbmRQYXJhbXMsXG4gICAgZW1pdCxcbiAgICBvblxuICB9ID0gX3JlZjtcbiAgbGV0IGluaXRpYWxpemVkID0gZmFsc2U7XG4gIGNvbnN0IGRvY3VtZW50ID0gZ2V0RG9jdW1lbnQoKTtcbiAgY29uc3Qgd2luZG93ID0gZ2V0V2luZG93KCk7XG4gIGV4dGVuZFBhcmFtcyh7XG4gICAgaGFzaE5hdmlnYXRpb246IHtcbiAgICAgIGVuYWJsZWQ6IGZhbHNlLFxuICAgICAgcmVwbGFjZVN0YXRlOiBmYWxzZSxcbiAgICAgIHdhdGNoU3RhdGU6IGZhbHNlLFxuICAgICAgZ2V0U2xpZGVJbmRleChfcywgaGFzaCkge1xuICAgICAgICBpZiAoc3dpcGVyLnZpcnR1YWwgJiYgc3dpcGVyLnBhcmFtcy52aXJ0dWFsLmVuYWJsZWQpIHtcbiAgICAgICAgICBjb25zdCBzbGlkZVdpdGhIYXNoID0gc3dpcGVyLnNsaWRlcy5maWx0ZXIoc2xpZGVFbCA9PiBzbGlkZUVsLmdldEF0dHJpYnV0ZSgnZGF0YS1oYXNoJykgPT09IGhhc2gpWzBdO1xuICAgICAgICAgIGlmICghc2xpZGVXaXRoSGFzaCkgcmV0dXJuIDA7XG4gICAgICAgICAgY29uc3QgaW5kZXggPSBwYXJzZUludChzbGlkZVdpdGhIYXNoLmdldEF0dHJpYnV0ZSgnZGF0YS1zd2lwZXItc2xpZGUtaW5kZXgnKSwgMTApO1xuICAgICAgICAgIHJldHVybiBpbmRleDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc3dpcGVyLmdldFNsaWRlSW5kZXgoZWxlbWVudENoaWxkcmVuKHN3aXBlci5zbGlkZXNFbCwgYC4ke3N3aXBlci5wYXJhbXMuc2xpZGVDbGFzc31bZGF0YS1oYXNoPVwiJHtoYXNofVwiXSwgc3dpcGVyLXNsaWRlW2RhdGEtaGFzaD1cIiR7aGFzaH1cIl1gKVswXSk7XG4gICAgICB9XG4gICAgfVxuICB9KTtcbiAgY29uc3Qgb25IYXNoQ2hhbmdlID0gKCkgPT4ge1xuICAgIGVtaXQoJ2hhc2hDaGFuZ2UnKTtcbiAgICBjb25zdCBuZXdIYXNoID0gZG9jdW1lbnQubG9jYXRpb24uaGFzaC5yZXBsYWNlKCcjJywgJycpO1xuICAgIGNvbnN0IGFjdGl2ZVNsaWRlRWwgPSBzd2lwZXIudmlydHVhbCAmJiBzd2lwZXIucGFyYW1zLnZpcnR1YWwuZW5hYmxlZCA/IHN3aXBlci5zbGlkZXNFbC5xdWVyeVNlbGVjdG9yKGBbZGF0YS1zd2lwZXItc2xpZGUtaW5kZXg9XCIke3N3aXBlci5hY3RpdmVJbmRleH1cIl1gKSA6IHN3aXBlci5zbGlkZXNbc3dpcGVyLmFjdGl2ZUluZGV4XTtcbiAgICBjb25zdCBhY3RpdmVTbGlkZUhhc2ggPSBhY3RpdmVTbGlkZUVsID8gYWN0aXZlU2xpZGVFbC5nZXRBdHRyaWJ1dGUoJ2RhdGEtaGFzaCcpIDogJyc7XG4gICAgaWYgKG5ld0hhc2ggIT09IGFjdGl2ZVNsaWRlSGFzaCkge1xuICAgICAgY29uc3QgbmV3SW5kZXggPSBzd2lwZXIucGFyYW1zLmhhc2hOYXZpZ2F0aW9uLmdldFNsaWRlSW5kZXgoc3dpcGVyLCBuZXdIYXNoKTtcbiAgICAgIGlmICh0eXBlb2YgbmV3SW5kZXggPT09ICd1bmRlZmluZWQnIHx8IE51bWJlci5pc05hTihuZXdJbmRleCkpIHJldHVybjtcbiAgICAgIHN3aXBlci5zbGlkZVRvKG5ld0luZGV4KTtcbiAgICB9XG4gIH07XG4gIGNvbnN0IHNldEhhc2ggPSAoKSA9PiB7XG4gICAgaWYgKCFpbml0aWFsaXplZCB8fCAhc3dpcGVyLnBhcmFtcy5oYXNoTmF2aWdhdGlvbi5lbmFibGVkKSByZXR1cm47XG4gICAgY29uc3QgYWN0aXZlU2xpZGVFbCA9IHN3aXBlci52aXJ0dWFsICYmIHN3aXBlci5wYXJhbXMudmlydHVhbC5lbmFibGVkID8gc3dpcGVyLnNsaWRlc0VsLnF1ZXJ5U2VsZWN0b3IoYFtkYXRhLXN3aXBlci1zbGlkZS1pbmRleD1cIiR7c3dpcGVyLmFjdGl2ZUluZGV4fVwiXWApIDogc3dpcGVyLnNsaWRlc1tzd2lwZXIuYWN0aXZlSW5kZXhdO1xuICAgIGNvbnN0IGFjdGl2ZVNsaWRlSGFzaCA9IGFjdGl2ZVNsaWRlRWwgPyBhY3RpdmVTbGlkZUVsLmdldEF0dHJpYnV0ZSgnZGF0YS1oYXNoJykgfHwgYWN0aXZlU2xpZGVFbC5nZXRBdHRyaWJ1dGUoJ2RhdGEtaGlzdG9yeScpIDogJyc7XG4gICAgaWYgKHN3aXBlci5wYXJhbXMuaGFzaE5hdmlnYXRpb24ucmVwbGFjZVN0YXRlICYmIHdpbmRvdy5oaXN0b3J5ICYmIHdpbmRvdy5oaXN0b3J5LnJlcGxhY2VTdGF0ZSkge1xuICAgICAgd2luZG93Lmhpc3RvcnkucmVwbGFjZVN0YXRlKG51bGwsIG51bGwsIGAjJHthY3RpdmVTbGlkZUhhc2h9YCB8fCAnJyk7XG4gICAgICBlbWl0KCdoYXNoU2V0Jyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRvY3VtZW50LmxvY2F0aW9uLmhhc2ggPSBhY3RpdmVTbGlkZUhhc2ggfHwgJyc7XG4gICAgICBlbWl0KCdoYXNoU2V0Jyk7XG4gICAgfVxuICB9O1xuICBjb25zdCBpbml0ID0gKCkgPT4ge1xuICAgIGlmICghc3dpcGVyLnBhcmFtcy5oYXNoTmF2aWdhdGlvbi5lbmFibGVkIHx8IHN3aXBlci5wYXJhbXMuaGlzdG9yeSAmJiBzd2lwZXIucGFyYW1zLmhpc3RvcnkuZW5hYmxlZCkgcmV0dXJuO1xuICAgIGluaXRpYWxpemVkID0gdHJ1ZTtcbiAgICBjb25zdCBoYXNoID0gZG9jdW1lbnQubG9jYXRpb24uaGFzaC5yZXBsYWNlKCcjJywgJycpO1xuICAgIGlmIChoYXNoKSB7XG4gICAgICBjb25zdCBzcGVlZCA9IDA7XG4gICAgICBjb25zdCBpbmRleCA9IHN3aXBlci5wYXJhbXMuaGFzaE5hdmlnYXRpb24uZ2V0U2xpZGVJbmRleChzd2lwZXIsIGhhc2gpO1xuICAgICAgc3dpcGVyLnNsaWRlVG8oaW5kZXggfHwgMCwgc3BlZWQsIHN3aXBlci5wYXJhbXMucnVuQ2FsbGJhY2tzT25Jbml0LCB0cnVlKTtcbiAgICB9XG4gICAgaWYgKHN3aXBlci5wYXJhbXMuaGFzaE5hdmlnYXRpb24ud2F0Y2hTdGF0ZSkge1xuICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2hhc2hjaGFuZ2UnLCBvbkhhc2hDaGFuZ2UpO1xuICAgIH1cbiAgfTtcbiAgY29uc3QgZGVzdHJveSA9ICgpID0+IHtcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5oYXNoTmF2aWdhdGlvbi53YXRjaFN0YXRlKSB7XG4gICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignaGFzaGNoYW5nZScsIG9uSGFzaENoYW5nZSk7XG4gICAgfVxuICB9O1xuICBvbignaW5pdCcsICgpID0+IHtcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5oYXNoTmF2aWdhdGlvbi5lbmFibGVkKSB7XG4gICAgICBpbml0KCk7XG4gICAgfVxuICB9KTtcbiAgb24oJ2Rlc3Ryb3knLCAoKSA9PiB7XG4gICAgaWYgKHN3aXBlci5wYXJhbXMuaGFzaE5hdmlnYXRpb24uZW5hYmxlZCkge1xuICAgICAgZGVzdHJveSgpO1xuICAgIH1cbiAgfSk7XG4gIG9uKCd0cmFuc2l0aW9uRW5kIF9mcmVlTW9kZU5vTW9tZW50dW1SZWxlYXNlJywgKCkgPT4ge1xuICAgIGlmIChpbml0aWFsaXplZCkge1xuICAgICAgc2V0SGFzaCgpO1xuICAgIH1cbiAgfSk7XG4gIG9uKCdzbGlkZUNoYW5nZScsICgpID0+IHtcbiAgICBpZiAoaW5pdGlhbGl6ZWQgJiYgc3dpcGVyLnBhcmFtcy5jc3NNb2RlKSB7XG4gICAgICBzZXRIYXNoKCk7XG4gICAgfVxuICB9KTtcbn1cblxuZXhwb3J0IHsgSGFzaE5hdmlnYXRpb24gYXMgZGVmYXVsdCB9O1xuIiwiaW1wb3J0IHsgZyBhcyBnZXREb2N1bWVudCB9IGZyb20gJy4uL3NoYXJlZC9zc3Itd2luZG93LmVzbS5tanMnO1xuXG4vKiBlc2xpbnQgbm8tdW5kZXJzY29yZS1kYW5nbGU6IFwib2ZmXCIgKi9cbi8qIGVzbGludCBuby11c2UtYmVmb3JlLWRlZmluZTogXCJvZmZcIiAqL1xuZnVuY3Rpb24gQXV0b3BsYXkoX3JlZikge1xuICBsZXQge1xuICAgIHN3aXBlcixcbiAgICBleHRlbmRQYXJhbXMsXG4gICAgb24sXG4gICAgZW1pdCxcbiAgICBwYXJhbXNcbiAgfSA9IF9yZWY7XG4gIHN3aXBlci5hdXRvcGxheSA9IHtcbiAgICBydW5uaW5nOiBmYWxzZSxcbiAgICBwYXVzZWQ6IGZhbHNlLFxuICAgIHRpbWVMZWZ0OiAwXG4gIH07XG4gIGV4dGVuZFBhcmFtcyh7XG4gICAgYXV0b3BsYXk6IHtcbiAgICAgIGVuYWJsZWQ6IGZhbHNlLFxuICAgICAgZGVsYXk6IDMwMDAsXG4gICAgICB3YWl0Rm9yVHJhbnNpdGlvbjogdHJ1ZSxcbiAgICAgIGRpc2FibGVPbkludGVyYWN0aW9uOiBmYWxzZSxcbiAgICAgIHN0b3BPbkxhc3RTbGlkZTogZmFsc2UsXG4gICAgICByZXZlcnNlRGlyZWN0aW9uOiBmYWxzZSxcbiAgICAgIHBhdXNlT25Nb3VzZUVudGVyOiBmYWxzZVxuICAgIH1cbiAgfSk7XG4gIGxldCB0aW1lb3V0O1xuICBsZXQgcmFmO1xuICBsZXQgYXV0b3BsYXlEZWxheVRvdGFsID0gcGFyYW1zICYmIHBhcmFtcy5hdXRvcGxheSA/IHBhcmFtcy5hdXRvcGxheS5kZWxheSA6IDMwMDA7XG4gIGxldCBhdXRvcGxheURlbGF5Q3VycmVudCA9IHBhcmFtcyAmJiBwYXJhbXMuYXV0b3BsYXkgPyBwYXJhbXMuYXV0b3BsYXkuZGVsYXkgOiAzMDAwO1xuICBsZXQgYXV0b3BsYXlUaW1lTGVmdDtcbiAgbGV0IGF1dG9wbGF5U3RhcnRUaW1lID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XG4gIGxldCB3YXNQYXVzZWQ7XG4gIGxldCBpc1RvdWNoZWQ7XG4gIGxldCBwYXVzZWRCeVRvdWNoO1xuICBsZXQgdG91Y2hTdGFydFRpbWVvdXQ7XG4gIGxldCBzbGlkZUNoYW5nZWQ7XG4gIGxldCBwYXVzZWRCeUludGVyYWN0aW9uO1xuICBsZXQgcGF1c2VkQnlQb2ludGVyRW50ZXI7XG4gIGZ1bmN0aW9uIG9uVHJhbnNpdGlvbkVuZChlKSB7XG4gICAgaWYgKCFzd2lwZXIgfHwgc3dpcGVyLmRlc3Ryb3llZCB8fCAhc3dpcGVyLndyYXBwZXJFbCkgcmV0dXJuO1xuICAgIGlmIChlLnRhcmdldCAhPT0gc3dpcGVyLndyYXBwZXJFbCkgcmV0dXJuO1xuICAgIHN3aXBlci53cmFwcGVyRWwucmVtb3ZlRXZlbnRMaXN0ZW5lcigndHJhbnNpdGlvbmVuZCcsIG9uVHJhbnNpdGlvbkVuZCk7XG4gICAgaWYgKHBhdXNlZEJ5UG9pbnRlckVudGVyIHx8IGUuZGV0YWlsICYmIGUuZGV0YWlsLmJ5U3dpcGVyVG91Y2hNb3ZlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHJlc3VtZSgpO1xuICB9XG4gIGNvbnN0IGNhbGNUaW1lTGVmdCA9ICgpID0+IHtcbiAgICBpZiAoc3dpcGVyLmRlc3Ryb3llZCB8fCAhc3dpcGVyLmF1dG9wbGF5LnJ1bm5pbmcpIHJldHVybjtcbiAgICBpZiAoc3dpcGVyLmF1dG9wbGF5LnBhdXNlZCkge1xuICAgICAgd2FzUGF1c2VkID0gdHJ1ZTtcbiAgICB9IGVsc2UgaWYgKHdhc1BhdXNlZCkge1xuICAgICAgYXV0b3BsYXlEZWxheUN1cnJlbnQgPSBhdXRvcGxheVRpbWVMZWZ0O1xuICAgICAgd2FzUGF1c2VkID0gZmFsc2U7XG4gICAgfVxuICAgIGNvbnN0IHRpbWVMZWZ0ID0gc3dpcGVyLmF1dG9wbGF5LnBhdXNlZCA/IGF1dG9wbGF5VGltZUxlZnQgOiBhdXRvcGxheVN0YXJ0VGltZSArIGF1dG9wbGF5RGVsYXlDdXJyZW50IC0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XG4gICAgc3dpcGVyLmF1dG9wbGF5LnRpbWVMZWZ0ID0gdGltZUxlZnQ7XG4gICAgZW1pdCgnYXV0b3BsYXlUaW1lTGVmdCcsIHRpbWVMZWZ0LCB0aW1lTGVmdCAvIGF1dG9wbGF5RGVsYXlUb3RhbCk7XG4gICAgcmFmID0gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICAgIGNhbGNUaW1lTGVmdCgpO1xuICAgIH0pO1xuICB9O1xuICBjb25zdCBnZXRTbGlkZURlbGF5ID0gKCkgPT4ge1xuICAgIGxldCBhY3RpdmVTbGlkZUVsO1xuICAgIGlmIChzd2lwZXIudmlydHVhbCAmJiBzd2lwZXIucGFyYW1zLnZpcnR1YWwuZW5hYmxlZCkge1xuICAgICAgYWN0aXZlU2xpZGVFbCA9IHN3aXBlci5zbGlkZXMuZmlsdGVyKHNsaWRlRWwgPT4gc2xpZGVFbC5jbGFzc0xpc3QuY29udGFpbnMoJ3N3aXBlci1zbGlkZS1hY3RpdmUnKSlbMF07XG4gICAgfSBlbHNlIHtcbiAgICAgIGFjdGl2ZVNsaWRlRWwgPSBzd2lwZXIuc2xpZGVzW3N3aXBlci5hY3RpdmVJbmRleF07XG4gICAgfVxuICAgIGlmICghYWN0aXZlU2xpZGVFbCkgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICBjb25zdCBjdXJyZW50U2xpZGVEZWxheSA9IHBhcnNlSW50KGFjdGl2ZVNsaWRlRWwuZ2V0QXR0cmlidXRlKCdkYXRhLXN3aXBlci1hdXRvcGxheScpLCAxMCk7XG4gICAgcmV0dXJuIGN1cnJlbnRTbGlkZURlbGF5O1xuICB9O1xuICBjb25zdCBydW4gPSBkZWxheUZvcmNlID0+IHtcbiAgICBpZiAoc3dpcGVyLmRlc3Ryb3llZCB8fCAhc3dpcGVyLmF1dG9wbGF5LnJ1bm5pbmcpIHJldHVybjtcbiAgICBjYW5jZWxBbmltYXRpb25GcmFtZShyYWYpO1xuICAgIGNhbGNUaW1lTGVmdCgpO1xuICAgIGxldCBkZWxheSA9IHR5cGVvZiBkZWxheUZvcmNlID09PSAndW5kZWZpbmVkJyA/IHN3aXBlci5wYXJhbXMuYXV0b3BsYXkuZGVsYXkgOiBkZWxheUZvcmNlO1xuICAgIGF1dG9wbGF5RGVsYXlUb3RhbCA9IHN3aXBlci5wYXJhbXMuYXV0b3BsYXkuZGVsYXk7XG4gICAgYXV0b3BsYXlEZWxheUN1cnJlbnQgPSBzd2lwZXIucGFyYW1zLmF1dG9wbGF5LmRlbGF5O1xuICAgIGNvbnN0IGN1cnJlbnRTbGlkZURlbGF5ID0gZ2V0U2xpZGVEZWxheSgpO1xuICAgIGlmICghTnVtYmVyLmlzTmFOKGN1cnJlbnRTbGlkZURlbGF5KSAmJiBjdXJyZW50U2xpZGVEZWxheSA+IDAgJiYgdHlwZW9mIGRlbGF5Rm9yY2UgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBkZWxheSA9IGN1cnJlbnRTbGlkZURlbGF5O1xuICAgICAgYXV0b3BsYXlEZWxheVRvdGFsID0gY3VycmVudFNsaWRlRGVsYXk7XG4gICAgICBhdXRvcGxheURlbGF5Q3VycmVudCA9IGN1cnJlbnRTbGlkZURlbGF5O1xuICAgIH1cbiAgICBhdXRvcGxheVRpbWVMZWZ0ID0gZGVsYXk7XG4gICAgY29uc3Qgc3BlZWQgPSBzd2lwZXIucGFyYW1zLnNwZWVkO1xuICAgIGNvbnN0IHByb2NlZWQgPSAoKSA9PiB7XG4gICAgICBpZiAoIXN3aXBlciB8fCBzd2lwZXIuZGVzdHJveWVkKSByZXR1cm47XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5hdXRvcGxheS5yZXZlcnNlRGlyZWN0aW9uKSB7XG4gICAgICAgIGlmICghc3dpcGVyLmlzQmVnaW5uaW5nIHx8IHN3aXBlci5wYXJhbXMubG9vcCB8fCBzd2lwZXIucGFyYW1zLnJld2luZCkge1xuICAgICAgICAgIHN3aXBlci5zbGlkZVByZXYoc3BlZWQsIHRydWUsIHRydWUpO1xuICAgICAgICAgIGVtaXQoJ2F1dG9wbGF5Jyk7XG4gICAgICAgIH0gZWxzZSBpZiAoIXN3aXBlci5wYXJhbXMuYXV0b3BsYXkuc3RvcE9uTGFzdFNsaWRlKSB7XG4gICAgICAgICAgc3dpcGVyLnNsaWRlVG8oc3dpcGVyLnNsaWRlcy5sZW5ndGggLSAxLCBzcGVlZCwgdHJ1ZSwgdHJ1ZSk7XG4gICAgICAgICAgZW1pdCgnYXV0b3BsYXknKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKCFzd2lwZXIuaXNFbmQgfHwgc3dpcGVyLnBhcmFtcy5sb29wIHx8IHN3aXBlci5wYXJhbXMucmV3aW5kKSB7XG4gICAgICAgICAgc3dpcGVyLnNsaWRlTmV4dChzcGVlZCwgdHJ1ZSwgdHJ1ZSk7XG4gICAgICAgICAgZW1pdCgnYXV0b3BsYXknKTtcbiAgICAgICAgfSBlbHNlIGlmICghc3dpcGVyLnBhcmFtcy5hdXRvcGxheS5zdG9wT25MYXN0U2xpZGUpIHtcbiAgICAgICAgICBzd2lwZXIuc2xpZGVUbygwLCBzcGVlZCwgdHJ1ZSwgdHJ1ZSk7XG4gICAgICAgICAgZW1pdCgnYXV0b3BsYXknKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHN3aXBlci5wYXJhbXMuY3NzTW9kZSkge1xuICAgICAgICBhdXRvcGxheVN0YXJ0VGltZSA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuICAgICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgICAgICAgIHJ1bigpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9O1xuICAgIGlmIChkZWxheSA+IDApIHtcbiAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0KTtcbiAgICAgIHRpbWVvdXQgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgcHJvY2VlZCgpO1xuICAgICAgfSwgZGVsYXkpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgICAgICBwcm9jZWVkKCk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICByZXR1cm4gZGVsYXk7XG4gIH07XG4gIGNvbnN0IHN0YXJ0ID0gKCkgPT4ge1xuICAgIGF1dG9wbGF5U3RhcnRUaW1lID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XG4gICAgc3dpcGVyLmF1dG9wbGF5LnJ1bm5pbmcgPSB0cnVlO1xuICAgIHJ1bigpO1xuICAgIGVtaXQoJ2F1dG9wbGF5U3RhcnQnKTtcbiAgfTtcbiAgY29uc3Qgc3RvcCA9ICgpID0+IHtcbiAgICBzd2lwZXIuYXV0b3BsYXkucnVubmluZyA9IGZhbHNlO1xuICAgIGNsZWFyVGltZW91dCh0aW1lb3V0KTtcbiAgICBjYW5jZWxBbmltYXRpb25GcmFtZShyYWYpO1xuICAgIGVtaXQoJ2F1dG9wbGF5U3RvcCcpO1xuICB9O1xuICBjb25zdCBwYXVzZSA9IChpbnRlcm5hbCwgcmVzZXQpID0+IHtcbiAgICBpZiAoc3dpcGVyLmRlc3Ryb3llZCB8fCAhc3dpcGVyLmF1dG9wbGF5LnJ1bm5pbmcpIHJldHVybjtcbiAgICBjbGVhclRpbWVvdXQodGltZW91dCk7XG4gICAgaWYgKCFpbnRlcm5hbCkge1xuICAgICAgcGF1c2VkQnlJbnRlcmFjdGlvbiA9IHRydWU7XG4gICAgfVxuICAgIGNvbnN0IHByb2NlZWQgPSAoKSA9PiB7XG4gICAgICBlbWl0KCdhdXRvcGxheVBhdXNlJyk7XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5hdXRvcGxheS53YWl0Rm9yVHJhbnNpdGlvbikge1xuICAgICAgICBzd2lwZXIud3JhcHBlckVsLmFkZEV2ZW50TGlzdGVuZXIoJ3RyYW5zaXRpb25lbmQnLCBvblRyYW5zaXRpb25FbmQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVzdW1lKCk7XG4gICAgICB9XG4gICAgfTtcbiAgICBzd2lwZXIuYXV0b3BsYXkucGF1c2VkID0gdHJ1ZTtcbiAgICBpZiAocmVzZXQpIHtcbiAgICAgIGlmIChzbGlkZUNoYW5nZWQpIHtcbiAgICAgICAgYXV0b3BsYXlUaW1lTGVmdCA9IHN3aXBlci5wYXJhbXMuYXV0b3BsYXkuZGVsYXk7XG4gICAgICB9XG4gICAgICBzbGlkZUNoYW5nZWQgPSBmYWxzZTtcbiAgICAgIHByb2NlZWQoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgZGVsYXkgPSBhdXRvcGxheVRpbWVMZWZ0IHx8IHN3aXBlci5wYXJhbXMuYXV0b3BsYXkuZGVsYXk7XG4gICAgYXV0b3BsYXlUaW1lTGVmdCA9IGRlbGF5IC0gKG5ldyBEYXRlKCkuZ2V0VGltZSgpIC0gYXV0b3BsYXlTdGFydFRpbWUpO1xuICAgIGlmIChzd2lwZXIuaXNFbmQgJiYgYXV0b3BsYXlUaW1lTGVmdCA8IDAgJiYgIXN3aXBlci5wYXJhbXMubG9vcCkgcmV0dXJuO1xuICAgIGlmIChhdXRvcGxheVRpbWVMZWZ0IDwgMCkgYXV0b3BsYXlUaW1lTGVmdCA9IDA7XG4gICAgcHJvY2VlZCgpO1xuICB9O1xuICBjb25zdCByZXN1bWUgPSAoKSA9PiB7XG4gICAgaWYgKHN3aXBlci5pc0VuZCAmJiBhdXRvcGxheVRpbWVMZWZ0IDwgMCAmJiAhc3dpcGVyLnBhcmFtcy5sb29wIHx8IHN3aXBlci5kZXN0cm95ZWQgfHwgIXN3aXBlci5hdXRvcGxheS5ydW5uaW5nKSByZXR1cm47XG4gICAgYXV0b3BsYXlTdGFydFRpbWUgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcbiAgICBpZiAocGF1c2VkQnlJbnRlcmFjdGlvbikge1xuICAgICAgcGF1c2VkQnlJbnRlcmFjdGlvbiA9IGZhbHNlO1xuICAgICAgcnVuKGF1dG9wbGF5VGltZUxlZnQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBydW4oKTtcbiAgICB9XG4gICAgc3dpcGVyLmF1dG9wbGF5LnBhdXNlZCA9IGZhbHNlO1xuICAgIGVtaXQoJ2F1dG9wbGF5UmVzdW1lJyk7XG4gIH07XG4gIGNvbnN0IG9uVmlzaWJpbGl0eUNoYW5nZSA9ICgpID0+IHtcbiAgICBpZiAoc3dpcGVyLmRlc3Ryb3llZCB8fCAhc3dpcGVyLmF1dG9wbGF5LnJ1bm5pbmcpIHJldHVybjtcbiAgICBjb25zdCBkb2N1bWVudCA9IGdldERvY3VtZW50KCk7XG4gICAgaWYgKGRvY3VtZW50LnZpc2liaWxpdHlTdGF0ZSA9PT0gJ2hpZGRlbicpIHtcbiAgICAgIHBhdXNlZEJ5SW50ZXJhY3Rpb24gPSB0cnVlO1xuICAgICAgcGF1c2UodHJ1ZSk7XG4gICAgfVxuICAgIGlmIChkb2N1bWVudC52aXNpYmlsaXR5U3RhdGUgPT09ICd2aXNpYmxlJykge1xuICAgICAgcmVzdW1lKCk7XG4gICAgfVxuICB9O1xuICBjb25zdCBvblBvaW50ZXJFbnRlciA9IGUgPT4ge1xuICAgIGlmIChlLnBvaW50ZXJUeXBlICE9PSAnbW91c2UnKSByZXR1cm47XG4gICAgcGF1c2VkQnlJbnRlcmFjdGlvbiA9IHRydWU7XG4gICAgcGF1c2VkQnlQb2ludGVyRW50ZXIgPSB0cnVlO1xuICAgIGlmIChzd2lwZXIuYW5pbWF0aW5nIHx8IHN3aXBlci5hdXRvcGxheS5wYXVzZWQpIHJldHVybjtcbiAgICBwYXVzZSh0cnVlKTtcbiAgfTtcbiAgY29uc3Qgb25Qb2ludGVyTGVhdmUgPSBlID0+IHtcbiAgICBpZiAoZS5wb2ludGVyVHlwZSAhPT0gJ21vdXNlJykgcmV0dXJuO1xuICAgIHBhdXNlZEJ5UG9pbnRlckVudGVyID0gZmFsc2U7XG4gICAgaWYgKHN3aXBlci5hdXRvcGxheS5wYXVzZWQpIHtcbiAgICAgIHJlc3VtZSgpO1xuICAgIH1cbiAgfTtcbiAgY29uc3QgYXR0YWNoTW91c2VFdmVudHMgPSAoKSA9PiB7XG4gICAgaWYgKHN3aXBlci5wYXJhbXMuYXV0b3BsYXkucGF1c2VPbk1vdXNlRW50ZXIpIHtcbiAgICAgIHN3aXBlci5lbC5hZGRFdmVudExpc3RlbmVyKCdwb2ludGVyZW50ZXInLCBvblBvaW50ZXJFbnRlcik7XG4gICAgICBzd2lwZXIuZWwuYWRkRXZlbnRMaXN0ZW5lcigncG9pbnRlcmxlYXZlJywgb25Qb2ludGVyTGVhdmUpO1xuICAgIH1cbiAgfTtcbiAgY29uc3QgZGV0YWNoTW91c2VFdmVudHMgPSAoKSA9PiB7XG4gICAgaWYgKHN3aXBlci5lbCAmJiB0eXBlb2Ygc3dpcGVyLmVsICE9PSAnc3RyaW5nJykge1xuICAgICAgc3dpcGVyLmVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3BvaW50ZXJlbnRlcicsIG9uUG9pbnRlckVudGVyKTtcbiAgICAgIHN3aXBlci5lbC5yZW1vdmVFdmVudExpc3RlbmVyKCdwb2ludGVybGVhdmUnLCBvblBvaW50ZXJMZWF2ZSk7XG4gICAgfVxuICB9O1xuICBjb25zdCBhdHRhY2hEb2N1bWVudEV2ZW50cyA9ICgpID0+IHtcbiAgICBjb25zdCBkb2N1bWVudCA9IGdldERvY3VtZW50KCk7XG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigndmlzaWJpbGl0eWNoYW5nZScsIG9uVmlzaWJpbGl0eUNoYW5nZSk7XG4gIH07XG4gIGNvbnN0IGRldGFjaERvY3VtZW50RXZlbnRzID0gKCkgPT4ge1xuICAgIGNvbnN0IGRvY3VtZW50ID0gZ2V0RG9jdW1lbnQoKTtcbiAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCd2aXNpYmlsaXR5Y2hhbmdlJywgb25WaXNpYmlsaXR5Q2hhbmdlKTtcbiAgfTtcbiAgb24oJ2luaXQnLCAoKSA9PiB7XG4gICAgaWYgKHN3aXBlci5wYXJhbXMuYXV0b3BsYXkuZW5hYmxlZCkge1xuICAgICAgYXR0YWNoTW91c2VFdmVudHMoKTtcbiAgICAgIGF0dGFjaERvY3VtZW50RXZlbnRzKCk7XG4gICAgICBzdGFydCgpO1xuICAgIH1cbiAgfSk7XG4gIG9uKCdkZXN0cm95JywgKCkgPT4ge1xuICAgIGRldGFjaE1vdXNlRXZlbnRzKCk7XG4gICAgZGV0YWNoRG9jdW1lbnRFdmVudHMoKTtcbiAgICBpZiAoc3dpcGVyLmF1dG9wbGF5LnJ1bm5pbmcpIHtcbiAgICAgIHN0b3AoKTtcbiAgICB9XG4gIH0pO1xuICBvbignX2ZyZWVNb2RlU3RhdGljUmVsZWFzZScsICgpID0+IHtcbiAgICBpZiAocGF1c2VkQnlUb3VjaCB8fCBwYXVzZWRCeUludGVyYWN0aW9uKSB7XG4gICAgICByZXN1bWUoKTtcbiAgICB9XG4gIH0pO1xuICBvbignX2ZyZWVNb2RlTm9Nb21lbnR1bVJlbGVhc2UnLCAoKSA9PiB7XG4gICAgaWYgKCFzd2lwZXIucGFyYW1zLmF1dG9wbGF5LmRpc2FibGVPbkludGVyYWN0aW9uKSB7XG4gICAgICBwYXVzZSh0cnVlLCB0cnVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3RvcCgpO1xuICAgIH1cbiAgfSk7XG4gIG9uKCdiZWZvcmVUcmFuc2l0aW9uU3RhcnQnLCAoX3MsIHNwZWVkLCBpbnRlcm5hbCkgPT4ge1xuICAgIGlmIChzd2lwZXIuZGVzdHJveWVkIHx8ICFzd2lwZXIuYXV0b3BsYXkucnVubmluZykgcmV0dXJuO1xuICAgIGlmIChpbnRlcm5hbCB8fCAhc3dpcGVyLnBhcmFtcy5hdXRvcGxheS5kaXNhYmxlT25JbnRlcmFjdGlvbikge1xuICAgICAgcGF1c2UodHJ1ZSwgdHJ1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0b3AoKTtcbiAgICB9XG4gIH0pO1xuICBvbignc2xpZGVyRmlyc3RNb3ZlJywgKCkgPT4ge1xuICAgIGlmIChzd2lwZXIuZGVzdHJveWVkIHx8ICFzd2lwZXIuYXV0b3BsYXkucnVubmluZykgcmV0dXJuO1xuICAgIGlmIChzd2lwZXIucGFyYW1zLmF1dG9wbGF5LmRpc2FibGVPbkludGVyYWN0aW9uKSB7XG4gICAgICBzdG9wKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlzVG91Y2hlZCA9IHRydWU7XG4gICAgcGF1c2VkQnlUb3VjaCA9IGZhbHNlO1xuICAgIHBhdXNlZEJ5SW50ZXJhY3Rpb24gPSBmYWxzZTtcbiAgICB0b3VjaFN0YXJ0VGltZW91dCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgcGF1c2VkQnlJbnRlcmFjdGlvbiA9IHRydWU7XG4gICAgICBwYXVzZWRCeVRvdWNoID0gdHJ1ZTtcbiAgICAgIHBhdXNlKHRydWUpO1xuICAgIH0sIDIwMCk7XG4gIH0pO1xuICBvbigndG91Y2hFbmQnLCAoKSA9PiB7XG4gICAgaWYgKHN3aXBlci5kZXN0cm95ZWQgfHwgIXN3aXBlci5hdXRvcGxheS5ydW5uaW5nIHx8ICFpc1RvdWNoZWQpIHJldHVybjtcbiAgICBjbGVhclRpbWVvdXQodG91Y2hTdGFydFRpbWVvdXQpO1xuICAgIGNsZWFyVGltZW91dCh0aW1lb3V0KTtcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5hdXRvcGxheS5kaXNhYmxlT25JbnRlcmFjdGlvbikge1xuICAgICAgcGF1c2VkQnlUb3VjaCA9IGZhbHNlO1xuICAgICAgaXNUb3VjaGVkID0gZmFsc2U7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChwYXVzZWRCeVRvdWNoICYmIHN3aXBlci5wYXJhbXMuY3NzTW9kZSkgcmVzdW1lKCk7XG4gICAgcGF1c2VkQnlUb3VjaCA9IGZhbHNlO1xuICAgIGlzVG91Y2hlZCA9IGZhbHNlO1xuICB9KTtcbiAgb24oJ3NsaWRlQ2hhbmdlJywgKCkgPT4ge1xuICAgIGlmIChzd2lwZXIuZGVzdHJveWVkIHx8ICFzd2lwZXIuYXV0b3BsYXkucnVubmluZykgcmV0dXJuO1xuICAgIHNsaWRlQ2hhbmdlZCA9IHRydWU7XG4gIH0pO1xuICBPYmplY3QuYXNzaWduKHN3aXBlci5hdXRvcGxheSwge1xuICAgIHN0YXJ0LFxuICAgIHN0b3AsXG4gICAgcGF1c2UsXG4gICAgcmVzdW1lXG4gIH0pO1xufVxuXG5leHBvcnQgeyBBdXRvcGxheSBhcyBkZWZhdWx0IH07XG4iLCJpbXBvcnQgeyBnIGFzIGdldERvY3VtZW50IH0gZnJvbSAnLi4vc2hhcmVkL3Nzci13aW5kb3cuZXNtLm1qcyc7XG5pbXBvcnQgeyBsIGFzIGlzT2JqZWN0LCBlIGFzIGVsZW1lbnRDaGlsZHJlbiB9IGZyb20gJy4uL3NoYXJlZC91dGlscy5tanMnO1xuXG5mdW5jdGlvbiBUaHVtYihfcmVmKSB7XG4gIGxldCB7XG4gICAgc3dpcGVyLFxuICAgIGV4dGVuZFBhcmFtcyxcbiAgICBvblxuICB9ID0gX3JlZjtcbiAgZXh0ZW5kUGFyYW1zKHtcbiAgICB0aHVtYnM6IHtcbiAgICAgIHN3aXBlcjogbnVsbCxcbiAgICAgIG11bHRpcGxlQWN0aXZlVGh1bWJzOiB0cnVlLFxuICAgICAgYXV0b1Njcm9sbE9mZnNldDogMCxcbiAgICAgIHNsaWRlVGh1bWJBY3RpdmVDbGFzczogJ3N3aXBlci1zbGlkZS10aHVtYi1hY3RpdmUnLFxuICAgICAgdGh1bWJzQ29udGFpbmVyQ2xhc3M6ICdzd2lwZXItdGh1bWJzJ1xuICAgIH1cbiAgfSk7XG4gIGxldCBpbml0aWFsaXplZCA9IGZhbHNlO1xuICBsZXQgc3dpcGVyQ3JlYXRlZCA9IGZhbHNlO1xuICBzd2lwZXIudGh1bWJzID0ge1xuICAgIHN3aXBlcjogbnVsbFxuICB9O1xuICBmdW5jdGlvbiBvblRodW1iQ2xpY2soKSB7XG4gICAgY29uc3QgdGh1bWJzU3dpcGVyID0gc3dpcGVyLnRodW1icy5zd2lwZXI7XG4gICAgaWYgKCF0aHVtYnNTd2lwZXIgfHwgdGh1bWJzU3dpcGVyLmRlc3Ryb3llZCkgcmV0dXJuO1xuICAgIGNvbnN0IGNsaWNrZWRJbmRleCA9IHRodW1ic1N3aXBlci5jbGlja2VkSW5kZXg7XG4gICAgY29uc3QgY2xpY2tlZFNsaWRlID0gdGh1bWJzU3dpcGVyLmNsaWNrZWRTbGlkZTtcbiAgICBpZiAoY2xpY2tlZFNsaWRlICYmIGNsaWNrZWRTbGlkZS5jbGFzc0xpc3QuY29udGFpbnMoc3dpcGVyLnBhcmFtcy50aHVtYnMuc2xpZGVUaHVtYkFjdGl2ZUNsYXNzKSkgcmV0dXJuO1xuICAgIGlmICh0eXBlb2YgY2xpY2tlZEluZGV4ID09PSAndW5kZWZpbmVkJyB8fCBjbGlja2VkSW5kZXggPT09IG51bGwpIHJldHVybjtcbiAgICBsZXQgc2xpZGVUb0luZGV4O1xuICAgIGlmICh0aHVtYnNTd2lwZXIucGFyYW1zLmxvb3ApIHtcbiAgICAgIHNsaWRlVG9JbmRleCA9IHBhcnNlSW50KHRodW1ic1N3aXBlci5jbGlja2VkU2xpZGUuZ2V0QXR0cmlidXRlKCdkYXRhLXN3aXBlci1zbGlkZS1pbmRleCcpLCAxMCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNsaWRlVG9JbmRleCA9IGNsaWNrZWRJbmRleDtcbiAgICB9XG4gICAgaWYgKHN3aXBlci5wYXJhbXMubG9vcCkge1xuICAgICAgc3dpcGVyLnNsaWRlVG9Mb29wKHNsaWRlVG9JbmRleCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN3aXBlci5zbGlkZVRvKHNsaWRlVG9JbmRleCk7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIGluaXQoKSB7XG4gICAgY29uc3Qge1xuICAgICAgdGh1bWJzOiB0aHVtYnNQYXJhbXNcbiAgICB9ID0gc3dpcGVyLnBhcmFtcztcbiAgICBpZiAoaW5pdGlhbGl6ZWQpIHJldHVybiBmYWxzZTtcbiAgICBpbml0aWFsaXplZCA9IHRydWU7XG4gICAgY29uc3QgU3dpcGVyQ2xhc3MgPSBzd2lwZXIuY29uc3RydWN0b3I7XG4gICAgaWYgKHRodW1ic1BhcmFtcy5zd2lwZXIgaW5zdGFuY2VvZiBTd2lwZXJDbGFzcykge1xuICAgICAgc3dpcGVyLnRodW1icy5zd2lwZXIgPSB0aHVtYnNQYXJhbXMuc3dpcGVyO1xuICAgICAgT2JqZWN0LmFzc2lnbihzd2lwZXIudGh1bWJzLnN3aXBlci5vcmlnaW5hbFBhcmFtcywge1xuICAgICAgICB3YXRjaFNsaWRlc1Byb2dyZXNzOiB0cnVlLFxuICAgICAgICBzbGlkZVRvQ2xpY2tlZFNsaWRlOiBmYWxzZVxuICAgICAgfSk7XG4gICAgICBPYmplY3QuYXNzaWduKHN3aXBlci50aHVtYnMuc3dpcGVyLnBhcmFtcywge1xuICAgICAgICB3YXRjaFNsaWRlc1Byb2dyZXNzOiB0cnVlLFxuICAgICAgICBzbGlkZVRvQ2xpY2tlZFNsaWRlOiBmYWxzZVxuICAgICAgfSk7XG4gICAgICBzd2lwZXIudGh1bWJzLnN3aXBlci51cGRhdGUoKTtcbiAgICB9IGVsc2UgaWYgKGlzT2JqZWN0KHRodW1ic1BhcmFtcy5zd2lwZXIpKSB7XG4gICAgICBjb25zdCB0aHVtYnNTd2lwZXJQYXJhbXMgPSBPYmplY3QuYXNzaWduKHt9LCB0aHVtYnNQYXJhbXMuc3dpcGVyKTtcbiAgICAgIE9iamVjdC5hc3NpZ24odGh1bWJzU3dpcGVyUGFyYW1zLCB7XG4gICAgICAgIHdhdGNoU2xpZGVzUHJvZ3Jlc3M6IHRydWUsXG4gICAgICAgIHNsaWRlVG9DbGlja2VkU2xpZGU6IGZhbHNlXG4gICAgICB9KTtcbiAgICAgIHN3aXBlci50aHVtYnMuc3dpcGVyID0gbmV3IFN3aXBlckNsYXNzKHRodW1ic1N3aXBlclBhcmFtcyk7XG4gICAgICBzd2lwZXJDcmVhdGVkID0gdHJ1ZTtcbiAgICB9XG4gICAgc3dpcGVyLnRodW1icy5zd2lwZXIuZWwuY2xhc3NMaXN0LmFkZChzd2lwZXIucGFyYW1zLnRodW1icy50aHVtYnNDb250YWluZXJDbGFzcyk7XG4gICAgc3dpcGVyLnRodW1icy5zd2lwZXIub24oJ3RhcCcsIG9uVGh1bWJDbGljayk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgZnVuY3Rpb24gdXBkYXRlKGluaXRpYWwpIHtcbiAgICBjb25zdCB0aHVtYnNTd2lwZXIgPSBzd2lwZXIudGh1bWJzLnN3aXBlcjtcbiAgICBpZiAoIXRodW1ic1N3aXBlciB8fCB0aHVtYnNTd2lwZXIuZGVzdHJveWVkKSByZXR1cm47XG4gICAgY29uc3Qgc2xpZGVzUGVyVmlldyA9IHRodW1ic1N3aXBlci5wYXJhbXMuc2xpZGVzUGVyVmlldyA9PT0gJ2F1dG8nID8gdGh1bWJzU3dpcGVyLnNsaWRlc1BlclZpZXdEeW5hbWljKCkgOiB0aHVtYnNTd2lwZXIucGFyYW1zLnNsaWRlc1BlclZpZXc7XG5cbiAgICAvLyBBY3RpdmF0ZSB0aHVtYnNcbiAgICBsZXQgdGh1bWJzVG9BY3RpdmF0ZSA9IDE7XG4gICAgY29uc3QgdGh1bWJBY3RpdmVDbGFzcyA9IHN3aXBlci5wYXJhbXMudGh1bWJzLnNsaWRlVGh1bWJBY3RpdmVDbGFzcztcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJWaWV3ID4gMSAmJiAhc3dpcGVyLnBhcmFtcy5jZW50ZXJlZFNsaWRlcykge1xuICAgICAgdGh1bWJzVG9BY3RpdmF0ZSA9IHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyVmlldztcbiAgICB9XG4gICAgaWYgKCFzd2lwZXIucGFyYW1zLnRodW1icy5tdWx0aXBsZUFjdGl2ZVRodW1icykge1xuICAgICAgdGh1bWJzVG9BY3RpdmF0ZSA9IDE7XG4gICAgfVxuICAgIHRodW1ic1RvQWN0aXZhdGUgPSBNYXRoLmZsb29yKHRodW1ic1RvQWN0aXZhdGUpO1xuICAgIHRodW1ic1N3aXBlci5zbGlkZXMuZm9yRWFjaChzbGlkZUVsID0+IHNsaWRlRWwuY2xhc3NMaXN0LnJlbW92ZSh0aHVtYkFjdGl2ZUNsYXNzKSk7XG4gICAgaWYgKHRodW1ic1N3aXBlci5wYXJhbXMubG9vcCB8fCB0aHVtYnNTd2lwZXIucGFyYW1zLnZpcnR1YWwgJiYgdGh1bWJzU3dpcGVyLnBhcmFtcy52aXJ0dWFsLmVuYWJsZWQpIHtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGh1bWJzVG9BY3RpdmF0ZTsgaSArPSAxKSB7XG4gICAgICAgIGVsZW1lbnRDaGlsZHJlbih0aHVtYnNTd2lwZXIuc2xpZGVzRWwsIGBbZGF0YS1zd2lwZXItc2xpZGUtaW5kZXg9XCIke3N3aXBlci5yZWFsSW5kZXggKyBpfVwiXWApLmZvckVhY2goc2xpZGVFbCA9PiB7XG4gICAgICAgICAgc2xpZGVFbC5jbGFzc0xpc3QuYWRkKHRodW1iQWN0aXZlQ2xhc3MpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aHVtYnNUb0FjdGl2YXRlOyBpICs9IDEpIHtcbiAgICAgICAgaWYgKHRodW1ic1N3aXBlci5zbGlkZXNbc3dpcGVyLnJlYWxJbmRleCArIGldKSB7XG4gICAgICAgICAgdGh1bWJzU3dpcGVyLnNsaWRlc1tzd2lwZXIucmVhbEluZGV4ICsgaV0uY2xhc3NMaXN0LmFkZCh0aHVtYkFjdGl2ZUNsYXNzKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBjb25zdCBhdXRvU2Nyb2xsT2Zmc2V0ID0gc3dpcGVyLnBhcmFtcy50aHVtYnMuYXV0b1Njcm9sbE9mZnNldDtcbiAgICBjb25zdCB1c2VPZmZzZXQgPSBhdXRvU2Nyb2xsT2Zmc2V0ICYmICF0aHVtYnNTd2lwZXIucGFyYW1zLmxvb3A7XG4gICAgaWYgKHN3aXBlci5yZWFsSW5kZXggIT09IHRodW1ic1N3aXBlci5yZWFsSW5kZXggfHwgdXNlT2Zmc2V0KSB7XG4gICAgICBjb25zdCBjdXJyZW50VGh1bWJzSW5kZXggPSB0aHVtYnNTd2lwZXIuYWN0aXZlSW5kZXg7XG4gICAgICBsZXQgbmV3VGh1bWJzSW5kZXg7XG4gICAgICBsZXQgZGlyZWN0aW9uO1xuICAgICAgaWYgKHRodW1ic1N3aXBlci5wYXJhbXMubG9vcCkge1xuICAgICAgICBjb25zdCBuZXdUaHVtYnNTbGlkZSA9IHRodW1ic1N3aXBlci5zbGlkZXMuZmlsdGVyKHNsaWRlRWwgPT4gc2xpZGVFbC5nZXRBdHRyaWJ1dGUoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4JykgPT09IGAke3N3aXBlci5yZWFsSW5kZXh9YClbMF07XG4gICAgICAgIG5ld1RodW1ic0luZGV4ID0gdGh1bWJzU3dpcGVyLnNsaWRlcy5pbmRleE9mKG5ld1RodW1ic1NsaWRlKTtcbiAgICAgICAgZGlyZWN0aW9uID0gc3dpcGVyLmFjdGl2ZUluZGV4ID4gc3dpcGVyLnByZXZpb3VzSW5kZXggPyAnbmV4dCcgOiAncHJldic7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBuZXdUaHVtYnNJbmRleCA9IHN3aXBlci5yZWFsSW5kZXg7XG4gICAgICAgIGRpcmVjdGlvbiA9IG5ld1RodW1ic0luZGV4ID4gc3dpcGVyLnByZXZpb3VzSW5kZXggPyAnbmV4dCcgOiAncHJldic7XG4gICAgICB9XG4gICAgICBpZiAodXNlT2Zmc2V0KSB7XG4gICAgICAgIG5ld1RodW1ic0luZGV4ICs9IGRpcmVjdGlvbiA9PT0gJ25leHQnID8gYXV0b1Njcm9sbE9mZnNldCA6IC0xICogYXV0b1Njcm9sbE9mZnNldDtcbiAgICAgIH1cbiAgICAgIGlmICh0aHVtYnNTd2lwZXIudmlzaWJsZVNsaWRlc0luZGV4ZXMgJiYgdGh1bWJzU3dpcGVyLnZpc2libGVTbGlkZXNJbmRleGVzLmluZGV4T2YobmV3VGh1bWJzSW5kZXgpIDwgMCkge1xuICAgICAgICBpZiAodGh1bWJzU3dpcGVyLnBhcmFtcy5jZW50ZXJlZFNsaWRlcykge1xuICAgICAgICAgIGlmIChuZXdUaHVtYnNJbmRleCA+IGN1cnJlbnRUaHVtYnNJbmRleCkge1xuICAgICAgICAgICAgbmV3VGh1bWJzSW5kZXggPSBuZXdUaHVtYnNJbmRleCAtIE1hdGguZmxvb3Ioc2xpZGVzUGVyVmlldyAvIDIpICsgMTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbmV3VGh1bWJzSW5kZXggPSBuZXdUaHVtYnNJbmRleCArIE1hdGguZmxvb3Ioc2xpZGVzUGVyVmlldyAvIDIpIC0gMTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAobmV3VGh1bWJzSW5kZXggPiBjdXJyZW50VGh1bWJzSW5kZXggJiYgdGh1bWJzU3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJHcm91cCA9PT0gMSkgO1xuICAgICAgICB0aHVtYnNTd2lwZXIuc2xpZGVUbyhuZXdUaHVtYnNJbmRleCwgaW5pdGlhbCA/IDAgOiB1bmRlZmluZWQpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBvbignYmVmb3JlSW5pdCcsICgpID0+IHtcbiAgICBjb25zdCB7XG4gICAgICB0aHVtYnNcbiAgICB9ID0gc3dpcGVyLnBhcmFtcztcbiAgICBpZiAoIXRodW1icyB8fCAhdGh1bWJzLnN3aXBlcikgcmV0dXJuO1xuICAgIGlmICh0eXBlb2YgdGh1bWJzLnN3aXBlciA9PT0gJ3N0cmluZycgfHwgdGh1bWJzLnN3aXBlciBpbnN0YW5jZW9mIEhUTUxFbGVtZW50KSB7XG4gICAgICBjb25zdCBkb2N1bWVudCA9IGdldERvY3VtZW50KCk7XG4gICAgICBjb25zdCBnZXRUaHVtYnNFbGVtZW50QW5kSW5pdCA9ICgpID0+IHtcbiAgICAgICAgY29uc3QgdGh1bWJzRWxlbWVudCA9IHR5cGVvZiB0aHVtYnMuc3dpcGVyID09PSAnc3RyaW5nJyA/IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGh1bWJzLnN3aXBlcikgOiB0aHVtYnMuc3dpcGVyO1xuICAgICAgICBpZiAodGh1bWJzRWxlbWVudCAmJiB0aHVtYnNFbGVtZW50LnN3aXBlcikge1xuICAgICAgICAgIHRodW1icy5zd2lwZXIgPSB0aHVtYnNFbGVtZW50LnN3aXBlcjtcbiAgICAgICAgICBpbml0KCk7XG4gICAgICAgICAgdXBkYXRlKHRydWUpO1xuICAgICAgICB9IGVsc2UgaWYgKHRodW1ic0VsZW1lbnQpIHtcbiAgICAgICAgICBjb25zdCBvblRodW1ic1N3aXBlciA9IGUgPT4ge1xuICAgICAgICAgICAgdGh1bWJzLnN3aXBlciA9IGUuZGV0YWlsWzBdO1xuICAgICAgICAgICAgdGh1bWJzRWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdpbml0Jywgb25UaHVtYnNTd2lwZXIpO1xuICAgICAgICAgICAgaW5pdCgpO1xuICAgICAgICAgICAgdXBkYXRlKHRydWUpO1xuICAgICAgICAgICAgdGh1bWJzLnN3aXBlci51cGRhdGUoKTtcbiAgICAgICAgICAgIHN3aXBlci51cGRhdGUoKTtcbiAgICAgICAgICB9O1xuICAgICAgICAgIHRodW1ic0VsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignaW5pdCcsIG9uVGh1bWJzU3dpcGVyKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGh1bWJzRWxlbWVudDtcbiAgICAgIH07XG4gICAgICBjb25zdCB3YXRjaEZvclRodW1ic1RvQXBwZWFyID0gKCkgPT4ge1xuICAgICAgICBpZiAoc3dpcGVyLmRlc3Ryb3llZCkgcmV0dXJuO1xuICAgICAgICBjb25zdCB0aHVtYnNFbGVtZW50ID0gZ2V0VGh1bWJzRWxlbWVudEFuZEluaXQoKTtcbiAgICAgICAgaWYgKCF0aHVtYnNFbGVtZW50KSB7XG4gICAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKHdhdGNoRm9yVGh1bWJzVG9BcHBlYXIpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKHdhdGNoRm9yVGh1bWJzVG9BcHBlYXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpbml0KCk7XG4gICAgICB1cGRhdGUodHJ1ZSk7XG4gICAgfVxuICB9KTtcbiAgb24oJ3NsaWRlQ2hhbmdlIHVwZGF0ZSByZXNpemUgb2JzZXJ2ZXJVcGRhdGUnLCAoKSA9PiB7XG4gICAgdXBkYXRlKCk7XG4gIH0pO1xuICBvbignc2V0VHJhbnNpdGlvbicsIChfcywgZHVyYXRpb24pID0+IHtcbiAgICBjb25zdCB0aHVtYnNTd2lwZXIgPSBzd2lwZXIudGh1bWJzLnN3aXBlcjtcbiAgICBpZiAoIXRodW1ic1N3aXBlciB8fCB0aHVtYnNTd2lwZXIuZGVzdHJveWVkKSByZXR1cm47XG4gICAgdGh1bWJzU3dpcGVyLnNldFRyYW5zaXRpb24oZHVyYXRpb24pO1xuICB9KTtcbiAgb24oJ2JlZm9yZURlc3Ryb3knLCAoKSA9PiB7XG4gICAgY29uc3QgdGh1bWJzU3dpcGVyID0gc3dpcGVyLnRodW1icy5zd2lwZXI7XG4gICAgaWYgKCF0aHVtYnNTd2lwZXIgfHwgdGh1bWJzU3dpcGVyLmRlc3Ryb3llZCkgcmV0dXJuO1xuICAgIGlmIChzd2lwZXJDcmVhdGVkKSB7XG4gICAgICB0aHVtYnNTd2lwZXIuZGVzdHJveSgpO1xuICAgIH1cbiAgfSk7XG4gIE9iamVjdC5hc3NpZ24oc3dpcGVyLnRodW1icywge1xuICAgIGluaXQsXG4gICAgdXBkYXRlXG4gIH0pO1xufVxuXG5leHBvcnQgeyBUaHVtYiBhcyBkZWZhdWx0IH07XG4iLCJpbXBvcnQgeyBkIGFzIG5vdywgayBhcyBlbGVtZW50VHJhbnNpdGlvbkVuZCB9IGZyb20gJy4uL3NoYXJlZC91dGlscy5tanMnO1xuXG5mdW5jdGlvbiBmcmVlTW9kZShfcmVmKSB7XG4gIGxldCB7XG4gICAgc3dpcGVyLFxuICAgIGV4dGVuZFBhcmFtcyxcbiAgICBlbWl0LFxuICAgIG9uY2VcbiAgfSA9IF9yZWY7XG4gIGV4dGVuZFBhcmFtcyh7XG4gICAgZnJlZU1vZGU6IHtcbiAgICAgIGVuYWJsZWQ6IGZhbHNlLFxuICAgICAgbW9tZW50dW06IHRydWUsXG4gICAgICBtb21lbnR1bVJhdGlvOiAxLFxuICAgICAgbW9tZW50dW1Cb3VuY2U6IHRydWUsXG4gICAgICBtb21lbnR1bUJvdW5jZVJhdGlvOiAxLFxuICAgICAgbW9tZW50dW1WZWxvY2l0eVJhdGlvOiAxLFxuICAgICAgc3RpY2t5OiBmYWxzZSxcbiAgICAgIG1pbmltdW1WZWxvY2l0eTogMC4wMlxuICAgIH1cbiAgfSk7XG4gIGZ1bmN0aW9uIG9uVG91Y2hTdGFydCgpIHtcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5jc3NNb2RlKSByZXR1cm47XG4gICAgY29uc3QgdHJhbnNsYXRlID0gc3dpcGVyLmdldFRyYW5zbGF0ZSgpO1xuICAgIHN3aXBlci5zZXRUcmFuc2xhdGUodHJhbnNsYXRlKTtcbiAgICBzd2lwZXIuc2V0VHJhbnNpdGlvbigwKTtcbiAgICBzd2lwZXIudG91Y2hFdmVudHNEYXRhLnZlbG9jaXRpZXMubGVuZ3RoID0gMDtcbiAgICBzd2lwZXIuZnJlZU1vZGUub25Ub3VjaEVuZCh7XG4gICAgICBjdXJyZW50UG9zOiBzd2lwZXIucnRsID8gc3dpcGVyLnRyYW5zbGF0ZSA6IC1zd2lwZXIudHJhbnNsYXRlXG4gICAgfSk7XG4gIH1cbiAgZnVuY3Rpb24gb25Ub3VjaE1vdmUoKSB7XG4gICAgaWYgKHN3aXBlci5wYXJhbXMuY3NzTW9kZSkgcmV0dXJuO1xuICAgIGNvbnN0IHtcbiAgICAgIHRvdWNoRXZlbnRzRGF0YTogZGF0YSxcbiAgICAgIHRvdWNoZXNcbiAgICB9ID0gc3dpcGVyO1xuICAgIC8vIFZlbG9jaXR5XG4gICAgaWYgKGRhdGEudmVsb2NpdGllcy5sZW5ndGggPT09IDApIHtcbiAgICAgIGRhdGEudmVsb2NpdGllcy5wdXNoKHtcbiAgICAgICAgcG9zaXRpb246IHRvdWNoZXNbc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gJ3N0YXJ0WCcgOiAnc3RhcnRZJ10sXG4gICAgICAgIHRpbWU6IGRhdGEudG91Y2hTdGFydFRpbWVcbiAgICAgIH0pO1xuICAgIH1cbiAgICBkYXRhLnZlbG9jaXRpZXMucHVzaCh7XG4gICAgICBwb3NpdGlvbjogdG91Y2hlc1tzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyAnY3VycmVudFgnIDogJ2N1cnJlbnRZJ10sXG4gICAgICB0aW1lOiBub3coKVxuICAgIH0pO1xuICB9XG4gIGZ1bmN0aW9uIG9uVG91Y2hFbmQoX3JlZjIpIHtcbiAgICBsZXQge1xuICAgICAgY3VycmVudFBvc1xuICAgIH0gPSBfcmVmMjtcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5jc3NNb2RlKSByZXR1cm47XG4gICAgY29uc3Qge1xuICAgICAgcGFyYW1zLFxuICAgICAgd3JhcHBlckVsLFxuICAgICAgcnRsVHJhbnNsYXRlOiBydGwsXG4gICAgICBzbmFwR3JpZCxcbiAgICAgIHRvdWNoRXZlbnRzRGF0YTogZGF0YVxuICAgIH0gPSBzd2lwZXI7XG4gICAgLy8gVGltZSBkaWZmXG4gICAgY29uc3QgdG91Y2hFbmRUaW1lID0gbm93KCk7XG4gICAgY29uc3QgdGltZURpZmYgPSB0b3VjaEVuZFRpbWUgLSBkYXRhLnRvdWNoU3RhcnRUaW1lO1xuICAgIGlmIChjdXJyZW50UG9zIDwgLXN3aXBlci5taW5UcmFuc2xhdGUoKSkge1xuICAgICAgc3dpcGVyLnNsaWRlVG8oc3dpcGVyLmFjdGl2ZUluZGV4KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGN1cnJlbnRQb3MgPiAtc3dpcGVyLm1heFRyYW5zbGF0ZSgpKSB7XG4gICAgICBpZiAoc3dpcGVyLnNsaWRlcy5sZW5ndGggPCBzbmFwR3JpZC5sZW5ndGgpIHtcbiAgICAgICAgc3dpcGVyLnNsaWRlVG8oc25hcEdyaWQubGVuZ3RoIC0gMSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzd2lwZXIuc2xpZGVUbyhzd2lwZXIuc2xpZGVzLmxlbmd0aCAtIDEpO1xuICAgICAgfVxuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAocGFyYW1zLmZyZWVNb2RlLm1vbWVudHVtKSB7XG4gICAgICBpZiAoZGF0YS52ZWxvY2l0aWVzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgY29uc3QgbGFzdE1vdmVFdmVudCA9IGRhdGEudmVsb2NpdGllcy5wb3AoKTtcbiAgICAgICAgY29uc3QgdmVsb2NpdHlFdmVudCA9IGRhdGEudmVsb2NpdGllcy5wb3AoKTtcbiAgICAgICAgY29uc3QgZGlzdGFuY2UgPSBsYXN0TW92ZUV2ZW50LnBvc2l0aW9uIC0gdmVsb2NpdHlFdmVudC5wb3NpdGlvbjtcbiAgICAgICAgY29uc3QgdGltZSA9IGxhc3RNb3ZlRXZlbnQudGltZSAtIHZlbG9jaXR5RXZlbnQudGltZTtcbiAgICAgICAgc3dpcGVyLnZlbG9jaXR5ID0gZGlzdGFuY2UgLyB0aW1lO1xuICAgICAgICBzd2lwZXIudmVsb2NpdHkgLz0gMjtcbiAgICAgICAgaWYgKE1hdGguYWJzKHN3aXBlci52ZWxvY2l0eSkgPCBwYXJhbXMuZnJlZU1vZGUubWluaW11bVZlbG9jaXR5KSB7XG4gICAgICAgICAgc3dpcGVyLnZlbG9jaXR5ID0gMDtcbiAgICAgICAgfVxuICAgICAgICAvLyB0aGlzIGltcGxpZXMgdGhhdCB0aGUgdXNlciBzdG9wcGVkIG1vdmluZyBhIGZpbmdlciB0aGVuIHJlbGVhc2VkLlxuICAgICAgICAvLyBUaGVyZSB3b3VsZCBiZSBubyBldmVudHMgd2l0aCBkaXN0YW5jZSB6ZXJvLCBzbyB0aGUgbGFzdCBldmVudCBpcyBzdGFsZS5cbiAgICAgICAgaWYgKHRpbWUgPiAxNTAgfHwgbm93KCkgLSBsYXN0TW92ZUV2ZW50LnRpbWUgPiAzMDApIHtcbiAgICAgICAgICBzd2lwZXIudmVsb2NpdHkgPSAwO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzd2lwZXIudmVsb2NpdHkgPSAwO1xuICAgICAgfVxuICAgICAgc3dpcGVyLnZlbG9jaXR5ICo9IHBhcmFtcy5mcmVlTW9kZS5tb21lbnR1bVZlbG9jaXR5UmF0aW87XG4gICAgICBkYXRhLnZlbG9jaXRpZXMubGVuZ3RoID0gMDtcbiAgICAgIGxldCBtb21lbnR1bUR1cmF0aW9uID0gMTAwMCAqIHBhcmFtcy5mcmVlTW9kZS5tb21lbnR1bVJhdGlvO1xuICAgICAgY29uc3QgbW9tZW50dW1EaXN0YW5jZSA9IHN3aXBlci52ZWxvY2l0eSAqIG1vbWVudHVtRHVyYXRpb247XG4gICAgICBsZXQgbmV3UG9zaXRpb24gPSBzd2lwZXIudHJhbnNsYXRlICsgbW9tZW50dW1EaXN0YW5jZTtcbiAgICAgIGlmIChydGwpIG5ld1Bvc2l0aW9uID0gLW5ld1Bvc2l0aW9uO1xuICAgICAgbGV0IGRvQm91bmNlID0gZmFsc2U7XG4gICAgICBsZXQgYWZ0ZXJCb3VuY2VQb3NpdGlvbjtcbiAgICAgIGNvbnN0IGJvdW5jZUFtb3VudCA9IE1hdGguYWJzKHN3aXBlci52ZWxvY2l0eSkgKiAyMCAqIHBhcmFtcy5mcmVlTW9kZS5tb21lbnR1bUJvdW5jZVJhdGlvO1xuICAgICAgbGV0IG5lZWRzTG9vcEZpeDtcbiAgICAgIGlmIChuZXdQb3NpdGlvbiA8IHN3aXBlci5tYXhUcmFuc2xhdGUoKSkge1xuICAgICAgICBpZiAocGFyYW1zLmZyZWVNb2RlLm1vbWVudHVtQm91bmNlKSB7XG4gICAgICAgICAgaWYgKG5ld1Bvc2l0aW9uICsgc3dpcGVyLm1heFRyYW5zbGF0ZSgpIDwgLWJvdW5jZUFtb3VudCkge1xuICAgICAgICAgICAgbmV3UG9zaXRpb24gPSBzd2lwZXIubWF4VHJhbnNsYXRlKCkgLSBib3VuY2VBbW91bnQ7XG4gICAgICAgICAgfVxuICAgICAgICAgIGFmdGVyQm91bmNlUG9zaXRpb24gPSBzd2lwZXIubWF4VHJhbnNsYXRlKCk7XG4gICAgICAgICAgZG9Cb3VuY2UgPSB0cnVlO1xuICAgICAgICAgIGRhdGEuYWxsb3dNb21lbnR1bUJvdW5jZSA9IHRydWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbmV3UG9zaXRpb24gPSBzd2lwZXIubWF4VHJhbnNsYXRlKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBhcmFtcy5sb29wICYmIHBhcmFtcy5jZW50ZXJlZFNsaWRlcykgbmVlZHNMb29wRml4ID0gdHJ1ZTtcbiAgICAgIH0gZWxzZSBpZiAobmV3UG9zaXRpb24gPiBzd2lwZXIubWluVHJhbnNsYXRlKCkpIHtcbiAgICAgICAgaWYgKHBhcmFtcy5mcmVlTW9kZS5tb21lbnR1bUJvdW5jZSkge1xuICAgICAgICAgIGlmIChuZXdQb3NpdGlvbiAtIHN3aXBlci5taW5UcmFuc2xhdGUoKSA+IGJvdW5jZUFtb3VudCkge1xuICAgICAgICAgICAgbmV3UG9zaXRpb24gPSBzd2lwZXIubWluVHJhbnNsYXRlKCkgKyBib3VuY2VBbW91bnQ7XG4gICAgICAgICAgfVxuICAgICAgICAgIGFmdGVyQm91bmNlUG9zaXRpb24gPSBzd2lwZXIubWluVHJhbnNsYXRlKCk7XG4gICAgICAgICAgZG9Cb3VuY2UgPSB0cnVlO1xuICAgICAgICAgIGRhdGEuYWxsb3dNb21lbnR1bUJvdW5jZSA9IHRydWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbmV3UG9zaXRpb24gPSBzd2lwZXIubWluVHJhbnNsYXRlKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBhcmFtcy5sb29wICYmIHBhcmFtcy5jZW50ZXJlZFNsaWRlcykgbmVlZHNMb29wRml4ID0gdHJ1ZTtcbiAgICAgIH0gZWxzZSBpZiAocGFyYW1zLmZyZWVNb2RlLnN0aWNreSkge1xuICAgICAgICBsZXQgbmV4dFNsaWRlO1xuICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHNuYXBHcmlkLmxlbmd0aDsgaiArPSAxKSB7XG4gICAgICAgICAgaWYgKHNuYXBHcmlkW2pdID4gLW5ld1Bvc2l0aW9uKSB7XG4gICAgICAgICAgICBuZXh0U2xpZGUgPSBqO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChNYXRoLmFicyhzbmFwR3JpZFtuZXh0U2xpZGVdIC0gbmV3UG9zaXRpb24pIDwgTWF0aC5hYnMoc25hcEdyaWRbbmV4dFNsaWRlIC0gMV0gLSBuZXdQb3NpdGlvbikgfHwgc3dpcGVyLnN3aXBlRGlyZWN0aW9uID09PSAnbmV4dCcpIHtcbiAgICAgICAgICBuZXdQb3NpdGlvbiA9IHNuYXBHcmlkW25leHRTbGlkZV07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbmV3UG9zaXRpb24gPSBzbmFwR3JpZFtuZXh0U2xpZGUgLSAxXTtcbiAgICAgICAgfVxuICAgICAgICBuZXdQb3NpdGlvbiA9IC1uZXdQb3NpdGlvbjtcbiAgICAgIH1cbiAgICAgIGlmIChuZWVkc0xvb3BGaXgpIHtcbiAgICAgICAgb25jZSgndHJhbnNpdGlvbkVuZCcsICgpID0+IHtcbiAgICAgICAgICBzd2lwZXIubG9vcEZpeCgpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIC8vIEZpeCBkdXJhdGlvblxuICAgICAgaWYgKHN3aXBlci52ZWxvY2l0eSAhPT0gMCkge1xuICAgICAgICBpZiAocnRsKSB7XG4gICAgICAgICAgbW9tZW50dW1EdXJhdGlvbiA9IE1hdGguYWJzKCgtbmV3UG9zaXRpb24gLSBzd2lwZXIudHJhbnNsYXRlKSAvIHN3aXBlci52ZWxvY2l0eSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbW9tZW50dW1EdXJhdGlvbiA9IE1hdGguYWJzKChuZXdQb3NpdGlvbiAtIHN3aXBlci50cmFuc2xhdGUpIC8gc3dpcGVyLnZlbG9jaXR5KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocGFyYW1zLmZyZWVNb2RlLnN0aWNreSkge1xuICAgICAgICAgIC8vIElmIGZyZWVNb2RlLnN0aWNreSBpcyBhY3RpdmUgYW5kIHRoZSB1c2VyIGVuZHMgYSBzd2lwZSB3aXRoIGEgc2xvdy12ZWxvY2l0eVxuICAgICAgICAgIC8vIGV2ZW50LCB0aGVuIGR1cmF0aW9ucyBjYW4gYmUgMjArIHNlY29uZHMgdG8gc2xpZGUgb25lIChvciB6ZXJvISkgc2xpZGVzLlxuICAgICAgICAgIC8vIEl0J3MgZWFzeSB0byBzZWUgdGhpcyB3aGVuIHNpbXVsYXRpbmcgdG91Y2ggd2l0aCBtb3VzZSBldmVudHMuIFRvIGZpeCB0aGlzLFxuICAgICAgICAgIC8vIGxpbWl0IHNpbmdsZS1zbGlkZSBzd2lwZXMgdG8gdGhlIGRlZmF1bHQgc2xpZGUgZHVyYXRpb24uIFRoaXMgYWxzbyBoYXMgdGhlXG4gICAgICAgICAgLy8gbmljZSBzaWRlIGVmZmVjdCBvZiBtYXRjaGluZyBzbGlkZSBzcGVlZCBpZiB0aGUgdXNlciBzdG9wcGVkIG1vdmluZyBiZWZvcmVcbiAgICAgICAgICAvLyBsaWZ0aW5nIGZpbmdlciBvciBtb3VzZSB2cy4gbW92aW5nIHNsb3dseSBiZWZvcmUgbGlmdGluZyB0aGUgZmluZ2VyL21vdXNlLlxuICAgICAgICAgIC8vIEZvciBmYXN0ZXIgc3dpcGVzLCBhbHNvIGFwcGx5IGxpbWl0cyAoYWxiZWl0IGhpZ2hlciBvbmVzKS5cbiAgICAgICAgICBjb25zdCBtb3ZlRGlzdGFuY2UgPSBNYXRoLmFicygocnRsID8gLW5ld1Bvc2l0aW9uIDogbmV3UG9zaXRpb24pIC0gc3dpcGVyLnRyYW5zbGF0ZSk7XG4gICAgICAgICAgY29uc3QgY3VycmVudFNsaWRlU2l6ZSA9IHN3aXBlci5zbGlkZXNTaXplc0dyaWRbc3dpcGVyLmFjdGl2ZUluZGV4XTtcbiAgICAgICAgICBpZiAobW92ZURpc3RhbmNlIDwgY3VycmVudFNsaWRlU2l6ZSkge1xuICAgICAgICAgICAgbW9tZW50dW1EdXJhdGlvbiA9IHBhcmFtcy5zcGVlZDtcbiAgICAgICAgICB9IGVsc2UgaWYgKG1vdmVEaXN0YW5jZSA8IDIgKiBjdXJyZW50U2xpZGVTaXplKSB7XG4gICAgICAgICAgICBtb21lbnR1bUR1cmF0aW9uID0gcGFyYW1zLnNwZWVkICogMS41O1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBtb21lbnR1bUR1cmF0aW9uID0gcGFyYW1zLnNwZWVkICogMi41O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChwYXJhbXMuZnJlZU1vZGUuc3RpY2t5KSB7XG4gICAgICAgIHN3aXBlci5zbGlkZVRvQ2xvc2VzdCgpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAocGFyYW1zLmZyZWVNb2RlLm1vbWVudHVtQm91bmNlICYmIGRvQm91bmNlKSB7XG4gICAgICAgIHN3aXBlci51cGRhdGVQcm9ncmVzcyhhZnRlckJvdW5jZVBvc2l0aW9uKTtcbiAgICAgICAgc3dpcGVyLnNldFRyYW5zaXRpb24obW9tZW50dW1EdXJhdGlvbik7XG4gICAgICAgIHN3aXBlci5zZXRUcmFuc2xhdGUobmV3UG9zaXRpb24pO1xuICAgICAgICBzd2lwZXIudHJhbnNpdGlvblN0YXJ0KHRydWUsIHN3aXBlci5zd2lwZURpcmVjdGlvbik7XG4gICAgICAgIHN3aXBlci5hbmltYXRpbmcgPSB0cnVlO1xuICAgICAgICBlbGVtZW50VHJhbnNpdGlvbkVuZCh3cmFwcGVyRWwsICgpID0+IHtcbiAgICAgICAgICBpZiAoIXN3aXBlciB8fCBzd2lwZXIuZGVzdHJveWVkIHx8ICFkYXRhLmFsbG93TW9tZW50dW1Cb3VuY2UpIHJldHVybjtcbiAgICAgICAgICBlbWl0KCdtb21lbnR1bUJvdW5jZScpO1xuICAgICAgICAgIHN3aXBlci5zZXRUcmFuc2l0aW9uKHBhcmFtcy5zcGVlZCk7XG4gICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICBzd2lwZXIuc2V0VHJhbnNsYXRlKGFmdGVyQm91bmNlUG9zaXRpb24pO1xuICAgICAgICAgICAgZWxlbWVudFRyYW5zaXRpb25FbmQod3JhcHBlckVsLCAoKSA9PiB7XG4gICAgICAgICAgICAgIGlmICghc3dpcGVyIHx8IHN3aXBlci5kZXN0cm95ZWQpIHJldHVybjtcbiAgICAgICAgICAgICAgc3dpcGVyLnRyYW5zaXRpb25FbmQoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0sIDApO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSBpZiAoc3dpcGVyLnZlbG9jaXR5KSB7XG4gICAgICAgIGVtaXQoJ19mcmVlTW9kZU5vTW9tZW50dW1SZWxlYXNlJyk7XG4gICAgICAgIHN3aXBlci51cGRhdGVQcm9ncmVzcyhuZXdQb3NpdGlvbik7XG4gICAgICAgIHN3aXBlci5zZXRUcmFuc2l0aW9uKG1vbWVudHVtRHVyYXRpb24pO1xuICAgICAgICBzd2lwZXIuc2V0VHJhbnNsYXRlKG5ld1Bvc2l0aW9uKTtcbiAgICAgICAgc3dpcGVyLnRyYW5zaXRpb25TdGFydCh0cnVlLCBzd2lwZXIuc3dpcGVEaXJlY3Rpb24pO1xuICAgICAgICBpZiAoIXN3aXBlci5hbmltYXRpbmcpIHtcbiAgICAgICAgICBzd2lwZXIuYW5pbWF0aW5nID0gdHJ1ZTtcbiAgICAgICAgICBlbGVtZW50VHJhbnNpdGlvbkVuZCh3cmFwcGVyRWwsICgpID0+IHtcbiAgICAgICAgICAgIGlmICghc3dpcGVyIHx8IHN3aXBlci5kZXN0cm95ZWQpIHJldHVybjtcbiAgICAgICAgICAgIHN3aXBlci50cmFuc2l0aW9uRW5kKCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN3aXBlci51cGRhdGVQcm9ncmVzcyhuZXdQb3NpdGlvbik7XG4gICAgICB9XG4gICAgICBzd2lwZXIudXBkYXRlQWN0aXZlSW5kZXgoKTtcbiAgICAgIHN3aXBlci51cGRhdGVTbGlkZXNDbGFzc2VzKCk7XG4gICAgfSBlbHNlIGlmIChwYXJhbXMuZnJlZU1vZGUuc3RpY2t5KSB7XG4gICAgICBzd2lwZXIuc2xpZGVUb0Nsb3Nlc3QoKTtcbiAgICAgIHJldHVybjtcbiAgICB9IGVsc2UgaWYgKHBhcmFtcy5mcmVlTW9kZSkge1xuICAgICAgZW1pdCgnX2ZyZWVNb2RlTm9Nb21lbnR1bVJlbGVhc2UnKTtcbiAgICB9XG4gICAgaWYgKCFwYXJhbXMuZnJlZU1vZGUubW9tZW50dW0gfHwgdGltZURpZmYgPj0gcGFyYW1zLmxvbmdTd2lwZXNNcykge1xuICAgICAgZW1pdCgnX2ZyZWVNb2RlU3RhdGljUmVsZWFzZScpO1xuICAgICAgc3dpcGVyLnVwZGF0ZVByb2dyZXNzKCk7XG4gICAgICBzd2lwZXIudXBkYXRlQWN0aXZlSW5kZXgoKTtcbiAgICAgIHN3aXBlci51cGRhdGVTbGlkZXNDbGFzc2VzKCk7XG4gICAgfVxuICB9XG4gIE9iamVjdC5hc3NpZ24oc3dpcGVyLCB7XG4gICAgZnJlZU1vZGU6IHtcbiAgICAgIG9uVG91Y2hTdGFydCxcbiAgICAgIG9uVG91Y2hNb3ZlLFxuICAgICAgb25Ub3VjaEVuZFxuICAgIH1cbiAgfSk7XG59XG5cbmV4cG9ydCB7IGZyZWVNb2RlIGFzIGRlZmF1bHQgfTtcbiIsImZ1bmN0aW9uIEdyaWQoX3JlZikge1xuICBsZXQge1xuICAgIHN3aXBlcixcbiAgICBleHRlbmRQYXJhbXMsXG4gICAgb25cbiAgfSA9IF9yZWY7XG4gIGV4dGVuZFBhcmFtcyh7XG4gICAgZ3JpZDoge1xuICAgICAgcm93czogMSxcbiAgICAgIGZpbGw6ICdjb2x1bW4nXG4gICAgfVxuICB9KTtcbiAgbGV0IHNsaWRlc051bWJlckV2ZW5Ub1Jvd3M7XG4gIGxldCBzbGlkZXNQZXJSb3c7XG4gIGxldCBudW1GdWxsQ29sdW1ucztcbiAgbGV0IHdhc011bHRpUm93O1xuICBjb25zdCBnZXRTcGFjZUJldHdlZW4gPSAoKSA9PiB7XG4gICAgbGV0IHNwYWNlQmV0d2VlbiA9IHN3aXBlci5wYXJhbXMuc3BhY2VCZXR3ZWVuO1xuICAgIGlmICh0eXBlb2Ygc3BhY2VCZXR3ZWVuID09PSAnc3RyaW5nJyAmJiBzcGFjZUJldHdlZW4uaW5kZXhPZignJScpID49IDApIHtcbiAgICAgIHNwYWNlQmV0d2VlbiA9IHBhcnNlRmxvYXQoc3BhY2VCZXR3ZWVuLnJlcGxhY2UoJyUnLCAnJykpIC8gMTAwICogc3dpcGVyLnNpemU7XG4gICAgfSBlbHNlIGlmICh0eXBlb2Ygc3BhY2VCZXR3ZWVuID09PSAnc3RyaW5nJykge1xuICAgICAgc3BhY2VCZXR3ZWVuID0gcGFyc2VGbG9hdChzcGFjZUJldHdlZW4pO1xuICAgIH1cbiAgICByZXR1cm4gc3BhY2VCZXR3ZWVuO1xuICB9O1xuICBjb25zdCBpbml0U2xpZGVzID0gc2xpZGVzID0+IHtcbiAgICBjb25zdCB7XG4gICAgICBzbGlkZXNQZXJWaWV3XG4gICAgfSA9IHN3aXBlci5wYXJhbXM7XG4gICAgY29uc3Qge1xuICAgICAgcm93cyxcbiAgICAgIGZpbGxcbiAgICB9ID0gc3dpcGVyLnBhcmFtcy5ncmlkO1xuICAgIGNvbnN0IHNsaWRlc0xlbmd0aCA9IHN3aXBlci52aXJ0dWFsICYmIHN3aXBlci5wYXJhbXMudmlydHVhbC5lbmFibGVkID8gc3dpcGVyLnZpcnR1YWwuc2xpZGVzLmxlbmd0aCA6IHNsaWRlcy5sZW5ndGg7XG4gICAgbnVtRnVsbENvbHVtbnMgPSBNYXRoLmZsb29yKHNsaWRlc0xlbmd0aCAvIHJvd3MpO1xuICAgIGlmIChNYXRoLmZsb29yKHNsaWRlc0xlbmd0aCAvIHJvd3MpID09PSBzbGlkZXNMZW5ndGggLyByb3dzKSB7XG4gICAgICBzbGlkZXNOdW1iZXJFdmVuVG9Sb3dzID0gc2xpZGVzTGVuZ3RoO1xuICAgIH0gZWxzZSB7XG4gICAgICBzbGlkZXNOdW1iZXJFdmVuVG9Sb3dzID0gTWF0aC5jZWlsKHNsaWRlc0xlbmd0aCAvIHJvd3MpICogcm93cztcbiAgICB9XG4gICAgaWYgKHNsaWRlc1BlclZpZXcgIT09ICdhdXRvJyAmJiBmaWxsID09PSAncm93Jykge1xuICAgICAgc2xpZGVzTnVtYmVyRXZlblRvUm93cyA9IE1hdGgubWF4KHNsaWRlc051bWJlckV2ZW5Ub1Jvd3MsIHNsaWRlc1BlclZpZXcgKiByb3dzKTtcbiAgICB9XG4gICAgc2xpZGVzUGVyUm93ID0gc2xpZGVzTnVtYmVyRXZlblRvUm93cyAvIHJvd3M7XG4gIH07XG4gIGNvbnN0IHVuc2V0U2xpZGVzID0gKCkgPT4ge1xuICAgIGlmIChzd2lwZXIuc2xpZGVzKSB7XG4gICAgICBzd2lwZXIuc2xpZGVzLmZvckVhY2goc2xpZGUgPT4ge1xuICAgICAgICBpZiAoc2xpZGUuc3dpcGVyU2xpZGVHcmlkU2V0KSB7XG4gICAgICAgICAgc2xpZGUuc3R5bGUuaGVpZ2h0ID0gJyc7XG4gICAgICAgICAgc2xpZGUuc3R5bGVbc3dpcGVyLmdldERpcmVjdGlvbkxhYmVsKCdtYXJnaW4tdG9wJyldID0gJyc7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcbiAgY29uc3QgdXBkYXRlU2xpZGUgPSAoaSwgc2xpZGUsIHNsaWRlcykgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIHNsaWRlc1Blckdyb3VwXG4gICAgfSA9IHN3aXBlci5wYXJhbXM7XG4gICAgY29uc3Qgc3BhY2VCZXR3ZWVuID0gZ2V0U3BhY2VCZXR3ZWVuKCk7XG4gICAgY29uc3Qge1xuICAgICAgcm93cyxcbiAgICAgIGZpbGxcbiAgICB9ID0gc3dpcGVyLnBhcmFtcy5ncmlkO1xuICAgIGNvbnN0IHNsaWRlc0xlbmd0aCA9IHN3aXBlci52aXJ0dWFsICYmIHN3aXBlci5wYXJhbXMudmlydHVhbC5lbmFibGVkID8gc3dpcGVyLnZpcnR1YWwuc2xpZGVzLmxlbmd0aCA6IHNsaWRlcy5sZW5ndGg7XG4gICAgLy8gU2V0IHNsaWRlcyBvcmRlclxuICAgIGxldCBuZXdTbGlkZU9yZGVySW5kZXg7XG4gICAgbGV0IGNvbHVtbjtcbiAgICBsZXQgcm93O1xuICAgIGlmIChmaWxsID09PSAncm93JyAmJiBzbGlkZXNQZXJHcm91cCA+IDEpIHtcbiAgICAgIGNvbnN0IGdyb3VwSW5kZXggPSBNYXRoLmZsb29yKGkgLyAoc2xpZGVzUGVyR3JvdXAgKiByb3dzKSk7XG4gICAgICBjb25zdCBzbGlkZUluZGV4SW5Hcm91cCA9IGkgLSByb3dzICogc2xpZGVzUGVyR3JvdXAgKiBncm91cEluZGV4O1xuICAgICAgY29uc3QgY29sdW1uc0luR3JvdXAgPSBncm91cEluZGV4ID09PSAwID8gc2xpZGVzUGVyR3JvdXAgOiBNYXRoLm1pbihNYXRoLmNlaWwoKHNsaWRlc0xlbmd0aCAtIGdyb3VwSW5kZXggKiByb3dzICogc2xpZGVzUGVyR3JvdXApIC8gcm93cyksIHNsaWRlc1Blckdyb3VwKTtcbiAgICAgIHJvdyA9IE1hdGguZmxvb3Ioc2xpZGVJbmRleEluR3JvdXAgLyBjb2x1bW5zSW5Hcm91cCk7XG4gICAgICBjb2x1bW4gPSBzbGlkZUluZGV4SW5Hcm91cCAtIHJvdyAqIGNvbHVtbnNJbkdyb3VwICsgZ3JvdXBJbmRleCAqIHNsaWRlc1Blckdyb3VwO1xuICAgICAgbmV3U2xpZGVPcmRlckluZGV4ID0gY29sdW1uICsgcm93ICogc2xpZGVzTnVtYmVyRXZlblRvUm93cyAvIHJvd3M7XG4gICAgICBzbGlkZS5zdHlsZS5vcmRlciA9IG5ld1NsaWRlT3JkZXJJbmRleDtcbiAgICB9IGVsc2UgaWYgKGZpbGwgPT09ICdjb2x1bW4nKSB7XG4gICAgICBjb2x1bW4gPSBNYXRoLmZsb29yKGkgLyByb3dzKTtcbiAgICAgIHJvdyA9IGkgLSBjb2x1bW4gKiByb3dzO1xuICAgICAgaWYgKGNvbHVtbiA+IG51bUZ1bGxDb2x1bW5zIHx8IGNvbHVtbiA9PT0gbnVtRnVsbENvbHVtbnMgJiYgcm93ID09PSByb3dzIC0gMSkge1xuICAgICAgICByb3cgKz0gMTtcbiAgICAgICAgaWYgKHJvdyA+PSByb3dzKSB7XG4gICAgICAgICAgcm93ID0gMDtcbiAgICAgICAgICBjb2x1bW4gKz0gMTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICByb3cgPSBNYXRoLmZsb29yKGkgLyBzbGlkZXNQZXJSb3cpO1xuICAgICAgY29sdW1uID0gaSAtIHJvdyAqIHNsaWRlc1BlclJvdztcbiAgICB9XG4gICAgc2xpZGUucm93ID0gcm93O1xuICAgIHNsaWRlLmNvbHVtbiA9IGNvbHVtbjtcbiAgICBzbGlkZS5zdHlsZS5oZWlnaHQgPSBgY2FsYygoMTAwJSAtICR7KHJvd3MgLSAxKSAqIHNwYWNlQmV0d2Vlbn1weCkgLyAke3Jvd3N9KWA7XG4gICAgc2xpZGUuc3R5bGVbc3dpcGVyLmdldERpcmVjdGlvbkxhYmVsKCdtYXJnaW4tdG9wJyldID0gcm93ICE9PSAwID8gc3BhY2VCZXR3ZWVuICYmIGAke3NwYWNlQmV0d2Vlbn1weGAgOiAnJztcbiAgICBzbGlkZS5zd2lwZXJTbGlkZUdyaWRTZXQgPSB0cnVlO1xuICB9O1xuICBjb25zdCB1cGRhdGVXcmFwcGVyU2l6ZSA9IChzbGlkZVNpemUsIHNuYXBHcmlkKSA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgY2VudGVyZWRTbGlkZXMsXG4gICAgICByb3VuZExlbmd0aHNcbiAgICB9ID0gc3dpcGVyLnBhcmFtcztcbiAgICBjb25zdCBzcGFjZUJldHdlZW4gPSBnZXRTcGFjZUJldHdlZW4oKTtcbiAgICBjb25zdCB7XG4gICAgICByb3dzXG4gICAgfSA9IHN3aXBlci5wYXJhbXMuZ3JpZDtcbiAgICBzd2lwZXIudmlydHVhbFNpemUgPSAoc2xpZGVTaXplICsgc3BhY2VCZXR3ZWVuKSAqIHNsaWRlc051bWJlckV2ZW5Ub1Jvd3M7XG4gICAgc3dpcGVyLnZpcnR1YWxTaXplID0gTWF0aC5jZWlsKHN3aXBlci52aXJ0dWFsU2l6ZSAvIHJvd3MpIC0gc3BhY2VCZXR3ZWVuO1xuICAgIGlmICghc3dpcGVyLnBhcmFtcy5jc3NNb2RlKSB7XG4gICAgICBzd2lwZXIud3JhcHBlckVsLnN0eWxlW3N3aXBlci5nZXREaXJlY3Rpb25MYWJlbCgnd2lkdGgnKV0gPSBgJHtzd2lwZXIudmlydHVhbFNpemUgKyBzcGFjZUJldHdlZW59cHhgO1xuICAgIH1cbiAgICBpZiAoY2VudGVyZWRTbGlkZXMpIHtcbiAgICAgIGNvbnN0IG5ld1NsaWRlc0dyaWQgPSBbXTtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc25hcEdyaWQubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgbGV0IHNsaWRlc0dyaWRJdGVtID0gc25hcEdyaWRbaV07XG4gICAgICAgIGlmIChyb3VuZExlbmd0aHMpIHNsaWRlc0dyaWRJdGVtID0gTWF0aC5mbG9vcihzbGlkZXNHcmlkSXRlbSk7XG4gICAgICAgIGlmIChzbmFwR3JpZFtpXSA8IHN3aXBlci52aXJ0dWFsU2l6ZSArIHNuYXBHcmlkWzBdKSBuZXdTbGlkZXNHcmlkLnB1c2goc2xpZGVzR3JpZEl0ZW0pO1xuICAgICAgfVxuICAgICAgc25hcEdyaWQuc3BsaWNlKDAsIHNuYXBHcmlkLmxlbmd0aCk7XG4gICAgICBzbmFwR3JpZC5wdXNoKC4uLm5ld1NsaWRlc0dyaWQpO1xuICAgIH1cbiAgfTtcbiAgY29uc3Qgb25Jbml0ID0gKCkgPT4ge1xuICAgIHdhc011bHRpUm93ID0gc3dpcGVyLnBhcmFtcy5ncmlkICYmIHN3aXBlci5wYXJhbXMuZ3JpZC5yb3dzID4gMTtcbiAgfTtcbiAgY29uc3Qgb25VcGRhdGUgPSAoKSA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgcGFyYW1zLFxuICAgICAgZWxcbiAgICB9ID0gc3dpcGVyO1xuICAgIGNvbnN0IGlzTXVsdGlSb3cgPSBwYXJhbXMuZ3JpZCAmJiBwYXJhbXMuZ3JpZC5yb3dzID4gMTtcbiAgICBpZiAod2FzTXVsdGlSb3cgJiYgIWlzTXVsdGlSb3cpIHtcbiAgICAgIGVsLmNsYXNzTGlzdC5yZW1vdmUoYCR7cGFyYW1zLmNvbnRhaW5lck1vZGlmaWVyQ2xhc3N9Z3JpZGAsIGAke3BhcmFtcy5jb250YWluZXJNb2RpZmllckNsYXNzfWdyaWQtY29sdW1uYCk7XG4gICAgICBudW1GdWxsQ29sdW1ucyA9IDE7XG4gICAgICBzd2lwZXIuZW1pdENvbnRhaW5lckNsYXNzZXMoKTtcbiAgICB9IGVsc2UgaWYgKCF3YXNNdWx0aVJvdyAmJiBpc011bHRpUm93KSB7XG4gICAgICBlbC5jbGFzc0xpc3QuYWRkKGAke3BhcmFtcy5jb250YWluZXJNb2RpZmllckNsYXNzfWdyaWRgKTtcbiAgICAgIGlmIChwYXJhbXMuZ3JpZC5maWxsID09PSAnY29sdW1uJykge1xuICAgICAgICBlbC5jbGFzc0xpc3QuYWRkKGAke3BhcmFtcy5jb250YWluZXJNb2RpZmllckNsYXNzfWdyaWQtY29sdW1uYCk7XG4gICAgICB9XG4gICAgICBzd2lwZXIuZW1pdENvbnRhaW5lckNsYXNzZXMoKTtcbiAgICB9XG4gICAgd2FzTXVsdGlSb3cgPSBpc011bHRpUm93O1xuICB9O1xuICBvbignaW5pdCcsIG9uSW5pdCk7XG4gIG9uKCd1cGRhdGUnLCBvblVwZGF0ZSk7XG4gIHN3aXBlci5ncmlkID0ge1xuICAgIGluaXRTbGlkZXMsXG4gICAgdW5zZXRTbGlkZXMsXG4gICAgdXBkYXRlU2xpZGUsXG4gICAgdXBkYXRlV3JhcHBlclNpemVcbiAgfTtcbn1cblxuZXhwb3J0IHsgR3JpZCBhcyBkZWZhdWx0IH07XG4iLCJmdW5jdGlvbiBhcHBlbmRTbGlkZShzbGlkZXMpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgY29uc3Qge1xuICAgIHBhcmFtcyxcbiAgICBzbGlkZXNFbFxuICB9ID0gc3dpcGVyO1xuICBpZiAocGFyYW1zLmxvb3ApIHtcbiAgICBzd2lwZXIubG9vcERlc3Ryb3koKTtcbiAgfVxuICBjb25zdCBhcHBlbmRFbGVtZW50ID0gc2xpZGVFbCA9PiB7XG4gICAgaWYgKHR5cGVvZiBzbGlkZUVsID09PSAnc3RyaW5nJykge1xuICAgICAgY29uc3QgdGVtcERPTSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgdGVtcERPTS5pbm5lckhUTUwgPSBzbGlkZUVsO1xuICAgICAgc2xpZGVzRWwuYXBwZW5kKHRlbXBET00uY2hpbGRyZW5bMF0pO1xuICAgICAgdGVtcERPTS5pbm5lckhUTUwgPSAnJztcbiAgICB9IGVsc2Uge1xuICAgICAgc2xpZGVzRWwuYXBwZW5kKHNsaWRlRWwpO1xuICAgIH1cbiAgfTtcbiAgaWYgKHR5cGVvZiBzbGlkZXMgPT09ICdvYmplY3QnICYmICdsZW5ndGgnIGluIHNsaWRlcykge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2xpZGVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICBpZiAoc2xpZGVzW2ldKSBhcHBlbmRFbGVtZW50KHNsaWRlc1tpXSk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGFwcGVuZEVsZW1lbnQoc2xpZGVzKTtcbiAgfVxuICBzd2lwZXIucmVjYWxjU2xpZGVzKCk7XG4gIGlmIChwYXJhbXMubG9vcCkge1xuICAgIHN3aXBlci5sb29wQ3JlYXRlKCk7XG4gIH1cbiAgaWYgKCFwYXJhbXMub2JzZXJ2ZXIgfHwgc3dpcGVyLmlzRWxlbWVudCkge1xuICAgIHN3aXBlci51cGRhdGUoKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBwcmVwZW5kU2xpZGUoc2xpZGVzKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IHtcbiAgICBwYXJhbXMsXG4gICAgYWN0aXZlSW5kZXgsXG4gICAgc2xpZGVzRWxcbiAgfSA9IHN3aXBlcjtcbiAgaWYgKHBhcmFtcy5sb29wKSB7XG4gICAgc3dpcGVyLmxvb3BEZXN0cm95KCk7XG4gIH1cbiAgbGV0IG5ld0FjdGl2ZUluZGV4ID0gYWN0aXZlSW5kZXggKyAxO1xuICBjb25zdCBwcmVwZW5kRWxlbWVudCA9IHNsaWRlRWwgPT4ge1xuICAgIGlmICh0eXBlb2Ygc2xpZGVFbCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGNvbnN0IHRlbXBET00gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgIHRlbXBET00uaW5uZXJIVE1MID0gc2xpZGVFbDtcbiAgICAgIHNsaWRlc0VsLnByZXBlbmQodGVtcERPTS5jaGlsZHJlblswXSk7XG4gICAgICB0ZW1wRE9NLmlubmVySFRNTCA9ICcnO1xuICAgIH0gZWxzZSB7XG4gICAgICBzbGlkZXNFbC5wcmVwZW5kKHNsaWRlRWwpO1xuICAgIH1cbiAgfTtcbiAgaWYgKHR5cGVvZiBzbGlkZXMgPT09ICdvYmplY3QnICYmICdsZW5ndGgnIGluIHNsaWRlcykge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2xpZGVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICBpZiAoc2xpZGVzW2ldKSBwcmVwZW5kRWxlbWVudChzbGlkZXNbaV0pO1xuICAgIH1cbiAgICBuZXdBY3RpdmVJbmRleCA9IGFjdGl2ZUluZGV4ICsgc2xpZGVzLmxlbmd0aDtcbiAgfSBlbHNlIHtcbiAgICBwcmVwZW5kRWxlbWVudChzbGlkZXMpO1xuICB9XG4gIHN3aXBlci5yZWNhbGNTbGlkZXMoKTtcbiAgaWYgKHBhcmFtcy5sb29wKSB7XG4gICAgc3dpcGVyLmxvb3BDcmVhdGUoKTtcbiAgfVxuICBpZiAoIXBhcmFtcy5vYnNlcnZlciB8fCBzd2lwZXIuaXNFbGVtZW50KSB7XG4gICAgc3dpcGVyLnVwZGF0ZSgpO1xuICB9XG4gIHN3aXBlci5zbGlkZVRvKG5ld0FjdGl2ZUluZGV4LCAwLCBmYWxzZSk7XG59XG5cbmZ1bmN0aW9uIGFkZFNsaWRlKGluZGV4LCBzbGlkZXMpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgY29uc3Qge1xuICAgIHBhcmFtcyxcbiAgICBhY3RpdmVJbmRleCxcbiAgICBzbGlkZXNFbFxuICB9ID0gc3dpcGVyO1xuICBsZXQgYWN0aXZlSW5kZXhCdWZmZXIgPSBhY3RpdmVJbmRleDtcbiAgaWYgKHBhcmFtcy5sb29wKSB7XG4gICAgYWN0aXZlSW5kZXhCdWZmZXIgLT0gc3dpcGVyLmxvb3BlZFNsaWRlcztcbiAgICBzd2lwZXIubG9vcERlc3Ryb3koKTtcbiAgICBzd2lwZXIucmVjYWxjU2xpZGVzKCk7XG4gIH1cbiAgY29uc3QgYmFzZUxlbmd0aCA9IHN3aXBlci5zbGlkZXMubGVuZ3RoO1xuICBpZiAoaW5kZXggPD0gMCkge1xuICAgIHN3aXBlci5wcmVwZW5kU2xpZGUoc2xpZGVzKTtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKGluZGV4ID49IGJhc2VMZW5ndGgpIHtcbiAgICBzd2lwZXIuYXBwZW5kU2xpZGUoc2xpZGVzKTtcbiAgICByZXR1cm47XG4gIH1cbiAgbGV0IG5ld0FjdGl2ZUluZGV4ID0gYWN0aXZlSW5kZXhCdWZmZXIgPiBpbmRleCA/IGFjdGl2ZUluZGV4QnVmZmVyICsgMSA6IGFjdGl2ZUluZGV4QnVmZmVyO1xuICBjb25zdCBzbGlkZXNCdWZmZXIgPSBbXTtcbiAgZm9yIChsZXQgaSA9IGJhc2VMZW5ndGggLSAxOyBpID49IGluZGV4OyBpIC09IDEpIHtcbiAgICBjb25zdCBjdXJyZW50U2xpZGUgPSBzd2lwZXIuc2xpZGVzW2ldO1xuICAgIGN1cnJlbnRTbGlkZS5yZW1vdmUoKTtcbiAgICBzbGlkZXNCdWZmZXIudW5zaGlmdChjdXJyZW50U2xpZGUpO1xuICB9XG4gIGlmICh0eXBlb2Ygc2xpZGVzID09PSAnb2JqZWN0JyAmJiAnbGVuZ3RoJyBpbiBzbGlkZXMpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNsaWRlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgaWYgKHNsaWRlc1tpXSkgc2xpZGVzRWwuYXBwZW5kKHNsaWRlc1tpXSk7XG4gICAgfVxuICAgIG5ld0FjdGl2ZUluZGV4ID0gYWN0aXZlSW5kZXhCdWZmZXIgPiBpbmRleCA/IGFjdGl2ZUluZGV4QnVmZmVyICsgc2xpZGVzLmxlbmd0aCA6IGFjdGl2ZUluZGV4QnVmZmVyO1xuICB9IGVsc2Uge1xuICAgIHNsaWRlc0VsLmFwcGVuZChzbGlkZXMpO1xuICB9XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgc2xpZGVzQnVmZmVyLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgc2xpZGVzRWwuYXBwZW5kKHNsaWRlc0J1ZmZlcltpXSk7XG4gIH1cbiAgc3dpcGVyLnJlY2FsY1NsaWRlcygpO1xuICBpZiAocGFyYW1zLmxvb3ApIHtcbiAgICBzd2lwZXIubG9vcENyZWF0ZSgpO1xuICB9XG4gIGlmICghcGFyYW1zLm9ic2VydmVyIHx8IHN3aXBlci5pc0VsZW1lbnQpIHtcbiAgICBzd2lwZXIudXBkYXRlKCk7XG4gIH1cbiAgaWYgKHBhcmFtcy5sb29wKSB7XG4gICAgc3dpcGVyLnNsaWRlVG8obmV3QWN0aXZlSW5kZXggKyBzd2lwZXIubG9vcGVkU2xpZGVzLCAwLCBmYWxzZSk7XG4gIH0gZWxzZSB7XG4gICAgc3dpcGVyLnNsaWRlVG8obmV3QWN0aXZlSW5kZXgsIDAsIGZhbHNlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiByZW1vdmVTbGlkZShzbGlkZXNJbmRleGVzKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IHtcbiAgICBwYXJhbXMsXG4gICAgYWN0aXZlSW5kZXhcbiAgfSA9IHN3aXBlcjtcbiAgbGV0IGFjdGl2ZUluZGV4QnVmZmVyID0gYWN0aXZlSW5kZXg7XG4gIGlmIChwYXJhbXMubG9vcCkge1xuICAgIGFjdGl2ZUluZGV4QnVmZmVyIC09IHN3aXBlci5sb29wZWRTbGlkZXM7XG4gICAgc3dpcGVyLmxvb3BEZXN0cm95KCk7XG4gIH1cbiAgbGV0IG5ld0FjdGl2ZUluZGV4ID0gYWN0aXZlSW5kZXhCdWZmZXI7XG4gIGxldCBpbmRleFRvUmVtb3ZlO1xuICBpZiAodHlwZW9mIHNsaWRlc0luZGV4ZXMgPT09ICdvYmplY3QnICYmICdsZW5ndGgnIGluIHNsaWRlc0luZGV4ZXMpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNsaWRlc0luZGV4ZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIGluZGV4VG9SZW1vdmUgPSBzbGlkZXNJbmRleGVzW2ldO1xuICAgICAgaWYgKHN3aXBlci5zbGlkZXNbaW5kZXhUb1JlbW92ZV0pIHN3aXBlci5zbGlkZXNbaW5kZXhUb1JlbW92ZV0ucmVtb3ZlKCk7XG4gICAgICBpZiAoaW5kZXhUb1JlbW92ZSA8IG5ld0FjdGl2ZUluZGV4KSBuZXdBY3RpdmVJbmRleCAtPSAxO1xuICAgIH1cbiAgICBuZXdBY3RpdmVJbmRleCA9IE1hdGgubWF4KG5ld0FjdGl2ZUluZGV4LCAwKTtcbiAgfSBlbHNlIHtcbiAgICBpbmRleFRvUmVtb3ZlID0gc2xpZGVzSW5kZXhlcztcbiAgICBpZiAoc3dpcGVyLnNsaWRlc1tpbmRleFRvUmVtb3ZlXSkgc3dpcGVyLnNsaWRlc1tpbmRleFRvUmVtb3ZlXS5yZW1vdmUoKTtcbiAgICBpZiAoaW5kZXhUb1JlbW92ZSA8IG5ld0FjdGl2ZUluZGV4KSBuZXdBY3RpdmVJbmRleCAtPSAxO1xuICAgIG5ld0FjdGl2ZUluZGV4ID0gTWF0aC5tYXgobmV3QWN0aXZlSW5kZXgsIDApO1xuICB9XG4gIHN3aXBlci5yZWNhbGNTbGlkZXMoKTtcbiAgaWYgKHBhcmFtcy5sb29wKSB7XG4gICAgc3dpcGVyLmxvb3BDcmVhdGUoKTtcbiAgfVxuICBpZiAoIXBhcmFtcy5vYnNlcnZlciB8fCBzd2lwZXIuaXNFbGVtZW50KSB7XG4gICAgc3dpcGVyLnVwZGF0ZSgpO1xuICB9XG4gIGlmIChwYXJhbXMubG9vcCkge1xuICAgIHN3aXBlci5zbGlkZVRvKG5ld0FjdGl2ZUluZGV4ICsgc3dpcGVyLmxvb3BlZFNsaWRlcywgMCwgZmFsc2UpO1xuICB9IGVsc2Uge1xuICAgIHN3aXBlci5zbGlkZVRvKG5ld0FjdGl2ZUluZGV4LCAwLCBmYWxzZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gcmVtb3ZlQWxsU2xpZGVzKCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCBzbGlkZXNJbmRleGVzID0gW107XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgc3dpcGVyLnNsaWRlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIHNsaWRlc0luZGV4ZXMucHVzaChpKTtcbiAgfVxuICBzd2lwZXIucmVtb3ZlU2xpZGUoc2xpZGVzSW5kZXhlcyk7XG59XG5cbmZ1bmN0aW9uIE1hbmlwdWxhdGlvbihfcmVmKSB7XG4gIGxldCB7XG4gICAgc3dpcGVyXG4gIH0gPSBfcmVmO1xuICBPYmplY3QuYXNzaWduKHN3aXBlciwge1xuICAgIGFwcGVuZFNsaWRlOiBhcHBlbmRTbGlkZS5iaW5kKHN3aXBlciksXG4gICAgcHJlcGVuZFNsaWRlOiBwcmVwZW5kU2xpZGUuYmluZChzd2lwZXIpLFxuICAgIGFkZFNsaWRlOiBhZGRTbGlkZS5iaW5kKHN3aXBlciksXG4gICAgcmVtb3ZlU2xpZGU6IHJlbW92ZVNsaWRlLmJpbmQoc3dpcGVyKSxcbiAgICByZW1vdmVBbGxTbGlkZXM6IHJlbW92ZUFsbFNsaWRlcy5iaW5kKHN3aXBlcilcbiAgfSk7XG59XG5cbmV4cG9ydCB7IE1hbmlwdWxhdGlvbiBhcyBkZWZhdWx0IH07XG4iLCJmdW5jdGlvbiBlZmZlY3RJbml0KHBhcmFtcykge1xuICBjb25zdCB7XG4gICAgZWZmZWN0LFxuICAgIHN3aXBlcixcbiAgICBvbixcbiAgICBzZXRUcmFuc2xhdGUsXG4gICAgc2V0VHJhbnNpdGlvbixcbiAgICBvdmVyd3JpdGVQYXJhbXMsXG4gICAgcGVyc3BlY3RpdmUsXG4gICAgcmVjcmVhdGVTaGFkb3dzLFxuICAgIGdldEVmZmVjdFBhcmFtc1xuICB9ID0gcGFyYW1zO1xuICBvbignYmVmb3JlSW5pdCcsICgpID0+IHtcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5lZmZlY3QgIT09IGVmZmVjdCkgcmV0dXJuO1xuICAgIHN3aXBlci5jbGFzc05hbWVzLnB1c2goYCR7c3dpcGVyLnBhcmFtcy5jb250YWluZXJNb2RpZmllckNsYXNzfSR7ZWZmZWN0fWApO1xuICAgIGlmIChwZXJzcGVjdGl2ZSAmJiBwZXJzcGVjdGl2ZSgpKSB7XG4gICAgICBzd2lwZXIuY2xhc3NOYW1lcy5wdXNoKGAke3N3aXBlci5wYXJhbXMuY29udGFpbmVyTW9kaWZpZXJDbGFzc30zZGApO1xuICAgIH1cbiAgICBjb25zdCBvdmVyd3JpdGVQYXJhbXNSZXN1bHQgPSBvdmVyd3JpdGVQYXJhbXMgPyBvdmVyd3JpdGVQYXJhbXMoKSA6IHt9O1xuICAgIE9iamVjdC5hc3NpZ24oc3dpcGVyLnBhcmFtcywgb3ZlcndyaXRlUGFyYW1zUmVzdWx0KTtcbiAgICBPYmplY3QuYXNzaWduKHN3aXBlci5vcmlnaW5hbFBhcmFtcywgb3ZlcndyaXRlUGFyYW1zUmVzdWx0KTtcbiAgfSk7XG4gIG9uKCdzZXRUcmFuc2xhdGUnLCAoKSA9PiB7XG4gICAgaWYgKHN3aXBlci5wYXJhbXMuZWZmZWN0ICE9PSBlZmZlY3QpIHJldHVybjtcbiAgICBzZXRUcmFuc2xhdGUoKTtcbiAgfSk7XG4gIG9uKCdzZXRUcmFuc2l0aW9uJywgKF9zLCBkdXJhdGlvbikgPT4ge1xuICAgIGlmIChzd2lwZXIucGFyYW1zLmVmZmVjdCAhPT0gZWZmZWN0KSByZXR1cm47XG4gICAgc2V0VHJhbnNpdGlvbihkdXJhdGlvbik7XG4gIH0pO1xuICBvbigndHJhbnNpdGlvbkVuZCcsICgpID0+IHtcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5lZmZlY3QgIT09IGVmZmVjdCkgcmV0dXJuO1xuICAgIGlmIChyZWNyZWF0ZVNoYWRvd3MpIHtcbiAgICAgIGlmICghZ2V0RWZmZWN0UGFyYW1zIHx8ICFnZXRFZmZlY3RQYXJhbXMoKS5zbGlkZVNoYWRvd3MpIHJldHVybjtcbiAgICAgIC8vIHJlbW92ZSBzaGFkb3dzXG4gICAgICBzd2lwZXIuc2xpZGVzLmZvckVhY2goc2xpZGVFbCA9PiB7XG4gICAgICAgIHNsaWRlRWwucXVlcnlTZWxlY3RvckFsbCgnLnN3aXBlci1zbGlkZS1zaGFkb3ctdG9wLCAuc3dpcGVyLXNsaWRlLXNoYWRvdy1yaWdodCwgLnN3aXBlci1zbGlkZS1zaGFkb3ctYm90dG9tLCAuc3dpcGVyLXNsaWRlLXNoYWRvdy1sZWZ0JykuZm9yRWFjaChzaGFkb3dFbCA9PiBzaGFkb3dFbC5yZW1vdmUoKSk7XG4gICAgICB9KTtcbiAgICAgIC8vIGNyZWF0ZSBuZXcgb25lXG4gICAgICByZWNyZWF0ZVNoYWRvd3MoKTtcbiAgICB9XG4gIH0pO1xuICBsZXQgcmVxdWlyZVVwZGF0ZU9uVmlydHVhbDtcbiAgb24oJ3ZpcnR1YWxVcGRhdGUnLCAoKSA9PiB7XG4gICAgaWYgKHN3aXBlci5wYXJhbXMuZWZmZWN0ICE9PSBlZmZlY3QpIHJldHVybjtcbiAgICBpZiAoIXN3aXBlci5zbGlkZXMubGVuZ3RoKSB7XG4gICAgICByZXF1aXJlVXBkYXRlT25WaXJ0dWFsID0gdHJ1ZTtcbiAgICB9XG4gICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICAgIGlmIChyZXF1aXJlVXBkYXRlT25WaXJ0dWFsICYmIHN3aXBlci5zbGlkZXMgJiYgc3dpcGVyLnNsaWRlcy5sZW5ndGgpIHtcbiAgICAgICAgc2V0VHJhbnNsYXRlKCk7XG4gICAgICAgIHJlcXVpcmVVcGRhdGVPblZpcnR1YWwgPSBmYWxzZTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSk7XG59XG5cbmV4cG9ydCB7IGVmZmVjdEluaXQgYXMgZSB9O1xuIiwiaW1wb3J0IHsgZyBhcyBnZXRTbGlkZVRyYW5zZm9ybUVsIH0gZnJvbSAnLi91dGlscy5tanMnO1xuXG5mdW5jdGlvbiBlZmZlY3RUYXJnZXQoZWZmZWN0UGFyYW1zLCBzbGlkZUVsKSB7XG4gIGNvbnN0IHRyYW5zZm9ybUVsID0gZ2V0U2xpZGVUcmFuc2Zvcm1FbChzbGlkZUVsKTtcbiAgaWYgKHRyYW5zZm9ybUVsICE9PSBzbGlkZUVsKSB7XG4gICAgdHJhbnNmb3JtRWwuc3R5bGUuYmFja2ZhY2VWaXNpYmlsaXR5ID0gJ2hpZGRlbic7XG4gICAgdHJhbnNmb3JtRWwuc3R5bGVbJy13ZWJraXQtYmFja2ZhY2UtdmlzaWJpbGl0eSddID0gJ2hpZGRlbic7XG4gIH1cbiAgcmV0dXJuIHRyYW5zZm9ybUVsO1xufVxuXG5leHBvcnQgeyBlZmZlY3RUYXJnZXQgYXMgZSB9O1xuIiwiaW1wb3J0IHsgayBhcyBlbGVtZW50VHJhbnNpdGlvbkVuZCB9IGZyb20gJy4vdXRpbHMubWpzJztcblxuZnVuY3Rpb24gZWZmZWN0VmlydHVhbFRyYW5zaXRpb25FbmQoX3JlZikge1xuICBsZXQge1xuICAgIHN3aXBlcixcbiAgICBkdXJhdGlvbixcbiAgICB0cmFuc2Zvcm1FbGVtZW50cyxcbiAgICBhbGxTbGlkZXNcbiAgfSA9IF9yZWY7XG4gIGNvbnN0IHtcbiAgICBhY3RpdmVJbmRleFxuICB9ID0gc3dpcGVyO1xuICBjb25zdCBnZXRTbGlkZSA9IGVsID0+IHtcbiAgICBpZiAoIWVsLnBhcmVudEVsZW1lbnQpIHtcbiAgICAgIC8vIGFzc3VtZSBzaGFkb3cgcm9vdFxuICAgICAgY29uc3Qgc2xpZGUgPSBzd2lwZXIuc2xpZGVzLmZpbHRlcihzbGlkZUVsID0+IHNsaWRlRWwuc2hhZG93Um9vdCAmJiBzbGlkZUVsLnNoYWRvd1Jvb3QgPT09IGVsLnBhcmVudE5vZGUpWzBdO1xuICAgICAgcmV0dXJuIHNsaWRlO1xuICAgIH1cbiAgICByZXR1cm4gZWwucGFyZW50RWxlbWVudDtcbiAgfTtcbiAgaWYgKHN3aXBlci5wYXJhbXMudmlydHVhbFRyYW5zbGF0ZSAmJiBkdXJhdGlvbiAhPT0gMCkge1xuICAgIGxldCBldmVudFRyaWdnZXJlZCA9IGZhbHNlO1xuICAgIGxldCB0cmFuc2l0aW9uRW5kVGFyZ2V0O1xuICAgIGlmIChhbGxTbGlkZXMpIHtcbiAgICAgIHRyYW5zaXRpb25FbmRUYXJnZXQgPSB0cmFuc2Zvcm1FbGVtZW50cztcbiAgICB9IGVsc2Uge1xuICAgICAgdHJhbnNpdGlvbkVuZFRhcmdldCA9IHRyYW5zZm9ybUVsZW1lbnRzLmZpbHRlcih0cmFuc2Zvcm1FbCA9PiB7XG4gICAgICAgIGNvbnN0IGVsID0gdHJhbnNmb3JtRWwuY2xhc3NMaXN0LmNvbnRhaW5zKCdzd2lwZXItc2xpZGUtdHJhbnNmb3JtJykgPyBnZXRTbGlkZSh0cmFuc2Zvcm1FbCkgOiB0cmFuc2Zvcm1FbDtcbiAgICAgICAgcmV0dXJuIHN3aXBlci5nZXRTbGlkZUluZGV4KGVsKSA9PT0gYWN0aXZlSW5kZXg7XG4gICAgICB9KTtcbiAgICB9XG4gICAgdHJhbnNpdGlvbkVuZFRhcmdldC5mb3JFYWNoKGVsID0+IHtcbiAgICAgIGVsZW1lbnRUcmFuc2l0aW9uRW5kKGVsLCAoKSA9PiB7XG4gICAgICAgIGlmIChldmVudFRyaWdnZXJlZCkgcmV0dXJuO1xuICAgICAgICBpZiAoIXN3aXBlciB8fCBzd2lwZXIuZGVzdHJveWVkKSByZXR1cm47XG4gICAgICAgIGV2ZW50VHJpZ2dlcmVkID0gdHJ1ZTtcbiAgICAgICAgc3dpcGVyLmFuaW1hdGluZyA9IGZhbHNlO1xuICAgICAgICBjb25zdCBldnQgPSBuZXcgd2luZG93LkN1c3RvbUV2ZW50KCd0cmFuc2l0aW9uZW5kJywge1xuICAgICAgICAgIGJ1YmJsZXM6IHRydWUsXG4gICAgICAgICAgY2FuY2VsYWJsZTogdHJ1ZVxuICAgICAgICB9KTtcbiAgICAgICAgc3dpcGVyLndyYXBwZXJFbC5kaXNwYXRjaEV2ZW50KGV2dCk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxufVxuXG5leHBvcnQgeyBlZmZlY3RWaXJ0dWFsVHJhbnNpdGlvbkVuZCBhcyBlIH07XG4iLCJpbXBvcnQgeyBlIGFzIGVmZmVjdEluaXQgfSBmcm9tICcuLi9zaGFyZWQvZWZmZWN0LWluaXQubWpzJztcbmltcG9ydCB7IGUgYXMgZWZmZWN0VGFyZ2V0IH0gZnJvbSAnLi4vc2hhcmVkL2VmZmVjdC10YXJnZXQubWpzJztcbmltcG9ydCB7IGUgYXMgZWZmZWN0VmlydHVhbFRyYW5zaXRpb25FbmQgfSBmcm9tICcuLi9zaGFyZWQvZWZmZWN0LXZpcnR1YWwtdHJhbnNpdGlvbi1lbmQubWpzJztcbmltcG9ydCB7IGcgYXMgZ2V0U2xpZGVUcmFuc2Zvcm1FbCB9IGZyb20gJy4uL3NoYXJlZC91dGlscy5tanMnO1xuXG5mdW5jdGlvbiBFZmZlY3RGYWRlKF9yZWYpIHtcbiAgbGV0IHtcbiAgICBzd2lwZXIsXG4gICAgZXh0ZW5kUGFyYW1zLFxuICAgIG9uXG4gIH0gPSBfcmVmO1xuICBleHRlbmRQYXJhbXMoe1xuICAgIGZhZGVFZmZlY3Q6IHtcbiAgICAgIGNyb3NzRmFkZTogZmFsc2VcbiAgICB9XG4gIH0pO1xuICBjb25zdCBzZXRUcmFuc2xhdGUgPSAoKSA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgc2xpZGVzXG4gICAgfSA9IHN3aXBlcjtcbiAgICBjb25zdCBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLmZhZGVFZmZlY3Q7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzbGlkZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIGNvbnN0IHNsaWRlRWwgPSBzd2lwZXIuc2xpZGVzW2ldO1xuICAgICAgY29uc3Qgb2Zmc2V0ID0gc2xpZGVFbC5zd2lwZXJTbGlkZU9mZnNldDtcbiAgICAgIGxldCB0eCA9IC1vZmZzZXQ7XG4gICAgICBpZiAoIXN3aXBlci5wYXJhbXMudmlydHVhbFRyYW5zbGF0ZSkgdHggLT0gc3dpcGVyLnRyYW5zbGF0ZTtcbiAgICAgIGxldCB0eSA9IDA7XG4gICAgICBpZiAoIXN3aXBlci5pc0hvcml6b250YWwoKSkge1xuICAgICAgICB0eSA9IHR4O1xuICAgICAgICB0eCA9IDA7XG4gICAgICB9XG4gICAgICBjb25zdCBzbGlkZU9wYWNpdHkgPSBzd2lwZXIucGFyYW1zLmZhZGVFZmZlY3QuY3Jvc3NGYWRlID8gTWF0aC5tYXgoMSAtIE1hdGguYWJzKHNsaWRlRWwucHJvZ3Jlc3MpLCAwKSA6IDEgKyBNYXRoLm1pbihNYXRoLm1heChzbGlkZUVsLnByb2dyZXNzLCAtMSksIDApO1xuICAgICAgY29uc3QgdGFyZ2V0RWwgPSBlZmZlY3RUYXJnZXQocGFyYW1zLCBzbGlkZUVsKTtcbiAgICAgIHRhcmdldEVsLnN0eWxlLm9wYWNpdHkgPSBzbGlkZU9wYWNpdHk7XG4gICAgICB0YXJnZXRFbC5zdHlsZS50cmFuc2Zvcm0gPSBgdHJhbnNsYXRlM2QoJHt0eH1weCwgJHt0eX1weCwgMHB4KWA7XG4gICAgfVxuICB9O1xuICBjb25zdCBzZXRUcmFuc2l0aW9uID0gZHVyYXRpb24gPT4ge1xuICAgIGNvbnN0IHRyYW5zZm9ybUVsZW1lbnRzID0gc3dpcGVyLnNsaWRlcy5tYXAoc2xpZGVFbCA9PiBnZXRTbGlkZVRyYW5zZm9ybUVsKHNsaWRlRWwpKTtcbiAgICB0cmFuc2Zvcm1FbGVtZW50cy5mb3JFYWNoKGVsID0+IHtcbiAgICAgIGVsLnN0eWxlLnRyYW5zaXRpb25EdXJhdGlvbiA9IGAke2R1cmF0aW9ufW1zYDtcbiAgICB9KTtcbiAgICBlZmZlY3RWaXJ0dWFsVHJhbnNpdGlvbkVuZCh7XG4gICAgICBzd2lwZXIsXG4gICAgICBkdXJhdGlvbixcbiAgICAgIHRyYW5zZm9ybUVsZW1lbnRzLFxuICAgICAgYWxsU2xpZGVzOiB0cnVlXG4gICAgfSk7XG4gIH07XG4gIGVmZmVjdEluaXQoe1xuICAgIGVmZmVjdDogJ2ZhZGUnLFxuICAgIHN3aXBlcixcbiAgICBvbixcbiAgICBzZXRUcmFuc2xhdGUsXG4gICAgc2V0VHJhbnNpdGlvbixcbiAgICBvdmVyd3JpdGVQYXJhbXM6ICgpID0+ICh7XG4gICAgICBzbGlkZXNQZXJWaWV3OiAxLFxuICAgICAgc2xpZGVzUGVyR3JvdXA6IDEsXG4gICAgICB3YXRjaFNsaWRlc1Byb2dyZXNzOiB0cnVlLFxuICAgICAgc3BhY2VCZXR3ZWVuOiAwLFxuICAgICAgdmlydHVhbFRyYW5zbGF0ZTogIXN3aXBlci5wYXJhbXMuY3NzTW9kZVxuICAgIH0pXG4gIH0pO1xufVxuXG5leHBvcnQgeyBFZmZlY3RGYWRlIGFzIGRlZmF1bHQgfTtcbiIsImltcG9ydCB7IGUgYXMgZWZmZWN0SW5pdCB9IGZyb20gJy4uL3NoYXJlZC9lZmZlY3QtaW5pdC5tanMnO1xuaW1wb3J0IHsgYyBhcyBjcmVhdGVFbGVtZW50IH0gZnJvbSAnLi4vc2hhcmVkL3V0aWxzLm1qcyc7XG5cbmZ1bmN0aW9uIEVmZmVjdEN1YmUoX3JlZikge1xuICBsZXQge1xuICAgIHN3aXBlcixcbiAgICBleHRlbmRQYXJhbXMsXG4gICAgb25cbiAgfSA9IF9yZWY7XG4gIGV4dGVuZFBhcmFtcyh7XG4gICAgY3ViZUVmZmVjdDoge1xuICAgICAgc2xpZGVTaGFkb3dzOiB0cnVlLFxuICAgICAgc2hhZG93OiB0cnVlLFxuICAgICAgc2hhZG93T2Zmc2V0OiAyMCxcbiAgICAgIHNoYWRvd1NjYWxlOiAwLjk0XG4gICAgfVxuICB9KTtcbiAgY29uc3QgY3JlYXRlU2xpZGVTaGFkb3dzID0gKHNsaWRlRWwsIHByb2dyZXNzLCBpc0hvcml6b250YWwpID0+IHtcbiAgICBsZXQgc2hhZG93QmVmb3JlID0gaXNIb3Jpem9udGFsID8gc2xpZGVFbC5xdWVyeVNlbGVjdG9yKCcuc3dpcGVyLXNsaWRlLXNoYWRvdy1sZWZ0JykgOiBzbGlkZUVsLnF1ZXJ5U2VsZWN0b3IoJy5zd2lwZXItc2xpZGUtc2hhZG93LXRvcCcpO1xuICAgIGxldCBzaGFkb3dBZnRlciA9IGlzSG9yaXpvbnRhbCA/IHNsaWRlRWwucXVlcnlTZWxlY3RvcignLnN3aXBlci1zbGlkZS1zaGFkb3ctcmlnaHQnKSA6IHNsaWRlRWwucXVlcnlTZWxlY3RvcignLnN3aXBlci1zbGlkZS1zaGFkb3ctYm90dG9tJyk7XG4gICAgaWYgKCFzaGFkb3dCZWZvcmUpIHtcbiAgICAgIHNoYWRvd0JlZm9yZSA9IGNyZWF0ZUVsZW1lbnQoJ2RpdicsIGBzd2lwZXItc2xpZGUtc2hhZG93LWN1YmUgc3dpcGVyLXNsaWRlLXNoYWRvdy0ke2lzSG9yaXpvbnRhbCA/ICdsZWZ0JyA6ICd0b3AnfWAuc3BsaXQoJyAnKSk7XG4gICAgICBzbGlkZUVsLmFwcGVuZChzaGFkb3dCZWZvcmUpO1xuICAgIH1cbiAgICBpZiAoIXNoYWRvd0FmdGVyKSB7XG4gICAgICBzaGFkb3dBZnRlciA9IGNyZWF0ZUVsZW1lbnQoJ2RpdicsIGBzd2lwZXItc2xpZGUtc2hhZG93LWN1YmUgc3dpcGVyLXNsaWRlLXNoYWRvdy0ke2lzSG9yaXpvbnRhbCA/ICdyaWdodCcgOiAnYm90dG9tJ31gLnNwbGl0KCcgJykpO1xuICAgICAgc2xpZGVFbC5hcHBlbmQoc2hhZG93QWZ0ZXIpO1xuICAgIH1cbiAgICBpZiAoc2hhZG93QmVmb3JlKSBzaGFkb3dCZWZvcmUuc3R5bGUub3BhY2l0eSA9IE1hdGgubWF4KC1wcm9ncmVzcywgMCk7XG4gICAgaWYgKHNoYWRvd0FmdGVyKSBzaGFkb3dBZnRlci5zdHlsZS5vcGFjaXR5ID0gTWF0aC5tYXgocHJvZ3Jlc3MsIDApO1xuICB9O1xuICBjb25zdCByZWNyZWF0ZVNoYWRvd3MgPSAoKSA9PiB7XG4gICAgLy8gY3JlYXRlIG5ldyBvbmVzXG4gICAgY29uc3QgaXNIb3Jpem9udGFsID0gc3dpcGVyLmlzSG9yaXpvbnRhbCgpO1xuICAgIHN3aXBlci5zbGlkZXMuZm9yRWFjaChzbGlkZUVsID0+IHtcbiAgICAgIGNvbnN0IHByb2dyZXNzID0gTWF0aC5tYXgoTWF0aC5taW4oc2xpZGVFbC5wcm9ncmVzcywgMSksIC0xKTtcbiAgICAgIGNyZWF0ZVNsaWRlU2hhZG93cyhzbGlkZUVsLCBwcm9ncmVzcywgaXNIb3Jpem9udGFsKTtcbiAgICB9KTtcbiAgfTtcbiAgY29uc3Qgc2V0VHJhbnNsYXRlID0gKCkgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIGVsLFxuICAgICAgd3JhcHBlckVsLFxuICAgICAgc2xpZGVzLFxuICAgICAgd2lkdGg6IHN3aXBlcldpZHRoLFxuICAgICAgaGVpZ2h0OiBzd2lwZXJIZWlnaHQsXG4gICAgICBydGxUcmFuc2xhdGU6IHJ0bCxcbiAgICAgIHNpemU6IHN3aXBlclNpemUsXG4gICAgICBicm93c2VyXG4gICAgfSA9IHN3aXBlcjtcbiAgICBjb25zdCBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLmN1YmVFZmZlY3Q7XG4gICAgY29uc3QgaXNIb3Jpem9udGFsID0gc3dpcGVyLmlzSG9yaXpvbnRhbCgpO1xuICAgIGNvbnN0IGlzVmlydHVhbCA9IHN3aXBlci52aXJ0dWFsICYmIHN3aXBlci5wYXJhbXMudmlydHVhbC5lbmFibGVkO1xuICAgIGxldCB3cmFwcGVyUm90YXRlID0gMDtcbiAgICBsZXQgY3ViZVNoYWRvd0VsO1xuICAgIGlmIChwYXJhbXMuc2hhZG93KSB7XG4gICAgICBpZiAoaXNIb3Jpem9udGFsKSB7XG4gICAgICAgIGN1YmVTaGFkb3dFbCA9IHN3aXBlci53cmFwcGVyRWwucXVlcnlTZWxlY3RvcignLnN3aXBlci1jdWJlLXNoYWRvdycpO1xuICAgICAgICBpZiAoIWN1YmVTaGFkb3dFbCkge1xuICAgICAgICAgIGN1YmVTaGFkb3dFbCA9IGNyZWF0ZUVsZW1lbnQoJ2RpdicsICdzd2lwZXItY3ViZS1zaGFkb3cnKTtcbiAgICAgICAgICBzd2lwZXIud3JhcHBlckVsLmFwcGVuZChjdWJlU2hhZG93RWwpO1xuICAgICAgICB9XG4gICAgICAgIGN1YmVTaGFkb3dFbC5zdHlsZS5oZWlnaHQgPSBgJHtzd2lwZXJXaWR0aH1weGA7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjdWJlU2hhZG93RWwgPSBlbC5xdWVyeVNlbGVjdG9yKCcuc3dpcGVyLWN1YmUtc2hhZG93Jyk7XG4gICAgICAgIGlmICghY3ViZVNoYWRvd0VsKSB7XG4gICAgICAgICAgY3ViZVNoYWRvd0VsID0gY3JlYXRlRWxlbWVudCgnZGl2JywgJ3N3aXBlci1jdWJlLXNoYWRvdycpO1xuICAgICAgICAgIGVsLmFwcGVuZChjdWJlU2hhZG93RWwpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2xpZGVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICBjb25zdCBzbGlkZUVsID0gc2xpZGVzW2ldO1xuICAgICAgbGV0IHNsaWRlSW5kZXggPSBpO1xuICAgICAgaWYgKGlzVmlydHVhbCkge1xuICAgICAgICBzbGlkZUluZGV4ID0gcGFyc2VJbnQoc2xpZGVFbC5nZXRBdHRyaWJ1dGUoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4JyksIDEwKTtcbiAgICAgIH1cbiAgICAgIGxldCBzbGlkZUFuZ2xlID0gc2xpZGVJbmRleCAqIDkwO1xuICAgICAgbGV0IHJvdW5kID0gTWF0aC5mbG9vcihzbGlkZUFuZ2xlIC8gMzYwKTtcbiAgICAgIGlmIChydGwpIHtcbiAgICAgICAgc2xpZGVBbmdsZSA9IC1zbGlkZUFuZ2xlO1xuICAgICAgICByb3VuZCA9IE1hdGguZmxvb3IoLXNsaWRlQW5nbGUgLyAzNjApO1xuICAgICAgfVxuICAgICAgY29uc3QgcHJvZ3Jlc3MgPSBNYXRoLm1heChNYXRoLm1pbihzbGlkZUVsLnByb2dyZXNzLCAxKSwgLTEpO1xuICAgICAgbGV0IHR4ID0gMDtcbiAgICAgIGxldCB0eSA9IDA7XG4gICAgICBsZXQgdHogPSAwO1xuICAgICAgaWYgKHNsaWRlSW5kZXggJSA0ID09PSAwKSB7XG4gICAgICAgIHR4ID0gLXJvdW5kICogNCAqIHN3aXBlclNpemU7XG4gICAgICAgIHR6ID0gMDtcbiAgICAgIH0gZWxzZSBpZiAoKHNsaWRlSW5kZXggLSAxKSAlIDQgPT09IDApIHtcbiAgICAgICAgdHggPSAwO1xuICAgICAgICB0eiA9IC1yb3VuZCAqIDQgKiBzd2lwZXJTaXplO1xuICAgICAgfSBlbHNlIGlmICgoc2xpZGVJbmRleCAtIDIpICUgNCA9PT0gMCkge1xuICAgICAgICB0eCA9IHN3aXBlclNpemUgKyByb3VuZCAqIDQgKiBzd2lwZXJTaXplO1xuICAgICAgICB0eiA9IHN3aXBlclNpemU7XG4gICAgICB9IGVsc2UgaWYgKChzbGlkZUluZGV4IC0gMykgJSA0ID09PSAwKSB7XG4gICAgICAgIHR4ID0gLXN3aXBlclNpemU7XG4gICAgICAgIHR6ID0gMyAqIHN3aXBlclNpemUgKyBzd2lwZXJTaXplICogNCAqIHJvdW5kO1xuICAgICAgfVxuICAgICAgaWYgKHJ0bCkge1xuICAgICAgICB0eCA9IC10eDtcbiAgICAgIH1cbiAgICAgIGlmICghaXNIb3Jpem9udGFsKSB7XG4gICAgICAgIHR5ID0gdHg7XG4gICAgICAgIHR4ID0gMDtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHRyYW5zZm9ybSA9IGByb3RhdGVYKCR7aXNIb3Jpem9udGFsID8gMCA6IC1zbGlkZUFuZ2xlfWRlZykgcm90YXRlWSgke2lzSG9yaXpvbnRhbCA/IHNsaWRlQW5nbGUgOiAwfWRlZykgdHJhbnNsYXRlM2QoJHt0eH1weCwgJHt0eX1weCwgJHt0en1weClgO1xuICAgICAgaWYgKHByb2dyZXNzIDw9IDEgJiYgcHJvZ3Jlc3MgPiAtMSkge1xuICAgICAgICB3cmFwcGVyUm90YXRlID0gc2xpZGVJbmRleCAqIDkwICsgcHJvZ3Jlc3MgKiA5MDtcbiAgICAgICAgaWYgKHJ0bCkgd3JhcHBlclJvdGF0ZSA9IC1zbGlkZUluZGV4ICogOTAgLSBwcm9ncmVzcyAqIDkwO1xuICAgICAgICBpZiAoc3dpcGVyLmJyb3dzZXIgJiYgc3dpcGVyLmJyb3dzZXIubmVlZDNkRml4ICYmIE1hdGguYWJzKHdyYXBwZXJSb3RhdGUpIC8gOTAgJSAyID09PSAxKSB7XG4gICAgICAgICAgd3JhcHBlclJvdGF0ZSArPSAwLjAwMTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgc2xpZGVFbC5zdHlsZS50cmFuc2Zvcm0gPSB0cmFuc2Zvcm07XG4gICAgICBpZiAocGFyYW1zLnNsaWRlU2hhZG93cykge1xuICAgICAgICBjcmVhdGVTbGlkZVNoYWRvd3Moc2xpZGVFbCwgcHJvZ3Jlc3MsIGlzSG9yaXpvbnRhbCk7XG4gICAgICB9XG4gICAgfVxuICAgIHdyYXBwZXJFbC5zdHlsZS50cmFuc2Zvcm1PcmlnaW4gPSBgNTAlIDUwJSAtJHtzd2lwZXJTaXplIC8gMn1weGA7XG4gICAgd3JhcHBlckVsLnN0eWxlWyctd2Via2l0LXRyYW5zZm9ybS1vcmlnaW4nXSA9IGA1MCUgNTAlIC0ke3N3aXBlclNpemUgLyAyfXB4YDtcbiAgICBpZiAocGFyYW1zLnNoYWRvdykge1xuICAgICAgaWYgKGlzSG9yaXpvbnRhbCkge1xuICAgICAgICBjdWJlU2hhZG93RWwuc3R5bGUudHJhbnNmb3JtID0gYHRyYW5zbGF0ZTNkKDBweCwgJHtzd2lwZXJXaWR0aCAvIDIgKyBwYXJhbXMuc2hhZG93T2Zmc2V0fXB4LCAkey1zd2lwZXJXaWR0aCAvIDJ9cHgpIHJvdGF0ZVgoODkuOTlkZWcpIHJvdGF0ZVooMGRlZykgc2NhbGUoJHtwYXJhbXMuc2hhZG93U2NhbGV9KWA7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCBzaGFkb3dBbmdsZSA9IE1hdGguYWJzKHdyYXBwZXJSb3RhdGUpIC0gTWF0aC5mbG9vcihNYXRoLmFicyh3cmFwcGVyUm90YXRlKSAvIDkwKSAqIDkwO1xuICAgICAgICBjb25zdCBtdWx0aXBsaWVyID0gMS41IC0gKE1hdGguc2luKHNoYWRvd0FuZ2xlICogMiAqIE1hdGguUEkgLyAzNjApIC8gMiArIE1hdGguY29zKHNoYWRvd0FuZ2xlICogMiAqIE1hdGguUEkgLyAzNjApIC8gMik7XG4gICAgICAgIGNvbnN0IHNjYWxlMSA9IHBhcmFtcy5zaGFkb3dTY2FsZTtcbiAgICAgICAgY29uc3Qgc2NhbGUyID0gcGFyYW1zLnNoYWRvd1NjYWxlIC8gbXVsdGlwbGllcjtcbiAgICAgICAgY29uc3Qgb2Zmc2V0ID0gcGFyYW1zLnNoYWRvd09mZnNldDtcbiAgICAgICAgY3ViZVNoYWRvd0VsLnN0eWxlLnRyYW5zZm9ybSA9IGBzY2FsZTNkKCR7c2NhbGUxfSwgMSwgJHtzY2FsZTJ9KSB0cmFuc2xhdGUzZCgwcHgsICR7c3dpcGVySGVpZ2h0IC8gMiArIG9mZnNldH1weCwgJHstc3dpcGVySGVpZ2h0IC8gMiAvIHNjYWxlMn1weCkgcm90YXRlWCgtODkuOTlkZWcpYDtcbiAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgekZhY3RvciA9IChicm93c2VyLmlzU2FmYXJpIHx8IGJyb3dzZXIuaXNXZWJWaWV3KSAmJiBicm93c2VyLm5lZWRQZXJzcGVjdGl2ZUZpeCA/IC1zd2lwZXJTaXplIC8gMiA6IDA7XG4gICAgd3JhcHBlckVsLnN0eWxlLnRyYW5zZm9ybSA9IGB0cmFuc2xhdGUzZCgwcHgsMCwke3pGYWN0b3J9cHgpIHJvdGF0ZVgoJHtzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyAwIDogd3JhcHBlclJvdGF0ZX1kZWcpIHJvdGF0ZVkoJHtzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyAtd3JhcHBlclJvdGF0ZSA6IDB9ZGVnKWA7XG4gICAgd3JhcHBlckVsLnN0eWxlLnNldFByb3BlcnR5KCctLXN3aXBlci1jdWJlLXRyYW5zbGF0ZS16JywgYCR7ekZhY3Rvcn1weGApO1xuICB9O1xuICBjb25zdCBzZXRUcmFuc2l0aW9uID0gZHVyYXRpb24gPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIGVsLFxuICAgICAgc2xpZGVzXG4gICAgfSA9IHN3aXBlcjtcbiAgICBzbGlkZXMuZm9yRWFjaChzbGlkZUVsID0+IHtcbiAgICAgIHNsaWRlRWwuc3R5bGUudHJhbnNpdGlvbkR1cmF0aW9uID0gYCR7ZHVyYXRpb259bXNgO1xuICAgICAgc2xpZGVFbC5xdWVyeVNlbGVjdG9yQWxsKCcuc3dpcGVyLXNsaWRlLXNoYWRvdy10b3AsIC5zd2lwZXItc2xpZGUtc2hhZG93LXJpZ2h0LCAuc3dpcGVyLXNsaWRlLXNoYWRvdy1ib3R0b20sIC5zd2lwZXItc2xpZGUtc2hhZG93LWxlZnQnKS5mb3JFYWNoKHN1YkVsID0+IHtcbiAgICAgICAgc3ViRWwuc3R5bGUudHJhbnNpdGlvbkR1cmF0aW9uID0gYCR7ZHVyYXRpb259bXNgO1xuICAgICAgfSk7XG4gICAgfSk7XG4gICAgaWYgKHN3aXBlci5wYXJhbXMuY3ViZUVmZmVjdC5zaGFkb3cgJiYgIXN3aXBlci5pc0hvcml6b250YWwoKSkge1xuICAgICAgY29uc3Qgc2hhZG93RWwgPSBlbC5xdWVyeVNlbGVjdG9yKCcuc3dpcGVyLWN1YmUtc2hhZG93Jyk7XG4gICAgICBpZiAoc2hhZG93RWwpIHNoYWRvd0VsLnN0eWxlLnRyYW5zaXRpb25EdXJhdGlvbiA9IGAke2R1cmF0aW9ufW1zYDtcbiAgICB9XG4gIH07XG4gIGVmZmVjdEluaXQoe1xuICAgIGVmZmVjdDogJ2N1YmUnLFxuICAgIHN3aXBlcixcbiAgICBvbixcbiAgICBzZXRUcmFuc2xhdGUsXG4gICAgc2V0VHJhbnNpdGlvbixcbiAgICByZWNyZWF0ZVNoYWRvd3MsXG4gICAgZ2V0RWZmZWN0UGFyYW1zOiAoKSA9PiBzd2lwZXIucGFyYW1zLmN1YmVFZmZlY3QsXG4gICAgcGVyc3BlY3RpdmU6ICgpID0+IHRydWUsXG4gICAgb3ZlcndyaXRlUGFyYW1zOiAoKSA9PiAoe1xuICAgICAgc2xpZGVzUGVyVmlldzogMSxcbiAgICAgIHNsaWRlc1Blckdyb3VwOiAxLFxuICAgICAgd2F0Y2hTbGlkZXNQcm9ncmVzczogdHJ1ZSxcbiAgICAgIHJlc2lzdGFuY2VSYXRpbzogMCxcbiAgICAgIHNwYWNlQmV0d2VlbjogMCxcbiAgICAgIGNlbnRlcmVkU2xpZGVzOiBmYWxzZSxcbiAgICAgIHZpcnR1YWxUcmFuc2xhdGU6IHRydWVcbiAgICB9KVxuICB9KTtcbn1cblxuZXhwb3J0IHsgRWZmZWN0Q3ViZSBhcyBkZWZhdWx0IH07XG4iLCJpbXBvcnQgeyBnIGFzIGdldFNsaWRlVHJhbnNmb3JtRWwsIGMgYXMgY3JlYXRlRWxlbWVudCB9IGZyb20gJy4vdXRpbHMubWpzJztcblxuZnVuY3Rpb24gY3JlYXRlU2hhZG93KHN1ZmZpeCwgc2xpZGVFbCwgc2lkZSkge1xuICBjb25zdCBzaGFkb3dDbGFzcyA9IGBzd2lwZXItc2xpZGUtc2hhZG93JHtzaWRlID8gYC0ke3NpZGV9YCA6ICcnfSR7c3VmZml4ID8gYCBzd2lwZXItc2xpZGUtc2hhZG93LSR7c3VmZml4fWAgOiAnJ31gO1xuICBjb25zdCBzaGFkb3dDb250YWluZXIgPSBnZXRTbGlkZVRyYW5zZm9ybUVsKHNsaWRlRWwpO1xuICBsZXQgc2hhZG93RWwgPSBzaGFkb3dDb250YWluZXIucXVlcnlTZWxlY3RvcihgLiR7c2hhZG93Q2xhc3Muc3BsaXQoJyAnKS5qb2luKCcuJyl9YCk7XG4gIGlmICghc2hhZG93RWwpIHtcbiAgICBzaGFkb3dFbCA9IGNyZWF0ZUVsZW1lbnQoJ2RpdicsIHNoYWRvd0NsYXNzLnNwbGl0KCcgJykpO1xuICAgIHNoYWRvd0NvbnRhaW5lci5hcHBlbmQoc2hhZG93RWwpO1xuICB9XG4gIHJldHVybiBzaGFkb3dFbDtcbn1cblxuZXhwb3J0IHsgY3JlYXRlU2hhZG93IGFzIGMgfTtcbiIsImltcG9ydCB7IGMgYXMgY3JlYXRlU2hhZG93IH0gZnJvbSAnLi4vc2hhcmVkL2NyZWF0ZS1zaGFkb3cubWpzJztcbmltcG9ydCB7IGUgYXMgZWZmZWN0SW5pdCB9IGZyb20gJy4uL3NoYXJlZC9lZmZlY3QtaW5pdC5tanMnO1xuaW1wb3J0IHsgZSBhcyBlZmZlY3RUYXJnZXQgfSBmcm9tICcuLi9zaGFyZWQvZWZmZWN0LXRhcmdldC5tanMnO1xuaW1wb3J0IHsgZSBhcyBlZmZlY3RWaXJ0dWFsVHJhbnNpdGlvbkVuZCB9IGZyb20gJy4uL3NoYXJlZC9lZmZlY3QtdmlydHVhbC10cmFuc2l0aW9uLWVuZC5tanMnO1xuaW1wb3J0IHsgZyBhcyBnZXRTbGlkZVRyYW5zZm9ybUVsIH0gZnJvbSAnLi4vc2hhcmVkL3V0aWxzLm1qcyc7XG5cbmZ1bmN0aW9uIEVmZmVjdEZsaXAoX3JlZikge1xuICBsZXQge1xuICAgIHN3aXBlcixcbiAgICBleHRlbmRQYXJhbXMsXG4gICAgb25cbiAgfSA9IF9yZWY7XG4gIGV4dGVuZFBhcmFtcyh7XG4gICAgZmxpcEVmZmVjdDoge1xuICAgICAgc2xpZGVTaGFkb3dzOiB0cnVlLFxuICAgICAgbGltaXRSb3RhdGlvbjogdHJ1ZVxuICAgIH1cbiAgfSk7XG4gIGNvbnN0IGNyZWF0ZVNsaWRlU2hhZG93cyA9IChzbGlkZUVsLCBwcm9ncmVzcykgPT4ge1xuICAgIGxldCBzaGFkb3dCZWZvcmUgPSBzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyBzbGlkZUVsLnF1ZXJ5U2VsZWN0b3IoJy5zd2lwZXItc2xpZGUtc2hhZG93LWxlZnQnKSA6IHNsaWRlRWwucXVlcnlTZWxlY3RvcignLnN3aXBlci1zbGlkZS1zaGFkb3ctdG9wJyk7XG4gICAgbGV0IHNoYWRvd0FmdGVyID0gc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gc2xpZGVFbC5xdWVyeVNlbGVjdG9yKCcuc3dpcGVyLXNsaWRlLXNoYWRvdy1yaWdodCcpIDogc2xpZGVFbC5xdWVyeVNlbGVjdG9yKCcuc3dpcGVyLXNsaWRlLXNoYWRvdy1ib3R0b20nKTtcbiAgICBpZiAoIXNoYWRvd0JlZm9yZSkge1xuICAgICAgc2hhZG93QmVmb3JlID0gY3JlYXRlU2hhZG93KCdmbGlwJywgc2xpZGVFbCwgc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gJ2xlZnQnIDogJ3RvcCcpO1xuICAgIH1cbiAgICBpZiAoIXNoYWRvd0FmdGVyKSB7XG4gICAgICBzaGFkb3dBZnRlciA9IGNyZWF0ZVNoYWRvdygnZmxpcCcsIHNsaWRlRWwsIHN3aXBlci5pc0hvcml6b250YWwoKSA/ICdyaWdodCcgOiAnYm90dG9tJyk7XG4gICAgfVxuICAgIGlmIChzaGFkb3dCZWZvcmUpIHNoYWRvd0JlZm9yZS5zdHlsZS5vcGFjaXR5ID0gTWF0aC5tYXgoLXByb2dyZXNzLCAwKTtcbiAgICBpZiAoc2hhZG93QWZ0ZXIpIHNoYWRvd0FmdGVyLnN0eWxlLm9wYWNpdHkgPSBNYXRoLm1heChwcm9ncmVzcywgMCk7XG4gIH07XG4gIGNvbnN0IHJlY3JlYXRlU2hhZG93cyA9ICgpID0+IHtcbiAgICAvLyBTZXQgc2hhZG93c1xuICAgIHN3aXBlci5wYXJhbXMuZmxpcEVmZmVjdDtcbiAgICBzd2lwZXIuc2xpZGVzLmZvckVhY2goc2xpZGVFbCA9PiB7XG4gICAgICBsZXQgcHJvZ3Jlc3MgPSBzbGlkZUVsLnByb2dyZXNzO1xuICAgICAgaWYgKHN3aXBlci5wYXJhbXMuZmxpcEVmZmVjdC5saW1pdFJvdGF0aW9uKSB7XG4gICAgICAgIHByb2dyZXNzID0gTWF0aC5tYXgoTWF0aC5taW4oc2xpZGVFbC5wcm9ncmVzcywgMSksIC0xKTtcbiAgICAgIH1cbiAgICAgIGNyZWF0ZVNsaWRlU2hhZG93cyhzbGlkZUVsLCBwcm9ncmVzcyk7XG4gICAgfSk7XG4gIH07XG4gIGNvbnN0IHNldFRyYW5zbGF0ZSA9ICgpID0+IHtcbiAgICBjb25zdCB7XG4gICAgICBzbGlkZXMsXG4gICAgICBydGxUcmFuc2xhdGU6IHJ0bFxuICAgIH0gPSBzd2lwZXI7XG4gICAgY29uc3QgcGFyYW1zID0gc3dpcGVyLnBhcmFtcy5mbGlwRWZmZWN0O1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2xpZGVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICBjb25zdCBzbGlkZUVsID0gc2xpZGVzW2ldO1xuICAgICAgbGV0IHByb2dyZXNzID0gc2xpZGVFbC5wcm9ncmVzcztcbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLmZsaXBFZmZlY3QubGltaXRSb3RhdGlvbikge1xuICAgICAgICBwcm9ncmVzcyA9IE1hdGgubWF4KE1hdGgubWluKHNsaWRlRWwucHJvZ3Jlc3MsIDEpLCAtMSk7XG4gICAgICB9XG4gICAgICBjb25zdCBvZmZzZXQgPSBzbGlkZUVsLnN3aXBlclNsaWRlT2Zmc2V0O1xuICAgICAgY29uc3Qgcm90YXRlID0gLTE4MCAqIHByb2dyZXNzO1xuICAgICAgbGV0IHJvdGF0ZVkgPSByb3RhdGU7XG4gICAgICBsZXQgcm90YXRlWCA9IDA7XG4gICAgICBsZXQgdHggPSBzd2lwZXIucGFyYW1zLmNzc01vZGUgPyAtb2Zmc2V0IC0gc3dpcGVyLnRyYW5zbGF0ZSA6IC1vZmZzZXQ7XG4gICAgICBsZXQgdHkgPSAwO1xuICAgICAgaWYgKCFzd2lwZXIuaXNIb3Jpem9udGFsKCkpIHtcbiAgICAgICAgdHkgPSB0eDtcbiAgICAgICAgdHggPSAwO1xuICAgICAgICByb3RhdGVYID0gLXJvdGF0ZVk7XG4gICAgICAgIHJvdGF0ZVkgPSAwO1xuICAgICAgfSBlbHNlIGlmIChydGwpIHtcbiAgICAgICAgcm90YXRlWSA9IC1yb3RhdGVZO1xuICAgICAgfVxuICAgICAgaWYgKHN3aXBlci5icm93c2VyICYmIHN3aXBlci5icm93c2VyLm5lZWQzZEZpeCkge1xuICAgICAgICBpZiAoTWF0aC5hYnMocm90YXRlWSkgLyA5MCAlIDIgPT09IDEpIHtcbiAgICAgICAgICByb3RhdGVZICs9IDAuMDAxO1xuICAgICAgICB9XG4gICAgICAgIGlmIChNYXRoLmFicyhyb3RhdGVYKSAvIDkwICUgMiA9PT0gMSkge1xuICAgICAgICAgIHJvdGF0ZVggKz0gMC4wMDE7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHNsaWRlRWwuc3R5bGUuekluZGV4ID0gLU1hdGguYWJzKE1hdGgucm91bmQocHJvZ3Jlc3MpKSArIHNsaWRlcy5sZW5ndGg7XG4gICAgICBpZiAocGFyYW1zLnNsaWRlU2hhZG93cykge1xuICAgICAgICBjcmVhdGVTbGlkZVNoYWRvd3Moc2xpZGVFbCwgcHJvZ3Jlc3MpO1xuICAgICAgfVxuICAgICAgY29uc3QgdHJhbnNmb3JtID0gYHRyYW5zbGF0ZTNkKCR7dHh9cHgsICR7dHl9cHgsIDBweCkgcm90YXRlWCgke3JvdGF0ZVh9ZGVnKSByb3RhdGVZKCR7cm90YXRlWX1kZWcpYDtcbiAgICAgIGNvbnN0IHRhcmdldEVsID0gZWZmZWN0VGFyZ2V0KHBhcmFtcywgc2xpZGVFbCk7XG4gICAgICB0YXJnZXRFbC5zdHlsZS50cmFuc2Zvcm0gPSB0cmFuc2Zvcm07XG4gICAgfVxuICB9O1xuICBjb25zdCBzZXRUcmFuc2l0aW9uID0gZHVyYXRpb24gPT4ge1xuICAgIGNvbnN0IHRyYW5zZm9ybUVsZW1lbnRzID0gc3dpcGVyLnNsaWRlcy5tYXAoc2xpZGVFbCA9PiBnZXRTbGlkZVRyYW5zZm9ybUVsKHNsaWRlRWwpKTtcbiAgICB0cmFuc2Zvcm1FbGVtZW50cy5mb3JFYWNoKGVsID0+IHtcbiAgICAgIGVsLnN0eWxlLnRyYW5zaXRpb25EdXJhdGlvbiA9IGAke2R1cmF0aW9ufW1zYDtcbiAgICAgIGVsLnF1ZXJ5U2VsZWN0b3JBbGwoJy5zd2lwZXItc2xpZGUtc2hhZG93LXRvcCwgLnN3aXBlci1zbGlkZS1zaGFkb3ctcmlnaHQsIC5zd2lwZXItc2xpZGUtc2hhZG93LWJvdHRvbSwgLnN3aXBlci1zbGlkZS1zaGFkb3ctbGVmdCcpLmZvckVhY2goc2hhZG93RWwgPT4ge1xuICAgICAgICBzaGFkb3dFbC5zdHlsZS50cmFuc2l0aW9uRHVyYXRpb24gPSBgJHtkdXJhdGlvbn1tc2A7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICBlZmZlY3RWaXJ0dWFsVHJhbnNpdGlvbkVuZCh7XG4gICAgICBzd2lwZXIsXG4gICAgICBkdXJhdGlvbixcbiAgICAgIHRyYW5zZm9ybUVsZW1lbnRzXG4gICAgfSk7XG4gIH07XG4gIGVmZmVjdEluaXQoe1xuICAgIGVmZmVjdDogJ2ZsaXAnLFxuICAgIHN3aXBlcixcbiAgICBvbixcbiAgICBzZXRUcmFuc2xhdGUsXG4gICAgc2V0VHJhbnNpdGlvbixcbiAgICByZWNyZWF0ZVNoYWRvd3MsXG4gICAgZ2V0RWZmZWN0UGFyYW1zOiAoKSA9PiBzd2lwZXIucGFyYW1zLmZsaXBFZmZlY3QsXG4gICAgcGVyc3BlY3RpdmU6ICgpID0+IHRydWUsXG4gICAgb3ZlcndyaXRlUGFyYW1zOiAoKSA9PiAoe1xuICAgICAgc2xpZGVzUGVyVmlldzogMSxcbiAgICAgIHNsaWRlc1Blckdyb3VwOiAxLFxuICAgICAgd2F0Y2hTbGlkZXNQcm9ncmVzczogdHJ1ZSxcbiAgICAgIHNwYWNlQmV0d2VlbjogMCxcbiAgICAgIHZpcnR1YWxUcmFuc2xhdGU6ICFzd2lwZXIucGFyYW1zLmNzc01vZGVcbiAgICB9KVxuICB9KTtcbn1cblxuZXhwb3J0IHsgRWZmZWN0RmxpcCBhcyBkZWZhdWx0IH07XG4iLCJpbXBvcnQgeyBjIGFzIGNyZWF0ZVNoYWRvdyB9IGZyb20gJy4uL3NoYXJlZC9jcmVhdGUtc2hhZG93Lm1qcyc7XG5pbXBvcnQgeyBlIGFzIGVmZmVjdEluaXQgfSBmcm9tICcuLi9zaGFyZWQvZWZmZWN0LWluaXQubWpzJztcbmltcG9ydCB7IGUgYXMgZWZmZWN0VGFyZ2V0IH0gZnJvbSAnLi4vc2hhcmVkL2VmZmVjdC10YXJnZXQubWpzJztcbmltcG9ydCB7IGcgYXMgZ2V0U2xpZGVUcmFuc2Zvcm1FbCB9IGZyb20gJy4uL3NoYXJlZC91dGlscy5tanMnO1xuXG5mdW5jdGlvbiBFZmZlY3RDb3ZlcmZsb3coX3JlZikge1xuICBsZXQge1xuICAgIHN3aXBlcixcbiAgICBleHRlbmRQYXJhbXMsXG4gICAgb25cbiAgfSA9IF9yZWY7XG4gIGV4dGVuZFBhcmFtcyh7XG4gICAgY292ZXJmbG93RWZmZWN0OiB7XG4gICAgICByb3RhdGU6IDUwLFxuICAgICAgc3RyZXRjaDogMCxcbiAgICAgIGRlcHRoOiAxMDAsXG4gICAgICBzY2FsZTogMSxcbiAgICAgIG1vZGlmaWVyOiAxLFxuICAgICAgc2xpZGVTaGFkb3dzOiB0cnVlXG4gICAgfVxuICB9KTtcbiAgY29uc3Qgc2V0VHJhbnNsYXRlID0gKCkgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIHdpZHRoOiBzd2lwZXJXaWR0aCxcbiAgICAgIGhlaWdodDogc3dpcGVySGVpZ2h0LFxuICAgICAgc2xpZGVzLFxuICAgICAgc2xpZGVzU2l6ZXNHcmlkXG4gICAgfSA9IHN3aXBlcjtcbiAgICBjb25zdCBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLmNvdmVyZmxvd0VmZmVjdDtcbiAgICBjb25zdCBpc0hvcml6b250YWwgPSBzd2lwZXIuaXNIb3Jpem9udGFsKCk7XG4gICAgY29uc3QgdHJhbnNmb3JtID0gc3dpcGVyLnRyYW5zbGF0ZTtcbiAgICBjb25zdCBjZW50ZXIgPSBpc0hvcml6b250YWwgPyAtdHJhbnNmb3JtICsgc3dpcGVyV2lkdGggLyAyIDogLXRyYW5zZm9ybSArIHN3aXBlckhlaWdodCAvIDI7XG4gICAgY29uc3Qgcm90YXRlID0gaXNIb3Jpem9udGFsID8gcGFyYW1zLnJvdGF0ZSA6IC1wYXJhbXMucm90YXRlO1xuICAgIGNvbnN0IHRyYW5zbGF0ZSA9IHBhcmFtcy5kZXB0aDtcbiAgICAvLyBFYWNoIHNsaWRlIG9mZnNldCBmcm9tIGNlbnRlclxuICAgIGZvciAobGV0IGkgPSAwLCBsZW5ndGggPSBzbGlkZXMubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIGNvbnN0IHNsaWRlRWwgPSBzbGlkZXNbaV07XG4gICAgICBjb25zdCBzbGlkZVNpemUgPSBzbGlkZXNTaXplc0dyaWRbaV07XG4gICAgICBjb25zdCBzbGlkZU9mZnNldCA9IHNsaWRlRWwuc3dpcGVyU2xpZGVPZmZzZXQ7XG4gICAgICBjb25zdCBjZW50ZXJPZmZzZXQgPSAoY2VudGVyIC0gc2xpZGVPZmZzZXQgLSBzbGlkZVNpemUgLyAyKSAvIHNsaWRlU2l6ZTtcbiAgICAgIGNvbnN0IG9mZnNldE11bHRpcGxpZXIgPSB0eXBlb2YgcGFyYW1zLm1vZGlmaWVyID09PSAnZnVuY3Rpb24nID8gcGFyYW1zLm1vZGlmaWVyKGNlbnRlck9mZnNldCkgOiBjZW50ZXJPZmZzZXQgKiBwYXJhbXMubW9kaWZpZXI7XG4gICAgICBsZXQgcm90YXRlWSA9IGlzSG9yaXpvbnRhbCA/IHJvdGF0ZSAqIG9mZnNldE11bHRpcGxpZXIgOiAwO1xuICAgICAgbGV0IHJvdGF0ZVggPSBpc0hvcml6b250YWwgPyAwIDogcm90YXRlICogb2Zmc2V0TXVsdGlwbGllcjtcbiAgICAgIC8vIHZhciByb3RhdGVaID0gMFxuICAgICAgbGV0IHRyYW5zbGF0ZVogPSAtdHJhbnNsYXRlICogTWF0aC5hYnMob2Zmc2V0TXVsdGlwbGllcik7XG4gICAgICBsZXQgc3RyZXRjaCA9IHBhcmFtcy5zdHJldGNoO1xuICAgICAgLy8gQWxsb3cgcGVyY2VudGFnZSB0byBtYWtlIGEgcmVsYXRpdmUgc3RyZXRjaCBmb3IgcmVzcG9uc2l2ZSBzbGlkZXJzXG4gICAgICBpZiAodHlwZW9mIHN0cmV0Y2ggPT09ICdzdHJpbmcnICYmIHN0cmV0Y2guaW5kZXhPZignJScpICE9PSAtMSkge1xuICAgICAgICBzdHJldGNoID0gcGFyc2VGbG9hdChwYXJhbXMuc3RyZXRjaCkgLyAxMDAgKiBzbGlkZVNpemU7XG4gICAgICB9XG4gICAgICBsZXQgdHJhbnNsYXRlWSA9IGlzSG9yaXpvbnRhbCA/IDAgOiBzdHJldGNoICogb2Zmc2V0TXVsdGlwbGllcjtcbiAgICAgIGxldCB0cmFuc2xhdGVYID0gaXNIb3Jpem9udGFsID8gc3RyZXRjaCAqIG9mZnNldE11bHRpcGxpZXIgOiAwO1xuICAgICAgbGV0IHNjYWxlID0gMSAtICgxIC0gcGFyYW1zLnNjYWxlKSAqIE1hdGguYWJzKG9mZnNldE11bHRpcGxpZXIpO1xuXG4gICAgICAvLyBGaXggZm9yIHVsdHJhIHNtYWxsIHZhbHVlc1xuICAgICAgaWYgKE1hdGguYWJzKHRyYW5zbGF0ZVgpIDwgMC4wMDEpIHRyYW5zbGF0ZVggPSAwO1xuICAgICAgaWYgKE1hdGguYWJzKHRyYW5zbGF0ZVkpIDwgMC4wMDEpIHRyYW5zbGF0ZVkgPSAwO1xuICAgICAgaWYgKE1hdGguYWJzKHRyYW5zbGF0ZVopIDwgMC4wMDEpIHRyYW5zbGF0ZVogPSAwO1xuICAgICAgaWYgKE1hdGguYWJzKHJvdGF0ZVkpIDwgMC4wMDEpIHJvdGF0ZVkgPSAwO1xuICAgICAgaWYgKE1hdGguYWJzKHJvdGF0ZVgpIDwgMC4wMDEpIHJvdGF0ZVggPSAwO1xuICAgICAgaWYgKE1hdGguYWJzKHNjYWxlKSA8IDAuMDAxKSBzY2FsZSA9IDA7XG4gICAgICBpZiAoc3dpcGVyLmJyb3dzZXIgJiYgc3dpcGVyLmJyb3dzZXIubmVlZDNkRml4KSB7XG4gICAgICAgIGlmIChNYXRoLmFicyhyb3RhdGVZKSAvIDkwICUgMiA9PT0gMSkge1xuICAgICAgICAgIHJvdGF0ZVkgKz0gMC4wMDE7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKE1hdGguYWJzKHJvdGF0ZVgpIC8gOTAgJSAyID09PSAxKSB7XG4gICAgICAgICAgcm90YXRlWCArPSAwLjAwMTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgY29uc3Qgc2xpZGVUcmFuc2Zvcm0gPSBgdHJhbnNsYXRlM2QoJHt0cmFuc2xhdGVYfXB4LCR7dHJhbnNsYXRlWX1weCwke3RyYW5zbGF0ZVp9cHgpICByb3RhdGVYKCR7cm90YXRlWH1kZWcpIHJvdGF0ZVkoJHtyb3RhdGVZfWRlZykgc2NhbGUoJHtzY2FsZX0pYDtcbiAgICAgIGNvbnN0IHRhcmdldEVsID0gZWZmZWN0VGFyZ2V0KHBhcmFtcywgc2xpZGVFbCk7XG4gICAgICB0YXJnZXRFbC5zdHlsZS50cmFuc2Zvcm0gPSBzbGlkZVRyYW5zZm9ybTtcbiAgICAgIHNsaWRlRWwuc3R5bGUuekluZGV4ID0gLU1hdGguYWJzKE1hdGgucm91bmQob2Zmc2V0TXVsdGlwbGllcikpICsgMTtcbiAgICAgIGlmIChwYXJhbXMuc2xpZGVTaGFkb3dzKSB7XG4gICAgICAgIC8vIFNldCBzaGFkb3dzXG4gICAgICAgIGxldCBzaGFkb3dCZWZvcmVFbCA9IGlzSG9yaXpvbnRhbCA/IHNsaWRlRWwucXVlcnlTZWxlY3RvcignLnN3aXBlci1zbGlkZS1zaGFkb3ctbGVmdCcpIDogc2xpZGVFbC5xdWVyeVNlbGVjdG9yKCcuc3dpcGVyLXNsaWRlLXNoYWRvdy10b3AnKTtcbiAgICAgICAgbGV0IHNoYWRvd0FmdGVyRWwgPSBpc0hvcml6b250YWwgPyBzbGlkZUVsLnF1ZXJ5U2VsZWN0b3IoJy5zd2lwZXItc2xpZGUtc2hhZG93LXJpZ2h0JykgOiBzbGlkZUVsLnF1ZXJ5U2VsZWN0b3IoJy5zd2lwZXItc2xpZGUtc2hhZG93LWJvdHRvbScpO1xuICAgICAgICBpZiAoIXNoYWRvd0JlZm9yZUVsKSB7XG4gICAgICAgICAgc2hhZG93QmVmb3JlRWwgPSBjcmVhdGVTaGFkb3coJ2NvdmVyZmxvdycsIHNsaWRlRWwsIGlzSG9yaXpvbnRhbCA/ICdsZWZ0JyA6ICd0b3AnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXNoYWRvd0FmdGVyRWwpIHtcbiAgICAgICAgICBzaGFkb3dBZnRlckVsID0gY3JlYXRlU2hhZG93KCdjb3ZlcmZsb3cnLCBzbGlkZUVsLCBpc0hvcml6b250YWwgPyAncmlnaHQnIDogJ2JvdHRvbScpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzaGFkb3dCZWZvcmVFbCkgc2hhZG93QmVmb3JlRWwuc3R5bGUub3BhY2l0eSA9IG9mZnNldE11bHRpcGxpZXIgPiAwID8gb2Zmc2V0TXVsdGlwbGllciA6IDA7XG4gICAgICAgIGlmIChzaGFkb3dBZnRlckVsKSBzaGFkb3dBZnRlckVsLnN0eWxlLm9wYWNpdHkgPSAtb2Zmc2V0TXVsdGlwbGllciA+IDAgPyAtb2Zmc2V0TXVsdGlwbGllciA6IDA7XG4gICAgICB9XG4gICAgfVxuICB9O1xuICBjb25zdCBzZXRUcmFuc2l0aW9uID0gZHVyYXRpb24gPT4ge1xuICAgIGNvbnN0IHRyYW5zZm9ybUVsZW1lbnRzID0gc3dpcGVyLnNsaWRlcy5tYXAoc2xpZGVFbCA9PiBnZXRTbGlkZVRyYW5zZm9ybUVsKHNsaWRlRWwpKTtcbiAgICB0cmFuc2Zvcm1FbGVtZW50cy5mb3JFYWNoKGVsID0+IHtcbiAgICAgIGVsLnN0eWxlLnRyYW5zaXRpb25EdXJhdGlvbiA9IGAke2R1cmF0aW9ufW1zYDtcbiAgICAgIGVsLnF1ZXJ5U2VsZWN0b3JBbGwoJy5zd2lwZXItc2xpZGUtc2hhZG93LXRvcCwgLnN3aXBlci1zbGlkZS1zaGFkb3ctcmlnaHQsIC5zd2lwZXItc2xpZGUtc2hhZG93LWJvdHRvbSwgLnN3aXBlci1zbGlkZS1zaGFkb3ctbGVmdCcpLmZvckVhY2goc2hhZG93RWwgPT4ge1xuICAgICAgICBzaGFkb3dFbC5zdHlsZS50cmFuc2l0aW9uRHVyYXRpb24gPSBgJHtkdXJhdGlvbn1tc2A7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfTtcbiAgZWZmZWN0SW5pdCh7XG4gICAgZWZmZWN0OiAnY292ZXJmbG93JyxcbiAgICBzd2lwZXIsXG4gICAgb24sXG4gICAgc2V0VHJhbnNsYXRlLFxuICAgIHNldFRyYW5zaXRpb24sXG4gICAgcGVyc3BlY3RpdmU6ICgpID0+IHRydWUsXG4gICAgb3ZlcndyaXRlUGFyYW1zOiAoKSA9PiAoe1xuICAgICAgd2F0Y2hTbGlkZXNQcm9ncmVzczogdHJ1ZVxuICAgIH0pXG4gIH0pO1xufVxuXG5leHBvcnQgeyBFZmZlY3RDb3ZlcmZsb3cgYXMgZGVmYXVsdCB9O1xuIiwiaW1wb3J0IHsgYyBhcyBjcmVhdGVTaGFkb3cgfSBmcm9tICcuLi9zaGFyZWQvY3JlYXRlLXNoYWRvdy5tanMnO1xuaW1wb3J0IHsgZSBhcyBlZmZlY3RJbml0IH0gZnJvbSAnLi4vc2hhcmVkL2VmZmVjdC1pbml0Lm1qcyc7XG5pbXBvcnQgeyBlIGFzIGVmZmVjdFRhcmdldCB9IGZyb20gJy4uL3NoYXJlZC9lZmZlY3QtdGFyZ2V0Lm1qcyc7XG5pbXBvcnQgeyBlIGFzIGVmZmVjdFZpcnR1YWxUcmFuc2l0aW9uRW5kIH0gZnJvbSAnLi4vc2hhcmVkL2VmZmVjdC12aXJ0dWFsLXRyYW5zaXRpb24tZW5kLm1qcyc7XG5pbXBvcnQgeyBnIGFzIGdldFNsaWRlVHJhbnNmb3JtRWwgfSBmcm9tICcuLi9zaGFyZWQvdXRpbHMubWpzJztcblxuZnVuY3Rpb24gRWZmZWN0Q3JlYXRpdmUoX3JlZikge1xuICBsZXQge1xuICAgIHN3aXBlcixcbiAgICBleHRlbmRQYXJhbXMsXG4gICAgb25cbiAgfSA9IF9yZWY7XG4gIGV4dGVuZFBhcmFtcyh7XG4gICAgY3JlYXRpdmVFZmZlY3Q6IHtcbiAgICAgIGxpbWl0UHJvZ3Jlc3M6IDEsXG4gICAgICBzaGFkb3dQZXJQcm9ncmVzczogZmFsc2UsXG4gICAgICBwcm9ncmVzc011bHRpcGxpZXI6IDEsXG4gICAgICBwZXJzcGVjdGl2ZTogdHJ1ZSxcbiAgICAgIHByZXY6IHtcbiAgICAgICAgdHJhbnNsYXRlOiBbMCwgMCwgMF0sXG4gICAgICAgIHJvdGF0ZTogWzAsIDAsIDBdLFxuICAgICAgICBvcGFjaXR5OiAxLFxuICAgICAgICBzY2FsZTogMVxuICAgICAgfSxcbiAgICAgIG5leHQ6IHtcbiAgICAgICAgdHJhbnNsYXRlOiBbMCwgMCwgMF0sXG4gICAgICAgIHJvdGF0ZTogWzAsIDAsIDBdLFxuICAgICAgICBvcGFjaXR5OiAxLFxuICAgICAgICBzY2FsZTogMVxuICAgICAgfVxuICAgIH1cbiAgfSk7XG4gIGNvbnN0IGdldFRyYW5zbGF0ZVZhbHVlID0gdmFsdWUgPT4ge1xuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSByZXR1cm4gdmFsdWU7XG4gICAgcmV0dXJuIGAke3ZhbHVlfXB4YDtcbiAgfTtcbiAgY29uc3Qgc2V0VHJhbnNsYXRlID0gKCkgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIHNsaWRlcyxcbiAgICAgIHdyYXBwZXJFbCxcbiAgICAgIHNsaWRlc1NpemVzR3JpZFxuICAgIH0gPSBzd2lwZXI7XG4gICAgY29uc3QgcGFyYW1zID0gc3dpcGVyLnBhcmFtcy5jcmVhdGl2ZUVmZmVjdDtcbiAgICBjb25zdCB7XG4gICAgICBwcm9ncmVzc011bHRpcGxpZXI6IG11bHRpcGxpZXJcbiAgICB9ID0gcGFyYW1zO1xuICAgIGNvbnN0IGlzQ2VudGVyZWRTbGlkZXMgPSBzd2lwZXIucGFyYW1zLmNlbnRlcmVkU2xpZGVzO1xuICAgIGlmIChpc0NlbnRlcmVkU2xpZGVzKSB7XG4gICAgICBjb25zdCBtYXJnaW4gPSBzbGlkZXNTaXplc0dyaWRbMF0gLyAyIC0gc3dpcGVyLnBhcmFtcy5zbGlkZXNPZmZzZXRCZWZvcmUgfHwgMDtcbiAgICAgIHdyYXBwZXJFbC5zdHlsZS50cmFuc2Zvcm0gPSBgdHJhbnNsYXRlWChjYWxjKDUwJSAtICR7bWFyZ2lufXB4KSlgO1xuICAgIH1cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNsaWRlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgY29uc3Qgc2xpZGVFbCA9IHNsaWRlc1tpXTtcbiAgICAgIGNvbnN0IHNsaWRlUHJvZ3Jlc3MgPSBzbGlkZUVsLnByb2dyZXNzO1xuICAgICAgY29uc3QgcHJvZ3Jlc3MgPSBNYXRoLm1pbihNYXRoLm1heChzbGlkZUVsLnByb2dyZXNzLCAtcGFyYW1zLmxpbWl0UHJvZ3Jlc3MpLCBwYXJhbXMubGltaXRQcm9ncmVzcyk7XG4gICAgICBsZXQgb3JpZ2luYWxQcm9ncmVzcyA9IHByb2dyZXNzO1xuICAgICAgaWYgKCFpc0NlbnRlcmVkU2xpZGVzKSB7XG4gICAgICAgIG9yaWdpbmFsUHJvZ3Jlc3MgPSBNYXRoLm1pbihNYXRoLm1heChzbGlkZUVsLm9yaWdpbmFsUHJvZ3Jlc3MsIC1wYXJhbXMubGltaXRQcm9ncmVzcyksIHBhcmFtcy5saW1pdFByb2dyZXNzKTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IG9mZnNldCA9IHNsaWRlRWwuc3dpcGVyU2xpZGVPZmZzZXQ7XG4gICAgICBjb25zdCB0ID0gW3N3aXBlci5wYXJhbXMuY3NzTW9kZSA/IC1vZmZzZXQgLSBzd2lwZXIudHJhbnNsYXRlIDogLW9mZnNldCwgMCwgMF07XG4gICAgICBjb25zdCByID0gWzAsIDAsIDBdO1xuICAgICAgbGV0IGN1c3RvbSA9IGZhbHNlO1xuICAgICAgaWYgKCFzd2lwZXIuaXNIb3Jpem9udGFsKCkpIHtcbiAgICAgICAgdFsxXSA9IHRbMF07XG4gICAgICAgIHRbMF0gPSAwO1xuICAgICAgfVxuICAgICAgbGV0IGRhdGEgPSB7XG4gICAgICAgIHRyYW5zbGF0ZTogWzAsIDAsIDBdLFxuICAgICAgICByb3RhdGU6IFswLCAwLCAwXSxcbiAgICAgICAgc2NhbGU6IDEsXG4gICAgICAgIG9wYWNpdHk6IDFcbiAgICAgIH07XG4gICAgICBpZiAocHJvZ3Jlc3MgPCAwKSB7XG4gICAgICAgIGRhdGEgPSBwYXJhbXMubmV4dDtcbiAgICAgICAgY3VzdG9tID0gdHJ1ZTtcbiAgICAgIH0gZWxzZSBpZiAocHJvZ3Jlc3MgPiAwKSB7XG4gICAgICAgIGRhdGEgPSBwYXJhbXMucHJldjtcbiAgICAgICAgY3VzdG9tID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIC8vIHNldCB0cmFuc2xhdGVcbiAgICAgIHQuZm9yRWFjaCgodmFsdWUsIGluZGV4KSA9PiB7XG4gICAgICAgIHRbaW5kZXhdID0gYGNhbGMoJHt2YWx1ZX1weCArICgke2dldFRyYW5zbGF0ZVZhbHVlKGRhdGEudHJhbnNsYXRlW2luZGV4XSl9ICogJHtNYXRoLmFicyhwcm9ncmVzcyAqIG11bHRpcGxpZXIpfSkpYDtcbiAgICAgIH0pO1xuICAgICAgLy8gc2V0IHJvdGF0ZXNcbiAgICAgIHIuZm9yRWFjaCgodmFsdWUsIGluZGV4KSA9PiB7XG4gICAgICAgIGxldCB2YWwgPSBkYXRhLnJvdGF0ZVtpbmRleF0gKiBNYXRoLmFicyhwcm9ncmVzcyAqIG11bHRpcGxpZXIpO1xuICAgICAgICBpZiAoc3dpcGVyLmJyb3dzZXIgJiYgc3dpcGVyLmJyb3dzZXIubmVlZDNkRml4ICYmIE1hdGguYWJzKHZhbCkgLyA5MCAlIDIgPT09IDEpIHtcbiAgICAgICAgICB2YWwgKz0gMC4wMDE7XG4gICAgICAgIH1cbiAgICAgICAgcltpbmRleF0gPSB2YWw7XG4gICAgICB9KTtcbiAgICAgIHNsaWRlRWwuc3R5bGUuekluZGV4ID0gLU1hdGguYWJzKE1hdGgucm91bmQoc2xpZGVQcm9ncmVzcykpICsgc2xpZGVzLmxlbmd0aDtcbiAgICAgIGNvbnN0IHRyYW5zbGF0ZVN0cmluZyA9IHQuam9pbignLCAnKTtcbiAgICAgIGNvbnN0IHJvdGF0ZVN0cmluZyA9IGByb3RhdGVYKCR7clswXX1kZWcpIHJvdGF0ZVkoJHtyWzFdfWRlZykgcm90YXRlWigke3JbMl19ZGVnKWA7XG4gICAgICBjb25zdCBzY2FsZVN0cmluZyA9IG9yaWdpbmFsUHJvZ3Jlc3MgPCAwID8gYHNjYWxlKCR7MSArICgxIC0gZGF0YS5zY2FsZSkgKiBvcmlnaW5hbFByb2dyZXNzICogbXVsdGlwbGllcn0pYCA6IGBzY2FsZSgkezEgLSAoMSAtIGRhdGEuc2NhbGUpICogb3JpZ2luYWxQcm9ncmVzcyAqIG11bHRpcGxpZXJ9KWA7XG4gICAgICBjb25zdCBvcGFjaXR5U3RyaW5nID0gb3JpZ2luYWxQcm9ncmVzcyA8IDAgPyAxICsgKDEgLSBkYXRhLm9wYWNpdHkpICogb3JpZ2luYWxQcm9ncmVzcyAqIG11bHRpcGxpZXIgOiAxIC0gKDEgLSBkYXRhLm9wYWNpdHkpICogb3JpZ2luYWxQcm9ncmVzcyAqIG11bHRpcGxpZXI7XG4gICAgICBjb25zdCB0cmFuc2Zvcm0gPSBgdHJhbnNsYXRlM2QoJHt0cmFuc2xhdGVTdHJpbmd9KSAke3JvdGF0ZVN0cmluZ30gJHtzY2FsZVN0cmluZ31gO1xuXG4gICAgICAvLyBTZXQgc2hhZG93c1xuICAgICAgaWYgKGN1c3RvbSAmJiBkYXRhLnNoYWRvdyB8fCAhY3VzdG9tKSB7XG4gICAgICAgIGxldCBzaGFkb3dFbCA9IHNsaWRlRWwucXVlcnlTZWxlY3RvcignLnN3aXBlci1zbGlkZS1zaGFkb3cnKTtcbiAgICAgICAgaWYgKCFzaGFkb3dFbCAmJiBkYXRhLnNoYWRvdykge1xuICAgICAgICAgIHNoYWRvd0VsID0gY3JlYXRlU2hhZG93KCdjcmVhdGl2ZScsIHNsaWRlRWwpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzaGFkb3dFbCkge1xuICAgICAgICAgIGNvbnN0IHNoYWRvd09wYWNpdHkgPSBwYXJhbXMuc2hhZG93UGVyUHJvZ3Jlc3MgPyBwcm9ncmVzcyAqICgxIC8gcGFyYW1zLmxpbWl0UHJvZ3Jlc3MpIDogcHJvZ3Jlc3M7XG4gICAgICAgICAgc2hhZG93RWwuc3R5bGUub3BhY2l0eSA9IE1hdGgubWluKE1hdGgubWF4KE1hdGguYWJzKHNoYWRvd09wYWNpdHkpLCAwKSwgMSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGNvbnN0IHRhcmdldEVsID0gZWZmZWN0VGFyZ2V0KHBhcmFtcywgc2xpZGVFbCk7XG4gICAgICB0YXJnZXRFbC5zdHlsZS50cmFuc2Zvcm0gPSB0cmFuc2Zvcm07XG4gICAgICB0YXJnZXRFbC5zdHlsZS5vcGFjaXR5ID0gb3BhY2l0eVN0cmluZztcbiAgICAgIGlmIChkYXRhLm9yaWdpbikge1xuICAgICAgICB0YXJnZXRFbC5zdHlsZS50cmFuc2Zvcm1PcmlnaW4gPSBkYXRhLm9yaWdpbjtcbiAgICAgIH1cbiAgICB9XG4gIH07XG4gIGNvbnN0IHNldFRyYW5zaXRpb24gPSBkdXJhdGlvbiA9PiB7XG4gICAgY29uc3QgdHJhbnNmb3JtRWxlbWVudHMgPSBzd2lwZXIuc2xpZGVzLm1hcChzbGlkZUVsID0+IGdldFNsaWRlVHJhbnNmb3JtRWwoc2xpZGVFbCkpO1xuICAgIHRyYW5zZm9ybUVsZW1lbnRzLmZvckVhY2goZWwgPT4ge1xuICAgICAgZWwuc3R5bGUudHJhbnNpdGlvbkR1cmF0aW9uID0gYCR7ZHVyYXRpb259bXNgO1xuICAgICAgZWwucXVlcnlTZWxlY3RvckFsbCgnLnN3aXBlci1zbGlkZS1zaGFkb3cnKS5mb3JFYWNoKHNoYWRvd0VsID0+IHtcbiAgICAgICAgc2hhZG93RWwuc3R5bGUudHJhbnNpdGlvbkR1cmF0aW9uID0gYCR7ZHVyYXRpb259bXNgO1xuICAgICAgfSk7XG4gICAgfSk7XG4gICAgZWZmZWN0VmlydHVhbFRyYW5zaXRpb25FbmQoe1xuICAgICAgc3dpcGVyLFxuICAgICAgZHVyYXRpb24sXG4gICAgICB0cmFuc2Zvcm1FbGVtZW50cyxcbiAgICAgIGFsbFNsaWRlczogdHJ1ZVxuICAgIH0pO1xuICB9O1xuICBlZmZlY3RJbml0KHtcbiAgICBlZmZlY3Q6ICdjcmVhdGl2ZScsXG4gICAgc3dpcGVyLFxuICAgIG9uLFxuICAgIHNldFRyYW5zbGF0ZSxcbiAgICBzZXRUcmFuc2l0aW9uLFxuICAgIHBlcnNwZWN0aXZlOiAoKSA9PiBzd2lwZXIucGFyYW1zLmNyZWF0aXZlRWZmZWN0LnBlcnNwZWN0aXZlLFxuICAgIG92ZXJ3cml0ZVBhcmFtczogKCkgPT4gKHtcbiAgICAgIHdhdGNoU2xpZGVzUHJvZ3Jlc3M6IHRydWUsXG4gICAgICB2aXJ0dWFsVHJhbnNsYXRlOiAhc3dpcGVyLnBhcmFtcy5jc3NNb2RlXG4gICAgfSlcbiAgfSk7XG59XG5cbmV4cG9ydCB7IEVmZmVjdENyZWF0aXZlIGFzIGRlZmF1bHQgfTtcbiIsImltcG9ydCB7IGMgYXMgY3JlYXRlU2hhZG93IH0gZnJvbSAnLi4vc2hhcmVkL2NyZWF0ZS1zaGFkb3cubWpzJztcbmltcG9ydCB7IGUgYXMgZWZmZWN0SW5pdCB9IGZyb20gJy4uL3NoYXJlZC9lZmZlY3QtaW5pdC5tanMnO1xuaW1wb3J0IHsgZSBhcyBlZmZlY3RUYXJnZXQgfSBmcm9tICcuLi9zaGFyZWQvZWZmZWN0LXRhcmdldC5tanMnO1xuaW1wb3J0IHsgZSBhcyBlZmZlY3RWaXJ0dWFsVHJhbnNpdGlvbkVuZCB9IGZyb20gJy4uL3NoYXJlZC9lZmZlY3QtdmlydHVhbC10cmFuc2l0aW9uLWVuZC5tanMnO1xuaW1wb3J0IHsgZyBhcyBnZXRTbGlkZVRyYW5zZm9ybUVsIH0gZnJvbSAnLi4vc2hhcmVkL3V0aWxzLm1qcyc7XG5cbmZ1bmN0aW9uIEVmZmVjdENhcmRzKF9yZWYpIHtcbiAgbGV0IHtcbiAgICBzd2lwZXIsXG4gICAgZXh0ZW5kUGFyYW1zLFxuICAgIG9uXG4gIH0gPSBfcmVmO1xuICBleHRlbmRQYXJhbXMoe1xuICAgIGNhcmRzRWZmZWN0OiB7XG4gICAgICBzbGlkZVNoYWRvd3M6IHRydWUsXG4gICAgICByb3RhdGU6IHRydWUsXG4gICAgICBwZXJTbGlkZVJvdGF0ZTogMixcbiAgICAgIHBlclNsaWRlT2Zmc2V0OiA4XG4gICAgfVxuICB9KTtcbiAgY29uc3Qgc2V0VHJhbnNsYXRlID0gKCkgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIHNsaWRlcyxcbiAgICAgIGFjdGl2ZUluZGV4LFxuICAgICAgcnRsVHJhbnNsYXRlOiBydGxcbiAgICB9ID0gc3dpcGVyO1xuICAgIGNvbnN0IHBhcmFtcyA9IHN3aXBlci5wYXJhbXMuY2FyZHNFZmZlY3Q7XG4gICAgY29uc3Qge1xuICAgICAgc3RhcnRUcmFuc2xhdGUsXG4gICAgICBpc1RvdWNoZWRcbiAgICB9ID0gc3dpcGVyLnRvdWNoRXZlbnRzRGF0YTtcbiAgICBjb25zdCBjdXJyZW50VHJhbnNsYXRlID0gcnRsID8gLXN3aXBlci50cmFuc2xhdGUgOiBzd2lwZXIudHJhbnNsYXRlO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2xpZGVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICBjb25zdCBzbGlkZUVsID0gc2xpZGVzW2ldO1xuICAgICAgY29uc3Qgc2xpZGVQcm9ncmVzcyA9IHNsaWRlRWwucHJvZ3Jlc3M7XG4gICAgICBjb25zdCBwcm9ncmVzcyA9IE1hdGgubWluKE1hdGgubWF4KHNsaWRlUHJvZ3Jlc3MsIC00KSwgNCk7XG4gICAgICBsZXQgb2Zmc2V0ID0gc2xpZGVFbC5zd2lwZXJTbGlkZU9mZnNldDtcbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLmNlbnRlcmVkU2xpZGVzICYmICFzd2lwZXIucGFyYW1zLmNzc01vZGUpIHtcbiAgICAgICAgc3dpcGVyLndyYXBwZXJFbC5zdHlsZS50cmFuc2Zvcm0gPSBgdHJhbnNsYXRlWCgke3N3aXBlci5taW5UcmFuc2xhdGUoKX1weClgO1xuICAgICAgfVxuICAgICAgaWYgKHN3aXBlci5wYXJhbXMuY2VudGVyZWRTbGlkZXMgJiYgc3dpcGVyLnBhcmFtcy5jc3NNb2RlKSB7XG4gICAgICAgIG9mZnNldCAtPSBzbGlkZXNbMF0uc3dpcGVyU2xpZGVPZmZzZXQ7XG4gICAgICB9XG4gICAgICBsZXQgdFggPSBzd2lwZXIucGFyYW1zLmNzc01vZGUgPyAtb2Zmc2V0IC0gc3dpcGVyLnRyYW5zbGF0ZSA6IC1vZmZzZXQ7XG4gICAgICBsZXQgdFkgPSAwO1xuICAgICAgY29uc3QgdFogPSAtMTAwICogTWF0aC5hYnMocHJvZ3Jlc3MpO1xuICAgICAgbGV0IHNjYWxlID0gMTtcbiAgICAgIGxldCByb3RhdGUgPSAtcGFyYW1zLnBlclNsaWRlUm90YXRlICogcHJvZ3Jlc3M7XG4gICAgICBsZXQgdFhBZGQgPSBwYXJhbXMucGVyU2xpZGVPZmZzZXQgLSBNYXRoLmFicyhwcm9ncmVzcykgKiAwLjc1O1xuICAgICAgY29uc3Qgc2xpZGVJbmRleCA9IHN3aXBlci52aXJ0dWFsICYmIHN3aXBlci5wYXJhbXMudmlydHVhbC5lbmFibGVkID8gc3dpcGVyLnZpcnR1YWwuZnJvbSArIGkgOiBpO1xuICAgICAgY29uc3QgaXNTd2lwZVRvTmV4dCA9IChzbGlkZUluZGV4ID09PSBhY3RpdmVJbmRleCB8fCBzbGlkZUluZGV4ID09PSBhY3RpdmVJbmRleCAtIDEpICYmIHByb2dyZXNzID4gMCAmJiBwcm9ncmVzcyA8IDEgJiYgKGlzVG91Y2hlZCB8fCBzd2lwZXIucGFyYW1zLmNzc01vZGUpICYmIGN1cnJlbnRUcmFuc2xhdGUgPCBzdGFydFRyYW5zbGF0ZTtcbiAgICAgIGNvbnN0IGlzU3dpcGVUb1ByZXYgPSAoc2xpZGVJbmRleCA9PT0gYWN0aXZlSW5kZXggfHwgc2xpZGVJbmRleCA9PT0gYWN0aXZlSW5kZXggKyAxKSAmJiBwcm9ncmVzcyA8IDAgJiYgcHJvZ3Jlc3MgPiAtMSAmJiAoaXNUb3VjaGVkIHx8IHN3aXBlci5wYXJhbXMuY3NzTW9kZSkgJiYgY3VycmVudFRyYW5zbGF0ZSA+IHN0YXJ0VHJhbnNsYXRlO1xuICAgICAgaWYgKGlzU3dpcGVUb05leHQgfHwgaXNTd2lwZVRvUHJldikge1xuICAgICAgICBjb25zdCBzdWJQcm9ncmVzcyA9ICgxIC0gTWF0aC5hYnMoKE1hdGguYWJzKHByb2dyZXNzKSAtIDAuNSkgLyAwLjUpKSAqKiAwLjU7XG4gICAgICAgIHJvdGF0ZSArPSAtMjggKiBwcm9ncmVzcyAqIHN1YlByb2dyZXNzO1xuICAgICAgICBzY2FsZSArPSAtMC41ICogc3ViUHJvZ3Jlc3M7XG4gICAgICAgIHRYQWRkICs9IDk2ICogc3ViUHJvZ3Jlc3M7XG4gICAgICAgIHRZID0gYCR7LTI1ICogc3ViUHJvZ3Jlc3MgKiBNYXRoLmFicyhwcm9ncmVzcyl9JWA7XG4gICAgICB9XG4gICAgICBpZiAocHJvZ3Jlc3MgPCAwKSB7XG4gICAgICAgIC8vIG5leHRcbiAgICAgICAgdFggPSBgY2FsYygke3RYfXB4ICR7cnRsID8gJy0nIDogJysnfSAoJHt0WEFkZCAqIE1hdGguYWJzKHByb2dyZXNzKX0lKSlgO1xuICAgICAgfSBlbHNlIGlmIChwcm9ncmVzcyA+IDApIHtcbiAgICAgICAgLy8gcHJldlxuICAgICAgICB0WCA9IGBjYWxjKCR7dFh9cHggJHtydGwgPyAnLScgOiAnKyd9ICgtJHt0WEFkZCAqIE1hdGguYWJzKHByb2dyZXNzKX0lKSlgO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdFggPSBgJHt0WH1weGA7XG4gICAgICB9XG4gICAgICBpZiAoIXN3aXBlci5pc0hvcml6b250YWwoKSkge1xuICAgICAgICBjb25zdCBwcmV2WSA9IHRZO1xuICAgICAgICB0WSA9IHRYO1xuICAgICAgICB0WCA9IHByZXZZO1xuICAgICAgfVxuICAgICAgY29uc3Qgc2NhbGVTdHJpbmcgPSBwcm9ncmVzcyA8IDAgPyBgJHsxICsgKDEgLSBzY2FsZSkgKiBwcm9ncmVzc31gIDogYCR7MSAtICgxIC0gc2NhbGUpICogcHJvZ3Jlc3N9YDtcblxuICAgICAgLyogZXNsaW50LWRpc2FibGUgKi9cbiAgICAgIGNvbnN0IHRyYW5zZm9ybSA9IGBcbiAgICAgICAgdHJhbnNsYXRlM2QoJHt0WH0sICR7dFl9LCAke3RafXB4KVxuICAgICAgICByb3RhdGVaKCR7cGFyYW1zLnJvdGF0ZSA/IHJ0bCA/IC1yb3RhdGUgOiByb3RhdGUgOiAwfWRlZylcbiAgICAgICAgc2NhbGUoJHtzY2FsZVN0cmluZ30pXG4gICAgICBgO1xuICAgICAgLyogZXNsaW50LWVuYWJsZSAqL1xuXG4gICAgICBpZiAocGFyYW1zLnNsaWRlU2hhZG93cykge1xuICAgICAgICAvLyBTZXQgc2hhZG93c1xuICAgICAgICBsZXQgc2hhZG93RWwgPSBzbGlkZUVsLnF1ZXJ5U2VsZWN0b3IoJy5zd2lwZXItc2xpZGUtc2hhZG93Jyk7XG4gICAgICAgIGlmICghc2hhZG93RWwpIHtcbiAgICAgICAgICBzaGFkb3dFbCA9IGNyZWF0ZVNoYWRvdygnY2FyZHMnLCBzbGlkZUVsKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc2hhZG93RWwpIHNoYWRvd0VsLnN0eWxlLm9wYWNpdHkgPSBNYXRoLm1pbihNYXRoLm1heCgoTWF0aC5hYnMocHJvZ3Jlc3MpIC0gMC41KSAvIDAuNSwgMCksIDEpO1xuICAgICAgfVxuICAgICAgc2xpZGVFbC5zdHlsZS56SW5kZXggPSAtTWF0aC5hYnMoTWF0aC5yb3VuZChzbGlkZVByb2dyZXNzKSkgKyBzbGlkZXMubGVuZ3RoO1xuICAgICAgY29uc3QgdGFyZ2V0RWwgPSBlZmZlY3RUYXJnZXQocGFyYW1zLCBzbGlkZUVsKTtcbiAgICAgIHRhcmdldEVsLnN0eWxlLnRyYW5zZm9ybSA9IHRyYW5zZm9ybTtcbiAgICB9XG4gIH07XG4gIGNvbnN0IHNldFRyYW5zaXRpb24gPSBkdXJhdGlvbiA9PiB7XG4gICAgY29uc3QgdHJhbnNmb3JtRWxlbWVudHMgPSBzd2lwZXIuc2xpZGVzLm1hcChzbGlkZUVsID0+IGdldFNsaWRlVHJhbnNmb3JtRWwoc2xpZGVFbCkpO1xuICAgIHRyYW5zZm9ybUVsZW1lbnRzLmZvckVhY2goZWwgPT4ge1xuICAgICAgZWwuc3R5bGUudHJhbnNpdGlvbkR1cmF0aW9uID0gYCR7ZHVyYXRpb259bXNgO1xuICAgICAgZWwucXVlcnlTZWxlY3RvckFsbCgnLnN3aXBlci1zbGlkZS1zaGFkb3cnKS5mb3JFYWNoKHNoYWRvd0VsID0+IHtcbiAgICAgICAgc2hhZG93RWwuc3R5bGUudHJhbnNpdGlvbkR1cmF0aW9uID0gYCR7ZHVyYXRpb259bXNgO1xuICAgICAgfSk7XG4gICAgfSk7XG4gICAgZWZmZWN0VmlydHVhbFRyYW5zaXRpb25FbmQoe1xuICAgICAgc3dpcGVyLFxuICAgICAgZHVyYXRpb24sXG4gICAgICB0cmFuc2Zvcm1FbGVtZW50c1xuICAgIH0pO1xuICB9O1xuICBlZmZlY3RJbml0KHtcbiAgICBlZmZlY3Q6ICdjYXJkcycsXG4gICAgc3dpcGVyLFxuICAgIG9uLFxuICAgIHNldFRyYW5zbGF0ZSxcbiAgICBzZXRUcmFuc2l0aW9uLFxuICAgIHBlcnNwZWN0aXZlOiAoKSA9PiB0cnVlLFxuICAgIG92ZXJ3cml0ZVBhcmFtczogKCkgPT4gKHtcbiAgICAgIHdhdGNoU2xpZGVzUHJvZ3Jlc3M6IHRydWUsXG4gICAgICB2aXJ0dWFsVHJhbnNsYXRlOiAhc3dpcGVyLnBhcmFtcy5jc3NNb2RlXG4gICAgfSlcbiAgfSk7XG59XG5cbmV4cG9ydCB7IEVmZmVjdENhcmRzIGFzIGRlZmF1bHQgfTtcbiIsIi8qKlxuICogU3dpcGVyIDExLjEuNFxuICogTW9zdCBtb2Rlcm4gbW9iaWxlIHRvdWNoIHNsaWRlciBhbmQgZnJhbWV3b3JrIHdpdGggaGFyZHdhcmUgYWNjZWxlcmF0ZWQgdHJhbnNpdGlvbnNcbiAqIGh0dHBzOi8vc3dpcGVyanMuY29tXG4gKlxuICogQ29weXJpZ2h0IDIwMTQtMjAyNCBWbGFkaW1pciBLaGFybGFtcGlkaVxuICpcbiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZVxuICpcbiAqIFJlbGVhc2VkIG9uOiBNYXkgMzAsIDIwMjRcbiAqL1xuXG5pbXBvcnQgeyBTIGFzIFN3aXBlciB9IGZyb20gJy4vc2hhcmVkL3N3aXBlci1jb3JlLm1qcyc7XG5pbXBvcnQgVmlydHVhbCBmcm9tICcuL21vZHVsZXMvdmlydHVhbC5tanMnO1xuaW1wb3J0IEtleWJvYXJkIGZyb20gJy4vbW9kdWxlcy9rZXlib2FyZC5tanMnO1xuaW1wb3J0IE1vdXNld2hlZWwgZnJvbSAnLi9tb2R1bGVzL21vdXNld2hlZWwubWpzJztcbmltcG9ydCBOYXZpZ2F0aW9uIGZyb20gJy4vbW9kdWxlcy9uYXZpZ2F0aW9uLm1qcyc7XG5pbXBvcnQgUGFnaW5hdGlvbiBmcm9tICcuL21vZHVsZXMvcGFnaW5hdGlvbi5tanMnO1xuaW1wb3J0IFNjcm9sbGJhciBmcm9tICcuL21vZHVsZXMvc2Nyb2xsYmFyLm1qcyc7XG5pbXBvcnQgUGFyYWxsYXggZnJvbSAnLi9tb2R1bGVzL3BhcmFsbGF4Lm1qcyc7XG5pbXBvcnQgWm9vbSBmcm9tICcuL21vZHVsZXMvem9vbS5tanMnO1xuaW1wb3J0IENvbnRyb2xsZXIgZnJvbSAnLi9tb2R1bGVzL2NvbnRyb2xsZXIubWpzJztcbmltcG9ydCBBMTF5IGZyb20gJy4vbW9kdWxlcy9hMTF5Lm1qcyc7XG5pbXBvcnQgSGlzdG9yeSBmcm9tICcuL21vZHVsZXMvaGlzdG9yeS5tanMnO1xuaW1wb3J0IEhhc2hOYXZpZ2F0aW9uIGZyb20gJy4vbW9kdWxlcy9oYXNoLW5hdmlnYXRpb24ubWpzJztcbmltcG9ydCBBdXRvcGxheSBmcm9tICcuL21vZHVsZXMvYXV0b3BsYXkubWpzJztcbmltcG9ydCBUaHVtYiBmcm9tICcuL21vZHVsZXMvdGh1bWJzLm1qcyc7XG5pbXBvcnQgZnJlZU1vZGUgZnJvbSAnLi9tb2R1bGVzL2ZyZWUtbW9kZS5tanMnO1xuaW1wb3J0IEdyaWQgZnJvbSAnLi9tb2R1bGVzL2dyaWQubWpzJztcbmltcG9ydCBNYW5pcHVsYXRpb24gZnJvbSAnLi9tb2R1bGVzL21hbmlwdWxhdGlvbi5tanMnO1xuaW1wb3J0IEVmZmVjdEZhZGUgZnJvbSAnLi9tb2R1bGVzL2VmZmVjdC1mYWRlLm1qcyc7XG5pbXBvcnQgRWZmZWN0Q3ViZSBmcm9tICcuL21vZHVsZXMvZWZmZWN0LWN1YmUubWpzJztcbmltcG9ydCBFZmZlY3RGbGlwIGZyb20gJy4vbW9kdWxlcy9lZmZlY3QtZmxpcC5tanMnO1xuaW1wb3J0IEVmZmVjdENvdmVyZmxvdyBmcm9tICcuL21vZHVsZXMvZWZmZWN0LWNvdmVyZmxvdy5tanMnO1xuaW1wb3J0IEVmZmVjdENyZWF0aXZlIGZyb20gJy4vbW9kdWxlcy9lZmZlY3QtY3JlYXRpdmUubWpzJztcbmltcG9ydCBFZmZlY3RDYXJkcyBmcm9tICcuL21vZHVsZXMvZWZmZWN0LWNhcmRzLm1qcyc7XG5cbi8vIFN3aXBlciBDbGFzc1xuY29uc3QgbW9kdWxlcyA9IFtWaXJ0dWFsLCBLZXlib2FyZCwgTW91c2V3aGVlbCwgTmF2aWdhdGlvbiwgUGFnaW5hdGlvbiwgU2Nyb2xsYmFyLCBQYXJhbGxheCwgWm9vbSwgQ29udHJvbGxlciwgQTExeSwgSGlzdG9yeSwgSGFzaE5hdmlnYXRpb24sIEF1dG9wbGF5LCBUaHVtYiwgZnJlZU1vZGUsIEdyaWQsIE1hbmlwdWxhdGlvbiwgRWZmZWN0RmFkZSwgRWZmZWN0Q3ViZSwgRWZmZWN0RmxpcCwgRWZmZWN0Q292ZXJmbG93LCBFZmZlY3RDcmVhdGl2ZSwgRWZmZWN0Q2FyZHNdO1xuU3dpcGVyLnVzZShtb2R1bGVzKTtcblxuZXhwb3J0IHsgU3dpcGVyLCBTd2lwZXIgYXMgZGVmYXVsdCB9O1xuIiwiLy8gbm9kZV9tb2R1bGVzL3RhYmJhYmxlL2Rpc3QvaW5kZXguZXNtLmpzXG52YXIgY2FuZGlkYXRlU2VsZWN0b3JzID0gW1wiaW5wdXRcIiwgXCJzZWxlY3RcIiwgXCJ0ZXh0YXJlYVwiLCBcImFbaHJlZl1cIiwgXCJidXR0b25cIiwgXCJbdGFiaW5kZXhdOm5vdChzbG90KVwiLCBcImF1ZGlvW2NvbnRyb2xzXVwiLCBcInZpZGVvW2NvbnRyb2xzXVwiLCAnW2NvbnRlbnRlZGl0YWJsZV06bm90KFtjb250ZW50ZWRpdGFibGU9XCJmYWxzZVwiXSknLCBcImRldGFpbHM+c3VtbWFyeTpmaXJzdC1vZi10eXBlXCIsIFwiZGV0YWlsc1wiXTtcbnZhciBjYW5kaWRhdGVTZWxlY3RvciA9IC8qIEBfX1BVUkVfXyAqLyBjYW5kaWRhdGVTZWxlY3RvcnMuam9pbihcIixcIik7XG52YXIgTm9FbGVtZW50ID0gdHlwZW9mIEVsZW1lbnQgPT09IFwidW5kZWZpbmVkXCI7XG52YXIgbWF0Y2hlcyA9IE5vRWxlbWVudCA/IGZ1bmN0aW9uKCkge1xufSA6IEVsZW1lbnQucHJvdG90eXBlLm1hdGNoZXMgfHwgRWxlbWVudC5wcm90b3R5cGUubXNNYXRjaGVzU2VsZWN0b3IgfHwgRWxlbWVudC5wcm90b3R5cGUud2Via2l0TWF0Y2hlc1NlbGVjdG9yO1xudmFyIGdldFJvb3ROb2RlID0gIU5vRWxlbWVudCAmJiBFbGVtZW50LnByb3RvdHlwZS5nZXRSb290Tm9kZSA/IGZ1bmN0aW9uKGVsZW1lbnQpIHtcbiAgcmV0dXJuIGVsZW1lbnQuZ2V0Um9vdE5vZGUoKTtcbn0gOiBmdW5jdGlvbihlbGVtZW50KSB7XG4gIHJldHVybiBlbGVtZW50Lm93bmVyRG9jdW1lbnQ7XG59O1xudmFyIGdldENhbmRpZGF0ZXMgPSBmdW5jdGlvbiBnZXRDYW5kaWRhdGVzMihlbCwgaW5jbHVkZUNvbnRhaW5lciwgZmlsdGVyKSB7XG4gIHZhciBjYW5kaWRhdGVzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmFwcGx5KGVsLnF1ZXJ5U2VsZWN0b3JBbGwoY2FuZGlkYXRlU2VsZWN0b3IpKTtcbiAgaWYgKGluY2x1ZGVDb250YWluZXIgJiYgbWF0Y2hlcy5jYWxsKGVsLCBjYW5kaWRhdGVTZWxlY3RvcikpIHtcbiAgICBjYW5kaWRhdGVzLnVuc2hpZnQoZWwpO1xuICB9XG4gIGNhbmRpZGF0ZXMgPSBjYW5kaWRhdGVzLmZpbHRlcihmaWx0ZXIpO1xuICByZXR1cm4gY2FuZGlkYXRlcztcbn07XG52YXIgZ2V0Q2FuZGlkYXRlc0l0ZXJhdGl2ZWx5ID0gZnVuY3Rpb24gZ2V0Q2FuZGlkYXRlc0l0ZXJhdGl2ZWx5MihlbGVtZW50cywgaW5jbHVkZUNvbnRhaW5lciwgb3B0aW9ucykge1xuICB2YXIgY2FuZGlkYXRlcyA9IFtdO1xuICB2YXIgZWxlbWVudHNUb0NoZWNrID0gQXJyYXkuZnJvbShlbGVtZW50cyk7XG4gIHdoaWxlIChlbGVtZW50c1RvQ2hlY2subGVuZ3RoKSB7XG4gICAgdmFyIGVsZW1lbnQgPSBlbGVtZW50c1RvQ2hlY2suc2hpZnQoKTtcbiAgICBpZiAoZWxlbWVudC50YWdOYW1lID09PSBcIlNMT1RcIikge1xuICAgICAgdmFyIGFzc2lnbmVkID0gZWxlbWVudC5hc3NpZ25lZEVsZW1lbnRzKCk7XG4gICAgICB2YXIgY29udGVudCA9IGFzc2lnbmVkLmxlbmd0aCA/IGFzc2lnbmVkIDogZWxlbWVudC5jaGlsZHJlbjtcbiAgICAgIHZhciBuZXN0ZWRDYW5kaWRhdGVzID0gZ2V0Q2FuZGlkYXRlc0l0ZXJhdGl2ZWx5Mihjb250ZW50LCB0cnVlLCBvcHRpb25zKTtcbiAgICAgIGlmIChvcHRpb25zLmZsYXR0ZW4pIHtcbiAgICAgICAgY2FuZGlkYXRlcy5wdXNoLmFwcGx5KGNhbmRpZGF0ZXMsIG5lc3RlZENhbmRpZGF0ZXMpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2FuZGlkYXRlcy5wdXNoKHtcbiAgICAgICAgICBzY29wZTogZWxlbWVudCxcbiAgICAgICAgICBjYW5kaWRhdGVzOiBuZXN0ZWRDYW5kaWRhdGVzXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgdmFsaWRDYW5kaWRhdGUgPSBtYXRjaGVzLmNhbGwoZWxlbWVudCwgY2FuZGlkYXRlU2VsZWN0b3IpO1xuICAgICAgaWYgKHZhbGlkQ2FuZGlkYXRlICYmIG9wdGlvbnMuZmlsdGVyKGVsZW1lbnQpICYmIChpbmNsdWRlQ29udGFpbmVyIHx8ICFlbGVtZW50cy5pbmNsdWRlcyhlbGVtZW50KSkpIHtcbiAgICAgICAgY2FuZGlkYXRlcy5wdXNoKGVsZW1lbnQpO1xuICAgICAgfVxuICAgICAgdmFyIHNoYWRvd1Jvb3QgPSBlbGVtZW50LnNoYWRvd1Jvb3QgfHwgLy8gY2hlY2sgZm9yIGFuIHVuZGlzY2xvc2VkIHNoYWRvd1xuICAgICAgdHlwZW9mIG9wdGlvbnMuZ2V0U2hhZG93Um9vdCA9PT0gXCJmdW5jdGlvblwiICYmIG9wdGlvbnMuZ2V0U2hhZG93Um9vdChlbGVtZW50KTtcbiAgICAgIHZhciB2YWxpZFNoYWRvd1Jvb3QgPSAhb3B0aW9ucy5zaGFkb3dSb290RmlsdGVyIHx8IG9wdGlvbnMuc2hhZG93Um9vdEZpbHRlcihlbGVtZW50KTtcbiAgICAgIGlmIChzaGFkb3dSb290ICYmIHZhbGlkU2hhZG93Um9vdCkge1xuICAgICAgICB2YXIgX25lc3RlZENhbmRpZGF0ZXMgPSBnZXRDYW5kaWRhdGVzSXRlcmF0aXZlbHkyKHNoYWRvd1Jvb3QgPT09IHRydWUgPyBlbGVtZW50LmNoaWxkcmVuIDogc2hhZG93Um9vdC5jaGlsZHJlbiwgdHJ1ZSwgb3B0aW9ucyk7XG4gICAgICAgIGlmIChvcHRpb25zLmZsYXR0ZW4pIHtcbiAgICAgICAgICBjYW5kaWRhdGVzLnB1c2guYXBwbHkoY2FuZGlkYXRlcywgX25lc3RlZENhbmRpZGF0ZXMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNhbmRpZGF0ZXMucHVzaCh7XG4gICAgICAgICAgICBzY29wZTogZWxlbWVudCxcbiAgICAgICAgICAgIGNhbmRpZGF0ZXM6IF9uZXN0ZWRDYW5kaWRhdGVzXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGVsZW1lbnRzVG9DaGVjay51bnNoaWZ0LmFwcGx5KGVsZW1lbnRzVG9DaGVjaywgZWxlbWVudC5jaGlsZHJlbik7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBjYW5kaWRhdGVzO1xufTtcbnZhciBnZXRUYWJpbmRleCA9IGZ1bmN0aW9uIGdldFRhYmluZGV4Mihub2RlLCBpc1Njb3BlKSB7XG4gIGlmIChub2RlLnRhYkluZGV4IDwgMCkge1xuICAgIGlmICgoaXNTY29wZSB8fCAvXihBVURJT3xWSURFT3xERVRBSUxTKSQvLnRlc3Qobm9kZS50YWdOYW1lKSB8fCBub2RlLmlzQ29udGVudEVkaXRhYmxlKSAmJiBpc05hTihwYXJzZUludChub2RlLmdldEF0dHJpYnV0ZShcInRhYmluZGV4XCIpLCAxMCkpKSB7XG4gICAgICByZXR1cm4gMDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG5vZGUudGFiSW5kZXg7XG59O1xudmFyIHNvcnRPcmRlcmVkVGFiYmFibGVzID0gZnVuY3Rpb24gc29ydE9yZGVyZWRUYWJiYWJsZXMyKGEsIGIpIHtcbiAgcmV0dXJuIGEudGFiSW5kZXggPT09IGIudGFiSW5kZXggPyBhLmRvY3VtZW50T3JkZXIgLSBiLmRvY3VtZW50T3JkZXIgOiBhLnRhYkluZGV4IC0gYi50YWJJbmRleDtcbn07XG52YXIgaXNJbnB1dCA9IGZ1bmN0aW9uIGlzSW5wdXQyKG5vZGUpIHtcbiAgcmV0dXJuIG5vZGUudGFnTmFtZSA9PT0gXCJJTlBVVFwiO1xufTtcbnZhciBpc0hpZGRlbklucHV0ID0gZnVuY3Rpb24gaXNIaWRkZW5JbnB1dDIobm9kZSkge1xuICByZXR1cm4gaXNJbnB1dChub2RlKSAmJiBub2RlLnR5cGUgPT09IFwiaGlkZGVuXCI7XG59O1xudmFyIGlzRGV0YWlsc1dpdGhTdW1tYXJ5ID0gZnVuY3Rpb24gaXNEZXRhaWxzV2l0aFN1bW1hcnkyKG5vZGUpIHtcbiAgdmFyIHIgPSBub2RlLnRhZ05hbWUgPT09IFwiREVUQUlMU1wiICYmIEFycmF5LnByb3RvdHlwZS5zbGljZS5hcHBseShub2RlLmNoaWxkcmVuKS5zb21lKGZ1bmN0aW9uKGNoaWxkKSB7XG4gICAgcmV0dXJuIGNoaWxkLnRhZ05hbWUgPT09IFwiU1VNTUFSWVwiO1xuICB9KTtcbiAgcmV0dXJuIHI7XG59O1xudmFyIGdldENoZWNrZWRSYWRpbyA9IGZ1bmN0aW9uIGdldENoZWNrZWRSYWRpbzIobm9kZXMsIGZvcm0pIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBub2Rlcy5sZW5ndGg7IGkrKykge1xuICAgIGlmIChub2Rlc1tpXS5jaGVja2VkICYmIG5vZGVzW2ldLmZvcm0gPT09IGZvcm0pIHtcbiAgICAgIHJldHVybiBub2Rlc1tpXTtcbiAgICB9XG4gIH1cbn07XG52YXIgaXNUYWJiYWJsZVJhZGlvID0gZnVuY3Rpb24gaXNUYWJiYWJsZVJhZGlvMihub2RlKSB7XG4gIGlmICghbm9kZS5uYW1lKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgdmFyIHJhZGlvU2NvcGUgPSBub2RlLmZvcm0gfHwgZ2V0Um9vdE5vZGUobm9kZSk7XG4gIHZhciBxdWVyeVJhZGlvcyA9IGZ1bmN0aW9uIHF1ZXJ5UmFkaW9zMihuYW1lKSB7XG4gICAgcmV0dXJuIHJhZGlvU2NvcGUucXVlcnlTZWxlY3RvckFsbCgnaW5wdXRbdHlwZT1cInJhZGlvXCJdW25hbWU9XCInICsgbmFtZSArICdcIl0nKTtcbiAgfTtcbiAgdmFyIHJhZGlvU2V0O1xuICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiAmJiB0eXBlb2Ygd2luZG93LkNTUyAhPT0gXCJ1bmRlZmluZWRcIiAmJiB0eXBlb2Ygd2luZG93LkNTUy5lc2NhcGUgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIHJhZGlvU2V0ID0gcXVlcnlSYWRpb3Mod2luZG93LkNTUy5lc2NhcGUobm9kZS5uYW1lKSk7XG4gIH0gZWxzZSB7XG4gICAgdHJ5IHtcbiAgICAgIHJhZGlvU2V0ID0gcXVlcnlSYWRpb3Mobm9kZS5uYW1lKTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoXCJMb29rcyBsaWtlIHlvdSBoYXZlIGEgcmFkaW8gYnV0dG9uIHdpdGggYSBuYW1lIGF0dHJpYnV0ZSBjb250YWluaW5nIGludmFsaWQgQ1NTIHNlbGVjdG9yIGNoYXJhY3RlcnMgYW5kIG5lZWQgdGhlIENTUy5lc2NhcGUgcG9seWZpbGw6ICVzXCIsIGVyci5tZXNzYWdlKTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbiAgdmFyIGNoZWNrZWQgPSBnZXRDaGVja2VkUmFkaW8ocmFkaW9TZXQsIG5vZGUuZm9ybSk7XG4gIHJldHVybiAhY2hlY2tlZCB8fCBjaGVja2VkID09PSBub2RlO1xufTtcbnZhciBpc1JhZGlvID0gZnVuY3Rpb24gaXNSYWRpbzIobm9kZSkge1xuICByZXR1cm4gaXNJbnB1dChub2RlKSAmJiBub2RlLnR5cGUgPT09IFwicmFkaW9cIjtcbn07XG52YXIgaXNOb25UYWJiYWJsZVJhZGlvID0gZnVuY3Rpb24gaXNOb25UYWJiYWJsZVJhZGlvMihub2RlKSB7XG4gIHJldHVybiBpc1JhZGlvKG5vZGUpICYmICFpc1RhYmJhYmxlUmFkaW8obm9kZSk7XG59O1xudmFyIGlzWmVyb0FyZWEgPSBmdW5jdGlvbiBpc1plcm9BcmVhMihub2RlKSB7XG4gIHZhciBfbm9kZSRnZXRCb3VuZGluZ0NsaWUgPSBub2RlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLCB3aWR0aCA9IF9ub2RlJGdldEJvdW5kaW5nQ2xpZS53aWR0aCwgaGVpZ2h0ID0gX25vZGUkZ2V0Qm91bmRpbmdDbGllLmhlaWdodDtcbiAgcmV0dXJuIHdpZHRoID09PSAwICYmIGhlaWdodCA9PT0gMDtcbn07XG52YXIgaXNIaWRkZW4gPSBmdW5jdGlvbiBpc0hpZGRlbjIobm9kZSwgX3JlZikge1xuICB2YXIgZGlzcGxheUNoZWNrID0gX3JlZi5kaXNwbGF5Q2hlY2ssIGdldFNoYWRvd1Jvb3QgPSBfcmVmLmdldFNoYWRvd1Jvb3Q7XG4gIGlmIChnZXRDb21wdXRlZFN0eWxlKG5vZGUpLnZpc2liaWxpdHkgPT09IFwiaGlkZGVuXCIpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICB2YXIgaXNEaXJlY3RTdW1tYXJ5ID0gbWF0Y2hlcy5jYWxsKG5vZGUsIFwiZGV0YWlscz5zdW1tYXJ5OmZpcnN0LW9mLXR5cGVcIik7XG4gIHZhciBub2RlVW5kZXJEZXRhaWxzID0gaXNEaXJlY3RTdW1tYXJ5ID8gbm9kZS5wYXJlbnRFbGVtZW50IDogbm9kZTtcbiAgaWYgKG1hdGNoZXMuY2FsbChub2RlVW5kZXJEZXRhaWxzLCBcImRldGFpbHM6bm90KFtvcGVuXSkgKlwiKSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHZhciBub2RlUm9vdEhvc3QgPSBnZXRSb290Tm9kZShub2RlKS5ob3N0O1xuICB2YXIgbm9kZUlzQXR0YWNoZWQgPSAobm9kZVJvb3RIb3N0ID09PSBudWxsIHx8IG5vZGVSb290SG9zdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogbm9kZVJvb3RIb3N0Lm93bmVyRG9jdW1lbnQuY29udGFpbnMobm9kZVJvb3RIb3N0KSkgfHwgbm9kZS5vd25lckRvY3VtZW50LmNvbnRhaW5zKG5vZGUpO1xuICBpZiAoIWRpc3BsYXlDaGVjayB8fCBkaXNwbGF5Q2hlY2sgPT09IFwiZnVsbFwiKSB7XG4gICAgaWYgKHR5cGVvZiBnZXRTaGFkb3dSb290ID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgIHZhciBvcmlnaW5hbE5vZGUgPSBub2RlO1xuICAgICAgd2hpbGUgKG5vZGUpIHtcbiAgICAgICAgdmFyIHBhcmVudEVsZW1lbnQgPSBub2RlLnBhcmVudEVsZW1lbnQ7XG4gICAgICAgIHZhciByb290Tm9kZSA9IGdldFJvb3ROb2RlKG5vZGUpO1xuICAgICAgICBpZiAocGFyZW50RWxlbWVudCAmJiAhcGFyZW50RWxlbWVudC5zaGFkb3dSb290ICYmIGdldFNoYWRvd1Jvb3QocGFyZW50RWxlbWVudCkgPT09IHRydWUpIHtcbiAgICAgICAgICByZXR1cm4gaXNaZXJvQXJlYShub2RlKTtcbiAgICAgICAgfSBlbHNlIGlmIChub2RlLmFzc2lnbmVkU2xvdCkge1xuICAgICAgICAgIG5vZGUgPSBub2RlLmFzc2lnbmVkU2xvdDtcbiAgICAgICAgfSBlbHNlIGlmICghcGFyZW50RWxlbWVudCAmJiByb290Tm9kZSAhPT0gbm9kZS5vd25lckRvY3VtZW50KSB7XG4gICAgICAgICAgbm9kZSA9IHJvb3ROb2RlLmhvc3Q7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbm9kZSA9IHBhcmVudEVsZW1lbnQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIG5vZGUgPSBvcmlnaW5hbE5vZGU7XG4gICAgfVxuICAgIGlmIChub2RlSXNBdHRhY2hlZCkge1xuICAgICAgcmV0dXJuICFub2RlLmdldENsaWVudFJlY3RzKCkubGVuZ3RoO1xuICAgIH1cbiAgfSBlbHNlIGlmIChkaXNwbGF5Q2hlY2sgPT09IFwibm9uLXplcm8tYXJlYVwiKSB7XG4gICAgcmV0dXJuIGlzWmVyb0FyZWEobm9kZSk7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufTtcbnZhciBpc0Rpc2FibGVkRnJvbUZpZWxkc2V0ID0gZnVuY3Rpb24gaXNEaXNhYmxlZEZyb21GaWVsZHNldDIobm9kZSkge1xuICBpZiAoL14oSU5QVVR8QlVUVE9OfFNFTEVDVHxURVhUQVJFQSkkLy50ZXN0KG5vZGUudGFnTmFtZSkpIHtcbiAgICB2YXIgcGFyZW50Tm9kZSA9IG5vZGUucGFyZW50RWxlbWVudDtcbiAgICB3aGlsZSAocGFyZW50Tm9kZSkge1xuICAgICAgaWYgKHBhcmVudE5vZGUudGFnTmFtZSA9PT0gXCJGSUVMRFNFVFwiICYmIHBhcmVudE5vZGUuZGlzYWJsZWQpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwYXJlbnROb2RlLmNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgdmFyIGNoaWxkID0gcGFyZW50Tm9kZS5jaGlsZHJlbi5pdGVtKGkpO1xuICAgICAgICAgIGlmIChjaGlsZC50YWdOYW1lID09PSBcIkxFR0VORFwiKSB7XG4gICAgICAgICAgICByZXR1cm4gbWF0Y2hlcy5jYWxsKHBhcmVudE5vZGUsIFwiZmllbGRzZXRbZGlzYWJsZWRdICpcIikgPyB0cnVlIDogIWNoaWxkLmNvbnRhaW5zKG5vZGUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHBhcmVudE5vZGUgPSBwYXJlbnROb2RlLnBhcmVudEVsZW1lbnQ7XG4gICAgfVxuICB9XG4gIHJldHVybiBmYWxzZTtcbn07XG52YXIgaXNOb2RlTWF0Y2hpbmdTZWxlY3RvckZvY3VzYWJsZSA9IGZ1bmN0aW9uIGlzTm9kZU1hdGNoaW5nU2VsZWN0b3JGb2N1c2FibGUyKG9wdGlvbnMsIG5vZGUpIHtcbiAgaWYgKG5vZGUuZGlzYWJsZWQgfHwgaXNIaWRkZW5JbnB1dChub2RlKSB8fCBpc0hpZGRlbihub2RlLCBvcHRpb25zKSB8fCAvLyBGb3IgYSBkZXRhaWxzIGVsZW1lbnQgd2l0aCBhIHN1bW1hcnksIHRoZSBzdW1tYXJ5IGVsZW1lbnQgZ2V0cyB0aGUgZm9jdXNcbiAgaXNEZXRhaWxzV2l0aFN1bW1hcnkobm9kZSkgfHwgaXNEaXNhYmxlZEZyb21GaWVsZHNldChub2RlKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn07XG52YXIgaXNOb2RlTWF0Y2hpbmdTZWxlY3RvclRhYmJhYmxlID0gZnVuY3Rpb24gaXNOb2RlTWF0Y2hpbmdTZWxlY3RvclRhYmJhYmxlMihvcHRpb25zLCBub2RlKSB7XG4gIGlmIChpc05vblRhYmJhYmxlUmFkaW8obm9kZSkgfHwgZ2V0VGFiaW5kZXgobm9kZSkgPCAwIHx8ICFpc05vZGVNYXRjaGluZ1NlbGVjdG9yRm9jdXNhYmxlKG9wdGlvbnMsIG5vZGUpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiB0cnVlO1xufTtcbnZhciBpc1ZhbGlkU2hhZG93Um9vdFRhYmJhYmxlID0gZnVuY3Rpb24gaXNWYWxpZFNoYWRvd1Jvb3RUYWJiYWJsZTIoc2hhZG93SG9zdE5vZGUpIHtcbiAgdmFyIHRhYkluZGV4ID0gcGFyc2VJbnQoc2hhZG93SG9zdE5vZGUuZ2V0QXR0cmlidXRlKFwidGFiaW5kZXhcIiksIDEwKTtcbiAgaWYgKGlzTmFOKHRhYkluZGV4KSB8fCB0YWJJbmRleCA+PSAwKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufTtcbnZhciBzb3J0QnlPcmRlciA9IGZ1bmN0aW9uIHNvcnRCeU9yZGVyMihjYW5kaWRhdGVzKSB7XG4gIHZhciByZWd1bGFyVGFiYmFibGVzID0gW107XG4gIHZhciBvcmRlcmVkVGFiYmFibGVzID0gW107XG4gIGNhbmRpZGF0ZXMuZm9yRWFjaChmdW5jdGlvbihpdGVtLCBpKSB7XG4gICAgdmFyIGlzU2NvcGUgPSAhIWl0ZW0uc2NvcGU7XG4gICAgdmFyIGVsZW1lbnQgPSBpc1Njb3BlID8gaXRlbS5zY29wZSA6IGl0ZW07XG4gICAgdmFyIGNhbmRpZGF0ZVRhYmluZGV4ID0gZ2V0VGFiaW5kZXgoZWxlbWVudCwgaXNTY29wZSk7XG4gICAgdmFyIGVsZW1lbnRzID0gaXNTY29wZSA/IHNvcnRCeU9yZGVyMihpdGVtLmNhbmRpZGF0ZXMpIDogZWxlbWVudDtcbiAgICBpZiAoY2FuZGlkYXRlVGFiaW5kZXggPT09IDApIHtcbiAgICAgIGlzU2NvcGUgPyByZWd1bGFyVGFiYmFibGVzLnB1c2guYXBwbHkocmVndWxhclRhYmJhYmxlcywgZWxlbWVudHMpIDogcmVndWxhclRhYmJhYmxlcy5wdXNoKGVsZW1lbnQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBvcmRlcmVkVGFiYmFibGVzLnB1c2goe1xuICAgICAgICBkb2N1bWVudE9yZGVyOiBpLFxuICAgICAgICB0YWJJbmRleDogY2FuZGlkYXRlVGFiaW5kZXgsXG4gICAgICAgIGl0ZW0sXG4gICAgICAgIGlzU2NvcGUsXG4gICAgICAgIGNvbnRlbnQ6IGVsZW1lbnRzXG4gICAgICB9KTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gb3JkZXJlZFRhYmJhYmxlcy5zb3J0KHNvcnRPcmRlcmVkVGFiYmFibGVzKS5yZWR1Y2UoZnVuY3Rpb24oYWNjLCBzb3J0YWJsZSkge1xuICAgIHNvcnRhYmxlLmlzU2NvcGUgPyBhY2MucHVzaC5hcHBseShhY2MsIHNvcnRhYmxlLmNvbnRlbnQpIDogYWNjLnB1c2goc29ydGFibGUuY29udGVudCk7XG4gICAgcmV0dXJuIGFjYztcbiAgfSwgW10pLmNvbmNhdChyZWd1bGFyVGFiYmFibGVzKTtcbn07XG52YXIgdGFiYmFibGUgPSBmdW5jdGlvbiB0YWJiYWJsZTIoZWwsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIHZhciBjYW5kaWRhdGVzO1xuICBpZiAob3B0aW9ucy5nZXRTaGFkb3dSb290KSB7XG4gICAgY2FuZGlkYXRlcyA9IGdldENhbmRpZGF0ZXNJdGVyYXRpdmVseShbZWxdLCBvcHRpb25zLmluY2x1ZGVDb250YWluZXIsIHtcbiAgICAgIGZpbHRlcjogaXNOb2RlTWF0Y2hpbmdTZWxlY3RvclRhYmJhYmxlLmJpbmQobnVsbCwgb3B0aW9ucyksXG4gICAgICBmbGF0dGVuOiBmYWxzZSxcbiAgICAgIGdldFNoYWRvd1Jvb3Q6IG9wdGlvbnMuZ2V0U2hhZG93Um9vdCxcbiAgICAgIHNoYWRvd1Jvb3RGaWx0ZXI6IGlzVmFsaWRTaGFkb3dSb290VGFiYmFibGVcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBjYW5kaWRhdGVzID0gZ2V0Q2FuZGlkYXRlcyhlbCwgb3B0aW9ucy5pbmNsdWRlQ29udGFpbmVyLCBpc05vZGVNYXRjaGluZ1NlbGVjdG9yVGFiYmFibGUuYmluZChudWxsLCBvcHRpb25zKSk7XG4gIH1cbiAgcmV0dXJuIHNvcnRCeU9yZGVyKGNhbmRpZGF0ZXMpO1xufTtcbnZhciBmb2N1c2FibGUgPSBmdW5jdGlvbiBmb2N1c2FibGUyKGVsLCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICB2YXIgY2FuZGlkYXRlcztcbiAgaWYgKG9wdGlvbnMuZ2V0U2hhZG93Um9vdCkge1xuICAgIGNhbmRpZGF0ZXMgPSBnZXRDYW5kaWRhdGVzSXRlcmF0aXZlbHkoW2VsXSwgb3B0aW9ucy5pbmNsdWRlQ29udGFpbmVyLCB7XG4gICAgICBmaWx0ZXI6IGlzTm9kZU1hdGNoaW5nU2VsZWN0b3JGb2N1c2FibGUuYmluZChudWxsLCBvcHRpb25zKSxcbiAgICAgIGZsYXR0ZW46IHRydWUsXG4gICAgICBnZXRTaGFkb3dSb290OiBvcHRpb25zLmdldFNoYWRvd1Jvb3RcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBjYW5kaWRhdGVzID0gZ2V0Q2FuZGlkYXRlcyhlbCwgb3B0aW9ucy5pbmNsdWRlQ29udGFpbmVyLCBpc05vZGVNYXRjaGluZ1NlbGVjdG9yRm9jdXNhYmxlLmJpbmQobnVsbCwgb3B0aW9ucykpO1xuICB9XG4gIHJldHVybiBjYW5kaWRhdGVzO1xufTtcbnZhciBpc1RhYmJhYmxlID0gZnVuY3Rpb24gaXNUYWJiYWJsZTIobm9kZSwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgaWYgKCFub2RlKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiTm8gbm9kZSBwcm92aWRlZFwiKTtcbiAgfVxuICBpZiAobWF0Y2hlcy5jYWxsKG5vZGUsIGNhbmRpZGF0ZVNlbGVjdG9yKSA9PT0gZmFsc2UpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIGlzTm9kZU1hdGNoaW5nU2VsZWN0b3JUYWJiYWJsZShvcHRpb25zLCBub2RlKTtcbn07XG52YXIgZm9jdXNhYmxlQ2FuZGlkYXRlU2VsZWN0b3IgPSAvKiBAX19QVVJFX18gKi8gY2FuZGlkYXRlU2VsZWN0b3JzLmNvbmNhdChcImlmcmFtZVwiKS5qb2luKFwiLFwiKTtcbnZhciBpc0ZvY3VzYWJsZSA9IGZ1bmN0aW9uIGlzRm9jdXNhYmxlMihub2RlLCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICBpZiAoIW5vZGUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJObyBub2RlIHByb3ZpZGVkXCIpO1xuICB9XG4gIGlmIChtYXRjaGVzLmNhbGwobm9kZSwgZm9jdXNhYmxlQ2FuZGlkYXRlU2VsZWN0b3IpID09PSBmYWxzZSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICByZXR1cm4gaXNOb2RlTWF0Y2hpbmdTZWxlY3RvckZvY3VzYWJsZShvcHRpb25zLCBub2RlKTtcbn07XG5cbi8vIG5vZGVfbW9kdWxlcy9mb2N1cy10cmFwL2Rpc3QvZm9jdXMtdHJhcC5lc20uanNcbmZ1bmN0aW9uIG93bktleXMob2JqZWN0LCBlbnVtZXJhYmxlT25seSkge1xuICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCk7XG4gIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG4gICAgdmFyIHN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iamVjdCk7XG4gICAgZW51bWVyYWJsZU9ubHkgJiYgKHN5bWJvbHMgPSBzeW1ib2xzLmZpbHRlcihmdW5jdGlvbihzeW0pIHtcbiAgICAgIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgc3ltKS5lbnVtZXJhYmxlO1xuICAgIH0pKSwga2V5cy5wdXNoLmFwcGx5KGtleXMsIHN5bWJvbHMpO1xuICB9XG4gIHJldHVybiBrZXlzO1xufVxuZnVuY3Rpb24gX29iamVjdFNwcmVhZDIodGFyZ2V0KSB7XG4gIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHNvdXJjZSA9IG51bGwgIT0gYXJndW1lbnRzW2ldID8gYXJndW1lbnRzW2ldIDoge307XG4gICAgaSAlIDIgPyBvd25LZXlzKE9iamVjdChzb3VyY2UpLCB0cnVlKS5mb3JFYWNoKGZ1bmN0aW9uKGtleSkge1xuICAgICAgX2RlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7XG4gICAgfSkgOiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoc291cmNlKSkgOiBvd25LZXlzKE9iamVjdChzb3VyY2UpKS5mb3JFYWNoKGZ1bmN0aW9uKGtleSkge1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7XG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIHRhcmdldDtcbn1cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHtcbiAgaWYgKGtleSBpbiBvYmopIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHtcbiAgICAgIHZhbHVlLFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgb2JqW2tleV0gPSB2YWx1ZTtcbiAgfVxuICByZXR1cm4gb2JqO1xufVxudmFyIGFjdGl2ZUZvY3VzVHJhcHMgPSBmdW5jdGlvbigpIHtcbiAgdmFyIHRyYXBRdWV1ZSA9IFtdO1xuICByZXR1cm4ge1xuICAgIGFjdGl2YXRlVHJhcDogZnVuY3Rpb24gYWN0aXZhdGVUcmFwKHRyYXApIHtcbiAgICAgIGlmICh0cmFwUXVldWUubGVuZ3RoID4gMCkge1xuICAgICAgICB2YXIgYWN0aXZlVHJhcCA9IHRyYXBRdWV1ZVt0cmFwUXVldWUubGVuZ3RoIC0gMV07XG4gICAgICAgIGlmIChhY3RpdmVUcmFwICE9PSB0cmFwKSB7XG4gICAgICAgICAgYWN0aXZlVHJhcC5wYXVzZSgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB2YXIgdHJhcEluZGV4ID0gdHJhcFF1ZXVlLmluZGV4T2YodHJhcCk7XG4gICAgICBpZiAodHJhcEluZGV4ID09PSAtMSkge1xuICAgICAgICB0cmFwUXVldWUucHVzaCh0cmFwKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRyYXBRdWV1ZS5zcGxpY2UodHJhcEluZGV4LCAxKTtcbiAgICAgICAgdHJhcFF1ZXVlLnB1c2godHJhcCk7XG4gICAgICB9XG4gICAgfSxcbiAgICBkZWFjdGl2YXRlVHJhcDogZnVuY3Rpb24gZGVhY3RpdmF0ZVRyYXAodHJhcCkge1xuICAgICAgdmFyIHRyYXBJbmRleCA9IHRyYXBRdWV1ZS5pbmRleE9mKHRyYXApO1xuICAgICAgaWYgKHRyYXBJbmRleCAhPT0gLTEpIHtcbiAgICAgICAgdHJhcFF1ZXVlLnNwbGljZSh0cmFwSW5kZXgsIDEpO1xuICAgICAgfVxuICAgICAgaWYgKHRyYXBRdWV1ZS5sZW5ndGggPiAwKSB7XG4gICAgICAgIHRyYXBRdWV1ZVt0cmFwUXVldWUubGVuZ3RoIC0gMV0udW5wYXVzZSgpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbn0oKTtcbnZhciBpc1NlbGVjdGFibGVJbnB1dCA9IGZ1bmN0aW9uIGlzU2VsZWN0YWJsZUlucHV0Mihub2RlKSB7XG4gIHJldHVybiBub2RlLnRhZ05hbWUgJiYgbm9kZS50YWdOYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwiaW5wdXRcIiAmJiB0eXBlb2Ygbm9kZS5zZWxlY3QgPT09IFwiZnVuY3Rpb25cIjtcbn07XG52YXIgaXNFc2NhcGVFdmVudCA9IGZ1bmN0aW9uIGlzRXNjYXBlRXZlbnQyKGUpIHtcbiAgcmV0dXJuIGUua2V5ID09PSBcIkVzY2FwZVwiIHx8IGUua2V5ID09PSBcIkVzY1wiIHx8IGUua2V5Q29kZSA9PT0gMjc7XG59O1xudmFyIGlzVGFiRXZlbnQgPSBmdW5jdGlvbiBpc1RhYkV2ZW50MihlKSB7XG4gIHJldHVybiBlLmtleSA9PT0gXCJUYWJcIiB8fCBlLmtleUNvZGUgPT09IDk7XG59O1xudmFyIGRlbGF5ID0gZnVuY3Rpb24gZGVsYXkyKGZuKSB7XG4gIHJldHVybiBzZXRUaW1lb3V0KGZuLCAwKTtcbn07XG52YXIgZmluZEluZGV4ID0gZnVuY3Rpb24gZmluZEluZGV4MihhcnIsIGZuKSB7XG4gIHZhciBpZHggPSAtMTtcbiAgYXJyLmV2ZXJ5KGZ1bmN0aW9uKHZhbHVlLCBpKSB7XG4gICAgaWYgKGZuKHZhbHVlKSkge1xuICAgICAgaWR4ID0gaTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH0pO1xuICByZXR1cm4gaWR4O1xufTtcbnZhciB2YWx1ZU9ySGFuZGxlciA9IGZ1bmN0aW9uIHZhbHVlT3JIYW5kbGVyMih2YWx1ZSkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgcGFyYW1zID0gbmV3IEFycmF5KF9sZW4gPiAxID8gX2xlbiAtIDEgOiAwKSwgX2tleSA9IDE7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBwYXJhbXNbX2tleSAtIDFdID0gYXJndW1lbnRzW19rZXldO1xuICB9XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIiA/IHZhbHVlLmFwcGx5KHZvaWQgMCwgcGFyYW1zKSA6IHZhbHVlO1xufTtcbnZhciBnZXRBY3R1YWxUYXJnZXQgPSBmdW5jdGlvbiBnZXRBY3R1YWxUYXJnZXQyKGV2ZW50KSB7XG4gIHJldHVybiBldmVudC50YXJnZXQuc2hhZG93Um9vdCAmJiB0eXBlb2YgZXZlbnQuY29tcG9zZWRQYXRoID09PSBcImZ1bmN0aW9uXCIgPyBldmVudC5jb21wb3NlZFBhdGgoKVswXSA6IGV2ZW50LnRhcmdldDtcbn07XG52YXIgY3JlYXRlRm9jdXNUcmFwID0gZnVuY3Rpb24gY3JlYXRlRm9jdXNUcmFwMihlbGVtZW50cywgdXNlck9wdGlvbnMpIHtcbiAgdmFyIGRvYyA9ICh1c2VyT3B0aW9ucyA9PT0gbnVsbCB8fCB1c2VyT3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogdXNlck9wdGlvbnMuZG9jdW1lbnQpIHx8IGRvY3VtZW50O1xuICB2YXIgY29uZmlnID0gX29iamVjdFNwcmVhZDIoe1xuICAgIHJldHVybkZvY3VzT25EZWFjdGl2YXRlOiB0cnVlLFxuICAgIGVzY2FwZURlYWN0aXZhdGVzOiB0cnVlLFxuICAgIGRlbGF5SW5pdGlhbEZvY3VzOiB0cnVlXG4gIH0sIHVzZXJPcHRpb25zKTtcbiAgdmFyIHN0YXRlID0ge1xuICAgIC8vIGNvbnRhaW5lcnMgZ2l2ZW4gdG8gY3JlYXRlRm9jdXNUcmFwKClcbiAgICAvLyBAdHlwZSB7QXJyYXk8SFRNTEVsZW1lbnQ+fVxuICAgIGNvbnRhaW5lcnM6IFtdLFxuICAgIC8vIGxpc3Qgb2Ygb2JqZWN0cyBpZGVudGlmeWluZyB0YWJiYWJsZSBub2RlcyBpbiBgY29udGFpbmVyc2AgaW4gdGhlIHRyYXBcbiAgICAvLyBOT1RFOiBpdCdzIHBvc3NpYmxlIHRoYXQgYSBncm91cCBoYXMgbm8gdGFiYmFibGUgbm9kZXMgaWYgbm9kZXMgZ2V0IHJlbW92ZWQgd2hpbGUgdGhlIHRyYXBcbiAgICAvLyAgaXMgYWN0aXZlLCBidXQgdGhlIHRyYXAgc2hvdWxkIG5ldmVyIGdldCB0byBhIHN0YXRlIHdoZXJlIHRoZXJlIGlzbid0IGF0IGxlYXN0IG9uZSBncm91cFxuICAgIC8vICB3aXRoIGF0IGxlYXN0IG9uZSB0YWJiYWJsZSBub2RlIGluIGl0ICh0aGF0IHdvdWxkIGxlYWQgdG8gYW4gZXJyb3IgY29uZGl0aW9uIHRoYXQgd291bGRcbiAgICAvLyAgcmVzdWx0IGluIGFuIGVycm9yIGJlaW5nIHRocm93bilcbiAgICAvLyBAdHlwZSB7QXJyYXk8e1xuICAgIC8vICAgY29udGFpbmVyOiBIVE1MRWxlbWVudCxcbiAgICAvLyAgIHRhYmJhYmxlTm9kZXM6IEFycmF5PEhUTUxFbGVtZW50PiwgLy8gZW1wdHkgaWYgbm9uZVxuICAgIC8vICAgZm9jdXNhYmxlTm9kZXM6IEFycmF5PEhUTUxFbGVtZW50PiwgLy8gZW1wdHkgaWYgbm9uZVxuICAgIC8vICAgZmlyc3RUYWJiYWJsZU5vZGU6IEhUTUxFbGVtZW50fG51bGwsXG4gICAgLy8gICBsYXN0VGFiYmFibGVOb2RlOiBIVE1MRWxlbWVudHxudWxsLFxuICAgIC8vICAgbmV4dFRhYmJhYmxlTm9kZTogKG5vZGU6IEhUTUxFbGVtZW50LCBmb3J3YXJkOiBib29sZWFuKSA9PiBIVE1MRWxlbWVudHx1bmRlZmluZWRcbiAgICAvLyB9Pn1cbiAgICBjb250YWluZXJHcm91cHM6IFtdLFxuICAgIC8vIHNhbWUgb3JkZXIvbGVuZ3RoIGFzIGBjb250YWluZXJzYCBsaXN0XG4gICAgLy8gcmVmZXJlbmNlcyB0byBvYmplY3RzIGluIGBjb250YWluZXJHcm91cHNgLCBidXQgb25seSB0aG9zZSB0aGF0IGFjdHVhbGx5IGhhdmVcbiAgICAvLyAgdGFiYmFibGUgbm9kZXMgaW4gdGhlbVxuICAgIC8vIE5PVEU6IHNhbWUgb3JkZXIgYXMgYGNvbnRhaW5lcnNgIGFuZCBgY29udGFpbmVyR3JvdXBzYCwgYnV0IF9fbm90IG5lY2Vzc2FyaWx5X19cbiAgICAvLyAgdGhlIHNhbWUgbGVuZ3RoXG4gICAgdGFiYmFibGVHcm91cHM6IFtdLFxuICAgIG5vZGVGb2N1c2VkQmVmb3JlQWN0aXZhdGlvbjogbnVsbCxcbiAgICBtb3N0UmVjZW50bHlGb2N1c2VkTm9kZTogbnVsbCxcbiAgICBhY3RpdmU6IGZhbHNlLFxuICAgIHBhdXNlZDogZmFsc2UsXG4gICAgLy8gdGltZXIgSUQgZm9yIHdoZW4gZGVsYXlJbml0aWFsRm9jdXMgaXMgdHJ1ZSBhbmQgaW5pdGlhbCBmb2N1cyBpbiB0aGlzIHRyYXBcbiAgICAvLyAgaGFzIGJlZW4gZGVsYXllZCBkdXJpbmcgYWN0aXZhdGlvblxuICAgIGRlbGF5SW5pdGlhbEZvY3VzVGltZXI6IHZvaWQgMFxuICB9O1xuICB2YXIgdHJhcDtcbiAgdmFyIGdldE9wdGlvbiA9IGZ1bmN0aW9uIGdldE9wdGlvbjIoY29uZmlnT3ZlcnJpZGVPcHRpb25zLCBvcHRpb25OYW1lLCBjb25maWdPcHRpb25OYW1lKSB7XG4gICAgcmV0dXJuIGNvbmZpZ092ZXJyaWRlT3B0aW9ucyAmJiBjb25maWdPdmVycmlkZU9wdGlvbnNbb3B0aW9uTmFtZV0gIT09IHZvaWQgMCA/IGNvbmZpZ092ZXJyaWRlT3B0aW9uc1tvcHRpb25OYW1lXSA6IGNvbmZpZ1tjb25maWdPcHRpb25OYW1lIHx8IG9wdGlvbk5hbWVdO1xuICB9O1xuICB2YXIgZmluZENvbnRhaW5lckluZGV4ID0gZnVuY3Rpb24gZmluZENvbnRhaW5lckluZGV4MihlbGVtZW50KSB7XG4gICAgcmV0dXJuIHN0YXRlLmNvbnRhaW5lckdyb3Vwcy5maW5kSW5kZXgoZnVuY3Rpb24oX3JlZikge1xuICAgICAgdmFyIGNvbnRhaW5lciA9IF9yZWYuY29udGFpbmVyLCB0YWJiYWJsZU5vZGVzID0gX3JlZi50YWJiYWJsZU5vZGVzO1xuICAgICAgcmV0dXJuIGNvbnRhaW5lci5jb250YWlucyhlbGVtZW50KSB8fCAvLyBmYWxsIGJhY2sgdG8gZXhwbGljaXQgdGFiYmFibGUgc2VhcmNoIHdoaWNoIHdpbGwgdGFrZSBpbnRvIGNvbnNpZGVyYXRpb24gYW55XG4gICAgICAvLyAgd2ViIGNvbXBvbmVudHMgaWYgdGhlIGB0YWJiYWJsZU9wdGlvbnMuZ2V0U2hhZG93Um9vdGAgb3B0aW9uIHdhcyB1c2VkIGZvclxuICAgICAgLy8gIHRoZSB0cmFwLCBlbmFibGluZyBzaGFkb3cgRE9NIHN1cHBvcnQgaW4gdGFiYmFibGUgKGBOb2RlLmNvbnRhaW5zKClgIGRvZXNuJ3RcbiAgICAgIC8vICBsb29rIGluc2lkZSB3ZWIgY29tcG9uZW50cyBldmVuIGlmIG9wZW4pXG4gICAgICB0YWJiYWJsZU5vZGVzLmZpbmQoZnVuY3Rpb24obm9kZSkge1xuICAgICAgICByZXR1cm4gbm9kZSA9PT0gZWxlbWVudDtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9O1xuICB2YXIgZ2V0Tm9kZUZvck9wdGlvbiA9IGZ1bmN0aW9uIGdldE5vZGVGb3JPcHRpb24yKG9wdGlvbk5hbWUpIHtcbiAgICB2YXIgb3B0aW9uVmFsdWUgPSBjb25maWdbb3B0aW9uTmFtZV07XG4gICAgaWYgKHR5cGVvZiBvcHRpb25WYWx1ZSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICBmb3IgKHZhciBfbGVuMiA9IGFyZ3VtZW50cy5sZW5ndGgsIHBhcmFtcyA9IG5ldyBBcnJheShfbGVuMiA+IDEgPyBfbGVuMiAtIDEgOiAwKSwgX2tleTIgPSAxOyBfa2V5MiA8IF9sZW4yOyBfa2V5MisrKSB7XG4gICAgICAgIHBhcmFtc1tfa2V5MiAtIDFdID0gYXJndW1lbnRzW19rZXkyXTtcbiAgICAgIH1cbiAgICAgIG9wdGlvblZhbHVlID0gb3B0aW9uVmFsdWUuYXBwbHkodm9pZCAwLCBwYXJhbXMpO1xuICAgIH1cbiAgICBpZiAob3B0aW9uVmFsdWUgPT09IHRydWUpIHtcbiAgICAgIG9wdGlvblZhbHVlID0gdm9pZCAwO1xuICAgIH1cbiAgICBpZiAoIW9wdGlvblZhbHVlKSB7XG4gICAgICBpZiAob3B0aW9uVmFsdWUgPT09IHZvaWQgMCB8fCBvcHRpb25WYWx1ZSA9PT0gZmFsc2UpIHtcbiAgICAgICAgcmV0dXJuIG9wdGlvblZhbHVlO1xuICAgICAgfVxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiYFwiLmNvbmNhdChvcHRpb25OYW1lLCBcImAgd2FzIHNwZWNpZmllZCBidXQgd2FzIG5vdCBhIG5vZGUsIG9yIGRpZCBub3QgcmV0dXJuIGEgbm9kZVwiKSk7XG4gICAgfVxuICAgIHZhciBub2RlID0gb3B0aW9uVmFsdWU7XG4gICAgaWYgKHR5cGVvZiBvcHRpb25WYWx1ZSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgbm9kZSA9IGRvYy5xdWVyeVNlbGVjdG9yKG9wdGlvblZhbHVlKTtcbiAgICAgIGlmICghbm9kZSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJgXCIuY29uY2F0KG9wdGlvbk5hbWUsIFwiYCBhcyBzZWxlY3RvciByZWZlcnMgdG8gbm8ga25vd24gbm9kZVwiKSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBub2RlO1xuICB9O1xuICB2YXIgZ2V0SW5pdGlhbEZvY3VzTm9kZSA9IGZ1bmN0aW9uIGdldEluaXRpYWxGb2N1c05vZGUyKCkge1xuICAgIHZhciBub2RlID0gZ2V0Tm9kZUZvck9wdGlvbihcImluaXRpYWxGb2N1c1wiKTtcbiAgICBpZiAobm9kZSA9PT0gZmFsc2UpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKG5vZGUgPT09IHZvaWQgMCkge1xuICAgICAgaWYgKGZpbmRDb250YWluZXJJbmRleChkb2MuYWN0aXZlRWxlbWVudCkgPj0gMCkge1xuICAgICAgICBub2RlID0gZG9jLmFjdGl2ZUVsZW1lbnQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgZmlyc3RUYWJiYWJsZUdyb3VwID0gc3RhdGUudGFiYmFibGVHcm91cHNbMF07XG4gICAgICAgIHZhciBmaXJzdFRhYmJhYmxlTm9kZSA9IGZpcnN0VGFiYmFibGVHcm91cCAmJiBmaXJzdFRhYmJhYmxlR3JvdXAuZmlyc3RUYWJiYWJsZU5vZGU7XG4gICAgICAgIG5vZGUgPSBmaXJzdFRhYmJhYmxlTm9kZSB8fCBnZXROb2RlRm9yT3B0aW9uKFwiZmFsbGJhY2tGb2N1c1wiKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKCFub2RlKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJZb3VyIGZvY3VzLXRyYXAgbmVlZHMgdG8gaGF2ZSBhdCBsZWFzdCBvbmUgZm9jdXNhYmxlIGVsZW1lbnRcIik7XG4gICAgfVxuICAgIHJldHVybiBub2RlO1xuICB9O1xuICB2YXIgdXBkYXRlVGFiYmFibGVOb2RlcyA9IGZ1bmN0aW9uIHVwZGF0ZVRhYmJhYmxlTm9kZXMyKCkge1xuICAgIHN0YXRlLmNvbnRhaW5lckdyb3VwcyA9IHN0YXRlLmNvbnRhaW5lcnMubWFwKGZ1bmN0aW9uKGNvbnRhaW5lcikge1xuICAgICAgdmFyIHRhYmJhYmxlTm9kZXMgPSB0YWJiYWJsZShjb250YWluZXIsIGNvbmZpZy50YWJiYWJsZU9wdGlvbnMpO1xuICAgICAgdmFyIGZvY3VzYWJsZU5vZGVzID0gZm9jdXNhYmxlKGNvbnRhaW5lciwgY29uZmlnLnRhYmJhYmxlT3B0aW9ucyk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBjb250YWluZXIsXG4gICAgICAgIHRhYmJhYmxlTm9kZXMsXG4gICAgICAgIGZvY3VzYWJsZU5vZGVzLFxuICAgICAgICBmaXJzdFRhYmJhYmxlTm9kZTogdGFiYmFibGVOb2Rlcy5sZW5ndGggPiAwID8gdGFiYmFibGVOb2Rlc1swXSA6IG51bGwsXG4gICAgICAgIGxhc3RUYWJiYWJsZU5vZGU6IHRhYmJhYmxlTm9kZXMubGVuZ3RoID4gMCA/IHRhYmJhYmxlTm9kZXNbdGFiYmFibGVOb2Rlcy5sZW5ndGggLSAxXSA6IG51bGwsXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBGaW5kcyB0aGUgX190YWJiYWJsZV9fIG5vZGUgdGhhdCBmb2xsb3dzIHRoZSBnaXZlbiBub2RlIGluIHRoZSBzcGVjaWZpZWQgZGlyZWN0aW9uLFxuICAgICAgICAgKiAgaW4gdGhpcyBjb250YWluZXIsIGlmIGFueS5cbiAgICAgICAgICogQHBhcmFtIHtIVE1MRWxlbWVudH0gbm9kZVxuICAgICAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtmb3J3YXJkXSBUcnVlIGlmIGdvaW5nIGluIGZvcndhcmQgdGFiIG9yZGVyOyBmYWxzZSBpZiBnb2luZ1xuICAgICAgICAgKiAgaW4gcmV2ZXJzZS5cbiAgICAgICAgICogQHJldHVybnMge0hUTUxFbGVtZW50fHVuZGVmaW5lZH0gVGhlIG5leHQgdGFiYmFibGUgbm9kZSwgaWYgYW55LlxuICAgICAgICAgKi9cbiAgICAgICAgbmV4dFRhYmJhYmxlTm9kZTogZnVuY3Rpb24gbmV4dFRhYmJhYmxlTm9kZShub2RlKSB7XG4gICAgICAgICAgdmFyIGZvcndhcmQgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHZvaWQgMCA/IGFyZ3VtZW50c1sxXSA6IHRydWU7XG4gICAgICAgICAgdmFyIG5vZGVJZHggPSBmb2N1c2FibGVOb2Rlcy5maW5kSW5kZXgoZnVuY3Rpb24obikge1xuICAgICAgICAgICAgcmV0dXJuIG4gPT09IG5vZGU7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgaWYgKG5vZGVJZHggPCAwKSB7XG4gICAgICAgICAgICByZXR1cm4gdm9pZCAwO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoZm9yd2FyZCkge1xuICAgICAgICAgICAgcmV0dXJuIGZvY3VzYWJsZU5vZGVzLnNsaWNlKG5vZGVJZHggKyAxKS5maW5kKGZ1bmN0aW9uKG4pIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGlzVGFiYmFibGUobiwgY29uZmlnLnRhYmJhYmxlT3B0aW9ucyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGZvY3VzYWJsZU5vZGVzLnNsaWNlKDAsIG5vZGVJZHgpLnJldmVyc2UoKS5maW5kKGZ1bmN0aW9uKG4pIHtcbiAgICAgICAgICAgIHJldHVybiBpc1RhYmJhYmxlKG4sIGNvbmZpZy50YWJiYWJsZU9wdGlvbnMpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH0pO1xuICAgIHN0YXRlLnRhYmJhYmxlR3JvdXBzID0gc3RhdGUuY29udGFpbmVyR3JvdXBzLmZpbHRlcihmdW5jdGlvbihncm91cCkge1xuICAgICAgcmV0dXJuIGdyb3VwLnRhYmJhYmxlTm9kZXMubGVuZ3RoID4gMDtcbiAgICB9KTtcbiAgICBpZiAoc3RhdGUudGFiYmFibGVHcm91cHMubGVuZ3RoIDw9IDAgJiYgIWdldE5vZGVGb3JPcHRpb24oXCJmYWxsYmFja0ZvY3VzXCIpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJZb3VyIGZvY3VzLXRyYXAgbXVzdCBoYXZlIGF0IGxlYXN0IG9uZSBjb250YWluZXIgd2l0aCBhdCBsZWFzdCBvbmUgdGFiYmFibGUgbm9kZSBpbiBpdCBhdCBhbGwgdGltZXNcIik7XG4gICAgfVxuICB9O1xuICB2YXIgdHJ5Rm9jdXMgPSBmdW5jdGlvbiB0cnlGb2N1czIobm9kZSkge1xuICAgIGlmIChub2RlID09PSBmYWxzZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAobm9kZSA9PT0gZG9jLmFjdGl2ZUVsZW1lbnQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKCFub2RlIHx8ICFub2RlLmZvY3VzKSB7XG4gICAgICB0cnlGb2N1czIoZ2V0SW5pdGlhbEZvY3VzTm9kZSgpKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgbm9kZS5mb2N1cyh7XG4gICAgICBwcmV2ZW50U2Nyb2xsOiAhIWNvbmZpZy5wcmV2ZW50U2Nyb2xsXG4gICAgfSk7XG4gICAgc3RhdGUubW9zdFJlY2VudGx5Rm9jdXNlZE5vZGUgPSBub2RlO1xuICAgIGlmIChpc1NlbGVjdGFibGVJbnB1dChub2RlKSkge1xuICAgICAgbm9kZS5zZWxlY3QoKTtcbiAgICB9XG4gIH07XG4gIHZhciBnZXRSZXR1cm5Gb2N1c05vZGUgPSBmdW5jdGlvbiBnZXRSZXR1cm5Gb2N1c05vZGUyKHByZXZpb3VzQWN0aXZlRWxlbWVudCkge1xuICAgIHZhciBub2RlID0gZ2V0Tm9kZUZvck9wdGlvbihcInNldFJldHVybkZvY3VzXCIsIHByZXZpb3VzQWN0aXZlRWxlbWVudCk7XG4gICAgcmV0dXJuIG5vZGUgPyBub2RlIDogbm9kZSA9PT0gZmFsc2UgPyBmYWxzZSA6IHByZXZpb3VzQWN0aXZlRWxlbWVudDtcbiAgfTtcbiAgdmFyIGNoZWNrUG9pbnRlckRvd24gPSBmdW5jdGlvbiBjaGVja1BvaW50ZXJEb3duMihlKSB7XG4gICAgdmFyIHRhcmdldCA9IGdldEFjdHVhbFRhcmdldChlKTtcbiAgICBpZiAoZmluZENvbnRhaW5lckluZGV4KHRhcmdldCkgPj0gMCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAodmFsdWVPckhhbmRsZXIoY29uZmlnLmNsaWNrT3V0c2lkZURlYWN0aXZhdGVzLCBlKSkge1xuICAgICAgdHJhcC5kZWFjdGl2YXRlKHtcbiAgICAgICAgLy8gaWYsIG9uIGRlYWN0aXZhdGlvbiwgd2Ugc2hvdWxkIHJldHVybiBmb2N1cyB0byB0aGUgbm9kZSBvcmlnaW5hbGx5LWZvY3VzZWRcbiAgICAgICAgLy8gIHdoZW4gdGhlIHRyYXAgd2FzIGFjdGl2YXRlZCAob3IgdGhlIGNvbmZpZ3VyZWQgYHNldFJldHVybkZvY3VzYCBub2RlKSxcbiAgICAgICAgLy8gIHRoZW4gYXNzdW1lIGl0J3MgYWxzbyBPSyB0byByZXR1cm4gZm9jdXMgdG8gdGhlIG91dHNpZGUgbm9kZSB0aGF0IHdhc1xuICAgICAgICAvLyAganVzdCBjbGlja2VkLCBjYXVzaW5nIGRlYWN0aXZhdGlvbiwgYXMgbG9uZyBhcyB0aGF0IG5vZGUgaXMgZm9jdXNhYmxlO1xuICAgICAgICAvLyAgaWYgaXQgaXNuJ3QgZm9jdXNhYmxlLCB0aGVuIHJldHVybiBmb2N1cyB0byB0aGUgb3JpZ2luYWwgbm9kZSBmb2N1c2VkXG4gICAgICAgIC8vICBvbiBhY3RpdmF0aW9uIChvciB0aGUgY29uZmlndXJlZCBgc2V0UmV0dXJuRm9jdXNgIG5vZGUpXG4gICAgICAgIC8vIE5PVEU6IGJ5IHNldHRpbmcgYHJldHVybkZvY3VzOiBmYWxzZWAsIGRlYWN0aXZhdGUoKSB3aWxsIGRvIG5vdGhpbmcsXG4gICAgICAgIC8vICB3aGljaCB3aWxsIHJlc3VsdCBpbiB0aGUgb3V0c2lkZSBjbGljayBzZXR0aW5nIGZvY3VzIHRvIHRoZSBub2RlXG4gICAgICAgIC8vICB0aGF0IHdhcyBjbGlja2VkLCB3aGV0aGVyIGl0J3MgZm9jdXNhYmxlIG9yIG5vdDsgYnkgc2V0dGluZ1xuICAgICAgICAvLyAgYHJldHVybkZvY3VzOiB0cnVlYCwgd2UnbGwgYXR0ZW1wdCB0byByZS1mb2N1cyB0aGUgbm9kZSBvcmlnaW5hbGx5LWZvY3VzZWRcbiAgICAgICAgLy8gIG9uIGFjdGl2YXRpb24gKG9yIHRoZSBjb25maWd1cmVkIGBzZXRSZXR1cm5Gb2N1c2Agbm9kZSlcbiAgICAgICAgcmV0dXJuRm9jdXM6IGNvbmZpZy5yZXR1cm5Gb2N1c09uRGVhY3RpdmF0ZSAmJiAhaXNGb2N1c2FibGUodGFyZ2V0LCBjb25maWcudGFiYmFibGVPcHRpb25zKVxuICAgICAgfSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICh2YWx1ZU9ySGFuZGxlcihjb25maWcuYWxsb3dPdXRzaWRlQ2xpY2ssIGUpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgfTtcbiAgdmFyIGNoZWNrRm9jdXNJbiA9IGZ1bmN0aW9uIGNoZWNrRm9jdXNJbjIoZSkge1xuICAgIHZhciB0YXJnZXQgPSBnZXRBY3R1YWxUYXJnZXQoZSk7XG4gICAgdmFyIHRhcmdldENvbnRhaW5lZCA9IGZpbmRDb250YWluZXJJbmRleCh0YXJnZXQpID49IDA7XG4gICAgaWYgKHRhcmdldENvbnRhaW5lZCB8fCB0YXJnZXQgaW5zdGFuY2VvZiBEb2N1bWVudCkge1xuICAgICAgaWYgKHRhcmdldENvbnRhaW5lZCkge1xuICAgICAgICBzdGF0ZS5tb3N0UmVjZW50bHlGb2N1c2VkTm9kZSA9IHRhcmdldDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcbiAgICAgIHRyeUZvY3VzKHN0YXRlLm1vc3RSZWNlbnRseUZvY3VzZWROb2RlIHx8IGdldEluaXRpYWxGb2N1c05vZGUoKSk7XG4gICAgfVxuICB9O1xuICB2YXIgY2hlY2tUYWIgPSBmdW5jdGlvbiBjaGVja1RhYjIoZSkge1xuICAgIHZhciB0YXJnZXQgPSBnZXRBY3R1YWxUYXJnZXQoZSk7XG4gICAgdXBkYXRlVGFiYmFibGVOb2RlcygpO1xuICAgIHZhciBkZXN0aW5hdGlvbk5vZGUgPSBudWxsO1xuICAgIGlmIChzdGF0ZS50YWJiYWJsZUdyb3Vwcy5sZW5ndGggPiAwKSB7XG4gICAgICB2YXIgY29udGFpbmVySW5kZXggPSBmaW5kQ29udGFpbmVySW5kZXgodGFyZ2V0KTtcbiAgICAgIHZhciBjb250YWluZXJHcm91cCA9IGNvbnRhaW5lckluZGV4ID49IDAgPyBzdGF0ZS5jb250YWluZXJHcm91cHNbY29udGFpbmVySW5kZXhdIDogdm9pZCAwO1xuICAgICAgaWYgKGNvbnRhaW5lckluZGV4IDwgMCkge1xuICAgICAgICBpZiAoZS5zaGlmdEtleSkge1xuICAgICAgICAgIGRlc3RpbmF0aW9uTm9kZSA9IHN0YXRlLnRhYmJhYmxlR3JvdXBzW3N0YXRlLnRhYmJhYmxlR3JvdXBzLmxlbmd0aCAtIDFdLmxhc3RUYWJiYWJsZU5vZGU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZGVzdGluYXRpb25Ob2RlID0gc3RhdGUudGFiYmFibGVHcm91cHNbMF0uZmlyc3RUYWJiYWJsZU5vZGU7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoZS5zaGlmdEtleSkge1xuICAgICAgICB2YXIgc3RhcnRPZkdyb3VwSW5kZXggPSBmaW5kSW5kZXgoc3RhdGUudGFiYmFibGVHcm91cHMsIGZ1bmN0aW9uKF9yZWYyKSB7XG4gICAgICAgICAgdmFyIGZpcnN0VGFiYmFibGVOb2RlID0gX3JlZjIuZmlyc3RUYWJiYWJsZU5vZGU7XG4gICAgICAgICAgcmV0dXJuIHRhcmdldCA9PT0gZmlyc3RUYWJiYWJsZU5vZGU7XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoc3RhcnRPZkdyb3VwSW5kZXggPCAwICYmIChjb250YWluZXJHcm91cC5jb250YWluZXIgPT09IHRhcmdldCB8fCBpc0ZvY3VzYWJsZSh0YXJnZXQsIGNvbmZpZy50YWJiYWJsZU9wdGlvbnMpICYmICFpc1RhYmJhYmxlKHRhcmdldCwgY29uZmlnLnRhYmJhYmxlT3B0aW9ucykgJiYgIWNvbnRhaW5lckdyb3VwLm5leHRUYWJiYWJsZU5vZGUodGFyZ2V0LCBmYWxzZSkpKSB7XG4gICAgICAgICAgc3RhcnRPZkdyb3VwSW5kZXggPSBjb250YWluZXJJbmRleDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc3RhcnRPZkdyb3VwSW5kZXggPj0gMCkge1xuICAgICAgICAgIHZhciBkZXN0aW5hdGlvbkdyb3VwSW5kZXggPSBzdGFydE9mR3JvdXBJbmRleCA9PT0gMCA/IHN0YXRlLnRhYmJhYmxlR3JvdXBzLmxlbmd0aCAtIDEgOiBzdGFydE9mR3JvdXBJbmRleCAtIDE7XG4gICAgICAgICAgdmFyIGRlc3RpbmF0aW9uR3JvdXAgPSBzdGF0ZS50YWJiYWJsZUdyb3Vwc1tkZXN0aW5hdGlvbkdyb3VwSW5kZXhdO1xuICAgICAgICAgIGRlc3RpbmF0aW9uTm9kZSA9IGRlc3RpbmF0aW9uR3JvdXAubGFzdFRhYmJhYmxlTm9kZTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIGxhc3RPZkdyb3VwSW5kZXggPSBmaW5kSW5kZXgoc3RhdGUudGFiYmFibGVHcm91cHMsIGZ1bmN0aW9uKF9yZWYzKSB7XG4gICAgICAgICAgdmFyIGxhc3RUYWJiYWJsZU5vZGUgPSBfcmVmMy5sYXN0VGFiYmFibGVOb2RlO1xuICAgICAgICAgIHJldHVybiB0YXJnZXQgPT09IGxhc3RUYWJiYWJsZU5vZGU7XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAobGFzdE9mR3JvdXBJbmRleCA8IDAgJiYgKGNvbnRhaW5lckdyb3VwLmNvbnRhaW5lciA9PT0gdGFyZ2V0IHx8IGlzRm9jdXNhYmxlKHRhcmdldCwgY29uZmlnLnRhYmJhYmxlT3B0aW9ucykgJiYgIWlzVGFiYmFibGUodGFyZ2V0LCBjb25maWcudGFiYmFibGVPcHRpb25zKSAmJiAhY29udGFpbmVyR3JvdXAubmV4dFRhYmJhYmxlTm9kZSh0YXJnZXQpKSkge1xuICAgICAgICAgIGxhc3RPZkdyb3VwSW5kZXggPSBjb250YWluZXJJbmRleDtcbiAgICAgICAgfVxuICAgICAgICBpZiAobGFzdE9mR3JvdXBJbmRleCA+PSAwKSB7XG4gICAgICAgICAgdmFyIF9kZXN0aW5hdGlvbkdyb3VwSW5kZXggPSBsYXN0T2ZHcm91cEluZGV4ID09PSBzdGF0ZS50YWJiYWJsZUdyb3Vwcy5sZW5ndGggLSAxID8gMCA6IGxhc3RPZkdyb3VwSW5kZXggKyAxO1xuICAgICAgICAgIHZhciBfZGVzdGluYXRpb25Hcm91cCA9IHN0YXRlLnRhYmJhYmxlR3JvdXBzW19kZXN0aW5hdGlvbkdyb3VwSW5kZXhdO1xuICAgICAgICAgIGRlc3RpbmF0aW9uTm9kZSA9IF9kZXN0aW5hdGlvbkdyb3VwLmZpcnN0VGFiYmFibGVOb2RlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGRlc3RpbmF0aW9uTm9kZSA9IGdldE5vZGVGb3JPcHRpb24oXCJmYWxsYmFja0ZvY3VzXCIpO1xuICAgIH1cbiAgICBpZiAoZGVzdGluYXRpb25Ob2RlKSB7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICB0cnlGb2N1cyhkZXN0aW5hdGlvbk5vZGUpO1xuICAgIH1cbiAgfTtcbiAgdmFyIGNoZWNrS2V5ID0gZnVuY3Rpb24gY2hlY2tLZXkyKGUpIHtcbiAgICBpZiAoaXNFc2NhcGVFdmVudChlKSAmJiB2YWx1ZU9ySGFuZGxlcihjb25maWcuZXNjYXBlRGVhY3RpdmF0ZXMsIGUpICE9PSBmYWxzZSkge1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgdHJhcC5kZWFjdGl2YXRlKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChpc1RhYkV2ZW50KGUpKSB7XG4gICAgICBjaGVja1RhYihlKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gIH07XG4gIHZhciBjaGVja0NsaWNrID0gZnVuY3Rpb24gY2hlY2tDbGljazIoZSkge1xuICAgIHZhciB0YXJnZXQgPSBnZXRBY3R1YWxUYXJnZXQoZSk7XG4gICAgaWYgKGZpbmRDb250YWluZXJJbmRleCh0YXJnZXQpID49IDApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKHZhbHVlT3JIYW5kbGVyKGNvbmZpZy5jbGlja091dHNpZGVEZWFjdGl2YXRlcywgZSkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKHZhbHVlT3JIYW5kbGVyKGNvbmZpZy5hbGxvd091dHNpZGVDbGljaywgZSkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG4gIH07XG4gIHZhciBhZGRMaXN0ZW5lcnMgPSBmdW5jdGlvbiBhZGRMaXN0ZW5lcnMyKCkge1xuICAgIGlmICghc3RhdGUuYWN0aXZlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGFjdGl2ZUZvY3VzVHJhcHMuYWN0aXZhdGVUcmFwKHRyYXApO1xuICAgIHN0YXRlLmRlbGF5SW5pdGlhbEZvY3VzVGltZXIgPSBjb25maWcuZGVsYXlJbml0aWFsRm9jdXMgPyBkZWxheShmdW5jdGlvbigpIHtcbiAgICAgIHRyeUZvY3VzKGdldEluaXRpYWxGb2N1c05vZGUoKSk7XG4gICAgfSkgOiB0cnlGb2N1cyhnZXRJbml0aWFsRm9jdXNOb2RlKCkpO1xuICAgIGRvYy5hZGRFdmVudExpc3RlbmVyKFwiZm9jdXNpblwiLCBjaGVja0ZvY3VzSW4sIHRydWUpO1xuICAgIGRvYy5hZGRFdmVudExpc3RlbmVyKFwibW91c2Vkb3duXCIsIGNoZWNrUG9pbnRlckRvd24sIHtcbiAgICAgIGNhcHR1cmU6IHRydWUsXG4gICAgICBwYXNzaXZlOiBmYWxzZVxuICAgIH0pO1xuICAgIGRvYy5hZGRFdmVudExpc3RlbmVyKFwidG91Y2hzdGFydFwiLCBjaGVja1BvaW50ZXJEb3duLCB7XG4gICAgICBjYXB0dXJlOiB0cnVlLFxuICAgICAgcGFzc2l2ZTogZmFsc2VcbiAgICB9KTtcbiAgICBkb2MuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGNoZWNrQ2xpY2ssIHtcbiAgICAgIGNhcHR1cmU6IHRydWUsXG4gICAgICBwYXNzaXZlOiBmYWxzZVxuICAgIH0pO1xuICAgIGRvYy5hZGRFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLCBjaGVja0tleSwge1xuICAgICAgY2FwdHVyZTogdHJ1ZSxcbiAgICAgIHBhc3NpdmU6IGZhbHNlXG4gICAgfSk7XG4gICAgcmV0dXJuIHRyYXA7XG4gIH07XG4gIHZhciByZW1vdmVMaXN0ZW5lcnMgPSBmdW5jdGlvbiByZW1vdmVMaXN0ZW5lcnMyKCkge1xuICAgIGlmICghc3RhdGUuYWN0aXZlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGRvYy5yZW1vdmVFdmVudExpc3RlbmVyKFwiZm9jdXNpblwiLCBjaGVja0ZvY3VzSW4sIHRydWUpO1xuICAgIGRvYy5yZW1vdmVFdmVudExpc3RlbmVyKFwibW91c2Vkb3duXCIsIGNoZWNrUG9pbnRlckRvd24sIHRydWUpO1xuICAgIGRvYy5yZW1vdmVFdmVudExpc3RlbmVyKFwidG91Y2hzdGFydFwiLCBjaGVja1BvaW50ZXJEb3duLCB0cnVlKTtcbiAgICBkb2MucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGNoZWNrQ2xpY2ssIHRydWUpO1xuICAgIGRvYy5yZW1vdmVFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLCBjaGVja0tleSwgdHJ1ZSk7XG4gICAgcmV0dXJuIHRyYXA7XG4gIH07XG4gIHRyYXAgPSB7XG4gICAgZ2V0IGFjdGl2ZSgpIHtcbiAgICAgIHJldHVybiBzdGF0ZS5hY3RpdmU7XG4gICAgfSxcbiAgICBnZXQgcGF1c2VkKCkge1xuICAgICAgcmV0dXJuIHN0YXRlLnBhdXNlZDtcbiAgICB9LFxuICAgIGFjdGl2YXRlOiBmdW5jdGlvbiBhY3RpdmF0ZShhY3RpdmF0ZU9wdGlvbnMpIHtcbiAgICAgIGlmIChzdGF0ZS5hY3RpdmUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG4gICAgICB2YXIgb25BY3RpdmF0ZSA9IGdldE9wdGlvbihhY3RpdmF0ZU9wdGlvbnMsIFwib25BY3RpdmF0ZVwiKTtcbiAgICAgIHZhciBvblBvc3RBY3RpdmF0ZSA9IGdldE9wdGlvbihhY3RpdmF0ZU9wdGlvbnMsIFwib25Qb3N0QWN0aXZhdGVcIik7XG4gICAgICB2YXIgY2hlY2tDYW5Gb2N1c1RyYXAgPSBnZXRPcHRpb24oYWN0aXZhdGVPcHRpb25zLCBcImNoZWNrQ2FuRm9jdXNUcmFwXCIpO1xuICAgICAgaWYgKCFjaGVja0NhbkZvY3VzVHJhcCkge1xuICAgICAgICB1cGRhdGVUYWJiYWJsZU5vZGVzKCk7XG4gICAgICB9XG4gICAgICBzdGF0ZS5hY3RpdmUgPSB0cnVlO1xuICAgICAgc3RhdGUucGF1c2VkID0gZmFsc2U7XG4gICAgICBzdGF0ZS5ub2RlRm9jdXNlZEJlZm9yZUFjdGl2YXRpb24gPSBkb2MuYWN0aXZlRWxlbWVudDtcbiAgICAgIGlmIChvbkFjdGl2YXRlKSB7XG4gICAgICAgIG9uQWN0aXZhdGUoKTtcbiAgICAgIH1cbiAgICAgIHZhciBmaW5pc2hBY3RpdmF0aW9uID0gZnVuY3Rpb24gZmluaXNoQWN0aXZhdGlvbjIoKSB7XG4gICAgICAgIGlmIChjaGVja0NhbkZvY3VzVHJhcCkge1xuICAgICAgICAgIHVwZGF0ZVRhYmJhYmxlTm9kZXMoKTtcbiAgICAgICAgfVxuICAgICAgICBhZGRMaXN0ZW5lcnMoKTtcbiAgICAgICAgaWYgKG9uUG9zdEFjdGl2YXRlKSB7XG4gICAgICAgICAgb25Qb3N0QWN0aXZhdGUoKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIGlmIChjaGVja0NhbkZvY3VzVHJhcCkge1xuICAgICAgICBjaGVja0NhbkZvY3VzVHJhcChzdGF0ZS5jb250YWluZXJzLmNvbmNhdCgpKS50aGVuKGZpbmlzaEFjdGl2YXRpb24sIGZpbmlzaEFjdGl2YXRpb24pO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cbiAgICAgIGZpbmlzaEFjdGl2YXRpb24oKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG4gICAgZGVhY3RpdmF0ZTogZnVuY3Rpb24gZGVhY3RpdmF0ZShkZWFjdGl2YXRlT3B0aW9ucykge1xuICAgICAgaWYgKCFzdGF0ZS5hY3RpdmUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG4gICAgICB2YXIgb3B0aW9ucyA9IF9vYmplY3RTcHJlYWQyKHtcbiAgICAgICAgb25EZWFjdGl2YXRlOiBjb25maWcub25EZWFjdGl2YXRlLFxuICAgICAgICBvblBvc3REZWFjdGl2YXRlOiBjb25maWcub25Qb3N0RGVhY3RpdmF0ZSxcbiAgICAgICAgY2hlY2tDYW5SZXR1cm5Gb2N1czogY29uZmlnLmNoZWNrQ2FuUmV0dXJuRm9jdXNcbiAgICAgIH0sIGRlYWN0aXZhdGVPcHRpb25zKTtcbiAgICAgIGNsZWFyVGltZW91dChzdGF0ZS5kZWxheUluaXRpYWxGb2N1c1RpbWVyKTtcbiAgICAgIHN0YXRlLmRlbGF5SW5pdGlhbEZvY3VzVGltZXIgPSB2b2lkIDA7XG4gICAgICByZW1vdmVMaXN0ZW5lcnMoKTtcbiAgICAgIHN0YXRlLmFjdGl2ZSA9IGZhbHNlO1xuICAgICAgc3RhdGUucGF1c2VkID0gZmFsc2U7XG4gICAgICBhY3RpdmVGb2N1c1RyYXBzLmRlYWN0aXZhdGVUcmFwKHRyYXApO1xuICAgICAgdmFyIG9uRGVhY3RpdmF0ZSA9IGdldE9wdGlvbihvcHRpb25zLCBcIm9uRGVhY3RpdmF0ZVwiKTtcbiAgICAgIHZhciBvblBvc3REZWFjdGl2YXRlID0gZ2V0T3B0aW9uKG9wdGlvbnMsIFwib25Qb3N0RGVhY3RpdmF0ZVwiKTtcbiAgICAgIHZhciBjaGVja0NhblJldHVybkZvY3VzID0gZ2V0T3B0aW9uKG9wdGlvbnMsIFwiY2hlY2tDYW5SZXR1cm5Gb2N1c1wiKTtcbiAgICAgIHZhciByZXR1cm5Gb2N1cyA9IGdldE9wdGlvbihvcHRpb25zLCBcInJldHVybkZvY3VzXCIsIFwicmV0dXJuRm9jdXNPbkRlYWN0aXZhdGVcIik7XG4gICAgICBpZiAob25EZWFjdGl2YXRlKSB7XG4gICAgICAgIG9uRGVhY3RpdmF0ZSgpO1xuICAgICAgfVxuICAgICAgdmFyIGZpbmlzaERlYWN0aXZhdGlvbiA9IGZ1bmN0aW9uIGZpbmlzaERlYWN0aXZhdGlvbjIoKSB7XG4gICAgICAgIGRlbGF5KGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGlmIChyZXR1cm5Gb2N1cykge1xuICAgICAgICAgICAgdHJ5Rm9jdXMoZ2V0UmV0dXJuRm9jdXNOb2RlKHN0YXRlLm5vZGVGb2N1c2VkQmVmb3JlQWN0aXZhdGlvbikpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAob25Qb3N0RGVhY3RpdmF0ZSkge1xuICAgICAgICAgICAgb25Qb3N0RGVhY3RpdmF0ZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9O1xuICAgICAgaWYgKHJldHVybkZvY3VzICYmIGNoZWNrQ2FuUmV0dXJuRm9jdXMpIHtcbiAgICAgICAgY2hlY2tDYW5SZXR1cm5Gb2N1cyhnZXRSZXR1cm5Gb2N1c05vZGUoc3RhdGUubm9kZUZvY3VzZWRCZWZvcmVBY3RpdmF0aW9uKSkudGhlbihmaW5pc2hEZWFjdGl2YXRpb24sIGZpbmlzaERlYWN0aXZhdGlvbik7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuICAgICAgZmluaXNoRGVhY3RpdmF0aW9uKCk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuICAgIHBhdXNlOiBmdW5jdGlvbiBwYXVzZSgpIHtcbiAgICAgIGlmIChzdGF0ZS5wYXVzZWQgfHwgIXN0YXRlLmFjdGl2ZSkge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cbiAgICAgIHN0YXRlLnBhdXNlZCA9IHRydWU7XG4gICAgICByZW1vdmVMaXN0ZW5lcnMoKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG4gICAgdW5wYXVzZTogZnVuY3Rpb24gdW5wYXVzZSgpIHtcbiAgICAgIGlmICghc3RhdGUucGF1c2VkIHx8ICFzdGF0ZS5hY3RpdmUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG4gICAgICBzdGF0ZS5wYXVzZWQgPSBmYWxzZTtcbiAgICAgIHVwZGF0ZVRhYmJhYmxlTm9kZXMoKTtcbiAgICAgIGFkZExpc3RlbmVycygpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcbiAgICB1cGRhdGVDb250YWluZXJFbGVtZW50czogZnVuY3Rpb24gdXBkYXRlQ29udGFpbmVyRWxlbWVudHMoY29udGFpbmVyRWxlbWVudHMpIHtcbiAgICAgIHZhciBlbGVtZW50c0FzQXJyYXkgPSBbXS5jb25jYXQoY29udGFpbmVyRWxlbWVudHMpLmZpbHRlcihCb29sZWFuKTtcbiAgICAgIHN0YXRlLmNvbnRhaW5lcnMgPSBlbGVtZW50c0FzQXJyYXkubWFwKGZ1bmN0aW9uKGVsZW1lbnQpIHtcbiAgICAgICAgcmV0dXJuIHR5cGVvZiBlbGVtZW50ID09PSBcInN0cmluZ1wiID8gZG9jLnF1ZXJ5U2VsZWN0b3IoZWxlbWVudCkgOiBlbGVtZW50O1xuICAgICAgfSk7XG4gICAgICBpZiAoc3RhdGUuYWN0aXZlKSB7XG4gICAgICAgIHVwZGF0ZVRhYmJhYmxlTm9kZXMoKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgfTtcbiAgdHJhcC51cGRhdGVDb250YWluZXJFbGVtZW50cyhlbGVtZW50cyk7XG4gIHJldHVybiB0cmFwO1xufTtcblxuLy8gcGFja2FnZXMvZm9jdXMvc3JjL2luZGV4LmpzXG5mdW5jdGlvbiBzcmNfZGVmYXVsdChBbHBpbmUpIHtcbiAgbGV0IGxhc3RGb2N1c2VkO1xuICBsZXQgY3VycmVudEZvY3VzZWQ7XG4gIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwiZm9jdXNpblwiLCAoKSA9PiB7XG4gICAgbGFzdEZvY3VzZWQgPSBjdXJyZW50Rm9jdXNlZDtcbiAgICBjdXJyZW50Rm9jdXNlZCA9IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQ7XG4gIH0pO1xuICBBbHBpbmUubWFnaWMoXCJmb2N1c1wiLCAoZWwpID0+IHtcbiAgICBsZXQgd2l0aGluID0gZWw7XG4gICAgcmV0dXJuIHtcbiAgICAgIF9fbm9zY3JvbGw6IGZhbHNlLFxuICAgICAgX193cmFwQXJvdW5kOiBmYWxzZSxcbiAgICAgIHdpdGhpbihlbDIpIHtcbiAgICAgICAgd2l0aGluID0gZWwyO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH0sXG4gICAgICB3aXRob3V0U2Nyb2xsaW5nKCkge1xuICAgICAgICB0aGlzLl9fbm9zY3JvbGwgPSB0cnVlO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH0sXG4gICAgICBub3Njcm9sbCgpIHtcbiAgICAgICAgdGhpcy5fX25vc2Nyb2xsID0gdHJ1ZTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9LFxuICAgICAgd2l0aFdyYXBBcm91bmQoKSB7XG4gICAgICAgIHRoaXMuX193cmFwQXJvdW5kID0gdHJ1ZTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9LFxuICAgICAgd3JhcCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMud2l0aFdyYXBBcm91bmQoKTtcbiAgICAgIH0sXG4gICAgICBmb2N1c2FibGUoZWwyKSB7XG4gICAgICAgIHJldHVybiBpc0ZvY3VzYWJsZShlbDIpO1xuICAgICAgfSxcbiAgICAgIHByZXZpb3VzbHlGb2N1c2VkKCkge1xuICAgICAgICByZXR1cm4gbGFzdEZvY3VzZWQ7XG4gICAgICB9LFxuICAgICAgbGFzdEZvY3VzZWQoKSB7XG4gICAgICAgIHJldHVybiBsYXN0Rm9jdXNlZDtcbiAgICAgIH0sXG4gICAgICBmb2N1c2VkKCkge1xuICAgICAgICByZXR1cm4gY3VycmVudEZvY3VzZWQ7XG4gICAgICB9LFxuICAgICAgZm9jdXNhYmxlcygpIHtcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkod2l0aGluKSlcbiAgICAgICAgICByZXR1cm4gd2l0aGluO1xuICAgICAgICByZXR1cm4gZm9jdXNhYmxlKHdpdGhpbiwgeyBkaXNwbGF5Q2hlY2s6IFwibm9uZVwiIH0pO1xuICAgICAgfSxcbiAgICAgIGFsbCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZm9jdXNhYmxlcygpO1xuICAgICAgfSxcbiAgICAgIGlzRmlyc3QoZWwyKSB7XG4gICAgICAgIGxldCBlbHMgPSB0aGlzLmFsbCgpO1xuICAgICAgICByZXR1cm4gZWxzWzBdICYmIGVsc1swXS5pc1NhbWVOb2RlKGVsMik7XG4gICAgICB9LFxuICAgICAgaXNMYXN0KGVsMikge1xuICAgICAgICBsZXQgZWxzID0gdGhpcy5hbGwoKTtcbiAgICAgICAgcmV0dXJuIGVscy5sZW5ndGggJiYgZWxzLnNsaWNlKC0xKVswXS5pc1NhbWVOb2RlKGVsMik7XG4gICAgICB9LFxuICAgICAgZ2V0Rmlyc3QoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmFsbCgpWzBdO1xuICAgICAgfSxcbiAgICAgIGdldExhc3QoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmFsbCgpLnNsaWNlKC0xKVswXTtcbiAgICAgIH0sXG4gICAgICBnZXROZXh0KCkge1xuICAgICAgICBsZXQgbGlzdCA9IHRoaXMuYWxsKCk7XG4gICAgICAgIGxldCBjdXJyZW50ID0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudDtcbiAgICAgICAgaWYgKGxpc3QuaW5kZXhPZihjdXJyZW50KSA9PT0gLTEpXG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICBpZiAodGhpcy5fX3dyYXBBcm91bmQgJiYgbGlzdC5pbmRleE9mKGN1cnJlbnQpID09PSBsaXN0Lmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICByZXR1cm4gbGlzdFswXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbGlzdFtsaXN0LmluZGV4T2YoY3VycmVudCkgKyAxXTtcbiAgICAgIH0sXG4gICAgICBnZXRQcmV2aW91cygpIHtcbiAgICAgICAgbGV0IGxpc3QgPSB0aGlzLmFsbCgpO1xuICAgICAgICBsZXQgY3VycmVudCA9IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQ7XG4gICAgICAgIGlmIChsaXN0LmluZGV4T2YoY3VycmVudCkgPT09IC0xKVxuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgaWYgKHRoaXMuX193cmFwQXJvdW5kICYmIGxpc3QuaW5kZXhPZihjdXJyZW50KSA9PT0gMCkge1xuICAgICAgICAgIHJldHVybiBsaXN0LnNsaWNlKC0xKVswXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbGlzdFtsaXN0LmluZGV4T2YoY3VycmVudCkgLSAxXTtcbiAgICAgIH0sXG4gICAgICBmaXJzdCgpIHtcbiAgICAgICAgdGhpcy5mb2N1cyh0aGlzLmdldEZpcnN0KCkpO1xuICAgICAgfSxcbiAgICAgIGxhc3QoKSB7XG4gICAgICAgIHRoaXMuZm9jdXModGhpcy5nZXRMYXN0KCkpO1xuICAgICAgfSxcbiAgICAgIG5leHQoKSB7XG4gICAgICAgIHRoaXMuZm9jdXModGhpcy5nZXROZXh0KCkpO1xuICAgICAgfSxcbiAgICAgIHByZXZpb3VzKCkge1xuICAgICAgICB0aGlzLmZvY3VzKHRoaXMuZ2V0UHJldmlvdXMoKSk7XG4gICAgICB9LFxuICAgICAgcHJldigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJldmlvdXMoKTtcbiAgICAgIH0sXG4gICAgICBmb2N1cyhlbDIpIHtcbiAgICAgICAgaWYgKCFlbDIpXG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICBpZiAoIWVsMi5oYXNBdHRyaWJ1dGUoXCJ0YWJpbmRleFwiKSlcbiAgICAgICAgICAgIGVsMi5zZXRBdHRyaWJ1dGUoXCJ0YWJpbmRleFwiLCBcIjBcIik7XG4gICAgICAgICAgZWwyLmZvY3VzKHsgcHJldmVudFNjcm9sbDogdGhpcy5fX25vc2Nyb2xsIH0pO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9O1xuICB9KTtcbiAgQWxwaW5lLmRpcmVjdGl2ZShcInRyYXBcIiwgQWxwaW5lLnNraXBEdXJpbmdDbG9uZShcbiAgICAoZWwsIHsgZXhwcmVzc2lvbiwgbW9kaWZpZXJzIH0sIHsgZWZmZWN0LCBldmFsdWF0ZUxhdGVyLCBjbGVhbnVwIH0pID0+IHtcbiAgICAgIGxldCBldmFsdWF0b3IgPSBldmFsdWF0ZUxhdGVyKGV4cHJlc3Npb24pO1xuICAgICAgbGV0IG9sZFZhbHVlID0gZmFsc2U7XG4gICAgICBsZXQgb3B0aW9ucyA9IHtcbiAgICAgICAgZXNjYXBlRGVhY3RpdmF0ZXM6IGZhbHNlLFxuICAgICAgICBhbGxvd091dHNpZGVDbGljazogdHJ1ZSxcbiAgICAgICAgZmFsbGJhY2tGb2N1czogKCkgPT4gZWxcbiAgICAgIH07XG4gICAgICBpZiAobW9kaWZpZXJzLmluY2x1ZGVzKFwibm9hdXRvZm9jdXNcIikpIHtcbiAgICAgICAgb3B0aW9ucy5pbml0aWFsRm9jdXMgPSBmYWxzZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxldCBhdXRvZm9jdXNFbCA9IGVsLnF1ZXJ5U2VsZWN0b3IoXCJbYXV0b2ZvY3VzXVwiKTtcbiAgICAgICAgaWYgKGF1dG9mb2N1c0VsKVxuICAgICAgICAgIG9wdGlvbnMuaW5pdGlhbEZvY3VzID0gYXV0b2ZvY3VzRWw7XG4gICAgICB9XG4gICAgICBsZXQgdHJhcCA9IGNyZWF0ZUZvY3VzVHJhcChlbCwgb3B0aW9ucyk7XG4gICAgICBsZXQgdW5kb0luZXJ0ID0gKCkgPT4ge1xuICAgICAgfTtcbiAgICAgIGxldCB1bmRvRGlzYWJsZVNjcm9sbGluZyA9ICgpID0+IHtcbiAgICAgIH07XG4gICAgICBjb25zdCByZWxlYXNlRm9jdXMgPSAoKSA9PiB7XG4gICAgICAgIHVuZG9JbmVydCgpO1xuICAgICAgICB1bmRvSW5lcnQgPSAoKSA9PiB7XG4gICAgICAgIH07XG4gICAgICAgIHVuZG9EaXNhYmxlU2Nyb2xsaW5nKCk7XG4gICAgICAgIHVuZG9EaXNhYmxlU2Nyb2xsaW5nID0gKCkgPT4ge1xuICAgICAgICB9O1xuICAgICAgICB0cmFwLmRlYWN0aXZhdGUoe1xuICAgICAgICAgIHJldHVybkZvY3VzOiAhbW9kaWZpZXJzLmluY2x1ZGVzKFwibm9yZXR1cm5cIilcbiAgICAgICAgfSk7XG4gICAgICB9O1xuICAgICAgZWZmZWN0KCgpID0+IGV2YWx1YXRvcigodmFsdWUpID0+IHtcbiAgICAgICAgaWYgKG9sZFZhbHVlID09PSB2YWx1ZSlcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIGlmICh2YWx1ZSAmJiAhb2xkVmFsdWUpIHtcbiAgICAgICAgICBpZiAobW9kaWZpZXJzLmluY2x1ZGVzKFwibm9zY3JvbGxcIikpXG4gICAgICAgICAgICB1bmRvRGlzYWJsZVNjcm9sbGluZyA9IGRpc2FibGVTY3JvbGxpbmcoKTtcbiAgICAgICAgICBpZiAobW9kaWZpZXJzLmluY2x1ZGVzKFwiaW5lcnRcIikpXG4gICAgICAgICAgICB1bmRvSW5lcnQgPSBzZXRJbmVydChlbCk7XG4gICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICB0cmFwLmFjdGl2YXRlKCk7XG4gICAgICAgICAgfSwgMTUpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghdmFsdWUgJiYgb2xkVmFsdWUpIHtcbiAgICAgICAgICByZWxlYXNlRm9jdXMoKTtcbiAgICAgICAgfVxuICAgICAgICBvbGRWYWx1ZSA9ICEhdmFsdWU7XG4gICAgICB9KSk7XG4gICAgICBjbGVhbnVwKHJlbGVhc2VGb2N1cyk7XG4gICAgfSxcbiAgICAvLyBXaGVuIGNsb25pbmcsIHdlIG9ubHkgd2FudCB0byBhZGQgYXJpYS1oaWRkZW4gYXR0cmlidXRlcyB0byB0aGVcbiAgICAvLyBET00gYW5kIG5vdCB0cnkgdG8gYWN0dWFsbHkgdHJhcCwgYXMgdHJhcHBpbmcgY2FuIG1lc3Mgd2l0aCB0aGVcbiAgICAvLyBsaXZlIERPTSBhbmQgaXNuJ3QganVzdCBpc29sYXRlZCB0byB0aGUgY2xvbmVkIERPTS5cbiAgICAoZWwsIHsgZXhwcmVzc2lvbiwgbW9kaWZpZXJzIH0sIHsgZXZhbHVhdGUgfSkgPT4ge1xuICAgICAgaWYgKG1vZGlmaWVycy5pbmNsdWRlcyhcImluZXJ0XCIpICYmIGV2YWx1YXRlKGV4cHJlc3Npb24pKVxuICAgICAgICBzZXRJbmVydChlbCk7XG4gICAgfVxuICApKTtcbn1cbmZ1bmN0aW9uIHNldEluZXJ0KGVsKSB7XG4gIGxldCB1bmRvcyA9IFtdO1xuICBjcmF3bFNpYmxpbmdzVXAoZWwsIChzaWJsaW5nKSA9PiB7XG4gICAgbGV0IGNhY2hlID0gc2libGluZy5oYXNBdHRyaWJ1dGUoXCJhcmlhLWhpZGRlblwiKTtcbiAgICBzaWJsaW5nLnNldEF0dHJpYnV0ZShcImFyaWEtaGlkZGVuXCIsIFwidHJ1ZVwiKTtcbiAgICB1bmRvcy5wdXNoKCgpID0+IGNhY2hlIHx8IHNpYmxpbmcucmVtb3ZlQXR0cmlidXRlKFwiYXJpYS1oaWRkZW5cIikpO1xuICB9KTtcbiAgcmV0dXJuICgpID0+IHtcbiAgICB3aGlsZSAodW5kb3MubGVuZ3RoKVxuICAgICAgdW5kb3MucG9wKCkoKTtcbiAgfTtcbn1cbmZ1bmN0aW9uIGNyYXdsU2libGluZ3NVcChlbCwgY2FsbGJhY2spIHtcbiAgaWYgKGVsLmlzU2FtZU5vZGUoZG9jdW1lbnQuYm9keSkgfHwgIWVsLnBhcmVudE5vZGUpXG4gICAgcmV0dXJuO1xuICBBcnJheS5mcm9tKGVsLnBhcmVudE5vZGUuY2hpbGRyZW4pLmZvckVhY2goKHNpYmxpbmcpID0+IHtcbiAgICBpZiAoc2libGluZy5pc1NhbWVOb2RlKGVsKSkge1xuICAgICAgY3Jhd2xTaWJsaW5nc1VwKGVsLnBhcmVudE5vZGUsIGNhbGxiYWNrKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY2FsbGJhY2soc2libGluZyk7XG4gICAgfVxuICB9KTtcbn1cbmZ1bmN0aW9uIGRpc2FibGVTY3JvbGxpbmcoKSB7XG4gIGxldCBvdmVyZmxvdyA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zdHlsZS5vdmVyZmxvdztcbiAgbGV0IHBhZGRpbmdSaWdodCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zdHlsZS5wYWRkaW5nUmlnaHQ7XG4gIGxldCBzY3JvbGxiYXJXaWR0aCA9IHdpbmRvdy5pbm5lcldpZHRoIC0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudFdpZHRoO1xuICBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc3R5bGUub3ZlcmZsb3cgPSBcImhpZGRlblwiO1xuICBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc3R5bGUucGFkZGluZ1JpZ2h0ID0gYCR7c2Nyb2xsYmFyV2lkdGh9cHhgO1xuICByZXR1cm4gKCkgPT4ge1xuICAgIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zdHlsZS5vdmVyZmxvdyA9IG92ZXJmbG93O1xuICAgIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zdHlsZS5wYWRkaW5nUmlnaHQgPSBwYWRkaW5nUmlnaHQ7XG4gIH07XG59XG5cbi8vIHBhY2thZ2VzL2ZvY3VzL2J1aWxkcy9tb2R1bGUuanNcbnZhciBtb2R1bGVfZGVmYXVsdCA9IHNyY19kZWZhdWx0O1xuZXhwb3J0IHtcbiAgbW9kdWxlX2RlZmF1bHQgYXMgZGVmYXVsdCxcbiAgc3JjX2RlZmF1bHQgYXMgZm9jdXNcbn07XG4vKiEgQnVuZGxlZCBsaWNlbnNlIGluZm9ybWF0aW9uOlxuXG50YWJiYWJsZS9kaXN0L2luZGV4LmVzbS5qczpcbiAgKCohXG4gICogdGFiYmFibGUgNS4zLjNcbiAgKiBAbGljZW5zZSBNSVQsIGh0dHBzOi8vZ2l0aHViLmNvbS9mb2N1cy10cmFwL3RhYmJhYmxlL2Jsb2IvbWFzdGVyL0xJQ0VOU0VcbiAgKilcblxuZm9jdXMtdHJhcC9kaXN0L2ZvY3VzLXRyYXAuZXNtLmpzOlxuICAoKiFcbiAgKiBmb2N1cy10cmFwIDYuOS40XG4gICogQGxpY2Vuc2UgTUlULCBodHRwczovL2dpdGh1Yi5jb20vZm9jdXMtdHJhcC9mb2N1cy10cmFwL2Jsb2IvbWFzdGVyL0xJQ0VOU0VcbiAgKilcbiovXG4iLCIvLyBwYWNrYWdlcy9jb2xsYXBzZS9zcmMvaW5kZXguanNcbmZ1bmN0aW9uIHNyY19kZWZhdWx0KEFscGluZSkge1xuICBBbHBpbmUuZGlyZWN0aXZlKFwiY29sbGFwc2VcIiwgY29sbGFwc2UpO1xuICBjb2xsYXBzZS5pbmxpbmUgPSAoZWwsIHsgbW9kaWZpZXJzIH0pID0+IHtcbiAgICBpZiAoIW1vZGlmaWVycy5pbmNsdWRlcyhcIm1pblwiKSlcbiAgICAgIHJldHVybjtcbiAgICBlbC5feF9kb1Nob3cgPSAoKSA9PiB7XG4gICAgfTtcbiAgICBlbC5feF9kb0hpZGUgPSAoKSA9PiB7XG4gICAgfTtcbiAgfTtcbiAgZnVuY3Rpb24gY29sbGFwc2UoZWwsIHsgbW9kaWZpZXJzIH0pIHtcbiAgICBsZXQgZHVyYXRpb24gPSBtb2RpZmllclZhbHVlKG1vZGlmaWVycywgXCJkdXJhdGlvblwiLCAyNTApIC8gMWUzO1xuICAgIGxldCBmbG9vciA9IG1vZGlmaWVyVmFsdWUobW9kaWZpZXJzLCBcIm1pblwiLCAwKTtcbiAgICBsZXQgZnVsbHlIaWRlID0gIW1vZGlmaWVycy5pbmNsdWRlcyhcIm1pblwiKTtcbiAgICBpZiAoIWVsLl94X2lzU2hvd24pXG4gICAgICBlbC5zdHlsZS5oZWlnaHQgPSBgJHtmbG9vcn1weGA7XG4gICAgaWYgKCFlbC5feF9pc1Nob3duICYmIGZ1bGx5SGlkZSlcbiAgICAgIGVsLmhpZGRlbiA9IHRydWU7XG4gICAgaWYgKCFlbC5feF9pc1Nob3duKVxuICAgICAgZWwuc3R5bGUub3ZlcmZsb3cgPSBcImhpZGRlblwiO1xuICAgIGxldCBzZXRGdW5jdGlvbiA9IChlbDIsIHN0eWxlcykgPT4ge1xuICAgICAgbGV0IHJldmVydEZ1bmN0aW9uID0gQWxwaW5lLnNldFN0eWxlcyhlbDIsIHN0eWxlcyk7XG4gICAgICByZXR1cm4gc3R5bGVzLmhlaWdodCA/ICgpID0+IHtcbiAgICAgIH0gOiByZXZlcnRGdW5jdGlvbjtcbiAgICB9O1xuICAgIGxldCB0cmFuc2l0aW9uU3R5bGVzID0ge1xuICAgICAgdHJhbnNpdGlvblByb3BlcnR5OiBcImhlaWdodFwiLFxuICAgICAgdHJhbnNpdGlvbkR1cmF0aW9uOiBgJHtkdXJhdGlvbn1zYCxcbiAgICAgIHRyYW5zaXRpb25UaW1pbmdGdW5jdGlvbjogXCJjdWJpYy1iZXppZXIoMC40LCAwLjAsIDAuMiwgMSlcIlxuICAgIH07XG4gICAgZWwuX3hfdHJhbnNpdGlvbiA9IHtcbiAgICAgIGluKGJlZm9yZSA9ICgpID0+IHtcbiAgICAgIH0sIGFmdGVyID0gKCkgPT4ge1xuICAgICAgfSkge1xuICAgICAgICBpZiAoZnVsbHlIaWRlKVxuICAgICAgICAgIGVsLmhpZGRlbiA9IGZhbHNlO1xuICAgICAgICBpZiAoZnVsbHlIaWRlKVxuICAgICAgICAgIGVsLnN0eWxlLmRpc3BsYXkgPSBudWxsO1xuICAgICAgICBsZXQgY3VycmVudCA9IGVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmhlaWdodDtcbiAgICAgICAgZWwuc3R5bGUuaGVpZ2h0ID0gXCJhdXRvXCI7XG4gICAgICAgIGxldCBmdWxsID0gZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkuaGVpZ2h0O1xuICAgICAgICBpZiAoY3VycmVudCA9PT0gZnVsbCkge1xuICAgICAgICAgIGN1cnJlbnQgPSBmbG9vcjtcbiAgICAgICAgfVxuICAgICAgICBBbHBpbmUudHJhbnNpdGlvbihlbCwgQWxwaW5lLnNldFN0eWxlcywge1xuICAgICAgICAgIGR1cmluZzogdHJhbnNpdGlvblN0eWxlcyxcbiAgICAgICAgICBzdGFydDogeyBoZWlnaHQ6IGN1cnJlbnQgKyBcInB4XCIgfSxcbiAgICAgICAgICBlbmQ6IHsgaGVpZ2h0OiBmdWxsICsgXCJweFwiIH1cbiAgICAgICAgfSwgKCkgPT4gZWwuX3hfaXNTaG93biA9IHRydWUsICgpID0+IHtcbiAgICAgICAgICBpZiAoTWF0aC5hYnMoZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkuaGVpZ2h0IC0gZnVsbCkgPCAxKSB7XG4gICAgICAgICAgICBlbC5zdHlsZS5vdmVyZmxvdyA9IG51bGw7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0sXG4gICAgICBvdXQoYmVmb3JlID0gKCkgPT4ge1xuICAgICAgfSwgYWZ0ZXIgPSAoKSA9PiB7XG4gICAgICB9KSB7XG4gICAgICAgIGxldCBmdWxsID0gZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkuaGVpZ2h0O1xuICAgICAgICBBbHBpbmUudHJhbnNpdGlvbihlbCwgc2V0RnVuY3Rpb24sIHtcbiAgICAgICAgICBkdXJpbmc6IHRyYW5zaXRpb25TdHlsZXMsXG4gICAgICAgICAgc3RhcnQ6IHsgaGVpZ2h0OiBmdWxsICsgXCJweFwiIH0sXG4gICAgICAgICAgZW5kOiB7IGhlaWdodDogZmxvb3IgKyBcInB4XCIgfVxuICAgICAgICB9LCAoKSA9PiBlbC5zdHlsZS5vdmVyZmxvdyA9IFwiaGlkZGVuXCIsICgpID0+IHtcbiAgICAgICAgICBlbC5feF9pc1Nob3duID0gZmFsc2U7XG4gICAgICAgICAgaWYgKGVsLnN0eWxlLmhlaWdodCA9PSBgJHtmbG9vcn1weGAgJiYgZnVsbHlIaWRlKSB7XG4gICAgICAgICAgICBlbC5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XG4gICAgICAgICAgICBlbC5oaWRkZW4gPSB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfTtcbiAgfVxufVxuZnVuY3Rpb24gbW9kaWZpZXJWYWx1ZShtb2RpZmllcnMsIGtleSwgZmFsbGJhY2spIHtcbiAgaWYgKG1vZGlmaWVycy5pbmRleE9mKGtleSkgPT09IC0xKVxuICAgIHJldHVybiBmYWxsYmFjaztcbiAgY29uc3QgcmF3VmFsdWUgPSBtb2RpZmllcnNbbW9kaWZpZXJzLmluZGV4T2Yoa2V5KSArIDFdO1xuICBpZiAoIXJhd1ZhbHVlKVxuICAgIHJldHVybiBmYWxsYmFjaztcbiAgaWYgKGtleSA9PT0gXCJkdXJhdGlvblwiKSB7XG4gICAgbGV0IG1hdGNoID0gcmF3VmFsdWUubWF0Y2goLyhbMC05XSspbXMvKTtcbiAgICBpZiAobWF0Y2gpXG4gICAgICByZXR1cm4gbWF0Y2hbMV07XG4gIH1cbiAgaWYgKGtleSA9PT0gXCJtaW5cIikge1xuICAgIGxldCBtYXRjaCA9IHJhd1ZhbHVlLm1hdGNoKC8oWzAtOV0rKXB4Lyk7XG4gICAgaWYgKG1hdGNoKVxuICAgICAgcmV0dXJuIG1hdGNoWzFdO1xuICB9XG4gIHJldHVybiByYXdWYWx1ZTtcbn1cblxuLy8gcGFja2FnZXMvY29sbGFwc2UvYnVpbGRzL21vZHVsZS5qc1xudmFyIG1vZHVsZV9kZWZhdWx0ID0gc3JjX2RlZmF1bHQ7XG5leHBvcnQge1xuICBzcmNfZGVmYXVsdCBhcyBjb2xsYXBzZSxcbiAgbW9kdWxlX2RlZmF1bHQgYXMgZGVmYXVsdFxufTtcbiIsIi8vIG5vZGVfbW9kdWxlcy9AZmxvYXRpbmctdWkvdXRpbHMvZGlzdC9mbG9hdGluZy11aS51dGlscy5tanNcbnZhciBtaW4gPSBNYXRoLm1pbjtcbnZhciBtYXggPSBNYXRoLm1heDtcbnZhciByb3VuZCA9IE1hdGgucm91bmQ7XG52YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xudmFyIGNyZWF0ZUNvb3JkcyA9ICh2KSA9PiAoe1xuICB4OiB2LFxuICB5OiB2XG59KTtcbnZhciBvcHBvc2l0ZVNpZGVNYXAgPSB7XG4gIGxlZnQ6IFwicmlnaHRcIixcbiAgcmlnaHQ6IFwibGVmdFwiLFxuICBib3R0b206IFwidG9wXCIsXG4gIHRvcDogXCJib3R0b21cIlxufTtcbnZhciBvcHBvc2l0ZUFsaWdubWVudE1hcCA9IHtcbiAgc3RhcnQ6IFwiZW5kXCIsXG4gIGVuZDogXCJzdGFydFwiXG59O1xuZnVuY3Rpb24gY2xhbXAoc3RhcnQsIHZhbHVlLCBlbmQpIHtcbiAgcmV0dXJuIG1heChzdGFydCwgbWluKHZhbHVlLCBlbmQpKTtcbn1cbmZ1bmN0aW9uIGV2YWx1YXRlKHZhbHVlLCBwYXJhbSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCIgPyB2YWx1ZShwYXJhbSkgOiB2YWx1ZTtcbn1cbmZ1bmN0aW9uIGdldFNpZGUocGxhY2VtZW50KSB7XG4gIHJldHVybiBwbGFjZW1lbnQuc3BsaXQoXCItXCIpWzBdO1xufVxuZnVuY3Rpb24gZ2V0QWxpZ25tZW50KHBsYWNlbWVudCkge1xuICByZXR1cm4gcGxhY2VtZW50LnNwbGl0KFwiLVwiKVsxXTtcbn1cbmZ1bmN0aW9uIGdldE9wcG9zaXRlQXhpcyhheGlzKSB7XG4gIHJldHVybiBheGlzID09PSBcInhcIiA/IFwieVwiIDogXCJ4XCI7XG59XG5mdW5jdGlvbiBnZXRBeGlzTGVuZ3RoKGF4aXMpIHtcbiAgcmV0dXJuIGF4aXMgPT09IFwieVwiID8gXCJoZWlnaHRcIiA6IFwid2lkdGhcIjtcbn1cbmZ1bmN0aW9uIGdldFNpZGVBeGlzKHBsYWNlbWVudCkge1xuICByZXR1cm4gW1widG9wXCIsIFwiYm90dG9tXCJdLmluY2x1ZGVzKGdldFNpZGUocGxhY2VtZW50KSkgPyBcInlcIiA6IFwieFwiO1xufVxuZnVuY3Rpb24gZ2V0QWxpZ25tZW50QXhpcyhwbGFjZW1lbnQpIHtcbiAgcmV0dXJuIGdldE9wcG9zaXRlQXhpcyhnZXRTaWRlQXhpcyhwbGFjZW1lbnQpKTtcbn1cbmZ1bmN0aW9uIGdldEFsaWdubWVudFNpZGVzKHBsYWNlbWVudCwgcmVjdHMsIHJ0bCkge1xuICBpZiAocnRsID09PSB2b2lkIDApIHtcbiAgICBydGwgPSBmYWxzZTtcbiAgfVxuICBjb25zdCBhbGlnbm1lbnQgPSBnZXRBbGlnbm1lbnQocGxhY2VtZW50KTtcbiAgY29uc3QgYWxpZ25tZW50QXhpcyA9IGdldEFsaWdubWVudEF4aXMocGxhY2VtZW50KTtcbiAgY29uc3QgbGVuZ3RoID0gZ2V0QXhpc0xlbmd0aChhbGlnbm1lbnRBeGlzKTtcbiAgbGV0IG1haW5BbGlnbm1lbnRTaWRlID0gYWxpZ25tZW50QXhpcyA9PT0gXCJ4XCIgPyBhbGlnbm1lbnQgPT09IChydGwgPyBcImVuZFwiIDogXCJzdGFydFwiKSA/IFwicmlnaHRcIiA6IFwibGVmdFwiIDogYWxpZ25tZW50ID09PSBcInN0YXJ0XCIgPyBcImJvdHRvbVwiIDogXCJ0b3BcIjtcbiAgaWYgKHJlY3RzLnJlZmVyZW5jZVtsZW5ndGhdID4gcmVjdHMuZmxvYXRpbmdbbGVuZ3RoXSkge1xuICAgIG1haW5BbGlnbm1lbnRTaWRlID0gZ2V0T3Bwb3NpdGVQbGFjZW1lbnQobWFpbkFsaWdubWVudFNpZGUpO1xuICB9XG4gIHJldHVybiBbbWFpbkFsaWdubWVudFNpZGUsIGdldE9wcG9zaXRlUGxhY2VtZW50KG1haW5BbGlnbm1lbnRTaWRlKV07XG59XG5mdW5jdGlvbiBnZXRFeHBhbmRlZFBsYWNlbWVudHMocGxhY2VtZW50KSB7XG4gIGNvbnN0IG9wcG9zaXRlUGxhY2VtZW50ID0gZ2V0T3Bwb3NpdGVQbGFjZW1lbnQocGxhY2VtZW50KTtcbiAgcmV0dXJuIFtnZXRPcHBvc2l0ZUFsaWdubWVudFBsYWNlbWVudChwbGFjZW1lbnQpLCBvcHBvc2l0ZVBsYWNlbWVudCwgZ2V0T3Bwb3NpdGVBbGlnbm1lbnRQbGFjZW1lbnQob3Bwb3NpdGVQbGFjZW1lbnQpXTtcbn1cbmZ1bmN0aW9uIGdldE9wcG9zaXRlQWxpZ25tZW50UGxhY2VtZW50KHBsYWNlbWVudCkge1xuICByZXR1cm4gcGxhY2VtZW50LnJlcGxhY2UoL3N0YXJ0fGVuZC9nLCAoYWxpZ25tZW50KSA9PiBvcHBvc2l0ZUFsaWdubWVudE1hcFthbGlnbm1lbnRdKTtcbn1cbmZ1bmN0aW9uIGdldFNpZGVMaXN0KHNpZGUsIGlzU3RhcnQsIHJ0bCkge1xuICBjb25zdCBsciA9IFtcImxlZnRcIiwgXCJyaWdodFwiXTtcbiAgY29uc3QgcmwgPSBbXCJyaWdodFwiLCBcImxlZnRcIl07XG4gIGNvbnN0IHRiID0gW1widG9wXCIsIFwiYm90dG9tXCJdO1xuICBjb25zdCBidCA9IFtcImJvdHRvbVwiLCBcInRvcFwiXTtcbiAgc3dpdGNoIChzaWRlKSB7XG4gICAgY2FzZSBcInRvcFwiOlxuICAgIGNhc2UgXCJib3R0b21cIjpcbiAgICAgIGlmIChydGwpXG4gICAgICAgIHJldHVybiBpc1N0YXJ0ID8gcmwgOiBscjtcbiAgICAgIHJldHVybiBpc1N0YXJ0ID8gbHIgOiBybDtcbiAgICBjYXNlIFwibGVmdFwiOlxuICAgIGNhc2UgXCJyaWdodFwiOlxuICAgICAgcmV0dXJuIGlzU3RhcnQgPyB0YiA6IGJ0O1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gW107XG4gIH1cbn1cbmZ1bmN0aW9uIGdldE9wcG9zaXRlQXhpc1BsYWNlbWVudHMocGxhY2VtZW50LCBmbGlwQWxpZ25tZW50LCBkaXJlY3Rpb24sIHJ0bCkge1xuICBjb25zdCBhbGlnbm1lbnQgPSBnZXRBbGlnbm1lbnQocGxhY2VtZW50KTtcbiAgbGV0IGxpc3QgPSBnZXRTaWRlTGlzdChnZXRTaWRlKHBsYWNlbWVudCksIGRpcmVjdGlvbiA9PT0gXCJzdGFydFwiLCBydGwpO1xuICBpZiAoYWxpZ25tZW50KSB7XG4gICAgbGlzdCA9IGxpc3QubWFwKChzaWRlKSA9PiBzaWRlICsgXCItXCIgKyBhbGlnbm1lbnQpO1xuICAgIGlmIChmbGlwQWxpZ25tZW50KSB7XG4gICAgICBsaXN0ID0gbGlzdC5jb25jYXQobGlzdC5tYXAoZ2V0T3Bwb3NpdGVBbGlnbm1lbnRQbGFjZW1lbnQpKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGxpc3Q7XG59XG5mdW5jdGlvbiBnZXRPcHBvc2l0ZVBsYWNlbWVudChwbGFjZW1lbnQpIHtcbiAgcmV0dXJuIHBsYWNlbWVudC5yZXBsYWNlKC9sZWZ0fHJpZ2h0fGJvdHRvbXx0b3AvZywgKHNpZGUpID0+IG9wcG9zaXRlU2lkZU1hcFtzaWRlXSk7XG59XG5mdW5jdGlvbiBleHBhbmRQYWRkaW5nT2JqZWN0KHBhZGRpbmcpIHtcbiAgcmV0dXJuIHtcbiAgICB0b3A6IDAsXG4gICAgcmlnaHQ6IDAsXG4gICAgYm90dG9tOiAwLFxuICAgIGxlZnQ6IDAsXG4gICAgLi4ucGFkZGluZ1xuICB9O1xufVxuZnVuY3Rpb24gZ2V0UGFkZGluZ09iamVjdChwYWRkaW5nKSB7XG4gIHJldHVybiB0eXBlb2YgcGFkZGluZyAhPT0gXCJudW1iZXJcIiA/IGV4cGFuZFBhZGRpbmdPYmplY3QocGFkZGluZykgOiB7XG4gICAgdG9wOiBwYWRkaW5nLFxuICAgIHJpZ2h0OiBwYWRkaW5nLFxuICAgIGJvdHRvbTogcGFkZGluZyxcbiAgICBsZWZ0OiBwYWRkaW5nXG4gIH07XG59XG5mdW5jdGlvbiByZWN0VG9DbGllbnRSZWN0KHJlY3QpIHtcbiAgcmV0dXJuIHtcbiAgICAuLi5yZWN0LFxuICAgIHRvcDogcmVjdC55LFxuICAgIGxlZnQ6IHJlY3QueCxcbiAgICByaWdodDogcmVjdC54ICsgcmVjdC53aWR0aCxcbiAgICBib3R0b206IHJlY3QueSArIHJlY3QuaGVpZ2h0XG4gIH07XG59XG5cbi8vIG5vZGVfbW9kdWxlcy9AZmxvYXRpbmctdWkvY29yZS9kaXN0L2Zsb2F0aW5nLXVpLmNvcmUubWpzXG5mdW5jdGlvbiBjb21wdXRlQ29vcmRzRnJvbVBsYWNlbWVudChfcmVmLCBwbGFjZW1lbnQsIHJ0bCkge1xuICBsZXQge1xuICAgIHJlZmVyZW5jZSxcbiAgICBmbG9hdGluZ1xuICB9ID0gX3JlZjtcbiAgY29uc3Qgc2lkZUF4aXMgPSBnZXRTaWRlQXhpcyhwbGFjZW1lbnQpO1xuICBjb25zdCBhbGlnbm1lbnRBeGlzID0gZ2V0QWxpZ25tZW50QXhpcyhwbGFjZW1lbnQpO1xuICBjb25zdCBhbGlnbkxlbmd0aCA9IGdldEF4aXNMZW5ndGgoYWxpZ25tZW50QXhpcyk7XG4gIGNvbnN0IHNpZGUgPSBnZXRTaWRlKHBsYWNlbWVudCk7XG4gIGNvbnN0IGlzVmVydGljYWwgPSBzaWRlQXhpcyA9PT0gXCJ5XCI7XG4gIGNvbnN0IGNvbW1vblggPSByZWZlcmVuY2UueCArIHJlZmVyZW5jZS53aWR0aCAvIDIgLSBmbG9hdGluZy53aWR0aCAvIDI7XG4gIGNvbnN0IGNvbW1vblkgPSByZWZlcmVuY2UueSArIHJlZmVyZW5jZS5oZWlnaHQgLyAyIC0gZmxvYXRpbmcuaGVpZ2h0IC8gMjtcbiAgY29uc3QgY29tbW9uQWxpZ24gPSByZWZlcmVuY2VbYWxpZ25MZW5ndGhdIC8gMiAtIGZsb2F0aW5nW2FsaWduTGVuZ3RoXSAvIDI7XG4gIGxldCBjb29yZHM7XG4gIHN3aXRjaCAoc2lkZSkge1xuICAgIGNhc2UgXCJ0b3BcIjpcbiAgICAgIGNvb3JkcyA9IHtcbiAgICAgICAgeDogY29tbW9uWCxcbiAgICAgICAgeTogcmVmZXJlbmNlLnkgLSBmbG9hdGluZy5oZWlnaHRcbiAgICAgIH07XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwiYm90dG9tXCI6XG4gICAgICBjb29yZHMgPSB7XG4gICAgICAgIHg6IGNvbW1vblgsXG4gICAgICAgIHk6IHJlZmVyZW5jZS55ICsgcmVmZXJlbmNlLmhlaWdodFxuICAgICAgfTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJyaWdodFwiOlxuICAgICAgY29vcmRzID0ge1xuICAgICAgICB4OiByZWZlcmVuY2UueCArIHJlZmVyZW5jZS53aWR0aCxcbiAgICAgICAgeTogY29tbW9uWVxuICAgICAgfTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJsZWZ0XCI6XG4gICAgICBjb29yZHMgPSB7XG4gICAgICAgIHg6IHJlZmVyZW5jZS54IC0gZmxvYXRpbmcud2lkdGgsXG4gICAgICAgIHk6IGNvbW1vbllcbiAgICAgIH07XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgY29vcmRzID0ge1xuICAgICAgICB4OiByZWZlcmVuY2UueCxcbiAgICAgICAgeTogcmVmZXJlbmNlLnlcbiAgICAgIH07XG4gIH1cbiAgc3dpdGNoIChnZXRBbGlnbm1lbnQocGxhY2VtZW50KSkge1xuICAgIGNhc2UgXCJzdGFydFwiOlxuICAgICAgY29vcmRzW2FsaWdubWVudEF4aXNdIC09IGNvbW1vbkFsaWduICogKHJ0bCAmJiBpc1ZlcnRpY2FsID8gLTEgOiAxKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJlbmRcIjpcbiAgICAgIGNvb3Jkc1thbGlnbm1lbnRBeGlzXSArPSBjb21tb25BbGlnbiAqIChydGwgJiYgaXNWZXJ0aWNhbCA/IC0xIDogMSk7XG4gICAgICBicmVhaztcbiAgfVxuICByZXR1cm4gY29vcmRzO1xufVxudmFyIGNvbXB1dGVQb3NpdGlvbiA9IGFzeW5jIChyZWZlcmVuY2UsIGZsb2F0aW5nLCBjb25maWcpID0+IHtcbiAgY29uc3Qge1xuICAgIHBsYWNlbWVudCA9IFwiYm90dG9tXCIsXG4gICAgc3RyYXRlZ3kgPSBcImFic29sdXRlXCIsXG4gICAgbWlkZGxld2FyZSA9IFtdLFxuICAgIHBsYXRmb3JtOiBwbGF0Zm9ybTJcbiAgfSA9IGNvbmZpZztcbiAgY29uc3QgdmFsaWRNaWRkbGV3YXJlID0gbWlkZGxld2FyZS5maWx0ZXIoQm9vbGVhbik7XG4gIGNvbnN0IHJ0bCA9IGF3YWl0IChwbGF0Zm9ybTIuaXNSVEwgPT0gbnVsbCA/IHZvaWQgMCA6IHBsYXRmb3JtMi5pc1JUTChmbG9hdGluZykpO1xuICBsZXQgcmVjdHMgPSBhd2FpdCBwbGF0Zm9ybTIuZ2V0RWxlbWVudFJlY3RzKHtcbiAgICByZWZlcmVuY2UsXG4gICAgZmxvYXRpbmcsXG4gICAgc3RyYXRlZ3lcbiAgfSk7XG4gIGxldCB7XG4gICAgeCxcbiAgICB5XG4gIH0gPSBjb21wdXRlQ29vcmRzRnJvbVBsYWNlbWVudChyZWN0cywgcGxhY2VtZW50LCBydGwpO1xuICBsZXQgc3RhdGVmdWxQbGFjZW1lbnQgPSBwbGFjZW1lbnQ7XG4gIGxldCBtaWRkbGV3YXJlRGF0YSA9IHt9O1xuICBsZXQgcmVzZXRDb3VudCA9IDA7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgdmFsaWRNaWRkbGV3YXJlLmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3Qge1xuICAgICAgbmFtZSxcbiAgICAgIGZuXG4gICAgfSA9IHZhbGlkTWlkZGxld2FyZVtpXTtcbiAgICBjb25zdCB7XG4gICAgICB4OiBuZXh0WCxcbiAgICAgIHk6IG5leHRZLFxuICAgICAgZGF0YSxcbiAgICAgIHJlc2V0XG4gICAgfSA9IGF3YWl0IGZuKHtcbiAgICAgIHgsXG4gICAgICB5LFxuICAgICAgaW5pdGlhbFBsYWNlbWVudDogcGxhY2VtZW50LFxuICAgICAgcGxhY2VtZW50OiBzdGF0ZWZ1bFBsYWNlbWVudCxcbiAgICAgIHN0cmF0ZWd5LFxuICAgICAgbWlkZGxld2FyZURhdGEsXG4gICAgICByZWN0cyxcbiAgICAgIHBsYXRmb3JtOiBwbGF0Zm9ybTIsXG4gICAgICBlbGVtZW50czoge1xuICAgICAgICByZWZlcmVuY2UsXG4gICAgICAgIGZsb2F0aW5nXG4gICAgICB9XG4gICAgfSk7XG4gICAgeCA9IG5leHRYICE9IG51bGwgPyBuZXh0WCA6IHg7XG4gICAgeSA9IG5leHRZICE9IG51bGwgPyBuZXh0WSA6IHk7XG4gICAgbWlkZGxld2FyZURhdGEgPSB7XG4gICAgICAuLi5taWRkbGV3YXJlRGF0YSxcbiAgICAgIFtuYW1lXToge1xuICAgICAgICAuLi5taWRkbGV3YXJlRGF0YVtuYW1lXSxcbiAgICAgICAgLi4uZGF0YVxuICAgICAgfVxuICAgIH07XG4gICAgaWYgKHJlc2V0ICYmIHJlc2V0Q291bnQgPD0gNTApIHtcbiAgICAgIHJlc2V0Q291bnQrKztcbiAgICAgIGlmICh0eXBlb2YgcmVzZXQgPT09IFwib2JqZWN0XCIpIHtcbiAgICAgICAgaWYgKHJlc2V0LnBsYWNlbWVudCkge1xuICAgICAgICAgIHN0YXRlZnVsUGxhY2VtZW50ID0gcmVzZXQucGxhY2VtZW50O1xuICAgICAgICB9XG4gICAgICAgIGlmIChyZXNldC5yZWN0cykge1xuICAgICAgICAgIHJlY3RzID0gcmVzZXQucmVjdHMgPT09IHRydWUgPyBhd2FpdCBwbGF0Zm9ybTIuZ2V0RWxlbWVudFJlY3RzKHtcbiAgICAgICAgICAgIHJlZmVyZW5jZSxcbiAgICAgICAgICAgIGZsb2F0aW5nLFxuICAgICAgICAgICAgc3RyYXRlZ3lcbiAgICAgICAgICB9KSA6IHJlc2V0LnJlY3RzO1xuICAgICAgICB9XG4gICAgICAgICh7XG4gICAgICAgICAgeCxcbiAgICAgICAgICB5XG4gICAgICAgIH0gPSBjb21wdXRlQ29vcmRzRnJvbVBsYWNlbWVudChyZWN0cywgc3RhdGVmdWxQbGFjZW1lbnQsIHJ0bCkpO1xuICAgICAgfVxuICAgICAgaSA9IC0xO1xuICAgICAgY29udGludWU7XG4gICAgfVxuICB9XG4gIHJldHVybiB7XG4gICAgeCxcbiAgICB5LFxuICAgIHBsYWNlbWVudDogc3RhdGVmdWxQbGFjZW1lbnQsXG4gICAgc3RyYXRlZ3ksXG4gICAgbWlkZGxld2FyZURhdGFcbiAgfTtcbn07XG5hc3luYyBmdW5jdGlvbiBkZXRlY3RPdmVyZmxvdyhzdGF0ZSwgb3B0aW9ucykge1xuICB2YXIgX2F3YWl0JHBsYXRmb3JtJGlzRWxlO1xuICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgb3B0aW9ucyA9IHt9O1xuICB9XG4gIGNvbnN0IHtcbiAgICB4LFxuICAgIHksXG4gICAgcGxhdGZvcm06IHBsYXRmb3JtMixcbiAgICByZWN0cyxcbiAgICBlbGVtZW50cyxcbiAgICBzdHJhdGVneVxuICB9ID0gc3RhdGU7XG4gIGNvbnN0IHtcbiAgICBib3VuZGFyeSA9IFwiY2xpcHBpbmdBbmNlc3RvcnNcIixcbiAgICByb290Qm91bmRhcnkgPSBcInZpZXdwb3J0XCIsXG4gICAgZWxlbWVudENvbnRleHQgPSBcImZsb2F0aW5nXCIsXG4gICAgYWx0Qm91bmRhcnkgPSBmYWxzZSxcbiAgICBwYWRkaW5nID0gMFxuICB9ID0gZXZhbHVhdGUob3B0aW9ucywgc3RhdGUpO1xuICBjb25zdCBwYWRkaW5nT2JqZWN0ID0gZ2V0UGFkZGluZ09iamVjdChwYWRkaW5nKTtcbiAgY29uc3QgYWx0Q29udGV4dCA9IGVsZW1lbnRDb250ZXh0ID09PSBcImZsb2F0aW5nXCIgPyBcInJlZmVyZW5jZVwiIDogXCJmbG9hdGluZ1wiO1xuICBjb25zdCBlbGVtZW50ID0gZWxlbWVudHNbYWx0Qm91bmRhcnkgPyBhbHRDb250ZXh0IDogZWxlbWVudENvbnRleHRdO1xuICBjb25zdCBjbGlwcGluZ0NsaWVudFJlY3QgPSByZWN0VG9DbGllbnRSZWN0KGF3YWl0IHBsYXRmb3JtMi5nZXRDbGlwcGluZ1JlY3Qoe1xuICAgIGVsZW1lbnQ6ICgoX2F3YWl0JHBsYXRmb3JtJGlzRWxlID0gYXdhaXQgKHBsYXRmb3JtMi5pc0VsZW1lbnQgPT0gbnVsbCA/IHZvaWQgMCA6IHBsYXRmb3JtMi5pc0VsZW1lbnQoZWxlbWVudCkpKSAhPSBudWxsID8gX2F3YWl0JHBsYXRmb3JtJGlzRWxlIDogdHJ1ZSkgPyBlbGVtZW50IDogZWxlbWVudC5jb250ZXh0RWxlbWVudCB8fCBhd2FpdCAocGxhdGZvcm0yLmdldERvY3VtZW50RWxlbWVudCA9PSBudWxsID8gdm9pZCAwIDogcGxhdGZvcm0yLmdldERvY3VtZW50RWxlbWVudChlbGVtZW50cy5mbG9hdGluZykpLFxuICAgIGJvdW5kYXJ5LFxuICAgIHJvb3RCb3VuZGFyeSxcbiAgICBzdHJhdGVneVxuICB9KSk7XG4gIGNvbnN0IHJlY3QgPSBlbGVtZW50Q29udGV4dCA9PT0gXCJmbG9hdGluZ1wiID8ge1xuICAgIC4uLnJlY3RzLmZsb2F0aW5nLFxuICAgIHgsXG4gICAgeVxuICB9IDogcmVjdHMucmVmZXJlbmNlO1xuICBjb25zdCBvZmZzZXRQYXJlbnQgPSBhd2FpdCAocGxhdGZvcm0yLmdldE9mZnNldFBhcmVudCA9PSBudWxsID8gdm9pZCAwIDogcGxhdGZvcm0yLmdldE9mZnNldFBhcmVudChlbGVtZW50cy5mbG9hdGluZykpO1xuICBjb25zdCBvZmZzZXRTY2FsZSA9IGF3YWl0IChwbGF0Zm9ybTIuaXNFbGVtZW50ID09IG51bGwgPyB2b2lkIDAgOiBwbGF0Zm9ybTIuaXNFbGVtZW50KG9mZnNldFBhcmVudCkpID8gYXdhaXQgKHBsYXRmb3JtMi5nZXRTY2FsZSA9PSBudWxsID8gdm9pZCAwIDogcGxhdGZvcm0yLmdldFNjYWxlKG9mZnNldFBhcmVudCkpIHx8IHtcbiAgICB4OiAxLFxuICAgIHk6IDFcbiAgfSA6IHtcbiAgICB4OiAxLFxuICAgIHk6IDFcbiAgfTtcbiAgY29uc3QgZWxlbWVudENsaWVudFJlY3QgPSByZWN0VG9DbGllbnRSZWN0KHBsYXRmb3JtMi5jb252ZXJ0T2Zmc2V0UGFyZW50UmVsYXRpdmVSZWN0VG9WaWV3cG9ydFJlbGF0aXZlUmVjdCA/IGF3YWl0IHBsYXRmb3JtMi5jb252ZXJ0T2Zmc2V0UGFyZW50UmVsYXRpdmVSZWN0VG9WaWV3cG9ydFJlbGF0aXZlUmVjdCh7XG4gICAgcmVjdCxcbiAgICBvZmZzZXRQYXJlbnQsXG4gICAgc3RyYXRlZ3lcbiAgfSkgOiByZWN0KTtcbiAgcmV0dXJuIHtcbiAgICB0b3A6IChjbGlwcGluZ0NsaWVudFJlY3QudG9wIC0gZWxlbWVudENsaWVudFJlY3QudG9wICsgcGFkZGluZ09iamVjdC50b3ApIC8gb2Zmc2V0U2NhbGUueSxcbiAgICBib3R0b206IChlbGVtZW50Q2xpZW50UmVjdC5ib3R0b20gLSBjbGlwcGluZ0NsaWVudFJlY3QuYm90dG9tICsgcGFkZGluZ09iamVjdC5ib3R0b20pIC8gb2Zmc2V0U2NhbGUueSxcbiAgICBsZWZ0OiAoY2xpcHBpbmdDbGllbnRSZWN0LmxlZnQgLSBlbGVtZW50Q2xpZW50UmVjdC5sZWZ0ICsgcGFkZGluZ09iamVjdC5sZWZ0KSAvIG9mZnNldFNjYWxlLngsXG4gICAgcmlnaHQ6IChlbGVtZW50Q2xpZW50UmVjdC5yaWdodCAtIGNsaXBwaW5nQ2xpZW50UmVjdC5yaWdodCArIHBhZGRpbmdPYmplY3QucmlnaHQpIC8gb2Zmc2V0U2NhbGUueFxuICB9O1xufVxudmFyIGZsaXAgPSBmdW5jdGlvbihvcHRpb25zKSB7XG4gIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICBvcHRpb25zID0ge307XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBuYW1lOiBcImZsaXBcIixcbiAgICBvcHRpb25zLFxuICAgIGFzeW5jIGZuKHN0YXRlKSB7XG4gICAgICB2YXIgX21pZGRsZXdhcmVEYXRhJGFycm93LCBfbWlkZGxld2FyZURhdGEkZmxpcDtcbiAgICAgIGNvbnN0IHtcbiAgICAgICAgcGxhY2VtZW50LFxuICAgICAgICBtaWRkbGV3YXJlRGF0YSxcbiAgICAgICAgcmVjdHMsXG4gICAgICAgIGluaXRpYWxQbGFjZW1lbnQsXG4gICAgICAgIHBsYXRmb3JtOiBwbGF0Zm9ybTIsXG4gICAgICAgIGVsZW1lbnRzXG4gICAgICB9ID0gc3RhdGU7XG4gICAgICBjb25zdCB7XG4gICAgICAgIG1haW5BeGlzOiBjaGVja01haW5BeGlzID0gdHJ1ZSxcbiAgICAgICAgY3Jvc3NBeGlzOiBjaGVja0Nyb3NzQXhpcyA9IHRydWUsXG4gICAgICAgIGZhbGxiYWNrUGxhY2VtZW50czogc3BlY2lmaWVkRmFsbGJhY2tQbGFjZW1lbnRzLFxuICAgICAgICBmYWxsYmFja1N0cmF0ZWd5ID0gXCJiZXN0Rml0XCIsXG4gICAgICAgIGZhbGxiYWNrQXhpc1NpZGVEaXJlY3Rpb24gPSBcIm5vbmVcIixcbiAgICAgICAgZmxpcEFsaWdubWVudCA9IHRydWUsXG4gICAgICAgIC4uLmRldGVjdE92ZXJmbG93T3B0aW9uc1xuICAgICAgfSA9IGV2YWx1YXRlKG9wdGlvbnMsIHN0YXRlKTtcbiAgICAgIGlmICgoX21pZGRsZXdhcmVEYXRhJGFycm93ID0gbWlkZGxld2FyZURhdGEuYXJyb3cpICE9IG51bGwgJiYgX21pZGRsZXdhcmVEYXRhJGFycm93LmFsaWdubWVudE9mZnNldCkge1xuICAgICAgICByZXR1cm4ge307XG4gICAgICB9XG4gICAgICBjb25zdCBzaWRlID0gZ2V0U2lkZShwbGFjZW1lbnQpO1xuICAgICAgY29uc3QgaXNCYXNlUGxhY2VtZW50ID0gZ2V0U2lkZShpbml0aWFsUGxhY2VtZW50KSA9PT0gaW5pdGlhbFBsYWNlbWVudDtcbiAgICAgIGNvbnN0IHJ0bCA9IGF3YWl0IChwbGF0Zm9ybTIuaXNSVEwgPT0gbnVsbCA/IHZvaWQgMCA6IHBsYXRmb3JtMi5pc1JUTChlbGVtZW50cy5mbG9hdGluZykpO1xuICAgICAgY29uc3QgZmFsbGJhY2tQbGFjZW1lbnRzID0gc3BlY2lmaWVkRmFsbGJhY2tQbGFjZW1lbnRzIHx8IChpc0Jhc2VQbGFjZW1lbnQgfHwgIWZsaXBBbGlnbm1lbnQgPyBbZ2V0T3Bwb3NpdGVQbGFjZW1lbnQoaW5pdGlhbFBsYWNlbWVudCldIDogZ2V0RXhwYW5kZWRQbGFjZW1lbnRzKGluaXRpYWxQbGFjZW1lbnQpKTtcbiAgICAgIGlmICghc3BlY2lmaWVkRmFsbGJhY2tQbGFjZW1lbnRzICYmIGZhbGxiYWNrQXhpc1NpZGVEaXJlY3Rpb24gIT09IFwibm9uZVwiKSB7XG4gICAgICAgIGZhbGxiYWNrUGxhY2VtZW50cy5wdXNoKC4uLmdldE9wcG9zaXRlQXhpc1BsYWNlbWVudHMoaW5pdGlhbFBsYWNlbWVudCwgZmxpcEFsaWdubWVudCwgZmFsbGJhY2tBeGlzU2lkZURpcmVjdGlvbiwgcnRsKSk7XG4gICAgICB9XG4gICAgICBjb25zdCBwbGFjZW1lbnRzMiA9IFtpbml0aWFsUGxhY2VtZW50LCAuLi5mYWxsYmFja1BsYWNlbWVudHNdO1xuICAgICAgY29uc3Qgb3ZlcmZsb3cgPSBhd2FpdCBkZXRlY3RPdmVyZmxvdyhzdGF0ZSwgZGV0ZWN0T3ZlcmZsb3dPcHRpb25zKTtcbiAgICAgIGNvbnN0IG92ZXJmbG93cyA9IFtdO1xuICAgICAgbGV0IG92ZXJmbG93c0RhdGEgPSAoKF9taWRkbGV3YXJlRGF0YSRmbGlwID0gbWlkZGxld2FyZURhdGEuZmxpcCkgPT0gbnVsbCA/IHZvaWQgMCA6IF9taWRkbGV3YXJlRGF0YSRmbGlwLm92ZXJmbG93cykgfHwgW107XG4gICAgICBpZiAoY2hlY2tNYWluQXhpcykge1xuICAgICAgICBvdmVyZmxvd3MucHVzaChvdmVyZmxvd1tzaWRlXSk7XG4gICAgICB9XG4gICAgICBpZiAoY2hlY2tDcm9zc0F4aXMpIHtcbiAgICAgICAgY29uc3Qgc2lkZXMyID0gZ2V0QWxpZ25tZW50U2lkZXMocGxhY2VtZW50LCByZWN0cywgcnRsKTtcbiAgICAgICAgb3ZlcmZsb3dzLnB1c2gob3ZlcmZsb3dbc2lkZXMyWzBdXSwgb3ZlcmZsb3dbc2lkZXMyWzFdXSk7XG4gICAgICB9XG4gICAgICBvdmVyZmxvd3NEYXRhID0gWy4uLm92ZXJmbG93c0RhdGEsIHtcbiAgICAgICAgcGxhY2VtZW50LFxuICAgICAgICBvdmVyZmxvd3NcbiAgICAgIH1dO1xuICAgICAgaWYgKCFvdmVyZmxvd3MuZXZlcnkoKHNpZGUyKSA9PiBzaWRlMiA8PSAwKSkge1xuICAgICAgICB2YXIgX21pZGRsZXdhcmVEYXRhJGZsaXAyLCBfb3ZlcmZsb3dzRGF0YSRmaWx0ZXI7XG4gICAgICAgIGNvbnN0IG5leHRJbmRleCA9ICgoKF9taWRkbGV3YXJlRGF0YSRmbGlwMiA9IG1pZGRsZXdhcmVEYXRhLmZsaXApID09IG51bGwgPyB2b2lkIDAgOiBfbWlkZGxld2FyZURhdGEkZmxpcDIuaW5kZXgpIHx8IDApICsgMTtcbiAgICAgICAgY29uc3QgbmV4dFBsYWNlbWVudCA9IHBsYWNlbWVudHMyW25leHRJbmRleF07XG4gICAgICAgIGlmIChuZXh0UGxhY2VtZW50KSB7XG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgaW5kZXg6IG5leHRJbmRleCxcbiAgICAgICAgICAgICAgb3ZlcmZsb3dzOiBvdmVyZmxvd3NEYXRhXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmVzZXQ6IHtcbiAgICAgICAgICAgICAgcGxhY2VtZW50OiBuZXh0UGxhY2VtZW50XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgcmVzZXRQbGFjZW1lbnQgPSAoX292ZXJmbG93c0RhdGEkZmlsdGVyID0gb3ZlcmZsb3dzRGF0YS5maWx0ZXIoKGQpID0+IGQub3ZlcmZsb3dzWzBdIDw9IDApLnNvcnQoKGEsIGIpID0+IGEub3ZlcmZsb3dzWzFdIC0gYi5vdmVyZmxvd3NbMV0pWzBdKSA9PSBudWxsID8gdm9pZCAwIDogX292ZXJmbG93c0RhdGEkZmlsdGVyLnBsYWNlbWVudDtcbiAgICAgICAgaWYgKCFyZXNldFBsYWNlbWVudCkge1xuICAgICAgICAgIHN3aXRjaCAoZmFsbGJhY2tTdHJhdGVneSkge1xuICAgICAgICAgICAgY2FzZSBcImJlc3RGaXRcIjoge1xuICAgICAgICAgICAgICB2YXIgX292ZXJmbG93c0RhdGEkbWFwJHNvO1xuICAgICAgICAgICAgICBjb25zdCBwbGFjZW1lbnQyID0gKF9vdmVyZmxvd3NEYXRhJG1hcCRzbyA9IG92ZXJmbG93c0RhdGEubWFwKChkKSA9PiBbZC5wbGFjZW1lbnQsIGQub3ZlcmZsb3dzLmZpbHRlcigob3ZlcmZsb3cyKSA9PiBvdmVyZmxvdzIgPiAwKS5yZWR1Y2UoKGFjYywgb3ZlcmZsb3cyKSA9PiBhY2MgKyBvdmVyZmxvdzIsIDApXSkuc29ydCgoYSwgYikgPT4gYVsxXSAtIGJbMV0pWzBdKSA9PSBudWxsID8gdm9pZCAwIDogX292ZXJmbG93c0RhdGEkbWFwJHNvWzBdO1xuICAgICAgICAgICAgICBpZiAocGxhY2VtZW50Mikge1xuICAgICAgICAgICAgICAgIHJlc2V0UGxhY2VtZW50ID0gcGxhY2VtZW50MjtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgXCJpbml0aWFsUGxhY2VtZW50XCI6XG4gICAgICAgICAgICAgIHJlc2V0UGxhY2VtZW50ID0gaW5pdGlhbFBsYWNlbWVudDtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChwbGFjZW1lbnQgIT09IHJlc2V0UGxhY2VtZW50KSB7XG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHJlc2V0OiB7XG4gICAgICAgICAgICAgIHBsYWNlbWVudDogcmVzZXRQbGFjZW1lbnRcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4ge307XG4gICAgfVxuICB9O1xufTtcbmFzeW5jIGZ1bmN0aW9uIGNvbnZlcnRWYWx1ZVRvQ29vcmRzKHN0YXRlLCBvcHRpb25zKSB7XG4gIGNvbnN0IHtcbiAgICBwbGFjZW1lbnQsXG4gICAgcGxhdGZvcm06IHBsYXRmb3JtMixcbiAgICBlbGVtZW50c1xuICB9ID0gc3RhdGU7XG4gIGNvbnN0IHJ0bCA9IGF3YWl0IChwbGF0Zm9ybTIuaXNSVEwgPT0gbnVsbCA/IHZvaWQgMCA6IHBsYXRmb3JtMi5pc1JUTChlbGVtZW50cy5mbG9hdGluZykpO1xuICBjb25zdCBzaWRlID0gZ2V0U2lkZShwbGFjZW1lbnQpO1xuICBjb25zdCBhbGlnbm1lbnQgPSBnZXRBbGlnbm1lbnQocGxhY2VtZW50KTtcbiAgY29uc3QgaXNWZXJ0aWNhbCA9IGdldFNpZGVBeGlzKHBsYWNlbWVudCkgPT09IFwieVwiO1xuICBjb25zdCBtYWluQXhpc011bHRpID0gW1wibGVmdFwiLCBcInRvcFwiXS5pbmNsdWRlcyhzaWRlKSA/IC0xIDogMTtcbiAgY29uc3QgY3Jvc3NBeGlzTXVsdGkgPSBydGwgJiYgaXNWZXJ0aWNhbCA/IC0xIDogMTtcbiAgY29uc3QgcmF3VmFsdWUgPSBldmFsdWF0ZShvcHRpb25zLCBzdGF0ZSk7XG4gIGxldCB7XG4gICAgbWFpbkF4aXMsXG4gICAgY3Jvc3NBeGlzLFxuICAgIGFsaWdubWVudEF4aXNcbiAgfSA9IHR5cGVvZiByYXdWYWx1ZSA9PT0gXCJudW1iZXJcIiA/IHtcbiAgICBtYWluQXhpczogcmF3VmFsdWUsXG4gICAgY3Jvc3NBeGlzOiAwLFxuICAgIGFsaWdubWVudEF4aXM6IG51bGxcbiAgfSA6IHtcbiAgICBtYWluQXhpczogMCxcbiAgICBjcm9zc0F4aXM6IDAsXG4gICAgYWxpZ25tZW50QXhpczogbnVsbCxcbiAgICAuLi5yYXdWYWx1ZVxuICB9O1xuICBpZiAoYWxpZ25tZW50ICYmIHR5cGVvZiBhbGlnbm1lbnRBeGlzID09PSBcIm51bWJlclwiKSB7XG4gICAgY3Jvc3NBeGlzID0gYWxpZ25tZW50ID09PSBcImVuZFwiID8gYWxpZ25tZW50QXhpcyAqIC0xIDogYWxpZ25tZW50QXhpcztcbiAgfVxuICByZXR1cm4gaXNWZXJ0aWNhbCA/IHtcbiAgICB4OiBjcm9zc0F4aXMgKiBjcm9zc0F4aXNNdWx0aSxcbiAgICB5OiBtYWluQXhpcyAqIG1haW5BeGlzTXVsdGlcbiAgfSA6IHtcbiAgICB4OiBtYWluQXhpcyAqIG1haW5BeGlzTXVsdGksXG4gICAgeTogY3Jvc3NBeGlzICogY3Jvc3NBeGlzTXVsdGlcbiAgfTtcbn1cbnZhciBvZmZzZXQgPSBmdW5jdGlvbihvcHRpb25zKSB7XG4gIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICBvcHRpb25zID0gMDtcbiAgfVxuICByZXR1cm4ge1xuICAgIG5hbWU6IFwib2Zmc2V0XCIsXG4gICAgb3B0aW9ucyxcbiAgICBhc3luYyBmbihzdGF0ZSkge1xuICAgICAgY29uc3Qge1xuICAgICAgICB4LFxuICAgICAgICB5XG4gICAgICB9ID0gc3RhdGU7XG4gICAgICBjb25zdCBkaWZmQ29vcmRzID0gYXdhaXQgY29udmVydFZhbHVlVG9Db29yZHMoc3RhdGUsIG9wdGlvbnMpO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgeDogeCArIGRpZmZDb29yZHMueCxcbiAgICAgICAgeTogeSArIGRpZmZDb29yZHMueSxcbiAgICAgICAgZGF0YTogZGlmZkNvb3Jkc1xuICAgICAgfTtcbiAgICB9XG4gIH07XG59O1xudmFyIHNoaWZ0ID0gZnVuY3Rpb24ob3B0aW9ucykge1xuICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgb3B0aW9ucyA9IHt9O1xuICB9XG4gIHJldHVybiB7XG4gICAgbmFtZTogXCJzaGlmdFwiLFxuICAgIG9wdGlvbnMsXG4gICAgYXN5bmMgZm4oc3RhdGUpIHtcbiAgICAgIGNvbnN0IHtcbiAgICAgICAgeCxcbiAgICAgICAgeSxcbiAgICAgICAgcGxhY2VtZW50XG4gICAgICB9ID0gc3RhdGU7XG4gICAgICBjb25zdCB7XG4gICAgICAgIG1haW5BeGlzOiBjaGVja01haW5BeGlzID0gdHJ1ZSxcbiAgICAgICAgY3Jvc3NBeGlzOiBjaGVja0Nyb3NzQXhpcyA9IGZhbHNlLFxuICAgICAgICBsaW1pdGVyID0ge1xuICAgICAgICAgIGZuOiAoX3JlZikgPT4ge1xuICAgICAgICAgICAgbGV0IHtcbiAgICAgICAgICAgICAgeDogeDIsXG4gICAgICAgICAgICAgIHk6IHkyXG4gICAgICAgICAgICB9ID0gX3JlZjtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgIHg6IHgyLFxuICAgICAgICAgICAgICB5OiB5MlxuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIC4uLmRldGVjdE92ZXJmbG93T3B0aW9uc1xuICAgICAgfSA9IGV2YWx1YXRlKG9wdGlvbnMsIHN0YXRlKTtcbiAgICAgIGNvbnN0IGNvb3JkcyA9IHtcbiAgICAgICAgeCxcbiAgICAgICAgeVxuICAgICAgfTtcbiAgICAgIGNvbnN0IG92ZXJmbG93ID0gYXdhaXQgZGV0ZWN0T3ZlcmZsb3coc3RhdGUsIGRldGVjdE92ZXJmbG93T3B0aW9ucyk7XG4gICAgICBjb25zdCBjcm9zc0F4aXMgPSBnZXRTaWRlQXhpcyhnZXRTaWRlKHBsYWNlbWVudCkpO1xuICAgICAgY29uc3QgbWFpbkF4aXMgPSBnZXRPcHBvc2l0ZUF4aXMoY3Jvc3NBeGlzKTtcbiAgICAgIGxldCBtYWluQXhpc0Nvb3JkID0gY29vcmRzW21haW5BeGlzXTtcbiAgICAgIGxldCBjcm9zc0F4aXNDb29yZCA9IGNvb3Jkc1tjcm9zc0F4aXNdO1xuICAgICAgaWYgKGNoZWNrTWFpbkF4aXMpIHtcbiAgICAgICAgY29uc3QgbWluU2lkZSA9IG1haW5BeGlzID09PSBcInlcIiA/IFwidG9wXCIgOiBcImxlZnRcIjtcbiAgICAgICAgY29uc3QgbWF4U2lkZSA9IG1haW5BeGlzID09PSBcInlcIiA/IFwiYm90dG9tXCIgOiBcInJpZ2h0XCI7XG4gICAgICAgIGNvbnN0IG1pbjIgPSBtYWluQXhpc0Nvb3JkICsgb3ZlcmZsb3dbbWluU2lkZV07XG4gICAgICAgIGNvbnN0IG1heDIgPSBtYWluQXhpc0Nvb3JkIC0gb3ZlcmZsb3dbbWF4U2lkZV07XG4gICAgICAgIG1haW5BeGlzQ29vcmQgPSBjbGFtcChtaW4yLCBtYWluQXhpc0Nvb3JkLCBtYXgyKTtcbiAgICAgIH1cbiAgICAgIGlmIChjaGVja0Nyb3NzQXhpcykge1xuICAgICAgICBjb25zdCBtaW5TaWRlID0gY3Jvc3NBeGlzID09PSBcInlcIiA/IFwidG9wXCIgOiBcImxlZnRcIjtcbiAgICAgICAgY29uc3QgbWF4U2lkZSA9IGNyb3NzQXhpcyA9PT0gXCJ5XCIgPyBcImJvdHRvbVwiIDogXCJyaWdodFwiO1xuICAgICAgICBjb25zdCBtaW4yID0gY3Jvc3NBeGlzQ29vcmQgKyBvdmVyZmxvd1ttaW5TaWRlXTtcbiAgICAgICAgY29uc3QgbWF4MiA9IGNyb3NzQXhpc0Nvb3JkIC0gb3ZlcmZsb3dbbWF4U2lkZV07XG4gICAgICAgIGNyb3NzQXhpc0Nvb3JkID0gY2xhbXAobWluMiwgY3Jvc3NBeGlzQ29vcmQsIG1heDIpO1xuICAgICAgfVxuICAgICAgY29uc3QgbGltaXRlZENvb3JkcyA9IGxpbWl0ZXIuZm4oe1xuICAgICAgICAuLi5zdGF0ZSxcbiAgICAgICAgW21haW5BeGlzXTogbWFpbkF4aXNDb29yZCxcbiAgICAgICAgW2Nyb3NzQXhpc106IGNyb3NzQXhpc0Nvb3JkXG4gICAgICB9KTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIC4uLmxpbWl0ZWRDb29yZHMsXG4gICAgICAgIGRhdGE6IHtcbiAgICAgICAgICB4OiBsaW1pdGVkQ29vcmRzLnggLSB4LFxuICAgICAgICAgIHk6IGxpbWl0ZWRDb29yZHMueSAtIHlcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9XG4gIH07XG59O1xuXG4vLyBub2RlX21vZHVsZXMvQGZsb2F0aW5nLXVpL3V0aWxzL2RvbS9kaXN0L2Zsb2F0aW5nLXVpLnV0aWxzLmRvbS5tanNcbmZ1bmN0aW9uIGdldE5vZGVOYW1lKG5vZGUpIHtcbiAgaWYgKGlzTm9kZShub2RlKSkge1xuICAgIHJldHVybiAobm9kZS5ub2RlTmFtZSB8fCBcIlwiKS50b0xvd2VyQ2FzZSgpO1xuICB9XG4gIHJldHVybiBcIiNkb2N1bWVudFwiO1xufVxuZnVuY3Rpb24gZ2V0V2luZG93KG5vZGUpIHtcbiAgdmFyIF9ub2RlJG93bmVyRG9jdW1lbnQ7XG4gIHJldHVybiAobm9kZSA9PSBudWxsID8gdm9pZCAwIDogKF9ub2RlJG93bmVyRG9jdW1lbnQgPSBub2RlLm93bmVyRG9jdW1lbnQpID09IG51bGwgPyB2b2lkIDAgOiBfbm9kZSRvd25lckRvY3VtZW50LmRlZmF1bHRWaWV3KSB8fCB3aW5kb3c7XG59XG5mdW5jdGlvbiBnZXREb2N1bWVudEVsZW1lbnQobm9kZSkge1xuICB2YXIgX3JlZjtcbiAgcmV0dXJuIChfcmVmID0gKGlzTm9kZShub2RlKSA/IG5vZGUub3duZXJEb2N1bWVudCA6IG5vZGUuZG9jdW1lbnQpIHx8IHdpbmRvdy5kb2N1bWVudCkgPT0gbnVsbCA/IHZvaWQgMCA6IF9yZWYuZG9jdW1lbnRFbGVtZW50O1xufVxuZnVuY3Rpb24gaXNOb2RlKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIE5vZGUgfHwgdmFsdWUgaW5zdGFuY2VvZiBnZXRXaW5kb3codmFsdWUpLk5vZGU7XG59XG5mdW5jdGlvbiBpc0VsZW1lbnQodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgRWxlbWVudCB8fCB2YWx1ZSBpbnN0YW5jZW9mIGdldFdpbmRvdyh2YWx1ZSkuRWxlbWVudDtcbn1cbmZ1bmN0aW9uIGlzSFRNTEVsZW1lbnQodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgSFRNTEVsZW1lbnQgfHwgdmFsdWUgaW5zdGFuY2VvZiBnZXRXaW5kb3codmFsdWUpLkhUTUxFbGVtZW50O1xufVxuZnVuY3Rpb24gaXNTaGFkb3dSb290KHZhbHVlKSB7XG4gIGlmICh0eXBlb2YgU2hhZG93Um9vdCA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBTaGFkb3dSb290IHx8IHZhbHVlIGluc3RhbmNlb2YgZ2V0V2luZG93KHZhbHVlKS5TaGFkb3dSb290O1xufVxuZnVuY3Rpb24gaXNPdmVyZmxvd0VsZW1lbnQoZWxlbWVudCkge1xuICBjb25zdCB7XG4gICAgb3ZlcmZsb3csXG4gICAgb3ZlcmZsb3dYLFxuICAgIG92ZXJmbG93WSxcbiAgICBkaXNwbGF5XG4gIH0gPSBnZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQpO1xuICByZXR1cm4gL2F1dG98c2Nyb2xsfG92ZXJsYXl8aGlkZGVufGNsaXAvLnRlc3Qob3ZlcmZsb3cgKyBvdmVyZmxvd1kgKyBvdmVyZmxvd1gpICYmICFbXCJpbmxpbmVcIiwgXCJjb250ZW50c1wiXS5pbmNsdWRlcyhkaXNwbGF5KTtcbn1cbmZ1bmN0aW9uIGlzVGFibGVFbGVtZW50KGVsZW1lbnQpIHtcbiAgcmV0dXJuIFtcInRhYmxlXCIsIFwidGRcIiwgXCJ0aFwiXS5pbmNsdWRlcyhnZXROb2RlTmFtZShlbGVtZW50KSk7XG59XG5mdW5jdGlvbiBpc0NvbnRhaW5pbmdCbG9jayhlbGVtZW50KSB7XG4gIGNvbnN0IHdlYmtpdCA9IGlzV2ViS2l0KCk7XG4gIGNvbnN0IGNzcyA9IGdldENvbXB1dGVkU3R5bGUoZWxlbWVudCk7XG4gIHJldHVybiBjc3MudHJhbnNmb3JtICE9PSBcIm5vbmVcIiB8fCBjc3MucGVyc3BlY3RpdmUgIT09IFwibm9uZVwiIHx8IChjc3MuY29udGFpbmVyVHlwZSA/IGNzcy5jb250YWluZXJUeXBlICE9PSBcIm5vcm1hbFwiIDogZmFsc2UpIHx8ICF3ZWJraXQgJiYgKGNzcy5iYWNrZHJvcEZpbHRlciA/IGNzcy5iYWNrZHJvcEZpbHRlciAhPT0gXCJub25lXCIgOiBmYWxzZSkgfHwgIXdlYmtpdCAmJiAoY3NzLmZpbHRlciA/IGNzcy5maWx0ZXIgIT09IFwibm9uZVwiIDogZmFsc2UpIHx8IFtcInRyYW5zZm9ybVwiLCBcInBlcnNwZWN0aXZlXCIsIFwiZmlsdGVyXCJdLnNvbWUoKHZhbHVlKSA9PiAoY3NzLndpbGxDaGFuZ2UgfHwgXCJcIikuaW5jbHVkZXModmFsdWUpKSB8fCBbXCJwYWludFwiLCBcImxheW91dFwiLCBcInN0cmljdFwiLCBcImNvbnRlbnRcIl0uc29tZSgodmFsdWUpID0+IChjc3MuY29udGFpbiB8fCBcIlwiKS5pbmNsdWRlcyh2YWx1ZSkpO1xufVxuZnVuY3Rpb24gZ2V0Q29udGFpbmluZ0Jsb2NrKGVsZW1lbnQpIHtcbiAgbGV0IGN1cnJlbnROb2RlID0gZ2V0UGFyZW50Tm9kZShlbGVtZW50KTtcbiAgd2hpbGUgKGlzSFRNTEVsZW1lbnQoY3VycmVudE5vZGUpICYmICFpc0xhc3RUcmF2ZXJzYWJsZU5vZGUoY3VycmVudE5vZGUpKSB7XG4gICAgaWYgKGlzQ29udGFpbmluZ0Jsb2NrKGN1cnJlbnROb2RlKSkge1xuICAgICAgcmV0dXJuIGN1cnJlbnROb2RlO1xuICAgIH0gZWxzZSB7XG4gICAgICBjdXJyZW50Tm9kZSA9IGdldFBhcmVudE5vZGUoY3VycmVudE5vZGUpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbnVsbDtcbn1cbmZ1bmN0aW9uIGlzV2ViS2l0KCkge1xuICBpZiAodHlwZW9mIENTUyA9PT0gXCJ1bmRlZmluZWRcIiB8fCAhQ1NTLnN1cHBvcnRzKVxuICAgIHJldHVybiBmYWxzZTtcbiAgcmV0dXJuIENTUy5zdXBwb3J0cyhcIi13ZWJraXQtYmFja2Ryb3AtZmlsdGVyXCIsIFwibm9uZVwiKTtcbn1cbmZ1bmN0aW9uIGlzTGFzdFRyYXZlcnNhYmxlTm9kZShub2RlKSB7XG4gIHJldHVybiBbXCJodG1sXCIsIFwiYm9keVwiLCBcIiNkb2N1bWVudFwiXS5pbmNsdWRlcyhnZXROb2RlTmFtZShub2RlKSk7XG59XG5mdW5jdGlvbiBnZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQpIHtcbiAgcmV0dXJuIGdldFdpbmRvdyhlbGVtZW50KS5nZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQpO1xufVxuZnVuY3Rpb24gZ2V0Tm9kZVNjcm9sbChlbGVtZW50KSB7XG4gIGlmIChpc0VsZW1lbnQoZWxlbWVudCkpIHtcbiAgICByZXR1cm4ge1xuICAgICAgc2Nyb2xsTGVmdDogZWxlbWVudC5zY3JvbGxMZWZ0LFxuICAgICAgc2Nyb2xsVG9wOiBlbGVtZW50LnNjcm9sbFRvcFxuICAgIH07XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBzY3JvbGxMZWZ0OiBlbGVtZW50LnBhZ2VYT2Zmc2V0LFxuICAgIHNjcm9sbFRvcDogZWxlbWVudC5wYWdlWU9mZnNldFxuICB9O1xufVxuZnVuY3Rpb24gZ2V0UGFyZW50Tm9kZShub2RlKSB7XG4gIGlmIChnZXROb2RlTmFtZShub2RlKSA9PT0gXCJodG1sXCIpIHtcbiAgICByZXR1cm4gbm9kZTtcbiAgfVxuICBjb25zdCByZXN1bHQgPSAoXG4gICAgLy8gU3RlcCBpbnRvIHRoZSBzaGFkb3cgRE9NIG9mIHRoZSBwYXJlbnQgb2YgYSBzbG90dGVkIG5vZGUuXG4gICAgbm9kZS5hc3NpZ25lZFNsb3QgfHwgLy8gRE9NIEVsZW1lbnQgZGV0ZWN0ZWQuXG4gICAgbm9kZS5wYXJlbnROb2RlIHx8IC8vIFNoYWRvd1Jvb3QgZGV0ZWN0ZWQuXG4gICAgaXNTaGFkb3dSb290KG5vZGUpICYmIG5vZGUuaG9zdCB8fCAvLyBGYWxsYmFjay5cbiAgICBnZXREb2N1bWVudEVsZW1lbnQobm9kZSlcbiAgKTtcbiAgcmV0dXJuIGlzU2hhZG93Um9vdChyZXN1bHQpID8gcmVzdWx0Lmhvc3QgOiByZXN1bHQ7XG59XG5mdW5jdGlvbiBnZXROZWFyZXN0T3ZlcmZsb3dBbmNlc3Rvcihub2RlKSB7XG4gIGNvbnN0IHBhcmVudE5vZGUgPSBnZXRQYXJlbnROb2RlKG5vZGUpO1xuICBpZiAoaXNMYXN0VHJhdmVyc2FibGVOb2RlKHBhcmVudE5vZGUpKSB7XG4gICAgcmV0dXJuIG5vZGUub3duZXJEb2N1bWVudCA/IG5vZGUub3duZXJEb2N1bWVudC5ib2R5IDogbm9kZS5ib2R5O1xuICB9XG4gIGlmIChpc0hUTUxFbGVtZW50KHBhcmVudE5vZGUpICYmIGlzT3ZlcmZsb3dFbGVtZW50KHBhcmVudE5vZGUpKSB7XG4gICAgcmV0dXJuIHBhcmVudE5vZGU7XG4gIH1cbiAgcmV0dXJuIGdldE5lYXJlc3RPdmVyZmxvd0FuY2VzdG9yKHBhcmVudE5vZGUpO1xufVxuZnVuY3Rpb24gZ2V0T3ZlcmZsb3dBbmNlc3RvcnMobm9kZSwgbGlzdCwgdHJhdmVyc2VJZnJhbWVzKSB7XG4gIHZhciBfbm9kZSRvd25lckRvY3VtZW50MjtcbiAgaWYgKGxpc3QgPT09IHZvaWQgMCkge1xuICAgIGxpc3QgPSBbXTtcbiAgfVxuICBpZiAodHJhdmVyc2VJZnJhbWVzID09PSB2b2lkIDApIHtcbiAgICB0cmF2ZXJzZUlmcmFtZXMgPSB0cnVlO1xuICB9XG4gIGNvbnN0IHNjcm9sbGFibGVBbmNlc3RvciA9IGdldE5lYXJlc3RPdmVyZmxvd0FuY2VzdG9yKG5vZGUpO1xuICBjb25zdCBpc0JvZHkgPSBzY3JvbGxhYmxlQW5jZXN0b3IgPT09ICgoX25vZGUkb3duZXJEb2N1bWVudDIgPSBub2RlLm93bmVyRG9jdW1lbnQpID09IG51bGwgPyB2b2lkIDAgOiBfbm9kZSRvd25lckRvY3VtZW50Mi5ib2R5KTtcbiAgY29uc3Qgd2luID0gZ2V0V2luZG93KHNjcm9sbGFibGVBbmNlc3Rvcik7XG4gIGlmIChpc0JvZHkpIHtcbiAgICByZXR1cm4gbGlzdC5jb25jYXQod2luLCB3aW4udmlzdWFsVmlld3BvcnQgfHwgW10sIGlzT3ZlcmZsb3dFbGVtZW50KHNjcm9sbGFibGVBbmNlc3RvcikgPyBzY3JvbGxhYmxlQW5jZXN0b3IgOiBbXSwgd2luLmZyYW1lRWxlbWVudCAmJiB0cmF2ZXJzZUlmcmFtZXMgPyBnZXRPdmVyZmxvd0FuY2VzdG9ycyh3aW4uZnJhbWVFbGVtZW50KSA6IFtdKTtcbiAgfVxuICByZXR1cm4gbGlzdC5jb25jYXQoc2Nyb2xsYWJsZUFuY2VzdG9yLCBnZXRPdmVyZmxvd0FuY2VzdG9ycyhzY3JvbGxhYmxlQW5jZXN0b3IsIFtdLCB0cmF2ZXJzZUlmcmFtZXMpKTtcbn1cblxuLy8gbm9kZV9tb2R1bGVzL0BmbG9hdGluZy11aS9kb20vZGlzdC9mbG9hdGluZy11aS5kb20ubWpzXG5mdW5jdGlvbiBnZXRDc3NEaW1lbnNpb25zKGVsZW1lbnQpIHtcbiAgY29uc3QgY3NzID0gZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KTtcbiAgbGV0IHdpZHRoID0gcGFyc2VGbG9hdChjc3Mud2lkdGgpIHx8IDA7XG4gIGxldCBoZWlnaHQgPSBwYXJzZUZsb2F0KGNzcy5oZWlnaHQpIHx8IDA7XG4gIGNvbnN0IGhhc09mZnNldCA9IGlzSFRNTEVsZW1lbnQoZWxlbWVudCk7XG4gIGNvbnN0IG9mZnNldFdpZHRoID0gaGFzT2Zmc2V0ID8gZWxlbWVudC5vZmZzZXRXaWR0aCA6IHdpZHRoO1xuICBjb25zdCBvZmZzZXRIZWlnaHQgPSBoYXNPZmZzZXQgPyBlbGVtZW50Lm9mZnNldEhlaWdodCA6IGhlaWdodDtcbiAgY29uc3Qgc2hvdWxkRmFsbGJhY2sgPSByb3VuZCh3aWR0aCkgIT09IG9mZnNldFdpZHRoIHx8IHJvdW5kKGhlaWdodCkgIT09IG9mZnNldEhlaWdodDtcbiAgaWYgKHNob3VsZEZhbGxiYWNrKSB7XG4gICAgd2lkdGggPSBvZmZzZXRXaWR0aDtcbiAgICBoZWlnaHQgPSBvZmZzZXRIZWlnaHQ7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICB3aWR0aCxcbiAgICBoZWlnaHQsXG4gICAgJDogc2hvdWxkRmFsbGJhY2tcbiAgfTtcbn1cbmZ1bmN0aW9uIHVud3JhcEVsZW1lbnQoZWxlbWVudCkge1xuICByZXR1cm4gIWlzRWxlbWVudChlbGVtZW50KSA/IGVsZW1lbnQuY29udGV4dEVsZW1lbnQgOiBlbGVtZW50O1xufVxuZnVuY3Rpb24gZ2V0U2NhbGUoZWxlbWVudCkge1xuICBjb25zdCBkb21FbGVtZW50ID0gdW53cmFwRWxlbWVudChlbGVtZW50KTtcbiAgaWYgKCFpc0hUTUxFbGVtZW50KGRvbUVsZW1lbnQpKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUNvb3JkcygxKTtcbiAgfVxuICBjb25zdCByZWN0ID0gZG9tRWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgY29uc3Qge1xuICAgIHdpZHRoLFxuICAgIGhlaWdodCxcbiAgICAkXG4gIH0gPSBnZXRDc3NEaW1lbnNpb25zKGRvbUVsZW1lbnQpO1xuICBsZXQgeCA9ICgkID8gcm91bmQocmVjdC53aWR0aCkgOiByZWN0LndpZHRoKSAvIHdpZHRoO1xuICBsZXQgeSA9ICgkID8gcm91bmQocmVjdC5oZWlnaHQpIDogcmVjdC5oZWlnaHQpIC8gaGVpZ2h0O1xuICBpZiAoIXggfHwgIU51bWJlci5pc0Zpbml0ZSh4KSkge1xuICAgIHggPSAxO1xuICB9XG4gIGlmICgheSB8fCAhTnVtYmVyLmlzRmluaXRlKHkpKSB7XG4gICAgeSA9IDE7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICB4LFxuICAgIHlcbiAgfTtcbn1cbnZhciBub09mZnNldHMgPSAvKiBAX19QVVJFX18gKi8gY3JlYXRlQ29vcmRzKDApO1xuZnVuY3Rpb24gZ2V0VmlzdWFsT2Zmc2V0cyhlbGVtZW50KSB7XG4gIGNvbnN0IHdpbiA9IGdldFdpbmRvdyhlbGVtZW50KTtcbiAgaWYgKCFpc1dlYktpdCgpIHx8ICF3aW4udmlzdWFsVmlld3BvcnQpIHtcbiAgICByZXR1cm4gbm9PZmZzZXRzO1xuICB9XG4gIHJldHVybiB7XG4gICAgeDogd2luLnZpc3VhbFZpZXdwb3J0Lm9mZnNldExlZnQsXG4gICAgeTogd2luLnZpc3VhbFZpZXdwb3J0Lm9mZnNldFRvcFxuICB9O1xufVxuZnVuY3Rpb24gc2hvdWxkQWRkVmlzdWFsT2Zmc2V0cyhlbGVtZW50LCBpc0ZpeGVkLCBmbG9hdGluZ09mZnNldFBhcmVudCkge1xuICBpZiAoaXNGaXhlZCA9PT0gdm9pZCAwKSB7XG4gICAgaXNGaXhlZCA9IGZhbHNlO1xuICB9XG4gIGlmICghZmxvYXRpbmdPZmZzZXRQYXJlbnQgfHwgaXNGaXhlZCAmJiBmbG9hdGluZ09mZnNldFBhcmVudCAhPT0gZ2V0V2luZG93KGVsZW1lbnQpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiBpc0ZpeGVkO1xufVxuZnVuY3Rpb24gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KGVsZW1lbnQsIGluY2x1ZGVTY2FsZSwgaXNGaXhlZFN0cmF0ZWd5LCBvZmZzZXRQYXJlbnQpIHtcbiAgaWYgKGluY2x1ZGVTY2FsZSA9PT0gdm9pZCAwKSB7XG4gICAgaW5jbHVkZVNjYWxlID0gZmFsc2U7XG4gIH1cbiAgaWYgKGlzRml4ZWRTdHJhdGVneSA9PT0gdm9pZCAwKSB7XG4gICAgaXNGaXhlZFN0cmF0ZWd5ID0gZmFsc2U7XG4gIH1cbiAgY29uc3QgY2xpZW50UmVjdCA9IGVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gIGNvbnN0IGRvbUVsZW1lbnQgPSB1bndyYXBFbGVtZW50KGVsZW1lbnQpO1xuICBsZXQgc2NhbGUgPSBjcmVhdGVDb29yZHMoMSk7XG4gIGlmIChpbmNsdWRlU2NhbGUpIHtcbiAgICBpZiAob2Zmc2V0UGFyZW50KSB7XG4gICAgICBpZiAoaXNFbGVtZW50KG9mZnNldFBhcmVudCkpIHtcbiAgICAgICAgc2NhbGUgPSBnZXRTY2FsZShvZmZzZXRQYXJlbnQpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBzY2FsZSA9IGdldFNjYWxlKGVsZW1lbnQpO1xuICAgIH1cbiAgfVxuICBjb25zdCB2aXN1YWxPZmZzZXRzID0gc2hvdWxkQWRkVmlzdWFsT2Zmc2V0cyhkb21FbGVtZW50LCBpc0ZpeGVkU3RyYXRlZ3ksIG9mZnNldFBhcmVudCkgPyBnZXRWaXN1YWxPZmZzZXRzKGRvbUVsZW1lbnQpIDogY3JlYXRlQ29vcmRzKDApO1xuICBsZXQgeCA9IChjbGllbnRSZWN0LmxlZnQgKyB2aXN1YWxPZmZzZXRzLngpIC8gc2NhbGUueDtcbiAgbGV0IHkgPSAoY2xpZW50UmVjdC50b3AgKyB2aXN1YWxPZmZzZXRzLnkpIC8gc2NhbGUueTtcbiAgbGV0IHdpZHRoID0gY2xpZW50UmVjdC53aWR0aCAvIHNjYWxlLng7XG4gIGxldCBoZWlnaHQgPSBjbGllbnRSZWN0LmhlaWdodCAvIHNjYWxlLnk7XG4gIGlmIChkb21FbGVtZW50KSB7XG4gICAgY29uc3Qgd2luID0gZ2V0V2luZG93KGRvbUVsZW1lbnQpO1xuICAgIGNvbnN0IG9mZnNldFdpbiA9IG9mZnNldFBhcmVudCAmJiBpc0VsZW1lbnQob2Zmc2V0UGFyZW50KSA/IGdldFdpbmRvdyhvZmZzZXRQYXJlbnQpIDogb2Zmc2V0UGFyZW50O1xuICAgIGxldCBjdXJyZW50SUZyYW1lID0gd2luLmZyYW1lRWxlbWVudDtcbiAgICB3aGlsZSAoY3VycmVudElGcmFtZSAmJiBvZmZzZXRQYXJlbnQgJiYgb2Zmc2V0V2luICE9PSB3aW4pIHtcbiAgICAgIGNvbnN0IGlmcmFtZVNjYWxlID0gZ2V0U2NhbGUoY3VycmVudElGcmFtZSk7XG4gICAgICBjb25zdCBpZnJhbWVSZWN0ID0gY3VycmVudElGcmFtZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgIGNvbnN0IGNzcyA9IGdldENvbXB1dGVkU3R5bGUoY3VycmVudElGcmFtZSk7XG4gICAgICBjb25zdCBsZWZ0ID0gaWZyYW1lUmVjdC5sZWZ0ICsgKGN1cnJlbnRJRnJhbWUuY2xpZW50TGVmdCArIHBhcnNlRmxvYXQoY3NzLnBhZGRpbmdMZWZ0KSkgKiBpZnJhbWVTY2FsZS54O1xuICAgICAgY29uc3QgdG9wID0gaWZyYW1lUmVjdC50b3AgKyAoY3VycmVudElGcmFtZS5jbGllbnRUb3AgKyBwYXJzZUZsb2F0KGNzcy5wYWRkaW5nVG9wKSkgKiBpZnJhbWVTY2FsZS55O1xuICAgICAgeCAqPSBpZnJhbWVTY2FsZS54O1xuICAgICAgeSAqPSBpZnJhbWVTY2FsZS55O1xuICAgICAgd2lkdGggKj0gaWZyYW1lU2NhbGUueDtcbiAgICAgIGhlaWdodCAqPSBpZnJhbWVTY2FsZS55O1xuICAgICAgeCArPSBsZWZ0O1xuICAgICAgeSArPSB0b3A7XG4gICAgICBjdXJyZW50SUZyYW1lID0gZ2V0V2luZG93KGN1cnJlbnRJRnJhbWUpLmZyYW1lRWxlbWVudDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlY3RUb0NsaWVudFJlY3Qoe1xuICAgIHdpZHRoLFxuICAgIGhlaWdodCxcbiAgICB4LFxuICAgIHlcbiAgfSk7XG59XG5mdW5jdGlvbiBjb252ZXJ0T2Zmc2V0UGFyZW50UmVsYXRpdmVSZWN0VG9WaWV3cG9ydFJlbGF0aXZlUmVjdChfcmVmKSB7XG4gIGxldCB7XG4gICAgcmVjdCxcbiAgICBvZmZzZXRQYXJlbnQsXG4gICAgc3RyYXRlZ3lcbiAgfSA9IF9yZWY7XG4gIGNvbnN0IGlzT2Zmc2V0UGFyZW50QW5FbGVtZW50ID0gaXNIVE1MRWxlbWVudChvZmZzZXRQYXJlbnQpO1xuICBjb25zdCBkb2N1bWVudEVsZW1lbnQgPSBnZXREb2N1bWVudEVsZW1lbnQob2Zmc2V0UGFyZW50KTtcbiAgaWYgKG9mZnNldFBhcmVudCA9PT0gZG9jdW1lbnRFbGVtZW50KSB7XG4gICAgcmV0dXJuIHJlY3Q7XG4gIH1cbiAgbGV0IHNjcm9sbCA9IHtcbiAgICBzY3JvbGxMZWZ0OiAwLFxuICAgIHNjcm9sbFRvcDogMFxuICB9O1xuICBsZXQgc2NhbGUgPSBjcmVhdGVDb29yZHMoMSk7XG4gIGNvbnN0IG9mZnNldHMgPSBjcmVhdGVDb29yZHMoMCk7XG4gIGlmIChpc09mZnNldFBhcmVudEFuRWxlbWVudCB8fCAhaXNPZmZzZXRQYXJlbnRBbkVsZW1lbnQgJiYgc3RyYXRlZ3kgIT09IFwiZml4ZWRcIikge1xuICAgIGlmIChnZXROb2RlTmFtZShvZmZzZXRQYXJlbnQpICE9PSBcImJvZHlcIiB8fCBpc092ZXJmbG93RWxlbWVudChkb2N1bWVudEVsZW1lbnQpKSB7XG4gICAgICBzY3JvbGwgPSBnZXROb2RlU2Nyb2xsKG9mZnNldFBhcmVudCk7XG4gICAgfVxuICAgIGlmIChpc0hUTUxFbGVtZW50KG9mZnNldFBhcmVudCkpIHtcbiAgICAgIGNvbnN0IG9mZnNldFJlY3QgPSBnZXRCb3VuZGluZ0NsaWVudFJlY3Qob2Zmc2V0UGFyZW50KTtcbiAgICAgIHNjYWxlID0gZ2V0U2NhbGUob2Zmc2V0UGFyZW50KTtcbiAgICAgIG9mZnNldHMueCA9IG9mZnNldFJlY3QueCArIG9mZnNldFBhcmVudC5jbGllbnRMZWZ0O1xuICAgICAgb2Zmc2V0cy55ID0gb2Zmc2V0UmVjdC55ICsgb2Zmc2V0UGFyZW50LmNsaWVudFRvcDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHtcbiAgICB3aWR0aDogcmVjdC53aWR0aCAqIHNjYWxlLngsXG4gICAgaGVpZ2h0OiByZWN0LmhlaWdodCAqIHNjYWxlLnksXG4gICAgeDogcmVjdC54ICogc2NhbGUueCAtIHNjcm9sbC5zY3JvbGxMZWZ0ICogc2NhbGUueCArIG9mZnNldHMueCxcbiAgICB5OiByZWN0LnkgKiBzY2FsZS55IC0gc2Nyb2xsLnNjcm9sbFRvcCAqIHNjYWxlLnkgKyBvZmZzZXRzLnlcbiAgfTtcbn1cbmZ1bmN0aW9uIGdldENsaWVudFJlY3RzKGVsZW1lbnQpIHtcbiAgcmV0dXJuIEFycmF5LmZyb20oZWxlbWVudC5nZXRDbGllbnRSZWN0cygpKTtcbn1cbmZ1bmN0aW9uIGdldFdpbmRvd1Njcm9sbEJhclgoZWxlbWVudCkge1xuICByZXR1cm4gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KGdldERvY3VtZW50RWxlbWVudChlbGVtZW50KSkubGVmdCArIGdldE5vZGVTY3JvbGwoZWxlbWVudCkuc2Nyb2xsTGVmdDtcbn1cbmZ1bmN0aW9uIGdldERvY3VtZW50UmVjdChlbGVtZW50KSB7XG4gIGNvbnN0IGh0bWwgPSBnZXREb2N1bWVudEVsZW1lbnQoZWxlbWVudCk7XG4gIGNvbnN0IHNjcm9sbCA9IGdldE5vZGVTY3JvbGwoZWxlbWVudCk7XG4gIGNvbnN0IGJvZHkgPSBlbGVtZW50Lm93bmVyRG9jdW1lbnQuYm9keTtcbiAgY29uc3Qgd2lkdGggPSBtYXgoaHRtbC5zY3JvbGxXaWR0aCwgaHRtbC5jbGllbnRXaWR0aCwgYm9keS5zY3JvbGxXaWR0aCwgYm9keS5jbGllbnRXaWR0aCk7XG4gIGNvbnN0IGhlaWdodCA9IG1heChodG1sLnNjcm9sbEhlaWdodCwgaHRtbC5jbGllbnRIZWlnaHQsIGJvZHkuc2Nyb2xsSGVpZ2h0LCBib2R5LmNsaWVudEhlaWdodCk7XG4gIGxldCB4ID0gLXNjcm9sbC5zY3JvbGxMZWZ0ICsgZ2V0V2luZG93U2Nyb2xsQmFyWChlbGVtZW50KTtcbiAgY29uc3QgeSA9IC1zY3JvbGwuc2Nyb2xsVG9wO1xuICBpZiAoZ2V0Q29tcHV0ZWRTdHlsZShib2R5KS5kaXJlY3Rpb24gPT09IFwicnRsXCIpIHtcbiAgICB4ICs9IG1heChodG1sLmNsaWVudFdpZHRoLCBib2R5LmNsaWVudFdpZHRoKSAtIHdpZHRoO1xuICB9XG4gIHJldHVybiB7XG4gICAgd2lkdGgsXG4gICAgaGVpZ2h0LFxuICAgIHgsXG4gICAgeVxuICB9O1xufVxuZnVuY3Rpb24gZ2V0Vmlld3BvcnRSZWN0KGVsZW1lbnQsIHN0cmF0ZWd5KSB7XG4gIGNvbnN0IHdpbiA9IGdldFdpbmRvdyhlbGVtZW50KTtcbiAgY29uc3QgaHRtbCA9IGdldERvY3VtZW50RWxlbWVudChlbGVtZW50KTtcbiAgY29uc3QgdmlzdWFsVmlld3BvcnQgPSB3aW4udmlzdWFsVmlld3BvcnQ7XG4gIGxldCB3aWR0aCA9IGh0bWwuY2xpZW50V2lkdGg7XG4gIGxldCBoZWlnaHQgPSBodG1sLmNsaWVudEhlaWdodDtcbiAgbGV0IHggPSAwO1xuICBsZXQgeSA9IDA7XG4gIGlmICh2aXN1YWxWaWV3cG9ydCkge1xuICAgIHdpZHRoID0gdmlzdWFsVmlld3BvcnQud2lkdGg7XG4gICAgaGVpZ2h0ID0gdmlzdWFsVmlld3BvcnQuaGVpZ2h0O1xuICAgIGNvbnN0IHZpc3VhbFZpZXdwb3J0QmFzZWQgPSBpc1dlYktpdCgpO1xuICAgIGlmICghdmlzdWFsVmlld3BvcnRCYXNlZCB8fCB2aXN1YWxWaWV3cG9ydEJhc2VkICYmIHN0cmF0ZWd5ID09PSBcImZpeGVkXCIpIHtcbiAgICAgIHggPSB2aXN1YWxWaWV3cG9ydC5vZmZzZXRMZWZ0O1xuICAgICAgeSA9IHZpc3VhbFZpZXdwb3J0Lm9mZnNldFRvcDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHtcbiAgICB3aWR0aCxcbiAgICBoZWlnaHQsXG4gICAgeCxcbiAgICB5XG4gIH07XG59XG5mdW5jdGlvbiBnZXRJbm5lckJvdW5kaW5nQ2xpZW50UmVjdChlbGVtZW50LCBzdHJhdGVneSkge1xuICBjb25zdCBjbGllbnRSZWN0ID0gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KGVsZW1lbnQsIHRydWUsIHN0cmF0ZWd5ID09PSBcImZpeGVkXCIpO1xuICBjb25zdCB0b3AgPSBjbGllbnRSZWN0LnRvcCArIGVsZW1lbnQuY2xpZW50VG9wO1xuICBjb25zdCBsZWZ0ID0gY2xpZW50UmVjdC5sZWZ0ICsgZWxlbWVudC5jbGllbnRMZWZ0O1xuICBjb25zdCBzY2FsZSA9IGlzSFRNTEVsZW1lbnQoZWxlbWVudCkgPyBnZXRTY2FsZShlbGVtZW50KSA6IGNyZWF0ZUNvb3JkcygxKTtcbiAgY29uc3Qgd2lkdGggPSBlbGVtZW50LmNsaWVudFdpZHRoICogc2NhbGUueDtcbiAgY29uc3QgaGVpZ2h0ID0gZWxlbWVudC5jbGllbnRIZWlnaHQgKiBzY2FsZS55O1xuICBjb25zdCB4ID0gbGVmdCAqIHNjYWxlLng7XG4gIGNvbnN0IHkgPSB0b3AgKiBzY2FsZS55O1xuICByZXR1cm4ge1xuICAgIHdpZHRoLFxuICAgIGhlaWdodCxcbiAgICB4LFxuICAgIHlcbiAgfTtcbn1cbmZ1bmN0aW9uIGdldENsaWVudFJlY3RGcm9tQ2xpcHBpbmdBbmNlc3RvcihlbGVtZW50LCBjbGlwcGluZ0FuY2VzdG9yLCBzdHJhdGVneSkge1xuICBsZXQgcmVjdDtcbiAgaWYgKGNsaXBwaW5nQW5jZXN0b3IgPT09IFwidmlld3BvcnRcIikge1xuICAgIHJlY3QgPSBnZXRWaWV3cG9ydFJlY3QoZWxlbWVudCwgc3RyYXRlZ3kpO1xuICB9IGVsc2UgaWYgKGNsaXBwaW5nQW5jZXN0b3IgPT09IFwiZG9jdW1lbnRcIikge1xuICAgIHJlY3QgPSBnZXREb2N1bWVudFJlY3QoZ2V0RG9jdW1lbnRFbGVtZW50KGVsZW1lbnQpKTtcbiAgfSBlbHNlIGlmIChpc0VsZW1lbnQoY2xpcHBpbmdBbmNlc3RvcikpIHtcbiAgICByZWN0ID0gZ2V0SW5uZXJCb3VuZGluZ0NsaWVudFJlY3QoY2xpcHBpbmdBbmNlc3Rvciwgc3RyYXRlZ3kpO1xuICB9IGVsc2Uge1xuICAgIGNvbnN0IHZpc3VhbE9mZnNldHMgPSBnZXRWaXN1YWxPZmZzZXRzKGVsZW1lbnQpO1xuICAgIHJlY3QgPSB7XG4gICAgICAuLi5jbGlwcGluZ0FuY2VzdG9yLFxuICAgICAgeDogY2xpcHBpbmdBbmNlc3Rvci54IC0gdmlzdWFsT2Zmc2V0cy54LFxuICAgICAgeTogY2xpcHBpbmdBbmNlc3Rvci55IC0gdmlzdWFsT2Zmc2V0cy55XG4gICAgfTtcbiAgfVxuICByZXR1cm4gcmVjdFRvQ2xpZW50UmVjdChyZWN0KTtcbn1cbmZ1bmN0aW9uIGhhc0ZpeGVkUG9zaXRpb25BbmNlc3RvcihlbGVtZW50LCBzdG9wTm9kZSkge1xuICBjb25zdCBwYXJlbnROb2RlID0gZ2V0UGFyZW50Tm9kZShlbGVtZW50KTtcbiAgaWYgKHBhcmVudE5vZGUgPT09IHN0b3BOb2RlIHx8ICFpc0VsZW1lbnQocGFyZW50Tm9kZSkgfHwgaXNMYXN0VHJhdmVyc2FibGVOb2RlKHBhcmVudE5vZGUpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiBnZXRDb21wdXRlZFN0eWxlKHBhcmVudE5vZGUpLnBvc2l0aW9uID09PSBcImZpeGVkXCIgfHwgaGFzRml4ZWRQb3NpdGlvbkFuY2VzdG9yKHBhcmVudE5vZGUsIHN0b3BOb2RlKTtcbn1cbmZ1bmN0aW9uIGdldENsaXBwaW5nRWxlbWVudEFuY2VzdG9ycyhlbGVtZW50LCBjYWNoZSkge1xuICBjb25zdCBjYWNoZWRSZXN1bHQgPSBjYWNoZS5nZXQoZWxlbWVudCk7XG4gIGlmIChjYWNoZWRSZXN1bHQpIHtcbiAgICByZXR1cm4gY2FjaGVkUmVzdWx0O1xuICB9XG4gIGxldCByZXN1bHQgPSBnZXRPdmVyZmxvd0FuY2VzdG9ycyhlbGVtZW50LCBbXSwgZmFsc2UpLmZpbHRlcigoZWwpID0+IGlzRWxlbWVudChlbCkgJiYgZ2V0Tm9kZU5hbWUoZWwpICE9PSBcImJvZHlcIik7XG4gIGxldCBjdXJyZW50Q29udGFpbmluZ0Jsb2NrQ29tcHV0ZWRTdHlsZSA9IG51bGw7XG4gIGNvbnN0IGVsZW1lbnRJc0ZpeGVkID0gZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KS5wb3NpdGlvbiA9PT0gXCJmaXhlZFwiO1xuICBsZXQgY3VycmVudE5vZGUgPSBlbGVtZW50SXNGaXhlZCA/IGdldFBhcmVudE5vZGUoZWxlbWVudCkgOiBlbGVtZW50O1xuICB3aGlsZSAoaXNFbGVtZW50KGN1cnJlbnROb2RlKSAmJiAhaXNMYXN0VHJhdmVyc2FibGVOb2RlKGN1cnJlbnROb2RlKSkge1xuICAgIGNvbnN0IGNvbXB1dGVkU3R5bGUgPSBnZXRDb21wdXRlZFN0eWxlKGN1cnJlbnROb2RlKTtcbiAgICBjb25zdCBjdXJyZW50Tm9kZUlzQ29udGFpbmluZyA9IGlzQ29udGFpbmluZ0Jsb2NrKGN1cnJlbnROb2RlKTtcbiAgICBpZiAoIWN1cnJlbnROb2RlSXNDb250YWluaW5nICYmIGNvbXB1dGVkU3R5bGUucG9zaXRpb24gPT09IFwiZml4ZWRcIikge1xuICAgICAgY3VycmVudENvbnRhaW5pbmdCbG9ja0NvbXB1dGVkU3R5bGUgPSBudWxsO1xuICAgIH1cbiAgICBjb25zdCBzaG91bGREcm9wQ3VycmVudE5vZGUgPSBlbGVtZW50SXNGaXhlZCA/ICFjdXJyZW50Tm9kZUlzQ29udGFpbmluZyAmJiAhY3VycmVudENvbnRhaW5pbmdCbG9ja0NvbXB1dGVkU3R5bGUgOiAhY3VycmVudE5vZGVJc0NvbnRhaW5pbmcgJiYgY29tcHV0ZWRTdHlsZS5wb3NpdGlvbiA9PT0gXCJzdGF0aWNcIiAmJiAhIWN1cnJlbnRDb250YWluaW5nQmxvY2tDb21wdXRlZFN0eWxlICYmIFtcImFic29sdXRlXCIsIFwiZml4ZWRcIl0uaW5jbHVkZXMoY3VycmVudENvbnRhaW5pbmdCbG9ja0NvbXB1dGVkU3R5bGUucG9zaXRpb24pIHx8IGlzT3ZlcmZsb3dFbGVtZW50KGN1cnJlbnROb2RlKSAmJiAhY3VycmVudE5vZGVJc0NvbnRhaW5pbmcgJiYgaGFzRml4ZWRQb3NpdGlvbkFuY2VzdG9yKGVsZW1lbnQsIGN1cnJlbnROb2RlKTtcbiAgICBpZiAoc2hvdWxkRHJvcEN1cnJlbnROb2RlKSB7XG4gICAgICByZXN1bHQgPSByZXN1bHQuZmlsdGVyKChhbmNlc3RvcikgPT4gYW5jZXN0b3IgIT09IGN1cnJlbnROb2RlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY3VycmVudENvbnRhaW5pbmdCbG9ja0NvbXB1dGVkU3R5bGUgPSBjb21wdXRlZFN0eWxlO1xuICAgIH1cbiAgICBjdXJyZW50Tm9kZSA9IGdldFBhcmVudE5vZGUoY3VycmVudE5vZGUpO1xuICB9XG4gIGNhY2hlLnNldChlbGVtZW50LCByZXN1bHQpO1xuICByZXR1cm4gcmVzdWx0O1xufVxuZnVuY3Rpb24gZ2V0Q2xpcHBpbmdSZWN0KF9yZWYpIHtcbiAgbGV0IHtcbiAgICBlbGVtZW50LFxuICAgIGJvdW5kYXJ5LFxuICAgIHJvb3RCb3VuZGFyeSxcbiAgICBzdHJhdGVneVxuICB9ID0gX3JlZjtcbiAgY29uc3QgZWxlbWVudENsaXBwaW5nQW5jZXN0b3JzID0gYm91bmRhcnkgPT09IFwiY2xpcHBpbmdBbmNlc3RvcnNcIiA/IGdldENsaXBwaW5nRWxlbWVudEFuY2VzdG9ycyhlbGVtZW50LCB0aGlzLl9jKSA6IFtdLmNvbmNhdChib3VuZGFyeSk7XG4gIGNvbnN0IGNsaXBwaW5nQW5jZXN0b3JzID0gWy4uLmVsZW1lbnRDbGlwcGluZ0FuY2VzdG9ycywgcm9vdEJvdW5kYXJ5XTtcbiAgY29uc3QgZmlyc3RDbGlwcGluZ0FuY2VzdG9yID0gY2xpcHBpbmdBbmNlc3RvcnNbMF07XG4gIGNvbnN0IGNsaXBwaW5nUmVjdCA9IGNsaXBwaW5nQW5jZXN0b3JzLnJlZHVjZSgoYWNjUmVjdCwgY2xpcHBpbmdBbmNlc3RvcikgPT4ge1xuICAgIGNvbnN0IHJlY3QgPSBnZXRDbGllbnRSZWN0RnJvbUNsaXBwaW5nQW5jZXN0b3IoZWxlbWVudCwgY2xpcHBpbmdBbmNlc3Rvciwgc3RyYXRlZ3kpO1xuICAgIGFjY1JlY3QudG9wID0gbWF4KHJlY3QudG9wLCBhY2NSZWN0LnRvcCk7XG4gICAgYWNjUmVjdC5yaWdodCA9IG1pbihyZWN0LnJpZ2h0LCBhY2NSZWN0LnJpZ2h0KTtcbiAgICBhY2NSZWN0LmJvdHRvbSA9IG1pbihyZWN0LmJvdHRvbSwgYWNjUmVjdC5ib3R0b20pO1xuICAgIGFjY1JlY3QubGVmdCA9IG1heChyZWN0LmxlZnQsIGFjY1JlY3QubGVmdCk7XG4gICAgcmV0dXJuIGFjY1JlY3Q7XG4gIH0sIGdldENsaWVudFJlY3RGcm9tQ2xpcHBpbmdBbmNlc3RvcihlbGVtZW50LCBmaXJzdENsaXBwaW5nQW5jZXN0b3IsIHN0cmF0ZWd5KSk7XG4gIHJldHVybiB7XG4gICAgd2lkdGg6IGNsaXBwaW5nUmVjdC5yaWdodCAtIGNsaXBwaW5nUmVjdC5sZWZ0LFxuICAgIGhlaWdodDogY2xpcHBpbmdSZWN0LmJvdHRvbSAtIGNsaXBwaW5nUmVjdC50b3AsXG4gICAgeDogY2xpcHBpbmdSZWN0LmxlZnQsXG4gICAgeTogY2xpcHBpbmdSZWN0LnRvcFxuICB9O1xufVxuZnVuY3Rpb24gZ2V0RGltZW5zaW9ucyhlbGVtZW50KSB7XG4gIHJldHVybiBnZXRDc3NEaW1lbnNpb25zKGVsZW1lbnQpO1xufVxuZnVuY3Rpb24gZ2V0UmVjdFJlbGF0aXZlVG9PZmZzZXRQYXJlbnQoZWxlbWVudCwgb2Zmc2V0UGFyZW50LCBzdHJhdGVneSkge1xuICBjb25zdCBpc09mZnNldFBhcmVudEFuRWxlbWVudCA9IGlzSFRNTEVsZW1lbnQob2Zmc2V0UGFyZW50KTtcbiAgY29uc3QgZG9jdW1lbnRFbGVtZW50ID0gZ2V0RG9jdW1lbnRFbGVtZW50KG9mZnNldFBhcmVudCk7XG4gIGNvbnN0IGlzRml4ZWQgPSBzdHJhdGVneSA9PT0gXCJmaXhlZFwiO1xuICBjb25zdCByZWN0ID0gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KGVsZW1lbnQsIHRydWUsIGlzRml4ZWQsIG9mZnNldFBhcmVudCk7XG4gIGxldCBzY3JvbGwgPSB7XG4gICAgc2Nyb2xsTGVmdDogMCxcbiAgICBzY3JvbGxUb3A6IDBcbiAgfTtcbiAgY29uc3Qgb2Zmc2V0cyA9IGNyZWF0ZUNvb3JkcygwKTtcbiAgaWYgKGlzT2Zmc2V0UGFyZW50QW5FbGVtZW50IHx8ICFpc09mZnNldFBhcmVudEFuRWxlbWVudCAmJiAhaXNGaXhlZCkge1xuICAgIGlmIChnZXROb2RlTmFtZShvZmZzZXRQYXJlbnQpICE9PSBcImJvZHlcIiB8fCBpc092ZXJmbG93RWxlbWVudChkb2N1bWVudEVsZW1lbnQpKSB7XG4gICAgICBzY3JvbGwgPSBnZXROb2RlU2Nyb2xsKG9mZnNldFBhcmVudCk7XG4gICAgfVxuICAgIGlmIChpc09mZnNldFBhcmVudEFuRWxlbWVudCkge1xuICAgICAgY29uc3Qgb2Zmc2V0UmVjdCA9IGdldEJvdW5kaW5nQ2xpZW50UmVjdChvZmZzZXRQYXJlbnQsIHRydWUsIGlzRml4ZWQsIG9mZnNldFBhcmVudCk7XG4gICAgICBvZmZzZXRzLnggPSBvZmZzZXRSZWN0LnggKyBvZmZzZXRQYXJlbnQuY2xpZW50TGVmdDtcbiAgICAgIG9mZnNldHMueSA9IG9mZnNldFJlY3QueSArIG9mZnNldFBhcmVudC5jbGllbnRUb3A7XG4gICAgfSBlbHNlIGlmIChkb2N1bWVudEVsZW1lbnQpIHtcbiAgICAgIG9mZnNldHMueCA9IGdldFdpbmRvd1Njcm9sbEJhclgoZG9jdW1lbnRFbGVtZW50KTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHtcbiAgICB4OiByZWN0LmxlZnQgKyBzY3JvbGwuc2Nyb2xsTGVmdCAtIG9mZnNldHMueCxcbiAgICB5OiByZWN0LnRvcCArIHNjcm9sbC5zY3JvbGxUb3AgLSBvZmZzZXRzLnksXG4gICAgd2lkdGg6IHJlY3Qud2lkdGgsXG4gICAgaGVpZ2h0OiByZWN0LmhlaWdodFxuICB9O1xufVxuZnVuY3Rpb24gZ2V0VHJ1ZU9mZnNldFBhcmVudChlbGVtZW50LCBwb2x5ZmlsbCkge1xuICBpZiAoIWlzSFRNTEVsZW1lbnQoZWxlbWVudCkgfHwgZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KS5wb3NpdGlvbiA9PT0gXCJmaXhlZFwiKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgaWYgKHBvbHlmaWxsKSB7XG4gICAgcmV0dXJuIHBvbHlmaWxsKGVsZW1lbnQpO1xuICB9XG4gIHJldHVybiBlbGVtZW50Lm9mZnNldFBhcmVudDtcbn1cbmZ1bmN0aW9uIGdldE9mZnNldFBhcmVudChlbGVtZW50LCBwb2x5ZmlsbCkge1xuICBjb25zdCB3aW5kb3cyID0gZ2V0V2luZG93KGVsZW1lbnQpO1xuICBpZiAoIWlzSFRNTEVsZW1lbnQoZWxlbWVudCkpIHtcbiAgICByZXR1cm4gd2luZG93MjtcbiAgfVxuICBsZXQgb2Zmc2V0UGFyZW50ID0gZ2V0VHJ1ZU9mZnNldFBhcmVudChlbGVtZW50LCBwb2x5ZmlsbCk7XG4gIHdoaWxlIChvZmZzZXRQYXJlbnQgJiYgaXNUYWJsZUVsZW1lbnQob2Zmc2V0UGFyZW50KSAmJiBnZXRDb21wdXRlZFN0eWxlKG9mZnNldFBhcmVudCkucG9zaXRpb24gPT09IFwic3RhdGljXCIpIHtcbiAgICBvZmZzZXRQYXJlbnQgPSBnZXRUcnVlT2Zmc2V0UGFyZW50KG9mZnNldFBhcmVudCwgcG9seWZpbGwpO1xuICB9XG4gIGlmIChvZmZzZXRQYXJlbnQgJiYgKGdldE5vZGVOYW1lKG9mZnNldFBhcmVudCkgPT09IFwiaHRtbFwiIHx8IGdldE5vZGVOYW1lKG9mZnNldFBhcmVudCkgPT09IFwiYm9keVwiICYmIGdldENvbXB1dGVkU3R5bGUob2Zmc2V0UGFyZW50KS5wb3NpdGlvbiA9PT0gXCJzdGF0aWNcIiAmJiAhaXNDb250YWluaW5nQmxvY2sob2Zmc2V0UGFyZW50KSkpIHtcbiAgICByZXR1cm4gd2luZG93MjtcbiAgfVxuICByZXR1cm4gb2Zmc2V0UGFyZW50IHx8IGdldENvbnRhaW5pbmdCbG9jayhlbGVtZW50KSB8fCB3aW5kb3cyO1xufVxudmFyIGdldEVsZW1lbnRSZWN0cyA9IGFzeW5jIGZ1bmN0aW9uKF9yZWYpIHtcbiAgbGV0IHtcbiAgICByZWZlcmVuY2UsXG4gICAgZmxvYXRpbmcsXG4gICAgc3RyYXRlZ3lcbiAgfSA9IF9yZWY7XG4gIGNvbnN0IGdldE9mZnNldFBhcmVudEZuID0gdGhpcy5nZXRPZmZzZXRQYXJlbnQgfHwgZ2V0T2Zmc2V0UGFyZW50O1xuICBjb25zdCBnZXREaW1lbnNpb25zRm4gPSB0aGlzLmdldERpbWVuc2lvbnM7XG4gIHJldHVybiB7XG4gICAgcmVmZXJlbmNlOiBnZXRSZWN0UmVsYXRpdmVUb09mZnNldFBhcmVudChyZWZlcmVuY2UsIGF3YWl0IGdldE9mZnNldFBhcmVudEZuKGZsb2F0aW5nKSwgc3RyYXRlZ3kpLFxuICAgIGZsb2F0aW5nOiB7XG4gICAgICB4OiAwLFxuICAgICAgeTogMCxcbiAgICAgIC4uLmF3YWl0IGdldERpbWVuc2lvbnNGbihmbG9hdGluZylcbiAgICB9XG4gIH07XG59O1xuZnVuY3Rpb24gaXNSVEwoZWxlbWVudCkge1xuICByZXR1cm4gZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KS5kaXJlY3Rpb24gPT09IFwicnRsXCI7XG59XG52YXIgcGxhdGZvcm0gPSB7XG4gIGNvbnZlcnRPZmZzZXRQYXJlbnRSZWxhdGl2ZVJlY3RUb1ZpZXdwb3J0UmVsYXRpdmVSZWN0LFxuICBnZXREb2N1bWVudEVsZW1lbnQsXG4gIGdldENsaXBwaW5nUmVjdCxcbiAgZ2V0T2Zmc2V0UGFyZW50LFxuICBnZXRFbGVtZW50UmVjdHMsXG4gIGdldENsaWVudFJlY3RzLFxuICBnZXREaW1lbnNpb25zLFxuICBnZXRTY2FsZSxcbiAgaXNFbGVtZW50LFxuICBpc1JUTFxufTtcbmZ1bmN0aW9uIG9ic2VydmVNb3ZlKGVsZW1lbnQsIG9uTW92ZSkge1xuICBsZXQgaW8gPSBudWxsO1xuICBsZXQgdGltZW91dElkO1xuICBjb25zdCByb290ID0gZ2V0RG9jdW1lbnRFbGVtZW50KGVsZW1lbnQpO1xuICBmdW5jdGlvbiBjbGVhbnVwKCkge1xuICAgIGNsZWFyVGltZW91dCh0aW1lb3V0SWQpO1xuICAgIGlvICYmIGlvLmRpc2Nvbm5lY3QoKTtcbiAgICBpbyA9IG51bGw7XG4gIH1cbiAgZnVuY3Rpb24gcmVmcmVzaChza2lwLCB0aHJlc2hvbGQpIHtcbiAgICBpZiAoc2tpcCA9PT0gdm9pZCAwKSB7XG4gICAgICBza2lwID0gZmFsc2U7XG4gICAgfVxuICAgIGlmICh0aHJlc2hvbGQgPT09IHZvaWQgMCkge1xuICAgICAgdGhyZXNob2xkID0gMTtcbiAgICB9XG4gICAgY2xlYW51cCgpO1xuICAgIGNvbnN0IHtcbiAgICAgIGxlZnQsXG4gICAgICB0b3AsXG4gICAgICB3aWR0aCxcbiAgICAgIGhlaWdodFxuICAgIH0gPSBlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgIGlmICghc2tpcCkge1xuICAgICAgb25Nb3ZlKCk7XG4gICAgfVxuICAgIGlmICghd2lkdGggfHwgIWhlaWdodCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBpbnNldFRvcCA9IGZsb29yKHRvcCk7XG4gICAgY29uc3QgaW5zZXRSaWdodCA9IGZsb29yKHJvb3QuY2xpZW50V2lkdGggLSAobGVmdCArIHdpZHRoKSk7XG4gICAgY29uc3QgaW5zZXRCb3R0b20gPSBmbG9vcihyb290LmNsaWVudEhlaWdodCAtICh0b3AgKyBoZWlnaHQpKTtcbiAgICBjb25zdCBpbnNldExlZnQgPSBmbG9vcihsZWZ0KTtcbiAgICBjb25zdCByb290TWFyZ2luID0gLWluc2V0VG9wICsgXCJweCBcIiArIC1pbnNldFJpZ2h0ICsgXCJweCBcIiArIC1pbnNldEJvdHRvbSArIFwicHggXCIgKyAtaW5zZXRMZWZ0ICsgXCJweFwiO1xuICAgIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgICByb290TWFyZ2luLFxuICAgICAgdGhyZXNob2xkOiBtYXgoMCwgbWluKDEsIHRocmVzaG9sZCkpIHx8IDFcbiAgICB9O1xuICAgIGxldCBpc0ZpcnN0VXBkYXRlID0gdHJ1ZTtcbiAgICBmdW5jdGlvbiBoYW5kbGVPYnNlcnZlKGVudHJpZXMpIHtcbiAgICAgIGNvbnN0IHJhdGlvID0gZW50cmllc1swXS5pbnRlcnNlY3Rpb25SYXRpbztcbiAgICAgIGlmIChyYXRpbyAhPT0gdGhyZXNob2xkKSB7XG4gICAgICAgIGlmICghaXNGaXJzdFVwZGF0ZSkge1xuICAgICAgICAgIHJldHVybiByZWZyZXNoKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFyYXRpbykge1xuICAgICAgICAgIHRpbWVvdXRJZCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgcmVmcmVzaChmYWxzZSwgMWUtNyk7XG4gICAgICAgICAgfSwgMTAwKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZWZyZXNoKGZhbHNlLCByYXRpbyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlzRmlyc3RVcGRhdGUgPSBmYWxzZTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgIGlvID0gbmV3IEludGVyc2VjdGlvbk9ic2VydmVyKGhhbmRsZU9ic2VydmUsIHtcbiAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAgLy8gSGFuZGxlIDxpZnJhbWU+c1xuICAgICAgICByb290OiByb290Lm93bmVyRG9jdW1lbnRcbiAgICAgIH0pO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGlvID0gbmV3IEludGVyc2VjdGlvbk9ic2VydmVyKGhhbmRsZU9ic2VydmUsIG9wdGlvbnMpO1xuICAgIH1cbiAgICBpby5vYnNlcnZlKGVsZW1lbnQpO1xuICB9XG4gIHJlZnJlc2godHJ1ZSk7XG4gIHJldHVybiBjbGVhbnVwO1xufVxuZnVuY3Rpb24gYXV0b1VwZGF0ZShyZWZlcmVuY2UsIGZsb2F0aW5nLCB1cGRhdGUsIG9wdGlvbnMpIHtcbiAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgIG9wdGlvbnMgPSB7fTtcbiAgfVxuICBjb25zdCB7XG4gICAgYW5jZXN0b3JTY3JvbGwgPSB0cnVlLFxuICAgIGFuY2VzdG9yUmVzaXplID0gdHJ1ZSxcbiAgICBlbGVtZW50UmVzaXplID0gdHlwZW9mIFJlc2l6ZU9ic2VydmVyID09PSBcImZ1bmN0aW9uXCIsXG4gICAgbGF5b3V0U2hpZnQgPSB0eXBlb2YgSW50ZXJzZWN0aW9uT2JzZXJ2ZXIgPT09IFwiZnVuY3Rpb25cIixcbiAgICBhbmltYXRpb25GcmFtZSA9IGZhbHNlXG4gIH0gPSBvcHRpb25zO1xuICBjb25zdCByZWZlcmVuY2VFbCA9IHVud3JhcEVsZW1lbnQocmVmZXJlbmNlKTtcbiAgY29uc3QgYW5jZXN0b3JzID0gYW5jZXN0b3JTY3JvbGwgfHwgYW5jZXN0b3JSZXNpemUgPyBbLi4ucmVmZXJlbmNlRWwgPyBnZXRPdmVyZmxvd0FuY2VzdG9ycyhyZWZlcmVuY2VFbCkgOiBbXSwgLi4uZ2V0T3ZlcmZsb3dBbmNlc3RvcnMoZmxvYXRpbmcpXSA6IFtdO1xuICBhbmNlc3RvcnMuZm9yRWFjaCgoYW5jZXN0b3IpID0+IHtcbiAgICBhbmNlc3RvclNjcm9sbCAmJiBhbmNlc3Rvci5hZGRFdmVudExpc3RlbmVyKFwic2Nyb2xsXCIsIHVwZGF0ZSwge1xuICAgICAgcGFzc2l2ZTogdHJ1ZVxuICAgIH0pO1xuICAgIGFuY2VzdG9yUmVzaXplICYmIGFuY2VzdG9yLmFkZEV2ZW50TGlzdGVuZXIoXCJyZXNpemVcIiwgdXBkYXRlKTtcbiAgfSk7XG4gIGNvbnN0IGNsZWFudXBJbyA9IHJlZmVyZW5jZUVsICYmIGxheW91dFNoaWZ0ID8gb2JzZXJ2ZU1vdmUocmVmZXJlbmNlRWwsIHVwZGF0ZSkgOiBudWxsO1xuICBsZXQgcmVvYnNlcnZlRnJhbWUgPSAtMTtcbiAgbGV0IHJlc2l6ZU9ic2VydmVyID0gbnVsbDtcbiAgaWYgKGVsZW1lbnRSZXNpemUpIHtcbiAgICByZXNpemVPYnNlcnZlciA9IG5ldyBSZXNpemVPYnNlcnZlcigoX3JlZikgPT4ge1xuICAgICAgbGV0IFtmaXJzdEVudHJ5XSA9IF9yZWY7XG4gICAgICBpZiAoZmlyc3RFbnRyeSAmJiBmaXJzdEVudHJ5LnRhcmdldCA9PT0gcmVmZXJlbmNlRWwgJiYgcmVzaXplT2JzZXJ2ZXIpIHtcbiAgICAgICAgcmVzaXplT2JzZXJ2ZXIudW5vYnNlcnZlKGZsb2F0aW5nKTtcbiAgICAgICAgY2FuY2VsQW5pbWF0aW9uRnJhbWUocmVvYnNlcnZlRnJhbWUpO1xuICAgICAgICByZW9ic2VydmVGcmFtZSA9IHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgICAgICAgcmVzaXplT2JzZXJ2ZXIgJiYgcmVzaXplT2JzZXJ2ZXIub2JzZXJ2ZShmbG9hdGluZyk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgdXBkYXRlKCk7XG4gICAgfSk7XG4gICAgaWYgKHJlZmVyZW5jZUVsICYmICFhbmltYXRpb25GcmFtZSkge1xuICAgICAgcmVzaXplT2JzZXJ2ZXIub2JzZXJ2ZShyZWZlcmVuY2VFbCk7XG4gICAgfVxuICAgIHJlc2l6ZU9ic2VydmVyLm9ic2VydmUoZmxvYXRpbmcpO1xuICB9XG4gIGxldCBmcmFtZUlkO1xuICBsZXQgcHJldlJlZlJlY3QgPSBhbmltYXRpb25GcmFtZSA/IGdldEJvdW5kaW5nQ2xpZW50UmVjdChyZWZlcmVuY2UpIDogbnVsbDtcbiAgaWYgKGFuaW1hdGlvbkZyYW1lKSB7XG4gICAgZnJhbWVMb29wKCk7XG4gIH1cbiAgZnVuY3Rpb24gZnJhbWVMb29wKCkge1xuICAgIGNvbnN0IG5leHRSZWZSZWN0ID0gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KHJlZmVyZW5jZSk7XG4gICAgaWYgKHByZXZSZWZSZWN0ICYmIChuZXh0UmVmUmVjdC54ICE9PSBwcmV2UmVmUmVjdC54IHx8IG5leHRSZWZSZWN0LnkgIT09IHByZXZSZWZSZWN0LnkgfHwgbmV4dFJlZlJlY3Qud2lkdGggIT09IHByZXZSZWZSZWN0LndpZHRoIHx8IG5leHRSZWZSZWN0LmhlaWdodCAhPT0gcHJldlJlZlJlY3QuaGVpZ2h0KSkge1xuICAgICAgdXBkYXRlKCk7XG4gICAgfVxuICAgIHByZXZSZWZSZWN0ID0gbmV4dFJlZlJlY3Q7XG4gICAgZnJhbWVJZCA9IHJlcXVlc3RBbmltYXRpb25GcmFtZShmcmFtZUxvb3ApO1xuICB9XG4gIHVwZGF0ZSgpO1xuICByZXR1cm4gKCkgPT4ge1xuICAgIGFuY2VzdG9ycy5mb3JFYWNoKChhbmNlc3RvcikgPT4ge1xuICAgICAgYW5jZXN0b3JTY3JvbGwgJiYgYW5jZXN0b3IucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInNjcm9sbFwiLCB1cGRhdGUpO1xuICAgICAgYW5jZXN0b3JSZXNpemUgJiYgYW5jZXN0b3IucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInJlc2l6ZVwiLCB1cGRhdGUpO1xuICAgIH0pO1xuICAgIGNsZWFudXBJbyAmJiBjbGVhbnVwSW8oKTtcbiAgICByZXNpemVPYnNlcnZlciAmJiByZXNpemVPYnNlcnZlci5kaXNjb25uZWN0KCk7XG4gICAgcmVzaXplT2JzZXJ2ZXIgPSBudWxsO1xuICAgIGlmIChhbmltYXRpb25GcmFtZSkge1xuICAgICAgY2FuY2VsQW5pbWF0aW9uRnJhbWUoZnJhbWVJZCk7XG4gICAgfVxuICB9O1xufVxudmFyIGNvbXB1dGVQb3NpdGlvbjIgPSAocmVmZXJlbmNlLCBmbG9hdGluZywgb3B0aW9ucykgPT4ge1xuICBjb25zdCBjYWNoZSA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgTWFwKCk7XG4gIGNvbnN0IG1lcmdlZE9wdGlvbnMgPSB7XG4gICAgcGxhdGZvcm0sXG4gICAgLi4ub3B0aW9uc1xuICB9O1xuICBjb25zdCBwbGF0Zm9ybVdpdGhDYWNoZSA9IHtcbiAgICAuLi5tZXJnZWRPcHRpb25zLnBsYXRmb3JtLFxuICAgIF9jOiBjYWNoZVxuICB9O1xuICByZXR1cm4gY29tcHV0ZVBvc2l0aW9uKHJlZmVyZW5jZSwgZmxvYXRpbmcsIHtcbiAgICAuLi5tZXJnZWRPcHRpb25zLFxuICAgIHBsYXRmb3JtOiBwbGF0Zm9ybVdpdGhDYWNoZVxuICB9KTtcbn07XG5cbi8vIHBhY2thZ2VzL2FuY2hvci9zcmMvaW5kZXguanNcbmZ1bmN0aW9uIHNyY19kZWZhdWx0KEFscGluZSkge1xuICBBbHBpbmUubWFnaWMoXCJhbmNob3JcIiwgKGVsKSA9PiB7XG4gICAgaWYgKCFlbC5feF9hbmNob3IpXG4gICAgICB0aHJvdyBcIkFscGluZTogTm8geC1hbmNob3IgZGlyZWN0aXZlIGZvdW5kIG9uIGVsZW1lbnQgdXNpbmcgJGFuY2hvci4uLlwiO1xuICAgIHJldHVybiBlbC5feF9hbmNob3I7XG4gIH0pO1xuICBBbHBpbmUuaW50ZXJjZXB0Q2xvbmUoKGZyb20sIHRvKSA9PiB7XG4gICAgaWYgKGZyb20gJiYgZnJvbS5feF9hbmNob3IgJiYgIXRvLl94X2FuY2hvcikge1xuICAgICAgdG8uX3hfYW5jaG9yID0gZnJvbS5feF9hbmNob3I7XG4gICAgfVxuICB9KTtcbiAgQWxwaW5lLmRpcmVjdGl2ZShcImFuY2hvclwiLCBBbHBpbmUuc2tpcER1cmluZ0Nsb25lKFxuICAgIChlbCwgeyBleHByZXNzaW9uLCBtb2RpZmllcnMsIHZhbHVlIH0sIHsgY2xlYW51cCwgZXZhbHVhdGU6IGV2YWx1YXRlMiB9KSA9PiB7XG4gICAgICBsZXQgeyBwbGFjZW1lbnQsIG9mZnNldFZhbHVlLCB1bnN0eWxlZCB9ID0gZ2V0T3B0aW9ucyhtb2RpZmllcnMpO1xuICAgICAgZWwuX3hfYW5jaG9yID0gQWxwaW5lLnJlYWN0aXZlKHsgeDogMCwgeTogMCB9KTtcbiAgICAgIGxldCByZWZlcmVuY2UgPSBldmFsdWF0ZTIoZXhwcmVzc2lvbik7XG4gICAgICBpZiAoIXJlZmVyZW5jZSlcbiAgICAgICAgdGhyb3cgXCJBbHBpbmU6IG5vIGVsZW1lbnQgcHJvdmlkZWQgdG8geC1hbmNob3IuLi5cIjtcbiAgICAgIGxldCBjb21wdXRlID0gKCkgPT4ge1xuICAgICAgICBsZXQgcHJldmlvdXNWYWx1ZTtcbiAgICAgICAgY29tcHV0ZVBvc2l0aW9uMihyZWZlcmVuY2UsIGVsLCB7XG4gICAgICAgICAgcGxhY2VtZW50LFxuICAgICAgICAgIG1pZGRsZXdhcmU6IFtmbGlwKCksIHNoaWZ0KHsgcGFkZGluZzogNSB9KSwgb2Zmc2V0KG9mZnNldFZhbHVlKV1cbiAgICAgICAgfSkudGhlbigoeyB4LCB5IH0pID0+IHtcbiAgICAgICAgICB1bnN0eWxlZCB8fCBzZXRTdHlsZXMoZWwsIHgsIHkpO1xuICAgICAgICAgIGlmIChKU09OLnN0cmluZ2lmeSh7IHgsIHkgfSkgIT09IHByZXZpb3VzVmFsdWUpIHtcbiAgICAgICAgICAgIGVsLl94X2FuY2hvci54ID0geDtcbiAgICAgICAgICAgIGVsLl94X2FuY2hvci55ID0geTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcHJldmlvdXNWYWx1ZSA9IEpTT04uc3RyaW5naWZ5KHsgeCwgeSB9KTtcbiAgICAgICAgfSk7XG4gICAgICB9O1xuICAgICAgbGV0IHJlbGVhc2UgPSBhdXRvVXBkYXRlKHJlZmVyZW5jZSwgZWwsICgpID0+IGNvbXB1dGUoKSk7XG4gICAgICBjbGVhbnVwKCgpID0+IHJlbGVhc2UoKSk7XG4gICAgfSxcbiAgICAvLyBXaGVuIGNsb25pbmcgKG9yIFwibW9ycGhpbmdcIiksIHdlIHdpbGwgZ3JhZnQgdGhlIHN0eWxlIGFuZCBwb3NpdGlvbiBkYXRhIGZyb20gdGhlIGxpdmUgdHJlZS4uLlxuICAgIChlbCwgeyBleHByZXNzaW9uLCBtb2RpZmllcnMsIHZhbHVlIH0sIHsgY2xlYW51cCwgZXZhbHVhdGU6IGV2YWx1YXRlMiB9KSA9PiB7XG4gICAgICBsZXQgeyBwbGFjZW1lbnQsIG9mZnNldFZhbHVlLCB1bnN0eWxlZCB9ID0gZ2V0T3B0aW9ucyhtb2RpZmllcnMpO1xuICAgICAgaWYgKGVsLl94X2FuY2hvcikge1xuICAgICAgICB1bnN0eWxlZCB8fCBzZXRTdHlsZXMoZWwsIGVsLl94X2FuY2hvci54LCBlbC5feF9hbmNob3IueSk7XG4gICAgICB9XG4gICAgfVxuICApKTtcbn1cbmZ1bmN0aW9uIHNldFN0eWxlcyhlbCwgeCwgeSkge1xuICBPYmplY3QuYXNzaWduKGVsLnN0eWxlLCB7XG4gICAgbGVmdDogeCArIFwicHhcIixcbiAgICB0b3A6IHkgKyBcInB4XCIsXG4gICAgcG9zaXRpb246IFwiYWJzb2x1dGVcIlxuICB9KTtcbn1cbmZ1bmN0aW9uIGdldE9wdGlvbnMobW9kaWZpZXJzKSB7XG4gIGxldCBwb3NpdGlvbnMgPSBbXCJ0b3BcIiwgXCJ0b3Atc3RhcnRcIiwgXCJ0b3AtZW5kXCIsIFwicmlnaHRcIiwgXCJyaWdodC1zdGFydFwiLCBcInJpZ2h0LWVuZFwiLCBcImJvdHRvbVwiLCBcImJvdHRvbS1zdGFydFwiLCBcImJvdHRvbS1lbmRcIiwgXCJsZWZ0XCIsIFwibGVmdC1zdGFydFwiLCBcImxlZnQtZW5kXCJdO1xuICBsZXQgcGxhY2VtZW50ID0gcG9zaXRpb25zLmZpbmQoKGkpID0+IG1vZGlmaWVycy5pbmNsdWRlcyhpKSk7XG4gIGxldCBvZmZzZXRWYWx1ZSA9IDA7XG4gIGlmIChtb2RpZmllcnMuaW5jbHVkZXMoXCJvZmZzZXRcIikpIHtcbiAgICBsZXQgaWR4ID0gbW9kaWZpZXJzLmZpbmRJbmRleCgoaSkgPT4gaSA9PT0gXCJvZmZzZXRcIik7XG4gICAgb2Zmc2V0VmFsdWUgPSBtb2RpZmllcnNbaWR4ICsgMV0gIT09IHZvaWQgMCA/IE51bWJlcihtb2RpZmllcnNbaWR4ICsgMV0pIDogb2Zmc2V0VmFsdWU7XG4gIH1cbiAgbGV0IHVuc3R5bGVkID0gbW9kaWZpZXJzLmluY2x1ZGVzKFwibm8tc3R5bGVcIik7XG4gIHJldHVybiB7IHBsYWNlbWVudCwgb2Zmc2V0VmFsdWUsIHVuc3R5bGVkIH07XG59XG5cbi8vIHBhY2thZ2VzL2FuY2hvci9idWlsZHMvbW9kdWxlLmpzXG52YXIgbW9kdWxlX2RlZmF1bHQgPSBzcmNfZGVmYXVsdDtcbmV4cG9ydCB7XG4gIHNyY19kZWZhdWx0IGFzIGFuY2hvcixcbiAgbW9kdWxlX2RlZmF1bHQgYXMgZGVmYXVsdFxufTtcbiIsImltcG9ydCBTd2lwZXIgZnJvbSAnc3dpcGVyL2J1bmRsZSc7XHJcbmltcG9ydCBBbHBpbmUgZnJvbSAnYWxwaW5lanMnO1xyXG5cclxuQWxwaW5lLmRhdGEoJ3Byb2R1Y3RfZ2FsbGVyeScsICgpID0+ICh7XHJcbiAgc3dpcGVyUmVmZXJlbmNlOiBudWxsLFxyXG4gIGluaXQoKSB7XHJcbiAgICB0aGlzLmluaXRTbGlkZXIoKTtcclxuICAgIGxldCBzZWxmID0gdGhpcztcclxuICAgIHdpbmRvdy5wcm9kdWN0R2FsbGVyeUdvVG9TbGlkZSA9IChpbmRleCkgPT4gc2VsZi5nb1RvU2xpZGUoaW5kZXgpO1xyXG4gIH0sXHJcbiAgaW5pdFNsaWRlcigpIHtcclxuICAgIHRoaXMuc3dpcGVyUmVmZXJlbmNlID0gbmV3IFN3aXBlcih0aGlzLiRyZWZzLnN3aXBlckNvbnRhaW5lciwge1xyXG4gICAgICBzbGlkZXNQZXJWaWV3OiAxLFxyXG4gICAgICBzcGFjZUJldHdlZW46IDEwLFxyXG4gICAgICBwYWdpbmF0aW9uOiB7XHJcbiAgICAgICAgZWw6IHRoaXMuJHJlZnMucGFnaW5hdGlvbixcclxuICAgICAgICBjbGlja2FibGU6IHRydWUsXHJcbiAgICAgIH0sXHJcbiAgICAgIG5hdmlnYXRpb246IHtcclxuICAgICAgICBuZXh0RWw6IHRoaXMuJHJlZnMubmV4dF9hcnJvdyxcclxuICAgICAgICBwcmV2RWw6IHRoaXMuJHJlZnMucHJldl9hcnJvdyxcclxuICAgICAgfSxcclxuICAgIH0pO1xyXG4gIH0sXHJcbiAgZ29Ub1NsaWRlKGluZGV4KSB7XHJcbiAgICBsZXQgaW5kZXgwID0gcGFyc2VJbnQoaW5kZXgpIC0gMTtcclxuICAgIHRoaXMuc3dpcGVyUmVmZXJlbmNlLnNsaWRlVG8oaW5kZXgwKTtcclxuICB9LFxyXG59KSk7XHJcbiIsIi8vIGdldCBzdWNjZXNzZnVsIGNvbnRyb2wgZnJvbSBmb3JtIGFuZCBhc3NlbWJsZSBpbnRvIG9iamVjdFxuLy8gaHR0cDovL3d3dy53My5vcmcvVFIvaHRtbDQwMS9pbnRlcmFjdC9mb3Jtcy5odG1sI2gtMTcuMTMuMlxuXG4vLyB0eXBlcyB3aGljaCBpbmRpY2F0ZSBhIHN1Ym1pdCBhY3Rpb24gYW5kIGFyZSBub3Qgc3VjY2Vzc2Z1bCBjb250cm9sc1xuLy8gdGhlc2Ugd2lsbCBiZSBpZ25vcmVkXG52YXIga19yX3N1Ym1pdHRlciA9IC9eKD86c3VibWl0fGJ1dHRvbnxpbWFnZXxyZXNldHxmaWxlKSQvaTtcblxuLy8gbm9kZSBuYW1lcyB3aGljaCBjb3VsZCBiZSBzdWNjZXNzZnVsIGNvbnRyb2xzXG52YXIga19yX3N1Y2Nlc3NfY29udHJscyA9IC9eKD86aW5wdXR8c2VsZWN0fHRleHRhcmVhfGtleWdlbikvaTtcblxuLy8gTWF0Y2hlcyBicmFja2V0IG5vdGF0aW9uLlxudmFyIGJyYWNrZXRzID0gLyhcXFtbXlxcW1xcXV0qXFxdKS9nO1xuXG4vLyBzZXJpYWxpemVzIGZvcm0gZmllbGRzXG4vLyBAcGFyYW0gZm9ybSBNVVNUIGJlIGFuIEhUTUxGb3JtIGVsZW1lbnRcbi8vIEBwYXJhbSBvcHRpb25zIGlzIGFuIG9wdGlvbmFsIGFyZ3VtZW50IHRvIGNvbmZpZ3VyZSB0aGUgc2VyaWFsaXphdGlvbi4gRGVmYXVsdCBvdXRwdXRcbi8vIHdpdGggbm8gb3B0aW9ucyBzcGVjaWZpZWQgaXMgYSB1cmwgZW5jb2RlZCBzdHJpbmdcbi8vICAgIC0gaGFzaDogW3RydWUgfCBmYWxzZV0gQ29uZmlndXJlIHRoZSBvdXRwdXQgdHlwZS4gSWYgdHJ1ZSwgdGhlIG91dHB1dCB3aWxsXG4vLyAgICBiZSBhIGpzIG9iamVjdC5cbi8vICAgIC0gc2VyaWFsaXplcjogW2Z1bmN0aW9uXSBPcHRpb25hbCBzZXJpYWxpemVyIGZ1bmN0aW9uIHRvIG92ZXJyaWRlIHRoZSBkZWZhdWx0IG9uZS5cbi8vICAgIFRoZSBmdW5jdGlvbiB0YWtlcyAzIGFyZ3VtZW50cyAocmVzdWx0LCBrZXksIHZhbHVlKSBhbmQgc2hvdWxkIHJldHVybiBuZXcgcmVzdWx0XG4vLyAgICBoYXNoIGFuZCB1cmwgZW5jb2RlZCBzdHIgc2VyaWFsaXplcnMgYXJlIHByb3ZpZGVkIHdpdGggdGhpcyBtb2R1bGVcbi8vICAgIC0gZGlzYWJsZWQ6IFt0cnVlIHwgZmFsc2VdLiBJZiB0cnVlIHNlcmlhbGl6ZSBkaXNhYmxlZCBmaWVsZHMuXG4vLyAgICAtIGVtcHR5OiBbdHJ1ZSB8IGZhbHNlXS4gSWYgdHJ1ZSBzZXJpYWxpemUgZW1wdHkgZmllbGRzXG5mdW5jdGlvbiBzZXJpYWxpemUoZm9ybSwgb3B0aW9ucykge1xuICAgIGlmICh0eXBlb2Ygb3B0aW9ucyAhPSAnb2JqZWN0Jykge1xuICAgICAgICBvcHRpb25zID0geyBoYXNoOiAhIW9wdGlvbnMgfTtcbiAgICB9XG4gICAgZWxzZSBpZiAob3B0aW9ucy5oYXNoID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgb3B0aW9ucy5oYXNoID0gdHJ1ZTtcbiAgICB9XG5cbiAgICB2YXIgcmVzdWx0ID0gKG9wdGlvbnMuaGFzaCkgPyB7fSA6ICcnO1xuICAgIHZhciBzZXJpYWxpemVyID0gb3B0aW9ucy5zZXJpYWxpemVyIHx8ICgob3B0aW9ucy5oYXNoKSA/IGhhc2hfc2VyaWFsaXplciA6IHN0cl9zZXJpYWxpemUpO1xuXG4gICAgdmFyIGVsZW1lbnRzID0gZm9ybSAmJiBmb3JtLmVsZW1lbnRzID8gZm9ybS5lbGVtZW50cyA6IFtdO1xuXG4gICAgLy9PYmplY3Qgc3RvcmUgZWFjaCByYWRpbyBhbmQgc2V0IGlmIGl0J3MgZW1wdHkgb3Igbm90XG4gICAgdmFyIHJhZGlvX3N0b3JlID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcblxuICAgIGZvciAodmFyIGk9MCA7IGk8ZWxlbWVudHMubGVuZ3RoIDsgKytpKSB7XG4gICAgICAgIHZhciBlbGVtZW50ID0gZWxlbWVudHNbaV07XG5cbiAgICAgICAgLy8gaW5nb3JlIGRpc2FibGVkIGZpZWxkc1xuICAgICAgICBpZiAoKCFvcHRpb25zLmRpc2FibGVkICYmIGVsZW1lbnQuZGlzYWJsZWQpIHx8ICFlbGVtZW50Lm5hbWUpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIC8vIGlnbm9yZSBhbnlodGluZyB0aGF0IGlzIG5vdCBjb25zaWRlcmVkIGEgc3VjY2VzcyBmaWVsZFxuICAgICAgICBpZiAoIWtfcl9zdWNjZXNzX2NvbnRybHMudGVzdChlbGVtZW50Lm5vZGVOYW1lKSB8fFxuICAgICAgICAgICAga19yX3N1Ym1pdHRlci50ZXN0KGVsZW1lbnQudHlwZSkpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGtleSA9IGVsZW1lbnQubmFtZTtcbiAgICAgICAgdmFyIHZhbCA9IGVsZW1lbnQudmFsdWU7XG5cbiAgICAgICAgLy8gd2UgY2FuJ3QganVzdCB1c2UgZWxlbWVudC52YWx1ZSBmb3IgY2hlY2tib3hlcyBjYXVzZSBzb21lIGJyb3dzZXJzIGxpZSB0byB1c1xuICAgICAgICAvLyB0aGV5IHNheSBcIm9uXCIgZm9yIHZhbHVlIHdoZW4gdGhlIGJveCBpc24ndCBjaGVja2VkXG4gICAgICAgIGlmICgoZWxlbWVudC50eXBlID09PSAnY2hlY2tib3gnIHx8IGVsZW1lbnQudHlwZSA9PT0gJ3JhZGlvJykgJiYgIWVsZW1lbnQuY2hlY2tlZCkge1xuICAgICAgICAgICAgdmFsID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gSWYgd2Ugd2FudCBlbXB0eSBlbGVtZW50c1xuICAgICAgICBpZiAob3B0aW9ucy5lbXB0eSkge1xuICAgICAgICAgICAgLy8gZm9yIGNoZWNrYm94XG4gICAgICAgICAgICBpZiAoZWxlbWVudC50eXBlID09PSAnY2hlY2tib3gnICYmICFlbGVtZW50LmNoZWNrZWQpIHtcbiAgICAgICAgICAgICAgICB2YWwgPSAnJztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gZm9yIHJhZGlvXG4gICAgICAgICAgICBpZiAoZWxlbWVudC50eXBlID09PSAncmFkaW8nKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFyYWRpb19zdG9yZVtlbGVtZW50Lm5hbWVdICYmICFlbGVtZW50LmNoZWNrZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmFkaW9fc3RvcmVbZWxlbWVudC5uYW1lXSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChlbGVtZW50LmNoZWNrZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmFkaW9fc3RvcmVbZWxlbWVudC5uYW1lXSA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBpZiBvcHRpb25zIGVtcHR5IGlzIHRydWUsIGNvbnRpbnVlIG9ubHkgaWYgaXRzIHJhZGlvXG4gICAgICAgICAgICBpZiAodmFsID09IHVuZGVmaW5lZCAmJiBlbGVtZW50LnR5cGUgPT0gJ3JhZGlvJykge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgLy8gdmFsdWUtbGVzcyBmaWVsZHMgYXJlIGlnbm9yZWQgdW5sZXNzIG9wdGlvbnMuZW1wdHkgaXMgdHJ1ZVxuICAgICAgICAgICAgaWYgKCF2YWwpIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIG11bHRpIHNlbGVjdCBib3hlc1xuICAgICAgICBpZiAoZWxlbWVudC50eXBlID09PSAnc2VsZWN0LW11bHRpcGxlJykge1xuICAgICAgICAgICAgdmFsID0gW107XG5cbiAgICAgICAgICAgIHZhciBzZWxlY3RPcHRpb25zID0gZWxlbWVudC5vcHRpb25zO1xuICAgICAgICAgICAgdmFyIGlzU2VsZWN0ZWRPcHRpb25zID0gZmFsc2U7XG4gICAgICAgICAgICBmb3IgKHZhciBqPTAgOyBqPHNlbGVjdE9wdGlvbnMubGVuZ3RoIDsgKytqKSB7XG4gICAgICAgICAgICAgICAgdmFyIG9wdGlvbiA9IHNlbGVjdE9wdGlvbnNbal07XG4gICAgICAgICAgICAgICAgdmFyIGFsbG93ZWRFbXB0eSA9IG9wdGlvbnMuZW1wdHkgJiYgIW9wdGlvbi52YWx1ZTtcbiAgICAgICAgICAgICAgICB2YXIgaGFzVmFsdWUgPSAob3B0aW9uLnZhbHVlIHx8IGFsbG93ZWRFbXB0eSk7XG4gICAgICAgICAgICAgICAgaWYgKG9wdGlvbi5zZWxlY3RlZCAmJiBoYXNWYWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICBpc1NlbGVjdGVkT3B0aW9ucyA9IHRydWU7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gSWYgdXNpbmcgYSBoYXNoIHNlcmlhbGl6ZXIgYmUgc3VyZSB0byBhZGQgdGhlXG4gICAgICAgICAgICAgICAgICAgIC8vIGNvcnJlY3Qgbm90YXRpb24gZm9yIGFuIGFycmF5IGluIHRoZSBtdWx0aS1zZWxlY3RcbiAgICAgICAgICAgICAgICAgICAgLy8gY29udGV4dC4gSGVyZSB0aGUgbmFtZSBhdHRyaWJ1dGUgb24gdGhlIHNlbGVjdCBlbGVtZW50XG4gICAgICAgICAgICAgICAgICAgIC8vIG1pZ2h0IGJlIG1pc3NpbmcgdGhlIHRyYWlsaW5nIGJyYWNrZXQgcGFpci4gQm90aCBuYW1lc1xuICAgICAgICAgICAgICAgICAgICAvLyBcImZvb1wiIGFuZCBcImZvb1tdXCIgc2hvdWxkIGJlIGFycmF5cy5cbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMuaGFzaCAmJiBrZXkuc2xpY2Uoa2V5Lmxlbmd0aCAtIDIpICE9PSAnW10nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSBzZXJpYWxpemVyKHJlc3VsdCwga2V5ICsgJ1tdJywgb3B0aW9uLnZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IHNlcmlhbGl6ZXIocmVzdWx0LCBrZXksIG9wdGlvbi52YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFNlcmlhbGl6ZSBpZiBubyBzZWxlY3RlZCBvcHRpb25zIGFuZCBvcHRpb25zLmVtcHR5IGlzIHRydWVcbiAgICAgICAgICAgIGlmICghaXNTZWxlY3RlZE9wdGlvbnMgJiYgb3B0aW9ucy5lbXB0eSkge1xuICAgICAgICAgICAgICAgIHJlc3VsdCA9IHNlcmlhbGl6ZXIocmVzdWx0LCBrZXksICcnKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICByZXN1bHQgPSBzZXJpYWxpemVyKHJlc3VsdCwga2V5LCB2YWwpO1xuICAgIH1cblxuICAgIC8vIENoZWNrIGZvciBhbGwgZW1wdHkgcmFkaW8gYnV0dG9ucyBhbmQgc2VyaWFsaXplIHRoZW0gd2l0aCBrZXk9XCJcIlxuICAgIGlmIChvcHRpb25zLmVtcHR5KSB7XG4gICAgICAgIGZvciAodmFyIGtleSBpbiByYWRpb19zdG9yZSkge1xuICAgICAgICAgICAgaWYgKCFyYWRpb19zdG9yZVtrZXldKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gc2VyaWFsaXplcihyZXN1bHQsIGtleSwgJycpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gcGFyc2Vfa2V5cyhzdHJpbmcpIHtcbiAgICB2YXIga2V5cyA9IFtdO1xuICAgIHZhciBwcmVmaXggPSAvXihbXlxcW1xcXV0qKS87XG4gICAgdmFyIGNoaWxkcmVuID0gbmV3IFJlZ0V4cChicmFja2V0cyk7XG4gICAgdmFyIG1hdGNoID0gcHJlZml4LmV4ZWMoc3RyaW5nKTtcblxuICAgIGlmIChtYXRjaFsxXSkge1xuICAgICAgICBrZXlzLnB1c2gobWF0Y2hbMV0pO1xuICAgIH1cblxuICAgIHdoaWxlICgobWF0Y2ggPSBjaGlsZHJlbi5leGVjKHN0cmluZykpICE9PSBudWxsKSB7XG4gICAgICAgIGtleXMucHVzaChtYXRjaFsxXSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGtleXM7XG59XG5cbmZ1bmN0aW9uIGhhc2hfYXNzaWduKHJlc3VsdCwga2V5cywgdmFsdWUpIHtcbiAgICBpZiAoa2V5cy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmVzdWx0ID0gdmFsdWU7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgdmFyIGtleSA9IGtleXMuc2hpZnQoKTtcbiAgICB2YXIgYmV0d2VlbiA9IGtleS5tYXRjaCgvXlxcWyguKz8pXFxdJC8pO1xuXG4gICAgaWYgKGtleSA9PT0gJ1tdJykge1xuICAgICAgICByZXN1bHQgPSByZXN1bHQgfHwgW107XG5cbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkocmVzdWx0KSkge1xuICAgICAgICAgICAgcmVzdWx0LnB1c2goaGFzaF9hc3NpZ24obnVsbCwga2V5cywgdmFsdWUpKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8vIFRoaXMgbWlnaHQgYmUgdGhlIHJlc3VsdCBvZiBiYWQgbmFtZSBhdHRyaWJ1dGVzIGxpa2UgXCJbXVtmb29dXCIsXG4gICAgICAgICAgICAvLyBpbiB0aGlzIGNhc2UgdGhlIG9yaWdpbmFsIGByZXN1bHRgIG9iamVjdCB3aWxsIGFscmVhZHkgYmVcbiAgICAgICAgICAgIC8vIGFzc2lnbmVkIHRvIGFuIG9iamVjdCBsaXRlcmFsLiBSYXRoZXIgdGhhbiBjb2VyY2UgdGhlIG9iamVjdCB0b1xuICAgICAgICAgICAgLy8gYW4gYXJyYXksIG9yIGNhdXNlIGFuIGV4Y2VwdGlvbiB0aGUgYXR0cmlidXRlIFwiX3ZhbHVlc1wiIGlzXG4gICAgICAgICAgICAvLyBhc3NpZ25lZCBhcyBhbiBhcnJheS5cbiAgICAgICAgICAgIHJlc3VsdC5fdmFsdWVzID0gcmVzdWx0Ll92YWx1ZXMgfHwgW107XG4gICAgICAgICAgICByZXN1bHQuX3ZhbHVlcy5wdXNoKGhhc2hfYXNzaWduKG51bGwsIGtleXMsIHZhbHVlKSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8vIEtleSBpcyBhbiBhdHRyaWJ1dGUgbmFtZSBhbmQgY2FuIGJlIGFzc2lnbmVkIGRpcmVjdGx5LlxuICAgIGlmICghYmV0d2Vlbikge1xuICAgICAgICByZXN1bHRba2V5XSA9IGhhc2hfYXNzaWduKHJlc3VsdFtrZXldLCBrZXlzLCB2YWx1ZSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICB2YXIgc3RyaW5nID0gYmV0d2VlblsxXTtcbiAgICAgICAgLy8gK3ZhciBjb252ZXJ0cyB0aGUgdmFyaWFibGUgaW50byBhIG51bWJlclxuICAgICAgICAvLyBiZXR0ZXIgdGhhbiBwYXJzZUludCBiZWNhdXNlIGl0IGRvZXNuJ3QgdHJ1bmNhdGUgYXdheSB0cmFpbGluZ1xuICAgICAgICAvLyBsZXR0ZXJzIGFuZCBhY3R1YWxseSBmYWlscyBpZiB3aG9sZSB0aGluZyBpcyBub3QgYSBudW1iZXJcbiAgICAgICAgdmFyIGluZGV4ID0gK3N0cmluZztcblxuICAgICAgICAvLyBJZiB0aGUgY2hhcmFjdGVycyBiZXR3ZWVuIHRoZSBicmFja2V0cyBpcyBub3QgYSBudW1iZXIgaXQgaXMgYW5cbiAgICAgICAgLy8gYXR0cmlidXRlIG5hbWUgYW5kIGNhbiBiZSBhc3NpZ25lZCBkaXJlY3RseS5cbiAgICAgICAgaWYgKGlzTmFOKGluZGV4KSkge1xuICAgICAgICAgICAgcmVzdWx0ID0gcmVzdWx0IHx8IHt9O1xuICAgICAgICAgICAgcmVzdWx0W3N0cmluZ10gPSBoYXNoX2Fzc2lnbihyZXN1bHRbc3RyaW5nXSwga2V5cywgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmVzdWx0ID0gcmVzdWx0IHx8IFtdO1xuICAgICAgICAgICAgcmVzdWx0W2luZGV4XSA9IGhhc2hfYXNzaWduKHJlc3VsdFtpbmRleF0sIGtleXMsIHZhbHVlKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiByZXN1bHQ7XG59XG5cbi8vIE9iamVjdC9oYXNoIGVuY29kaW5nIHNlcmlhbGl6ZXIuXG5mdW5jdGlvbiBoYXNoX3NlcmlhbGl6ZXIocmVzdWx0LCBrZXksIHZhbHVlKSB7XG4gICAgdmFyIG1hdGNoZXMgPSBrZXkubWF0Y2goYnJhY2tldHMpO1xuXG4gICAgLy8gSGFzIGJyYWNrZXRzPyBVc2UgdGhlIHJlY3Vyc2l2ZSBhc3NpZ25tZW50IGZ1bmN0aW9uIHRvIHdhbGsgdGhlIGtleXMsXG4gICAgLy8gY29uc3RydWN0IGFueSBtaXNzaW5nIG9iamVjdHMgaW4gdGhlIHJlc3VsdCB0cmVlIGFuZCBtYWtlIHRoZSBhc3NpZ25tZW50XG4gICAgLy8gYXQgdGhlIGVuZCBvZiB0aGUgY2hhaW4uXG4gICAgaWYgKG1hdGNoZXMpIHtcbiAgICAgICAgdmFyIGtleXMgPSBwYXJzZV9rZXlzKGtleSk7XG4gICAgICAgIGhhc2hfYXNzaWduKHJlc3VsdCwga2V5cywgdmFsdWUpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgLy8gTm9uIGJyYWNrZXQgbm90YXRpb24gY2FuIG1ha2UgYXNzaWdubWVudHMgZGlyZWN0bHkuXG4gICAgICAgIHZhciBleGlzdGluZyA9IHJlc3VsdFtrZXldO1xuXG4gICAgICAgIC8vIElmIHRoZSB2YWx1ZSBoYXMgYmVlbiBhc3NpZ25lZCBhbHJlYWR5IChmb3IgaW5zdGFuY2Ugd2hlbiBhIHJhZGlvIGFuZFxuICAgICAgICAvLyBhIGNoZWNrYm94IGhhdmUgdGhlIHNhbWUgbmFtZSBhdHRyaWJ1dGUpIGNvbnZlcnQgdGhlIHByZXZpb3VzIHZhbHVlXG4gICAgICAgIC8vIGludG8gYW4gYXJyYXkgYmVmb3JlIHB1c2hpbmcgaW50byBpdC5cbiAgICAgICAgLy9cbiAgICAgICAgLy8gTk9URTogSWYgdGhpcyByZXF1aXJlbWVudCB3ZXJlIHJlbW92ZWQgYWxsIGhhc2ggY3JlYXRpb24gYW5kXG4gICAgICAgIC8vIGFzc2lnbm1lbnQgY291bGQgZ28gdGhyb3VnaCBgaGFzaF9hc3NpZ25gLlxuICAgICAgICBpZiAoZXhpc3RpbmcpIHtcbiAgICAgICAgICAgIGlmICghQXJyYXkuaXNBcnJheShleGlzdGluZykpIHtcbiAgICAgICAgICAgICAgICByZXN1bHRba2V5XSA9IFsgZXhpc3RpbmcgXTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmVzdWx0W2tleV0ucHVzaCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXN1bHRba2V5XSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLy8gdXJsZm9ybSBlbmNvZGluZyBzZXJpYWxpemVyXG5mdW5jdGlvbiBzdHJfc2VyaWFsaXplKHJlc3VsdCwga2V5LCB2YWx1ZSkge1xuICAgIC8vIGVuY29kZSBuZXdsaW5lcyBhcyBcXHJcXG4gY2F1c2UgdGhlIGh0bWwgc3BlYyBzYXlzIHNvXG4gICAgdmFsdWUgPSB2YWx1ZS5yZXBsYWNlKC8oXFxyKT9cXG4vZywgJ1xcclxcbicpO1xuICAgIHZhbHVlID0gZW5jb2RlVVJJQ29tcG9uZW50KHZhbHVlKTtcblxuICAgIC8vIHNwYWNlcyBzaG91bGQgYmUgJysnIHJhdGhlciB0aGFuICclMjAnLlxuICAgIHZhbHVlID0gdmFsdWUucmVwbGFjZSgvJTIwL2csICcrJyk7XG4gICAgcmV0dXJuIHJlc3VsdCArIChyZXN1bHQgPyAnJicgOiAnJykgKyBlbmNvZGVVUklDb21wb25lbnQoa2V5KSArICc9JyArIHZhbHVlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNlcmlhbGl6ZTtcbiIsImltcG9ydCBBbHBpbmUgZnJvbSAnYWxwaW5lanMnO1xyXG5pbXBvcnQgc2VyaWFsaXplIGZyb20gJ2Zvcm0tc2VyaWFsaXplJztcclxuXHJcbmNvbnN0IGRlZmF1bHRzID0ge1xyXG4gIGFkZFRvQ2FydEJ1dHRvbjogJy5qcy1hZGQtdG8tY2FydCcsXHJcbiAgY2FydERyYXdlcjogJyNjYXJ0LWRyYXdlcicsXHJcbiAgY2FydERyYXdlckl0ZW1zOiAnI2NhcnQtZHJhd2VyLWl0ZW1zJyxcclxuICBjYXJ0RHJhd2VyRm9vdGVyOiAnI2NhcnQtZHJhd2VyLWZvb3RlcicsXHJcbiAgY2FydERyYXdlck92ZXJsYXk6ICcuY2FydC1kcmF3ZXItb3ZlcmxheScsXHJcbiAgY2FydERyYXdlclRyaWdnZXI6ICcuanMtY2FydC1kcmF3ZXItdHJpZ2dlcicsXHJcbiAgY2FydERyYXdlckNsb3NlOiAnLmpzLWNhcnQtZHJhd2VyLWNsb3NlJyxcclxuICBjYXJ0RHJhd2VyQ2FydEpzb246ICcjYWpheC1jYXJ0LWRyYXdlci1qc29uJyxcclxuICBjYXJ0Q291bnQ6ICcuY2FydC1jb3VudCcsXHJcbiAgbGluZUl0ZW06ICcuY2FydC1saW5lLWl0ZW0nLFxyXG4gIGxpbmVJdGVtVXBkYXRlOiAnLmpzLWNhcnQtbGluZS1pdGVtLXVwZGF0ZScsXHJcbiAgbGluZUl0ZW1RdWFudGl0eTogJy5qcy1jYXJ0LWxpbmUtaXRlbS1pbnB1dC1xdWFudGl0eScsXHJcbiAgbW9uZXlGb3JtYXQ6IFNob3BpZnkuY3VycmVuY3kuZGVmYXVsdF9tb25leV9mb3JtYXQsXHJcbn07XHJcblxyXG5jbGFzcyBDYXJ0VXRpbHMge1xyXG4gIHN0YXRpYyByZW1vdmVJdGVtQW5pbWF0aW9uKGl0ZW0pIHtcclxuICAgIGl0ZW0uY2xhc3NMaXN0LmFkZCgnaXMtaW52aXNpYmxlJyk7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgb3BlbkNhcnREcmF3ZXIoKSB7XHJcbiAgICBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc3R5bGUub3ZlcmZsb3cgPSAnaGlkZGVuJztcclxuICAgIEFscGluZS5zdG9yZSgnY2FydCcpLmRyYXdlcklzT3BlbiA9IHRydWU7XHJcbiAgICB0aGlzLm9wZW5DYXJ0T3ZlcmxheSgpO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGNsb3NlQ2FydERyYXdlcigpIHtcclxuICAgIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zdHlsZS5vdmVyZmxvdyA9ICdhdXRvJztcclxuICAgIEFscGluZS5zdG9yZSgnY2FydCcpLmRyYXdlcklzT3BlbiA9IGZhbHNlO1xyXG4gICAgdGhpcy5jbG9zZUNhcnRPdmVybGF5KCk7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgb3BlbkNhcnRPdmVybGF5KCkge1xyXG4gICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihkZWZhdWx0cy5jYXJ0RHJhd2VyT3ZlcmxheSkuY2xhc3NMaXN0LmFkZCgnaXMtb3BlbicpO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGNsb3NlQ2FydE92ZXJsYXkoKSB7XHJcbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGRlZmF1bHRzLmNhcnREcmF3ZXJPdmVybGF5KS5jbGFzc0xpc3QucmVtb3ZlKCdpcy1vcGVuJyk7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgdXBkYXRlQ2FydEl0ZW1Db3VudChjYXJ0KSB7XHJcbiAgICBpZiAoY2FydC5pdGVtX2NvdW50ID09IDApIHtcclxuICAgICAgZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QuYWRkKCdjYXJ0LWlzLWVtcHR5Jyk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBkb2N1bWVudC5ib2R5LmNsYXNzTGlzdC5yZW1vdmUoJ2NhcnQtaXMtZW1wdHknKTtcclxuICAgIH1cclxuXHJcbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKGRlZmF1bHRzLmNhcnRDb3VudCkuZm9yRWFjaCgoaXRlbUNvdW50KSA9PiB7XHJcbiAgICAgIGl0ZW1Db3VudC5pbm5lckhUTUwgPSBjYXJ0Lml0ZW1fY291bnQ7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBzZXRMb2FkaW5nQnV0dG9uKGJ1dHRvbiwgaXNMb2FkaW5nID0gdHJ1ZSkge1xyXG4gICAgaWYgKGlzTG9hZGluZykge1xyXG4gICAgICBidXR0b24uZGlzYWJsZWQgPSB0cnVlO1xyXG4gICAgICBidXR0b24uY2xhc3NMaXN0LmFkZCgncHJvY2Vzc2luZy1zcGlubmVyJyk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBidXR0b24uZGlzYWJsZWQgPSBmYWxzZTtcclxuICAgICAgYnV0dG9uLmNsYXNzTGlzdC5yZW1vdmUoJ3Byb2Nlc3Npbmctc3Bpbm5lcicpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgc3RhdGljIHVwZGF0ZVNlY3Rpb25zKHJlc3BvbnNlKSB7XHJcbiAgICBpZiAoIXJlc3BvbnNlLnNlY3Rpb25zKSByZXR1cm47XHJcblxyXG4gICAgQ2FydFV0aWxzLmdldFNlY3Rpb25zVG9SZW5kZXIoKS5mb3JFYWNoKChzZWN0aW9uKSA9PiB7XHJcbiAgICAgIGNvbnN0IHNlY3Rpb25IdG1sID0gbmV3IERPTVBhcnNlcigpLnBhcnNlRnJvbVN0cmluZyhyZXNwb25zZS5zZWN0aW9uc1tzZWN0aW9uLnNlY3Rpb25dLCAndGV4dC9odG1sJyk7XHJcbiAgICAgIHNlY3Rpb24uc2VsZWN0b3JzLmZvckVhY2goKHNlbGVjdG9yKSA9PiB7XHJcbiAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihzZWxlY3RvcikuaW5uZXJIVE1MID0gc2VjdGlvbkh0bWwucXVlcnlTZWxlY3RvcihzZWxlY3RvcikuaW5uZXJIVE1MO1xyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGdldFNlY3Rpb25zVG9SZW5kZXIoKSB7XHJcbiAgICBsZXQgc2VjdGlvbnMgPSBbXHJcbiAgICAgIHtcclxuICAgICAgICBzZWN0aW9uOiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY2FydC1kcmF3ZXInKS5kYXRhc2V0LnNlY3Rpb25JZCxcclxuICAgICAgICBzZWxlY3RvcnM6IFtkZWZhdWx0cy5jYXJ0RHJhd2VySXRlbXMsIGRlZmF1bHRzLmNhcnREcmF3ZXJGb290ZXJdLFxyXG4gICAgICB9LFxyXG4gICAgXTtcclxuXHJcbiAgICBpZiAod2luZG93LmxvY2F0aW9uLnBhdGhuYW1lLmluY2x1ZGVzKFNob3BpZnkucm91dGVzLmNhcnRfdXJsKSkge1xyXG4gICAgICBzZWN0aW9ucy5wdXNoKHtcclxuICAgICAgICBzZWN0aW9uOiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbWFpbi1jYXJ0JykuZGF0YXNldC5zZWN0aW9uSWQsXHJcbiAgICAgICAgc2VsZWN0b3JzOiBbJyNtYWluLWNhcnQnXSxcclxuICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHNlY3Rpb25zO1xyXG4gIH1cclxufVxyXG5cclxuQWxwaW5lLnN0b3JlKCdjYXJ0Jywge1xyXG4gIGNhcnQ6IFNob3BpZnkuY2FydCB8fCB7fSxcclxuICBjYXJ0SXNVcGRhdGluZzogZmFsc2UsXHJcbiAgZHJhd2VySXNPcGVuOiBmYWxzZSxcclxuICBpbml0KCkge1xyXG4gICAgdGhpcy5pbml0Q2xpY2tMaXN0ZW5lcnMoKTtcclxuICAgIHRoaXMuaW5pdEV2ZW50TGlzdGVuZXJzKCk7XHJcblxyXG4gICAgQWxwaW5lLmVmZmVjdCgoKSA9PiB7XHJcbiAgICAgIENhcnRVdGlscy51cGRhdGVDYXJ0SXRlbUNvdW50KHRoaXMuY2FydCk7XHJcbiAgICB9KTtcclxuICB9LFxyXG5cclxuICBhc3luYyBhZGRKUyhmb3JtRGF0YSkge1xyXG4gICAgdGhpcy5jYXJ0SXNVcGRhdGluZyA9IHRydWU7XHJcbiAgICByZXR1cm4gZmV0Y2goU2hvcGlmeS5yb3V0ZXMucm9vdCArICdjYXJ0L2FkZC5qcycsIHtcclxuICAgICAgbWV0aG9kOiAnUE9TVCcsXHJcbiAgICAgIGhlYWRlcnM6IHtcclxuICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLFxyXG4gICAgICB9LFxyXG4gICAgICBib2R5OiBKU09OLnN0cmluZ2lmeShmb3JtRGF0YSksXHJcbiAgICB9KVxyXG4gICAgICAudGhlbihhc3luYyAocmVzcG9uc2UpID0+IHtcclxuICAgICAgICBpZiAocmVzcG9uc2Uuc3RhdHVzICE9IDIwMCkge1xyXG4gICAgICAgICAgY29uc3QgcmVzcG9uc2VKc29uID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xyXG4gICAgICAgICAgY29uc3QgbWVzc2FnZSA9IHJlc3BvbnNlSnNvbi5tZXNzYWdlIHx8ICdBbiBlcnJvciBoYXMgb2NjdXJyZWQhIFBsZWFzZSB0cnkgYWdhaW4uJztcclxuICAgICAgICAgIGFsZXJ0KG1lc3NhZ2UpO1xyXG5cclxuICAgICAgICAgIHRocm93IG5ldyBFcnJvcigpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHJlc3BvbnNlLmpzb24oKTtcclxuICAgICAgfSlcclxuICAgICAgLmNhdGNoKChlKSA9PiB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGUpO1xyXG4gICAgICB9KVxyXG4gICAgICAuZmluYWxseSgoKSA9PiB7XHJcbiAgICAgICAgdGhpcy5jYXJ0SXNVcGRhdGluZyA9IGZhbHNlO1xyXG4gICAgICB9KTtcclxuICB9LFxyXG5cclxuICBhc3luYyBjaGFuZ2VKUyhmb3JtRGF0YSkge1xyXG4gICAgdGhpcy5jYXJ0SXNVcGRhdGluZyA9IHRydWU7XHJcbiAgICByZXR1cm4gZmV0Y2goU2hvcGlmeS5yb3V0ZXMucm9vdCArICdjYXJ0L2NoYW5nZS5qcycsIHtcclxuICAgICAgbWV0aG9kOiAnUE9TVCcsXHJcbiAgICAgIGhlYWRlcnM6IHtcclxuICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLFxyXG4gICAgICB9LFxyXG4gICAgICBib2R5OiBKU09OLnN0cmluZ2lmeShmb3JtRGF0YSksXHJcbiAgICB9KVxyXG4gICAgICAudGhlbihhc3luYyAocmVzcG9uc2UpID0+IHtcclxuICAgICAgICBpZiAocmVzcG9uc2Uuc3RhdHVzICE9IDIwMCkge1xyXG4gICAgICAgICAgY29uc3QgcmVzcG9uc2VKc29uID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xyXG4gICAgICAgICAgY29uc3QgbWVzc2FnZSA9IHJlc3BvbnNlSnNvbi5tZXNzYWdlIHx8ICdBbiBlcnJvciBoYXMgb2NjdXJyZWQhIFBsZWFzZSB0cnkgYWdhaW4uJztcclxuICAgICAgICAgIGFsZXJ0KG1lc3NhZ2UpO1xyXG5cclxuICAgICAgICAgIHRocm93IG5ldyBFcnJvcigpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHJlc3BvbnNlLmpzb24oKTtcclxuICAgICAgfSlcclxuICAgICAgLmNhdGNoKChlKSA9PiB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGUpO1xyXG4gICAgICB9KVxyXG4gICAgICAuZmluYWxseSgoKSA9PiB7XHJcbiAgICAgICAgdGhpcy5jYXJ0SXNVcGRhdGluZyA9IGZhbHNlO1xyXG4gICAgICB9KTtcclxuICB9LFxyXG5cclxuICBhc3luYyBhZGRUb0NhcnQoYWRkVG9DYXJ0QnV0dG9uKSB7XHJcbiAgICBpZiAodGhpcy5jYXJ0SXNVcGRhdGluZykgcmV0dXJuO1xyXG5cclxuICAgIGxldCBmb3JtID0gYWRkVG9DYXJ0QnV0dG9uLmNsb3Nlc3QoJ2Zvcm0nKTtcclxuICAgIGxldCBmb3JtU2VyaWFsaXplID0gc2VyaWFsaXplKGZvcm0sIHsgaGFzaDogdHJ1ZSB9KTtcclxuICAgIGNvbnN0IGl0ZW1zID0gW2Zvcm1TZXJpYWxpemVdO1xyXG5cclxuICAgIGxldCBmb3JtRGF0YSA9IHtcclxuICAgICAgaXRlbXMsXHJcbiAgICAgIHNlY3Rpb25zOiBDYXJ0VXRpbHMuZ2V0U2VjdGlvbnNUb1JlbmRlcigpLm1hcCgoc2VjdGlvbikgPT4gc2VjdGlvbi5zZWN0aW9uKSxcclxuICAgICAgc2VjdGlvbnNfdXJsOiB3aW5kb3cubG9jYXRpb24ucGF0aG5hbWUgKyAnP3JlcXVlc3RfdHlwZT1hamF4JyxcclxuICAgIH07XHJcblxyXG4gICAgQ2FydFV0aWxzLnNldExvYWRpbmdCdXR0b24oYWRkVG9DYXJ0QnV0dG9uKTtcclxuICAgIGxldCByZXNwb25zZSA9IGF3YWl0IHRoaXMuYWRkSlMoZm9ybURhdGEpLmZpbmFsbHkoKCkgPT4ge1xyXG4gICAgICBDYXJ0VXRpbHMuc2V0TG9hZGluZ0J1dHRvbihhZGRUb0NhcnRCdXR0b24sIGZhbHNlKTtcclxuICAgIH0pO1xyXG5cclxuICAgIENhcnRVdGlscy51cGRhdGVTZWN0aW9ucyhyZXNwb25zZSk7XHJcbiAgICBDYXJ0VXRpbHMub3BlbkNhcnREcmF3ZXIoKTtcclxuXHJcbiAgICB0aGlzLnVwZGF0ZUNhcnRKc29uKHJlc3BvbnNlKTtcclxuICB9LFxyXG5cclxuICBhc3luYyB1cGRhdGVDYXJ0KGJ1dHRvbikge1xyXG4gICAgaWYgKHRoaXMuY2FydElzVXBkYXRpbmcpIHJldHVybjtcclxuXHJcbiAgICBjb25zdCB0eXBlID0gYnV0dG9uLmRhdGFzZXQudHlwZTtcclxuICAgIGNvbnN0IGxpbmUgPSBidXR0b24uZGF0YXNldC5saW5lO1xyXG4gICAgY29uc3QgcXVhbnRpdHlJbnB1dCA9IGJ1dHRvbi5jbG9zZXN0KGRlZmF1bHRzLmxpbmVJdGVtKS5xdWVyeVNlbGVjdG9yKGRlZmF1bHRzLmxpbmVJdGVtUXVhbnRpdHkpO1xyXG4gICAgY29uc3Qgc3RlcCA9IE51bWJlcihxdWFudGl0eUlucHV0LnN0ZXAgfHwgMSk7XHJcbiAgICBsZXQgcXVhbnRpdHkgPSBOdW1iZXIocXVhbnRpdHlJbnB1dC52YWx1ZSB8fCAwKTtcclxuXHJcbiAgICBzd2l0Y2ggKHR5cGUpIHtcclxuICAgICAgY2FzZSAncGx1cyc6XHJcbiAgICAgICAgcXVhbnRpdHkgKz0gc3RlcDtcclxuICAgICAgICBicmVhaztcclxuICAgICAgY2FzZSAnbWludXMnOlxyXG4gICAgICAgIHF1YW50aXR5IC09IHN0ZXA7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIGNhc2UgJ3JlbW92ZSc6XHJcbiAgICAgICAgcXVhbnRpdHkgPSAwO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChxdWFudGl0eSA9PT0gMCkge1xyXG4gICAgICBDYXJ0VXRpbHMucmVtb3ZlSXRlbUFuaW1hdGlvbihidXR0b24uY2xvc2VzdChkZWZhdWx0cy5saW5lSXRlbSkpO1xyXG4gICAgfVxyXG5cclxuICAgIGxldCBmb3JtRGF0YSA9IHtcclxuICAgICAgbGluZTogbGluZSxcclxuICAgICAgcXVhbnRpdHk6IHF1YW50aXR5LFxyXG4gICAgICBzZWN0aW9uczogQ2FydFV0aWxzLmdldFNlY3Rpb25zVG9SZW5kZXIoKS5tYXAoKHNlY3Rpb24pID0+IHNlY3Rpb24uc2VjdGlvbiksXHJcbiAgICAgIHNlY3Rpb25zX3VybDogd2luZG93LmxvY2F0aW9uLnBhdGhuYW1lICsgJz9yZXF1ZXN0X3R5cGU9YWpheCcsXHJcbiAgICB9O1xyXG5cclxuICAgIENhcnRVdGlscy5zZXRMb2FkaW5nQnV0dG9uKGJ1dHRvbik7XHJcbiAgICBsZXQgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLmNoYW5nZUpTKGZvcm1EYXRhKS5maW5hbGx5KCgpID0+IHtcclxuICAgICAgQ2FydFV0aWxzLnNldExvYWRpbmdCdXR0b24oYnV0dG9uLCBmYWxzZSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBDYXJ0VXRpbHMudXBkYXRlU2VjdGlvbnMocmVzcG9uc2UpO1xyXG4gICAgdGhpcy51cGRhdGVDYXJ0SnNvbihyZXNwb25zZSk7XHJcbiAgfSxcclxuXHJcbiAgYXN5bmMgZ2V0RHJhd2VyVXBkYXRlZCgpIHtcclxuICAgIGNvbnN0IHNlY3Rpb25zVG9SZW5kZXIgPSBDYXJ0VXRpbHMuZ2V0U2VjdGlvbnNUb1JlbmRlcigpXHJcbiAgICAgIC5tYXAoKHNlY3Rpb24pID0+IHNlY3Rpb24uc2VjdGlvbilcclxuICAgICAgLmpvaW4oJywnKTtcclxuXHJcbiAgICBsZXQgZW5kUG9pbnQgPSBTaG9waWZ5LnJvdXRlcy5yb290ICsgJz9yZXF1ZXN0X3R5cGU9YWpheCZzZWN0aW9ucz0nICsgc2VjdGlvbnNUb1JlbmRlcjtcclxuICAgIGxldCBzZWN0aW9ucyA9IGF3YWl0IGZldGNoKGVuZFBvaW50KVxyXG4gICAgICAudGhlbigocmVzKSA9PiB7XHJcbiAgICAgICAgcmV0dXJuIHJlcy5qc29uKCk7XHJcbiAgICAgIH0pXHJcbiAgICAgIC5jYXRjaCgoZSkgPT4ge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihlKTtcclxuICAgICAgfSk7XHJcblxyXG4gICAgY29uc3QgcmVzcG9uc2UgPSB7XHJcbiAgICAgIHNlY3Rpb25zOiBzZWN0aW9ucyxcclxuICAgIH07XHJcblxyXG4gICAgQ2FydFV0aWxzLnVwZGF0ZVNlY3Rpb25zKHJlc3BvbnNlKTtcclxuICAgIENhcnRVdGlscy5vcGVuQ2FydERyYXdlcigpO1xyXG4gICAgdGhpcy51cGRhdGVDYXJ0SnNvbihyZXNwb25zZSk7XHJcbiAgfSxcclxuXHJcbiAgYXN5bmMgdXBkYXRlQ2FydEpzb24ocmVzcG9uc2UpIHtcclxuICAgIGNvbnN0IGRyYXdlclNlY3Rpb24gPSBDYXJ0VXRpbHMuZ2V0U2VjdGlvbnNUb1JlbmRlcigpWzBdLnNlY3Rpb247XHJcbiAgICBjb25zdCByZXNwb25zZUh0bWwgPSBuZXcgRE9NUGFyc2VyKCkucGFyc2VGcm9tU3RyaW5nKHJlc3BvbnNlLnNlY3Rpb25zW2RyYXdlclNlY3Rpb25dLCAndGV4dC9odG1sJyk7XHJcbiAgICB0aGlzLmNhcnQgPSBKU09OLnBhcnNlKHJlc3BvbnNlSHRtbC5xdWVyeVNlbGVjdG9yKGRlZmF1bHRzLmNhcnREcmF3ZXJDYXJ0SnNvbikudGV4dENvbnRlbnQpO1xyXG4gIH0sXHJcblxyXG4gIGluaXRDbGlja0xpc3RlbmVycygpIHtcclxuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGUpID0+IHtcclxuICAgICAgY29uc3QgdGFyZ2V0ID0gZS50YXJnZXQ7XHJcblxyXG4gICAgICBpZiAodGFyZ2V0LmNsb3Nlc3QoZGVmYXVsdHMuYWRkVG9DYXJ0QnV0dG9uKSkge1xyXG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICB0aGlzLmFkZFRvQ2FydCh0YXJnZXQuY2xvc2VzdChkZWZhdWx0cy5hZGRUb0NhcnRCdXR0b24pKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKHRhcmdldC5jbG9zZXN0KGRlZmF1bHRzLmxpbmVJdGVtVXBkYXRlKSkge1xyXG4gICAgICAgIHRoaXMudXBkYXRlQ2FydCh0YXJnZXQuY2xvc2VzdChkZWZhdWx0cy5saW5lSXRlbVVwZGF0ZSkpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAodGFyZ2V0LmNsb3Nlc3QoZGVmYXVsdHMuY2FydERyYXdlclRyaWdnZXIpKSB7XHJcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgIENhcnRVdGlscy5vcGVuQ2FydERyYXdlcigpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAodGFyZ2V0LmNsb3Nlc3QoZGVmYXVsdHMuY2FydERyYXdlck92ZXJsYXkpIHx8IHRhcmdldC5jbG9zZXN0KGRlZmF1bHRzLmNhcnREcmF3ZXJDbG9zZSkpIHtcclxuICAgICAgICBDYXJ0VXRpbHMuY2xvc2VDYXJ0RHJhd2VyKCk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH0sXHJcblxyXG4gIGluaXRFdmVudExpc3RlbmVycygpIHtcclxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAgIGlmIChldmVudC5rZXkgPT09ICdFc2NhcGUnKSB7XHJcbiAgICAgICAgaWYgKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoZGVmYXVsdHMuY2FydERyYXdlcikuY2xhc3NMaXN0LmNvbnRhaW5zKCdpcy1vcGVuJykpIHtcclxuICAgICAgICAgIENhcnRVdGlscy5jbG9zZUNhcnREcmF3ZXIoKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH0sXHJcbn0pO1xyXG4iLCJpbXBvcnQgJy4vbWFpbi5zY3NzJztcclxuXHJcbmltcG9ydCBBbHBpbmUgZnJvbSAnYWxwaW5lanMnO1xyXG5pbXBvcnQgU3dpcGVyIGZyb20gJ3N3aXBlci9idW5kbGUnO1xyXG5cclxud2luZG93LkFscGluZSA9IEFscGluZTtcclxud2luZG93LlN3aXBlciA9IFN3aXBlcjtcclxuXHJcbmltcG9ydCBmb2N1cyBmcm9tICdAYWxwaW5lanMvZm9jdXMnO1xyXG5pbXBvcnQgY29sbGFwc2UgZnJvbSAnQGFscGluZWpzL2NvbGxhcHNlJztcclxuaW1wb3J0IGFuY2hvciBmcm9tICdAYWxwaW5lanMvYW5jaG9yJztcclxuXHJcbmltcG9ydCAnLi9qcy9wcm9kdWN0JztcclxuaW1wb3J0ICcuL2pzL2NhcnQnO1xyXG5cclxuQWxwaW5lLnBsdWdpbihmb2N1cyk7XHJcbkFscGluZS5wbHVnaW4oY29sbGFwc2UpO1xyXG5BbHBpbmUucGx1Z2luKGFuY2hvcik7XHJcbkFscGluZS5zdGFydCgpO1xyXG4iXSwibmFtZXMiOlsiZmx1c2hQZW5kaW5nIiwiZmx1c2hpbmciLCJxdWV1ZSIsImxhc3RGbHVzaGVkSW5kZXgiLCJzY2hlZHVsZXIiLCJjYWxsYmFjayIsInF1ZXVlSm9iIiwiam9iIiwicXVldWVGbHVzaCIsImRlcXVldWVKb2IiLCJpbmRleCIsImZsdXNoSm9icyIsImkiLCJyZWFjdGl2ZSIsImVmZmVjdCIsInJlbGVhc2UiLCJyYXciLCJzaG91bGRTY2hlZHVsZSIsImRpc2FibGVFZmZlY3RTY2hlZHVsaW5nIiwic2V0UmVhY3Rpdml0eUVuZ2luZSIsImVuZ2luZSIsInRhc2siLCJvdmVycmlkZUVmZmVjdCIsIm92ZXJyaWRlIiwiZWxlbWVudEJvdW5kRWZmZWN0IiwiZWwiLCJjbGVhbnVwMiIsImVmZmVjdFJlZmVyZW5jZSIsIndhdGNoIiwiZ2V0dGVyIiwiZmlyc3RUaW1lIiwib2xkVmFsdWUiLCJ2YWx1ZSIsIm9uQXR0cmlidXRlQWRkZWRzIiwib25FbFJlbW92ZWRzIiwib25FbEFkZGVkcyIsIm9uRWxBZGRlZCIsIm9uRWxSZW1vdmVkIiwib25BdHRyaWJ1dGVzQWRkZWQiLCJvbkF0dHJpYnV0ZVJlbW92ZWQiLCJuYW1lIiwiY2xlYW51cEF0dHJpYnV0ZXMiLCJuYW1lcyIsImNsZWFudXBFbGVtZW50Iiwib2JzZXJ2ZXIiLCJvbk11dGF0ZSIsImN1cnJlbnRseU9ic2VydmluZyIsInN0YXJ0T2JzZXJ2aW5nTXV0YXRpb25zIiwic3RvcE9ic2VydmluZ011dGF0aW9ucyIsImZsdXNoT2JzZXJ2ZXIiLCJxdWV1ZWRNdXRhdGlvbnMiLCJyZWNvcmRzIiwicXVldWVMZW5ndGhXaGVuVHJpZ2dlcmVkIiwibXV0YXRlRG9tIiwicmVzdWx0IiwiaXNDb2xsZWN0aW5nIiwiZGVmZXJyZWRNdXRhdGlvbnMiLCJkZWZlck11dGF0aW9ucyIsImZsdXNoQW5kU3RvcERlZmVycmluZ011dGF0aW9ucyIsIm11dGF0aW9ucyIsImFkZGVkTm9kZXMiLCJyZW1vdmVkTm9kZXMiLCJhZGRlZEF0dHJpYnV0ZXMiLCJyZW1vdmVkQXR0cmlidXRlcyIsIm5vZGUiLCJhZGQyIiwicmVtb3ZlIiwiYXR0cnMiLCJzY29wZSIsIm1lcmdlUHJveGllcyIsImNsb3Nlc3REYXRhU3RhY2siLCJhZGRTY29wZVRvTm9kZSIsImRhdGEyIiwicmVmZXJlbmNlTm9kZSIsIm9iamVjdHMiLCJtZXJnZVByb3h5VHJhcCIsIm9iaiIsInRoaXNQcm94eSIsImNvbGxhcHNlUHJveGllcyIsInRhcmdldCIsImRlc2NyaXB0b3IiLCJhY2MiLCJrZXkiLCJpbml0SW50ZXJjZXB0b3JzIiwiaXNPYmplY3QyIiwidmFsIiwicmVjdXJzZSIsImJhc2VQYXRoIiwiZW51bWVyYWJsZSIsInBhdGgiLCJpbnRlcmNlcHRvciIsIm11dGF0ZU9iaiIsImdldCIsInNldCIsImluaXRpYWxWYWx1ZSIsImluaXRpYWxpemUiLCJpbm5lclZhbHVlIiwiY2FycnkiLCJzZWdtZW50IiwibWFnaWNzIiwibWFnaWMiLCJpbmplY3RNYWdpY3MiLCJtZW1vaXplZFV0aWxpdGllcyIsImdldFV0aWxpdGllcyIsInV0aWxpdGllcyIsImdldEVsZW1lbnRCb3VuZFV0aWxpdGllcyIsInRyeUNhdGNoIiwiZXhwcmVzc2lvbiIsImFyZ3MiLCJlIiwiaGFuZGxlRXJyb3IiLCJlcnJvcjIiLCJzaG91bGRBdXRvRXZhbHVhdGVGdW5jdGlvbnMiLCJkb250QXV0b0V2YWx1YXRlRnVuY3Rpb25zIiwiY2FjaGUiLCJldmFsdWF0ZSIsImV4dHJhcyIsImV2YWx1YXRlTGF0ZXIiLCJ0aGVFdmFsdWF0b3JGdW5jdGlvbiIsIm5vcm1hbEV2YWx1YXRvciIsInNldEV2YWx1YXRvciIsIm5ld0V2YWx1YXRvciIsIm92ZXJyaWRkZW5NYWdpY3MiLCJkYXRhU3RhY2siLCJldmFsdWF0b3IiLCJnZW5lcmF0ZUV2YWx1YXRvckZyb21GdW5jdGlvbiIsImdlbmVyYXRlRXZhbHVhdG9yRnJvbVN0cmluZyIsImZ1bmMiLCJyZWNlaXZlciIsInNjb3BlMiIsInBhcmFtcyIsInJ1bklmVHlwZU9mRnVuY3Rpb24iLCJldmFsdWF0b3JNZW1vIiwiZ2VuZXJhdGVGdW5jdGlvbkZyb21TdHJpbmciLCJBc3luY0Z1bmN0aW9uIiwicmlnaHRTaWRlU2FmZUV4cHJlc3Npb24iLCJmdW5jMiIsImNvbXBsZXRlU2NvcGUiLCJwcm9taXNlIiwicHJlZml4QXNTdHJpbmciLCJwcmVmaXgiLCJzdWJqZWN0Iiwic2V0UHJlZml4IiwibmV3UHJlZml4IiwiZGlyZWN0aXZlSGFuZGxlcnMiLCJkaXJlY3RpdmUiLCJkaXJlY3RpdmUyIiwicG9zIiwiZGlyZWN0aXZlT3JkZXIiLCJkaXJlY3RpdmVFeGlzdHMiLCJkaXJlY3RpdmVzIiwiYXR0cmlidXRlcyIsIm9yaWdpbmFsQXR0cmlidXRlT3ZlcnJpZGUiLCJ2QXR0cmlidXRlcyIsInN0YXRpY0F0dHJpYnV0ZXMiLCJhdHRyaWJ1dGVzT25seSIsImF0dHJpYnV0ZSIsImF0dHIiLCJ0cmFuc2Zvcm1lZEF0dHJpYnV0ZU1hcCIsInRvVHJhbnNmb3JtZWRBdHRyaWJ1dGVzIiwibmV3TmFtZSIsIm9sZE5hbWUiLCJvdXROb25BbHBpbmVBdHRyaWJ1dGVzIiwidG9QYXJzZWREaXJlY3RpdmVzIiwiYnlQcmlvcml0eSIsImdldERpcmVjdGl2ZUhhbmRsZXIiLCJpc0RlZmVycmluZ0hhbmRsZXJzIiwiZGlyZWN0aXZlSGFuZGxlclN0YWNrcyIsImN1cnJlbnRIYW5kbGVyU3RhY2tLZXkiLCJkZWZlckhhbmRsaW5nRGlyZWN0aXZlcyIsImZsdXNoSGFuZGxlcnMiLCJzdG9wRGVmZXJyaW5nIiwiY2xlYW51cHMiLCJlZmZlY3QzIiwiY2xlYW51cEVmZmVjdCIsImFscGluZV9kZWZhdWx0Iiwibm9vcCIsImhhbmRsZXI0IiwiZnVsbEhhbmRsZXIiLCJzdGFydGluZ1dpdGgiLCJyZXBsYWNlbWVudCIsImludG8iLCJuZXdWYWx1ZSIsImF0dHJpYnV0ZVRyYW5zZm9ybWVycyIsInRyYW5zZm9ybSIsIm1hcEF0dHJpYnV0ZXMiLCJhbHBpbmVBdHRyaWJ1dGVSZWdleCIsInR5cGVNYXRjaCIsInZhbHVlTWF0Y2giLCJtb2RpZmllcnMiLCJvcmlnaW5hbCIsIkRFRkFVTFQiLCJhIiwiYiIsInR5cGVBIiwidHlwZUIiLCJkaXNwYXRjaCIsImRldGFpbCIsIndhbGsiLCJlbDIiLCJza2lwIiwid2FybiIsIm1lc3NhZ2UiLCJzdGFydGVkIiwic3RhcnQiLCJpbml0VHJlZSIsImRlc3Ryb3lUcmVlIiwiaGFuZGxlIiwib3V0TmVzdGVkQ29tcG9uZW50cyIsImNsb3Nlc3RSb290IiwiYWxsU2VsZWN0b3JzIiwid2FybkFib3V0TWlzc2luZ1BsdWdpbnMiLCJyb290U2VsZWN0b3JDYWxsYmFja3MiLCJpbml0U2VsZWN0b3JDYWxsYmFja3MiLCJyb290U2VsZWN0b3JzIiwiZm4iLCJhZGRSb290U2VsZWN0b3IiLCJzZWxlY3RvckNhbGxiYWNrIiwiYWRkSW5pdFNlbGVjdG9yIiwiaW5jbHVkZUluaXRTZWxlY3RvcnMiLCJmaW5kQ2xvc2VzdCIsImVsZW1lbnQiLCJzZWxlY3RvciIsImlzUm9vdCIsImluaXRJbnRlcmNlcHRvcnMyIiwiaW50ZXJjZXB0SW5pdCIsIndhbGtlciIsImludGVyY2VwdCIsInJvb3QiLCJwbHVnaW4yIiwic2VsZWN0b3JzIiwidGlja1N0YWNrIiwiaXNIb2xkaW5nIiwibmV4dFRpY2siLCJyZWxlYXNlTmV4dFRpY2tzIiwicmVzIiwiaG9sZE5leHRUaWNrcyIsInNldENsYXNzZXMiLCJzZXRDbGFzc2VzRnJvbVN0cmluZyIsInNldENsYXNzZXNGcm9tT2JqZWN0IiwiY2xhc3NTdHJpbmciLCJtaXNzaW5nQ2xhc3NlcyIsImNsYXNzU3RyaW5nMiIsImFkZENsYXNzZXNBbmRSZXR1cm5VbmRvIiwiY2xhc3NlcyIsImNsYXNzT2JqZWN0Iiwic3BsaXQiLCJmb3JBZGQiLCJib29sIiwiZm9yUmVtb3ZlIiwiYWRkZWQiLCJyZW1vdmVkIiwic2V0U3R5bGVzIiwic2V0U3R5bGVzRnJvbU9iamVjdCIsInNldFN0eWxlc0Zyb21TdHJpbmciLCJwcmV2aW91c1N0eWxlcyIsInZhbHVlMiIsImtlYmFiQ2FzZSIsIm9uY2UiLCJmYWxsYmFjayIsImNhbGxlZCIsImV2YWx1YXRlMiIsInJlZ2lzdGVyVHJhbnNpdGlvbnNGcm9tSGVscGVyIiwicmVnaXN0ZXJUcmFuc2l0aW9uc0Zyb21DbGFzc1N0cmluZyIsInN0YWdlIiwicmVnaXN0ZXJUcmFuc2l0aW9uT2JqZWN0IiwiZG9lc250U3BlY2lmeSIsInRyYW5zaXRpb25pbmdJbiIsInRyYW5zaXRpb25pbmdPdXQiLCJ3YW50c0FsbCIsIndhbnRzT3BhY2l0eSIsIndhbnRzU2NhbGUiLCJvcGFjaXR5VmFsdWUiLCJzY2FsZVZhbHVlIiwibW9kaWZpZXJWYWx1ZSIsImRlbGF5Iiwib3JpZ2luIiwicHJvcGVydHkiLCJkdXJhdGlvbkluIiwiZHVyYXRpb25PdXQiLCJlYXNpbmciLCJzZXRGdW5jdGlvbiIsImRlZmF1bHRWYWx1ZSIsImJlZm9yZSIsImFmdGVyIiwidHJhbnNpdGlvbiIsInNob3ciLCJoaWRlIiwibmV4dFRpY2syIiwiY2xpY2tBd2F5Q29tcGF0aWJsZVNob3ciLCJyZXNvbHZlIiwicmVqZWN0IiwiY2xvc2VzdCIsImNsb3Nlc3RIaWRlIiwiaGlkZUFmdGVyQ2hpbGRyZW4iLCJwYXJlbnQiLCJkdXJpbmciLCJzdGFydDIiLCJlbmQiLCJ1bmRvU3RhcnQiLCJ1bmRvRHVyaW5nIiwidW5kb0VuZCIsInBlcmZvcm1UcmFuc2l0aW9uIiwic3RhZ2VzIiwiaW50ZXJydXB0ZWQiLCJyZWFjaGVkQmVmb3JlIiwicmVhY2hlZEVuZCIsImZpbmlzaCIsImR1cmF0aW9uIiwicmF3VmFsdWUiLCJtYXRjaCIsImlzQ2xvbmluZyIsInNraXBEdXJpbmdDbG9uZSIsIm9ubHlEdXJpbmdDbG9uZSIsImludGVyY2VwdG9ycyIsImludGVyY2VwdENsb25lIiwiY2xvbmVOb2RlIiwiZnJvbSIsInRvIiwiZG9udFJlZ2lzdGVyUmVhY3RpdmVTaWRlRWZmZWN0cyIsImlzQ2xvbmluZ0xlZ2FjeSIsImNsb25lIiwib2xkRWwiLCJuZXdFbCIsImNsb25lVHJlZSIsImhhc1J1blRocm91Z2hGaXJzdEVsIiwiZWwzIiwiY2FsbGJhY2syIiwic3RvcmVkRWZmZWN0IiwiYmluZCIsImNhbWVsQ2FzZSIsImJpbmRJbnB1dFZhbHVlIiwiYmluZFN0eWxlcyIsImJpbmRDbGFzc2VzIiwiYmluZEF0dHJpYnV0ZUFuZFByb3BlcnR5IiwiYmluZEF0dHJpYnV0ZSIsInNhZmVQYXJzZUJvb2xlYW4iLCJjaGVja2VkQXR0ckxvb3NlQ29tcGFyZSIsInVwZGF0ZVNlbGVjdCIsInNldFByb3BlcnR5SWZDaGFuZ2VkIiwiYXR0cmlidXRlU2hvdWxkbnRCZVByZXNlcnZlZElmRmFsc3kiLCJpc0Jvb2xlYW5BdHRyIiwic2V0SWZDaGFuZ2VkIiwiYXR0ck5hbWUiLCJwcm9wTmFtZSIsImFycmF5V3JhcHBlZFZhbHVlIiwib3B0aW9uIiwiY2hhciIsInZhbHVlQSIsInZhbHVlQiIsImdldEJpbmRpbmciLCJnZXRBdHRyaWJ1dGVCaW5kaW5nIiwiZXh0cmFjdFByb3AiLCJleHRyYWN0IiwiYmluZGluZyIsImRlYm91bmNlIiwid2FpdCIsInRpbWVvdXQiLCJjb250ZXh0IiwibGF0ZXIiLCJ0aHJvdHRsZSIsImxpbWl0IiwiaW5UaHJvdHRsZSIsImVudGFuZ2xlIiwib3V0ZXJHZXQiLCJvdXRlclNldCIsImlubmVyR2V0IiwiaW5uZXJTZXQiLCJmaXJzdFJ1biIsIm91dGVySGFzaCIsInJlZmVyZW5jZSIsIm91dGVyIiwiaW5uZXIiLCJjbG9uZUlmT2JqZWN0Iiwib3V0ZXJIYXNoTGF0ZXN0IiwiaW5uZXJIYXNoTGF0ZXN0IiwicGx1Z2luIiwic3RvcmVzIiwiaXNSZWFjdGl2ZSIsInN0b3JlIiwiZ2V0U3RvcmVzIiwiYmluZHMiLCJiaW5kMiIsImJpbmRpbmdzIiwiZ2V0QmluZGluZ3MiLCJhcHBseUJpbmRpbmdzT2JqZWN0IiwiaW5qZWN0QmluZGluZ1Byb3ZpZGVycyIsImNsZWFudXBSdW5uZXJzIiwiZGF0YXMiLCJkYXRhIiwiaW5qZWN0RGF0YVByb3ZpZGVycyIsIkFscGluZSIsIm1ha2VNYXAiLCJzdHIiLCJleHBlY3RzTG93ZXJDYXNlIiwibWFwIiwibGlzdCIsIkVNUFRZX09CSiIsImhhc093blByb3BlcnR5IiwiaGFzT3duIiwiaXNBcnJheSIsImlzTWFwIiwidG9UeXBlU3RyaW5nIiwiaXNTdHJpbmciLCJpc1N5bWJvbCIsImlzT2JqZWN0Iiwib2JqZWN0VG9TdHJpbmciLCJ0b1Jhd1R5cGUiLCJpc0ludGVnZXJLZXkiLCJjYWNoZVN0cmluZ0Z1bmN0aW9uIiwiY2FwaXRhbGl6ZSIsImhhc0NoYW5nZWQiLCJ0YXJnZXRNYXAiLCJlZmZlY3RTdGFjayIsImFjdGl2ZUVmZmVjdCIsIklURVJBVEVfS0VZIiwiTUFQX0tFWV9JVEVSQVRFX0tFWSIsImlzRWZmZWN0IiwiZWZmZWN0MiIsIm9wdGlvbnMiLCJjcmVhdGVSZWFjdGl2ZUVmZmVjdCIsInN0b3AiLCJjbGVhbnVwIiwidWlkIiwiZW5hYmxlVHJhY2tpbmciLCJyZXNldFRyYWNraW5nIiwiZGVwcyIsInNob3VsZFRyYWNrIiwidHJhY2tTdGFjayIsInBhdXNlVHJhY2tpbmciLCJsYXN0IiwidHJhY2siLCJ0eXBlIiwiZGVwc01hcCIsImRlcCIsInRyaWdnZXIiLCJvbGRUYXJnZXQiLCJlZmZlY3RzIiwiZWZmZWN0c1RvQWRkIiwia2V5MiIsInJ1biIsImlzTm9uVHJhY2thYmxlS2V5cyIsImJ1aWx0SW5TeW1ib2xzIiwiZ2V0MiIsImNyZWF0ZUdldHRlciIsInJlYWRvbmx5R2V0IiwiYXJyYXlJbnN0cnVtZW50YXRpb25zIiwiY3JlYXRlQXJyYXlJbnN0cnVtZW50YXRpb25zIiwiaW5zdHJ1bWVudGF0aW9ucyIsImFyciIsInRvUmF3IiwibCIsImlzUmVhZG9ubHkiLCJzaGFsbG93Iiwic2hhbGxvd1JlYWRvbmx5TWFwIiwicmVhZG9ubHlNYXAiLCJzaGFsbG93UmVhY3RpdmVNYXAiLCJyZWFjdGl2ZU1hcCIsInRhcmdldElzQXJyYXkiLCJpc1JlZiIsInJlYWRvbmx5IiwicmVhY3RpdmUyIiwic2V0MiIsImNyZWF0ZVNldHRlciIsImhhZEtleSIsImRlbGV0ZVByb3BlcnR5IiwiaGFzIiwib3duS2V5cyIsIm11dGFibGVIYW5kbGVycyIsInJlYWRvbmx5SGFuZGxlcnMiLCJ0b1JlYWN0aXZlIiwidG9SZWFkb25seSIsInRvU2hhbGxvdyIsImdldFByb3RvIiwidiIsImdldCQxIiwiaXNTaGFsbG93IiwicmF3VGFyZ2V0IiwicmF3S2V5IiwiaGFzMiIsIndyYXAiLCJoYXMkMSIsInNpemUiLCJhZGQiLCJzZXQkMSIsImdldDMiLCJjaGVja0lkZW50aXR5S2V5cyIsImRlbGV0ZUVudHJ5IiwiY2xlYXIiLCJoYWRJdGVtcyIsImNyZWF0ZUZvckVhY2giLCJ0aGlzQXJnIiwib2JzZXJ2ZWQiLCJjcmVhdGVJdGVyYWJsZU1ldGhvZCIsIm1ldGhvZCIsInRhcmdldElzTWFwIiwiaXNQYWlyIiwiaXNLZXlPbmx5IiwiaW5uZXJJdGVyYXRvciIsImRvbmUiLCJjcmVhdGVSZWFkb25seU1ldGhvZCIsImNyZWF0ZUluc3RydW1lbnRhdGlvbnMiLCJtdXRhYmxlSW5zdHJ1bWVudGF0aW9uczIiLCJzaGFsbG93SW5zdHJ1bWVudGF0aW9uczIiLCJyZWFkb25seUluc3RydW1lbnRhdGlvbnMyIiwic2hhbGxvd1JlYWRvbmx5SW5zdHJ1bWVudGF0aW9uczIiLCJtdXRhYmxlSW5zdHJ1bWVudGF0aW9ucyIsInJlYWRvbmx5SW5zdHJ1bWVudGF0aW9ucyIsInNoYWxsb3dJbnN0cnVtZW50YXRpb25zIiwic2hhbGxvd1JlYWRvbmx5SW5zdHJ1bWVudGF0aW9ucyIsImNyZWF0ZUluc3RydW1lbnRhdGlvbkdldHRlciIsIm11dGFibGVDb2xsZWN0aW9uSGFuZGxlcnMiLCJyZWFkb25seUNvbGxlY3Rpb25IYW5kbGVycyIsInRhcmdldFR5cGVNYXAiLCJyYXdUeXBlIiwiZ2V0VGFyZ2V0VHlwZSIsImNyZWF0ZVJlYWN0aXZlT2JqZWN0IiwiYmFzZUhhbmRsZXJzIiwiY29sbGVjdGlvbkhhbmRsZXJzIiwicHJveHlNYXAiLCJleGlzdGluZ1Byb3h5IiwidGFyZ2V0VHlwZSIsInByb3h5IiwiciIsImV2YWx1YXRlTGF0ZXIyIiwidW53YXRjaCIsImdldEFycmF5T2ZSZWZPYmplY3QiLCJyZWZPYmplY3RzIiwiZ2xvYmFsSWRNZW1vIiwiZmluZEFuZEluY3JlbWVudElkIiwiY2xvc2VzdElkUm9vdCIsInNldElkUm9vdCIsImNhY2hlS2V5IiwiY2FjaGVJZEJ5TmFtZU9uRWxlbWVudCIsImlkIiwib3V0cHV0Iiwid2Fybk1pc3NpbmdQbHVnaW5NYWdpYyIsIm1hZ2ljTmFtZSIsInNsdWciLCJldmFsdWF0ZUlubmVyU2V0IiwicmVsZWFzZUVudGFuZ2xlbWVudCIsImdldFRhcmdldCIsImNsb25lMiIsImV2ZW50TmFtZSIsInBsYWNlSW5Eb20iLCJjbG9uZTMiLCJ0YXJnZXQyIiwibW9kaWZpZXJzMiIsInRlbGVwb3J0Q29udGFpbmVyRHVyaW5nQ2xvbmUiLCJoYW5kbGVyIiwib24iLCJldmVudCIsImxpc3RlbmVyVGFyZ2V0Iiwid3JhcEhhbmRsZXIiLCJ3cmFwcGVyIiwiZG90U3ludGF4IiwiY2FtZWxDYXNlMiIsIm5leHRNb2RpZmllciIsImlzTnVtZXJpYyIsIm5leHQiLCJpc0tleUV2ZW50IiwiaXNDbGlja0V2ZW50IiwiaXNMaXN0ZW5pbmdGb3JBU3BlY2lmaWNLZXlUaGF0SGFzbnRCZWVuUHJlc3NlZCIsImtlYmFiQ2FzZTIiLCJrZXlNb2RpZmllcnMiLCJkZWJvdW5jZUluZGV4Iiwia2V5VG9Nb2RpZmllcnMiLCJzZWxlY3RlZFN5c3RlbUtleU1vZGlmaWVycyIsIm1vZGlmaWVyIiwibW9kaWZpZXJUb0tleU1hcCIsInNjb3BlVGFyZ2V0IiwiZXZhbHVhdGVHZXQiLCJldmFsdWF0ZVNldCIsImdldFZhbHVlIiwiaXNHZXR0ZXJTZXR0ZXIiLCJzZXRWYWx1ZSIsInJlbW92ZUxpc3RlbmVyIiwiZ2V0SW5wdXRWYWx1ZSIsInJlbW92ZVJlc2V0TGlzdGVuZXIiLCJjdXJyZW50VmFsdWUiLCJzYWZlUGFyc2VOdW1iZXIiLCJjaGVja2VkQXR0ckxvb3NlQ29tcGFyZTIiLCJudW1iZXIiLCJpc051bWVyaWMyIiwiaGFuZGxlcjIiLCJiaW5kaW5nUHJvdmlkZXJzIiwic3RvcmVLZXlGb3JYRm9yIiwic2hvdWxkU2tpcFJlZ2lzdGVyaW5nRGF0YUR1cmluZ0Nsb25lIiwibWFnaWNDb250ZXh0IiwiZGF0YVByb3ZpZGVyQ29udGV4dCIsInJlYWN0aXZlRGF0YSIsInVuZG8iLCJ0b2dnbGUiLCJpdGVyYXRvck5hbWVzIiwicGFyc2VGb3JFeHByZXNzaW9uIiwiZXZhbHVhdGVJdGVtcyIsImV2YWx1YXRlS2V5IiwibG9vcCIsInRlbXBsYXRlRWwiLCJpdGVtcyIsImlzTnVtZXJpYzMiLCJsb29rdXAiLCJwcmV2S2V5cyIsInNjb3BlcyIsImtleXMiLCJnZXRJdGVyYXRpb25TY29wZVZhcmlhYmxlcyIsImFkZHMiLCJtb3ZlcyIsInJlbW92ZXMiLCJzYW1lcyIsImxhc3RLZXkiLCJwcmV2SW5kZXgiLCJrZXlJblNwb3QiLCJrZXlGb3JTcG90IiwiZWxJblNwb3QiLCJlbEZvclNwb3QiLCJtYXJrZXIiLCJsYXN0S2V5MiIsImxhc3RFbCIsInJlYWN0aXZlU2NvcGUiLCJuZXdTY29wZSIsImZvckl0ZXJhdG9yUkUiLCJzdHJpcFBhcmVuc1JFIiwiZm9yQWxpYXNSRSIsImluTWF0Y2giLCJpdGVtIiwiaXRlcmF0b3JNYXRjaCIsInNjb3BlVmFyaWFibGVzIiwiaGFuZGxlcjMiLCJ3YXJuTWlzc2luZ1BsdWdpbkRpcmVjdGl2ZSIsImRpcmVjdGl2ZU5hbWUiLCJzcmNfZGVmYXVsdCIsIm1vZHVsZV9kZWZhdWx0IiwiZXh0ZW5kIiwic3JjIiwic3NyRG9jdW1lbnQiLCJnZXREb2N1bWVudCIsImRvYyIsInNzcldpbmRvdyIsImdldFdpbmRvdyIsIndpbiIsImNsYXNzZXNUb1Rva2VucyIsImMiLCJkZWxldGVQcm9wcyIsIm9iamVjdCIsIm5vdyIsImdldENvbXB1dGVkU3R5bGUiLCJ3aW5kb3ciLCJzdHlsZSIsImdldFRyYW5zbGF0ZSIsImF4aXMiLCJtYXRyaXgiLCJjdXJUcmFuc2Zvcm0iLCJ0cmFuc2Zvcm1NYXRyaXgiLCJjdXJTdHlsZSIsIm8iLCJpc05vZGUiLCJub0V4dGVuZCIsIm5leHRTb3VyY2UiLCJrZXlzQXJyYXkiLCJuZXh0SW5kZXgiLCJsZW4iLCJuZXh0S2V5IiwiZGVzYyIsInNldENTU1Byb3BlcnR5IiwidmFyTmFtZSIsInZhclZhbHVlIiwiYW5pbWF0ZUNTU01vZGVTY3JvbGwiLCJfcmVmIiwic3dpcGVyIiwidGFyZ2V0UG9zaXRpb24iLCJzaWRlIiwic3RhcnRQb3NpdGlvbiIsInN0YXJ0VGltZSIsInRpbWUiLCJkaXIiLCJpc091dE9mQm91bmQiLCJjdXJyZW50IiwiYW5pbWF0ZSIsInByb2dyZXNzIiwiZWFzZVByb2dyZXNzIiwiY3VycmVudFBvc2l0aW9uIiwiZ2V0U2xpZGVUcmFuc2Zvcm1FbCIsInNsaWRlRWwiLCJlbGVtZW50Q2hpbGRyZW4iLCJzaG93V2FybmluZyIsInRleHQiLCJjcmVhdGVFbGVtZW50IiwidGFnIiwiZWxlbWVudE9mZnNldCIsImRvY3VtZW50IiwiYm94IiwiYm9keSIsImNsaWVudFRvcCIsImNsaWVudExlZnQiLCJzY3JvbGxUb3AiLCJzY3JvbGxMZWZ0IiwiZWxlbWVudFByZXZBbGwiLCJwcmV2RWxzIiwicHJldiIsImVsZW1lbnROZXh0QWxsIiwibmV4dEVscyIsImVsZW1lbnRTdHlsZSIsInByb3AiLCJlbGVtZW50SW5kZXgiLCJjaGlsZCIsImVsZW1lbnRQYXJlbnRzIiwicGFyZW50cyIsImVsZW1lbnRUcmFuc2l0aW9uRW5kIiwiZmlyZUNhbGxCYWNrIiwiZWxlbWVudE91dGVyU2l6ZSIsImluY2x1ZGVNYXJnaW5zIiwibWFrZUVsZW1lbnRzQXJyYXkiLCJzdXBwb3J0IiwiY2FsY1N1cHBvcnQiLCJnZXRTdXBwb3J0IiwiZGV2aWNlQ2FjaGVkIiwiY2FsY0RldmljZSIsIl90ZW1wIiwidXNlckFnZW50IiwicGxhdGZvcm0iLCJ1YSIsImRldmljZSIsInNjcmVlbldpZHRoIiwic2NyZWVuSGVpZ2h0IiwiYW5kcm9pZCIsImlwYWQiLCJpcG9kIiwiaXBob25lIiwid2luZG93cyIsIm1hY29zIiwiaVBhZFNjcmVlbnMiLCJnZXREZXZpY2UiLCJvdmVycmlkZXMiLCJicm93c2VyIiwiY2FsY0Jyb3dzZXIiLCJuZWVkUGVyc3BlY3RpdmVGaXgiLCJpc1NhZmFyaSIsIm1ham9yIiwibWlub3IiLCJudW0iLCJpc1dlYlZpZXciLCJpc1NhZmFyaUJyb3dzZXIiLCJuZWVkM2RGaXgiLCJnZXRCcm93c2VyIiwiUmVzaXplIiwiZW1pdCIsImFuaW1hdGlvbkZyYW1lIiwicmVzaXplSGFuZGxlciIsImNyZWF0ZU9ic2VydmVyIiwiZW50cmllcyIsIndpZHRoIiwiaGVpZ2h0IiwibmV3V2lkdGgiLCJuZXdIZWlnaHQiLCJfcmVmMiIsImNvbnRlbnRCb3hTaXplIiwiY29udGVudFJlY3QiLCJyZW1vdmVPYnNlcnZlciIsIm9yaWVudGF0aW9uQ2hhbmdlSGFuZGxlciIsIk9ic2VydmVyIiwiZXh0ZW5kUGFyYW1zIiwib2JzZXJ2ZXJzIiwiYXR0YWNoIiwiT2JzZXJ2ZXJGdW5jIiwib2JzZXJ2ZXJVcGRhdGUiLCJpbml0IiwiY29udGFpbmVyUGFyZW50cyIsImRlc3Ryb3kiLCJldmVudHNFbWl0dGVyIiwiZXZlbnRzIiwicHJpb3JpdHkiLCJzZWxmIiwib25jZUhhbmRsZXIiLCJfbGVuIiwiX2tleSIsImV2ZW50SGFuZGxlciIsIl9sZW4yIiwiX2tleTIiLCJ1cGRhdGVTaXplIiwidXBkYXRlU2xpZGVzIiwiZ2V0RGlyZWN0aW9uUHJvcGVydHlWYWx1ZSIsImxhYmVsIiwid3JhcHBlckVsIiwic2xpZGVzRWwiLCJzd2lwZXJTaXplIiwicnRsIiwid3JvbmdSVEwiLCJpc1ZpcnR1YWwiLCJwcmV2aW91c1NsaWRlc0xlbmd0aCIsInNsaWRlcyIsInNsaWRlc0xlbmd0aCIsInNuYXBHcmlkIiwic2xpZGVzR3JpZCIsInNsaWRlc1NpemVzR3JpZCIsIm9mZnNldEJlZm9yZSIsIm9mZnNldEFmdGVyIiwicHJldmlvdXNTbmFwR3JpZExlbmd0aCIsInByZXZpb3VzU2xpZGVzR3JpZExlbmd0aCIsInNwYWNlQmV0d2VlbiIsInNsaWRlUG9zaXRpb24iLCJwcmV2U2xpZGVTaXplIiwiZ3JpZEVuYWJsZWQiLCJzbGlkZVNpemUiLCJzaG91bGRSZXNldFNsaWRlU2l6ZSIsInNsaWRlIiwic2xpZGVTdHlsZXMiLCJjdXJyZW50VHJhbnNmb3JtIiwiY3VycmVudFdlYktpdFRyYW5zZm9ybSIsInBhZGRpbmdMZWZ0IiwicGFkZGluZ1JpZ2h0IiwibWFyZ2luTGVmdCIsIm1hcmdpblJpZ2h0IiwiYm94U2l6aW5nIiwiY2xpZW50V2lkdGgiLCJvZmZzZXRXaWR0aCIsIm5ld1NsaWRlc0dyaWQiLCJzbGlkZXNHcmlkSXRlbSIsImdyb3VwcyIsImdyb3VwU2l6ZSIsIl8iLCJzbGlkZUluZGV4IiwiYWxsU2xpZGVzU2l6ZSIsInNsaWRlU2l6ZVZhbHVlIiwibWF4U25hcCIsInNuYXAiLCJvZmZzZXRTaXplIiwiYWxsU2xpZGVzT2Zmc2V0Iiwic25hcEluZGV4IiwiYWRkVG9TbmFwR3JpZCIsImFkZFRvU2xpZGVzR3JpZCIsImJhY2tGYWNlSGlkZGVuQ2xhc3MiLCJoYXNDbGFzc0JhY2tmYWNlQ2xhc3NBZGRlZCIsInVwZGF0ZUF1dG9IZWlnaHQiLCJzcGVlZCIsImFjdGl2ZVNsaWRlcyIsImdldFNsaWRlQnlJbmRleCIsInVwZGF0ZVNsaWRlc09mZnNldCIsIm1pbnVzT2Zmc2V0IiwidG9nZ2xlU2xpZGVDbGFzc2VzJDEiLCJjb25kaXRpb24iLCJjbGFzc05hbWUiLCJ1cGRhdGVTbGlkZXNQcm9ncmVzcyIsInRyYW5zbGF0ZSIsIm9mZnNldENlbnRlciIsInNsaWRlT2Zmc2V0Iiwic2xpZGVQcm9ncmVzcyIsIm9yaWdpbmFsU2xpZGVQcm9ncmVzcyIsInNsaWRlQmVmb3JlIiwic2xpZGVBZnRlciIsImlzRnVsbHlWaXNpYmxlIiwiaXNWaXNpYmxlIiwidXBkYXRlUHJvZ3Jlc3MiLCJtdWx0aXBsaWVyIiwidHJhbnNsYXRlc0RpZmYiLCJpc0JlZ2lubmluZyIsImlzRW5kIiwicHJvZ3Jlc3NMb29wIiwid2FzQmVnaW5uaW5nIiwid2FzRW5kIiwiaXNCZWdpbm5pbmdSb3VuZGVkIiwiaXNFbmRSb3VuZGVkIiwiZmlyc3RTbGlkZUluZGV4IiwibGFzdFNsaWRlSW5kZXgiLCJmaXJzdFNsaWRlVHJhbnNsYXRlIiwibGFzdFNsaWRlVHJhbnNsYXRlIiwidHJhbnNsYXRlTWF4IiwidHJhbnNsYXRlQWJzIiwidG9nZ2xlU2xpZGVDbGFzc2VzIiwidXBkYXRlU2xpZGVzQ2xhc3NlcyIsImFjdGl2ZUluZGV4IiwiZ2V0RmlsdGVyZWRTbGlkZSIsImFjdGl2ZVNsaWRlIiwicHJldlNsaWRlIiwibmV4dFNsaWRlIiwicHJvY2Vzc0xhenlQcmVsb2FkZXIiLCJpbWFnZUVsIiwic2xpZGVTZWxlY3RvciIsImxhenlFbCIsInVubGF6eSIsInByZWxvYWQiLCJhbW91bnQiLCJzbGlkZXNQZXJWaWV3IiwiYWN0aXZlQ29sdW1uIiwicHJlbG9hZENvbHVtbnMiLCJzbGlkZUluZGV4TGFzdEluVmlldyIsInJlYWxJbmRleCIsImdldEFjdGl2ZUluZGV4QnlUcmFuc2xhdGUiLCJ1cGRhdGVBY3RpdmVJbmRleCIsIm5ld0FjdGl2ZUluZGV4IiwicHJldmlvdXNJbmRleCIsInByZXZpb3VzUmVhbEluZGV4IiwicHJldmlvdXNTbmFwSW5kZXgiLCJnZXRWaXJ0dWFsUmVhbEluZGV4IiwiYUluZGV4IiwiZmlyc3RTbGlkZUluQ29sdW1uIiwiYWN0aXZlU2xpZGVJbmRleCIsInVwZGF0ZUNsaWNrZWRTbGlkZSIsInBhdGhFbCIsInNsaWRlRm91bmQiLCJ1cGRhdGUiLCJnZXRTd2lwZXJUcmFuc2xhdGUiLCJjdXJyZW50VHJhbnNsYXRlIiwic2V0VHJhbnNsYXRlIiwiYnlDb250cm9sbGVyIiwieCIsInkiLCJ6IiwibmV3UHJvZ3Jlc3MiLCJtaW5UcmFuc2xhdGUiLCJtYXhUcmFuc2xhdGUiLCJ0cmFuc2xhdGVUbyIsInJ1bkNhbGxiYWNrcyIsInRyYW5zbGF0ZUJvdW5kcyIsImludGVybmFsIiwibmV3VHJhbnNsYXRlIiwiaXNIIiwic2V0VHJhbnNpdGlvbiIsInRyYW5zaXRpb25FbWl0IiwiZGlyZWN0aW9uIiwic3RlcCIsInRyYW5zaXRpb25TdGFydCIsInRyYW5zaXRpb25FbmQiLCJzbGlkZVRvIiwiaW5pdGlhbCIsImVuYWJsZWQiLCJub3JtYWxpemVkVHJhbnNsYXRlIiwibm9ybWFsaXplZEdyaWQiLCJub3JtYWxpemVkR3JpZE5leHQiLCJ0Iiwic2xpZGVUb0xvb3AiLCJuZXdJbmRleCIsInRhcmdldFNsaWRlSW5kZXgiLCJjb2xzIiwiY2VudGVyZWRTbGlkZXMiLCJuZWVkTG9vcEZpeCIsInNsaWRlTmV4dCIsImFuaW1hdGluZyIsInBlckdyb3VwIiwiaW5jcmVtZW50Iiwic2xpZGVQcmV2IiwicnRsVHJhbnNsYXRlIiwibm9ybWFsaXplIiwibm9ybWFsaXplZFNuYXBHcmlkIiwicHJldlNuYXAiLCJwcmV2U25hcEluZGV4IiwibGFzdEluZGV4Iiwic2xpZGVSZXNldCIsInNsaWRlVG9DbG9zZXN0IiwidGhyZXNob2xkIiwiY3VycmVudFNuYXAiLCJuZXh0U25hcCIsInNsaWRlVG9DbGlja2VkU2xpZGUiLCJzbGlkZVRvSW5kZXgiLCJsb29wQ3JlYXRlIiwic2xpZGVSZWFsSW5kZXgiLCJpbml0U2xpZGVzIiwic2xpZGVzUGVyR3JvdXAiLCJzaG91bGRGaWxsR3JvdXAiLCJzaG91bGRGaWxsR3JpZCIsImFkZEJsYW5rU2xpZGVzIiwiYW1vdW50T2ZTbGlkZXMiLCJzbGlkZXNUb0FkZCIsImxvb3BGaXgiLCJieU1vdXNld2hlZWwiLCJhbGxvd1NsaWRlUHJldiIsImFsbG93U2xpZGVOZXh0IiwibG9vcGVkU2xpZGVzIiwicHJlcGVuZFNsaWRlc0luZGV4ZXMiLCJhcHBlbmRTbGlkZXNJbmRleGVzIiwiaXNOZXh0IiwiaXNQcmV2Iiwic2xpZGVzUHJlcGVuZGVkIiwic2xpZGVzQXBwZW5kZWQiLCJhY3RpdmVDb2xJbmRleFdpdGhTaGlmdCIsImNvbEluZGV4VG9QcmVwZW5kIiwiY3VycmVudFNsaWRlVHJhbnNsYXRlIiwiZGlmZiIsInNoaWZ0IiwibG9vcFBhcmFtcyIsImxvb3BEZXN0cm95IiwibmV3U2xpZGVzT3JkZXIiLCJzZXRHcmFiQ3Vyc29yIiwibW92aW5nIiwidW5zZXRHcmFiQ3Vyc29yIiwiZ3JhYkN1cnNvciIsImNsb3Nlc3RFbGVtZW50IiwiYmFzZSIsIl9fY2xvc2VzdEZyb20iLCJmb3VuZCIsInByZXZlbnRFZGdlU3dpcGUiLCJzdGFydFgiLCJlZGdlU3dpcGVEZXRlY3Rpb24iLCJlZGdlU3dpcGVUaHJlc2hvbGQiLCJvblRvdWNoU3RhcnQiLCJ0b3VjaGVzIiwidGFyZ2V0RWwiLCJzd2lwaW5nQ2xhc3NIYXNWYWx1ZSIsImV2ZW50UGF0aCIsIm5vU3dpcGluZ1NlbGVjdG9yIiwiaXNUYXJnZXRTaGFkb3ciLCJzdGFydFkiLCJwcmV2ZW50RGVmYXVsdCIsInNob3VsZFByZXZlbnREZWZhdWx0Iiwib25Ub3VjaE1vdmUiLCJ0YXJnZXRUb3VjaCIsInBhZ2VYIiwicGFnZVkiLCJkaWZmWCIsImRpZmZZIiwidG91Y2hBbmdsZSIsInRvdWNoZXNEaWZmIiwicHJldlRvdWNoZXNEaXJlY3Rpb24iLCJpc0xvb3AiLCJhbGxvd0xvb3BGaXgiLCJldnQiLCJsb29wRml4ZWQiLCJkaXNhYmxlUGFyZW50U3dpcGVyIiwicmVzaXN0YW5jZVJhdGlvIiwib25Ub3VjaEVuZCIsInRvdWNoRW5kVGltZSIsInRpbWVEaWZmIiwicGF0aFRyZWUiLCJjdXJyZW50UG9zIiwic3dpcGVUb0xhc3QiLCJzdG9wSW5kZXgiLCJyZXdpbmRGaXJzdEluZGV4IiwicmV3aW5kTGFzdEluZGV4IiwicmF0aW8iLCJvblJlc2l6ZSIsImlzVmlydHVhbExvb3AiLCJvbkNsaWNrIiwib25TY3JvbGwiLCJvbkxvYWQiLCJvbkRvY3VtZW50VG91Y2hTdGFydCIsImNhcHR1cmUiLCJkb21NZXRob2QiLCJzd2lwZXJNZXRob2QiLCJhdHRhY2hFdmVudHMiLCJkZXRhY2hFdmVudHMiLCJldmVudHMkMSIsImlzR3JpZEVuYWJsZWQiLCJzZXRCcmVha3BvaW50IiwiaW5pdGlhbGl6ZWQiLCJicmVha3BvaW50cyIsImJyZWFrcG9pbnQiLCJicmVha3BvaW50UGFyYW1zIiwid2FzTXVsdGlSb3ciLCJpc011bHRpUm93Iiwid2FzR3JhYkN1cnNvciIsImlzR3JhYkN1cnNvciIsIndhc0VuYWJsZWQiLCJ3YXNNb2R1bGVFbmFibGVkIiwiaXNNb2R1bGVFbmFibGVkIiwiZGlyZWN0aW9uQ2hhbmdlZCIsIm5lZWRzUmVMb29wIiwid2FzTG9vcCIsImlzRW5hYmxlZCIsImhhc0xvb3AiLCJnZXRCcmVha3BvaW50IiwiY29udGFpbmVyRWwiLCJjdXJyZW50SGVpZ2h0IiwicG9pbnRzIiwicG9pbnQiLCJtaW5SYXRpbyIsInByZXBhcmVDbGFzc2VzIiwicmVzdWx0Q2xhc3NlcyIsImNsYXNzTmFtZXMiLCJhZGRDbGFzc2VzIiwic3VmZml4ZXMiLCJyZW1vdmVDbGFzc2VzIiwiY2hlY2tPdmVyZmxvdyIsIndhc0xvY2tlZCIsInNsaWRlc09mZnNldEJlZm9yZSIsImxhc3RTbGlkZVJpZ2h0RWRnZSIsImNoZWNrT3ZlcmZsb3ckMSIsImRlZmF1bHRzIiwibW9kdWxlRXh0ZW5kUGFyYW1zIiwiYWxsTW9kdWxlc1BhcmFtcyIsIm1vZHVsZVBhcmFtTmFtZSIsIm1vZHVsZVBhcmFtcyIsInByb3RvdHlwZXMiLCJleHRlbmRlZERlZmF1bHRzIiwiU3dpcGVyIiwic3dpcGVycyIsIm5ld1BhcmFtcyIsIm1vZCIsInN3aXBlclBhcmFtcyIsIm1pbiIsImNscyIsInVwZGF0ZXMiLCJ2aWV3IiwiZXhhY3QiLCJzcHYiLCJicmVha0xvb3AiLCJ0cmFuc2xhdGVWYWx1ZSIsInRyYW5zbGF0ZWQiLCJuZXdEaXJlY3Rpb24iLCJuZWVkVXBkYXRlIiwiY3VycmVudERpcmVjdGlvbiIsImdldFdyYXBwZXJTZWxlY3RvciIsImxhenlFbGVtZW50cyIsImRlbGV0ZUluc3RhbmNlIiwiY2xlYW5TdHlsZXMiLCJuZXdEZWZhdWx0cyIsIm1vZHVsZXMiLCJtb2R1bGUiLCJtIiwicHJvdG90eXBlR3JvdXAiLCJwcm90b01ldGhvZCIsIlZpcnR1YWwiLCJjc3NNb2RlVGltZW91dCIsInRlbXBET00iLCJyZW5kZXJTbGlkZSIsImZvcmNlIiwiYmVmb3JlSW5pdCIsImluaXRpYWxTbGlkZSIsImFkZFNsaWRlc0JlZm9yZSIsImFkZFNsaWRlc0FmdGVyIiwicHJldmlvdXNGcm9tIiwicHJldmlvdXNUbyIsInByZXZpb3VzU2xpZGVzR3JpZCIsInByZXZpb3VzT2Zmc2V0Iiwib2Zmc2V0UHJvcCIsInNsaWRlc0FmdGVyIiwic2xpZGVzQmVmb3JlIiwib2Zmc2V0Iiwib25SZW5kZXJlZCIsInNsaWRlc1RvUmVuZGVyIiwicHJlcGVuZEluZGV4ZXMiLCJhcHBlbmRJbmRleGVzIiwiZ2V0U2xpZGVJbmRleCIsImxvb3BGcm9tIiwibG9vcFRvIiwiYXBwZW5kU2xpZGUiLCJwcmVwZW5kU2xpZGUiLCJudW1iZXJPZk5ld1NsaWRlcyIsIm5ld0NhY2hlIiwiY2FjaGVkSW5kZXgiLCJjYWNoZWRFbCIsImNhY2hlZEVsSW5kZXgiLCJyZW1vdmVTbGlkZSIsInNsaWRlc0luZGV4ZXMiLCJyZW1vdmVBbGxTbGlkZXMiLCJkb21TbGlkZXNBc3NpZ25lZCIsIktleWJvYXJkIiwia2MiLCJwYWdlVXBEb3duIiwiaXNQYWdlVXAiLCJpc1BhZ2VEb3duIiwiaXNBcnJvd0xlZnQiLCJpc0Fycm93UmlnaHQiLCJpc0Fycm93VXAiLCJpc0Fycm93RG93biIsImluVmlldyIsInN3aXBlcldpZHRoIiwic3dpcGVySGVpZ2h0Iiwid2luZG93V2lkdGgiLCJ3aW5kb3dIZWlnaHQiLCJzd2lwZXJPZmZzZXQiLCJzd2lwZXJDb29yZCIsImVuYWJsZSIsImRpc2FibGUiLCJNb3VzZXdoZWVsIiwibGFzdFNjcm9sbFRpbWUiLCJsYXN0RXZlbnRCZWZvcmVTbmFwIiwicmVjZW50V2hlZWxFdmVudHMiLCJzWCIsInNZIiwicFgiLCJwWSIsImhhbmRsZU1vdXNlRW50ZXIiLCJoYW5kbGVNb3VzZUxlYXZlIiwiYW5pbWF0ZVNsaWRlciIsIm5ld0V2ZW50IiwicmVsZWFzZVNjcm9sbCIsInRhcmdldEVsQ29udGFpbnNUYXJnZXQiLCJkZWx0YSIsInJ0bEZhY3RvciIsInBvc2l0aW9ucyIsInByZXZFdmVudCIsImlnbm9yZVdoZWVsRXZlbnRzIiwicG9zaXRpb24iLCJmaXJzdEV2ZW50Iiwic25hcFRvVGhyZXNob2xkIiwiY3JlYXRlRWxlbWVudElmTm90RGVmaW5lZCIsIm9yaWdpbmFsUGFyYW1zIiwiY2hlY2tQcm9wcyIsIk5hdmlnYXRpb24iLCJnZXRFbCIsInRvZ2dsZUVsIiwiZGlzYWJsZWQiLCJzdWJFbCIsIm5leHRFbCIsInByZXZFbCIsIm9uUHJldkNsaWNrIiwib25OZXh0Q2xpY2siLCJpbml0QnV0dG9uIiwiZGVzdHJveUJ1dHRvbiIsIl9zIiwidGFyZ2V0SXNCdXR0b24iLCJpc0hpZGRlbiIsImNsYXNzZXNUb1NlbGVjdG9yIiwiUGFnaW5hdGlvbiIsInBmeCIsImJ1bGxldFNpemUiLCJkeW5hbWljQnVsbGV0SW5kZXgiLCJpc1BhZ2luYXRpb25EaXNhYmxlZCIsInNldFNpZGVCdWxsZXRzIiwiYnVsbGV0RWwiLCJidWxsZXRBY3RpdmVDbGFzcyIsIm9uQnVsbGV0Q2xpY2siLCJ0b3RhbCIsImJ1bGxldHMiLCJmaXJzdEluZGV4IiwibWlkSW5kZXgiLCJjbGFzc2VzVG9SZW1vdmUiLCJzdWZmaXgiLCJzIiwiYnVsbGV0IiwiYnVsbGV0SW5kZXgiLCJmaXJzdERpc3BsYXllZEJ1bGxldCIsImxhc3REaXNwbGF5ZWRCdWxsZXQiLCJkeW5hbWljQnVsbGV0c0xlbmd0aCIsImJ1bGxldHNPZmZzZXQiLCJzdWJFbEluZGV4IiwiZnJhY3Rpb25FbCIsInRvdGFsRWwiLCJwcm9ncmVzc2JhckRpcmVjdGlvbiIsInNjYWxlIiwic2NhbGVYIiwic2NhbGVZIiwicHJvZ3Jlc3NFbCIsInJlbmRlciIsInBhZ2luYXRpb25IVE1MIiwibnVtYmVyT2ZCdWxsZXRzIiwiU2Nyb2xsYmFyIiwiaXNUb3VjaGVkIiwiZHJhZ1RpbWVvdXQiLCJkcmFnU3RhcnRQb3MiLCJkcmFnU2l6ZSIsInRyYWNrU2l6ZSIsImRpdmlkZXIiLCJzY3JvbGxiYXIiLCJkcmFnRWwiLCJuZXdTaXplIiwibmV3UG9zIiwiZ2V0UG9pbnRlclBvc2l0aW9uIiwic2V0RHJhZ1Bvc2l0aW9uIiwicG9zaXRpb25SYXRpbyIsIm9uRHJhZ1N0YXJ0Iiwib25EcmFnTW92ZSIsIm9uRHJhZ0VuZCIsImFjdGl2ZUxpc3RlbmVyIiwicGFzc2l2ZUxpc3RlbmVyIiwiZXZlbnRNZXRob2QiLCJlbmFibGVEcmFnZ2FibGUiLCJkaXNhYmxlRHJhZ2dhYmxlIiwic3dpcGVyRWwiLCJQYXJhbGxheCIsImVsZW1lbnRzU2VsZWN0b3IiLCJzZXRUcmFuc2Zvcm0iLCJwIiwib3BhY2l0eSIsInJvdGF0ZSIsImN1cnJlbnRPcGFjaXR5IiwiY3VycmVudFNjYWxlIiwiY3VycmVudFJvdGF0ZSIsImlzRWxlbWVudCIsImVsZW1lbnRzIiwiaG9zdEVsIiwicGFyYWxsYXhFbCIsInBhcmFsbGF4RHVyYXRpb24iLCJfc3dpcGVyIiwiWm9vbSIsImlzU2NhbGluZyIsImZha2VHZXN0dXJlVG91Y2hlZCIsImZha2VHZXN0dXJlTW92ZWQiLCJldkNhY2hlIiwiZ2VzdHVyZSIsImltYWdlIiwidmVsb2NpdHkiLCJnZXREaXN0YW5jZUJldHdlZW5Ub3VjaGVzIiwieDEiLCJ5MSIsIngyIiwieTIiLCJnZXRNYXhSYXRpbyIsIm1heFJhdGlvIiwiaW1hZ2VNYXhSYXRpbyIsImdldFNjYWxlT3JpZ2luIiwiZ2V0U2xpZGVTZWxlY3RvciIsImV2ZW50V2l0aGluU2xpZGUiLCJldmVudFdpdGhpblpvb21Db250YWluZXIiLCJvbkdlc3R1cmVTdGFydCIsIm9yaWdpblgiLCJvcmlnaW5ZIiwib25HZXN0dXJlQ2hhbmdlIiwiem9vbSIsInBvaW50ZXJJbmRleCIsImNhY2hlZEV2Iiwib25HZXN0dXJlRW5kIiwiYWxsb3dUb3VjaE1vdmVUaW1lb3V0IiwiYWxsb3dUb3VjaE1vdmUiLCJwcmV2ZW50VG91Y2hNb3ZlIiwic2NhbGVkV2lkdGgiLCJzY2FsZWRIZWlnaHQiLCJzY2FsZVJhdGlvIiwibW9tZW50dW1EdXJhdGlvblgiLCJtb21lbnR1bUR1cmF0aW9uWSIsIm1vbWVudHVtRGlzdGFuY2VYIiwibmV3UG9zaXRpb25YIiwibW9tZW50dW1EaXN0YW5jZVkiLCJuZXdQb3NpdGlvblkiLCJtb21lbnR1bUR1cmF0aW9uIiwib25UcmFuc2l0aW9uRW5kIiwiem9vbUluIiwidG91Y2hYIiwidG91Y2hZIiwib2Zmc2V0WCIsIm9mZnNldFkiLCJ0cmFuc2xhdGVYIiwidHJhbnNsYXRlWSIsImltYWdlV2lkdGgiLCJpbWFnZUhlaWdodCIsInRyYW5zbGF0ZU1pblgiLCJ0cmFuc2xhdGVNaW5ZIiwidHJhbnNsYXRlTWF4WCIsInRyYW5zbGF0ZU1heFkiLCJzbGlkZVdpZHRoIiwic2xpZGVIZWlnaHQiLCJmb3JjZVpvb21SYXRpbyIsInpvb21PdXQiLCJ6b29tVG9nZ2xlIiwiZ2V0TGlzdGVuZXJzIiwiYWN0aXZlTGlzdGVuZXJXaXRoQ2FwdHVyZSIsIkNvbnRyb2xsZXIiLCJMaW5lYXJTcGxpbmUiLCJiaW5hcnlTZWFyY2giLCJtYXhJbmRleCIsIm1pbkluZGV4IiwiZ3Vlc3MiLCJhcnJheSIsImkxIiwiaTMiLCJnZXRJbnRlcnBvbGF0ZUZ1bmN0aW9uIiwiX3QiLCJjb250cm9sbGVkIiwiY29udHJvbGxlZFRyYW5zbGF0ZSIsInNldENvbnRyb2xsZWRUcmFuc2xhdGUiLCJzZXRDb250cm9sbGVkVHJhbnNpdGlvbiIsInJlbW92ZVNwbGluZSIsImNvbnRyb2xFbGVtZW50Iiwib25Db250cm9sbGVyU3dpcGVyIiwiQTExeSIsImxpdmVSZWdpb24iLCJwcmV2ZW50Rm9jdXNIYW5kbGVyIiwiZm9jdXNUYXJnZXRTbGlkZUVsIiwidmlzaWJpbGl0eUNoYW5nZWRUaW1lc3RhbXAiLCJub3RpZnkiLCJub3RpZmljYXRpb24iLCJnZXRSYW5kb21OdW1iZXIiLCJyYW5kb21DaGFyIiwibWFrZUVsRm9jdXNhYmxlIiwibWFrZUVsTm90Rm9jdXNhYmxlIiwiYWRkRWxSb2xlIiwicm9sZSIsImFkZEVsUm9sZURlc2NyaXB0aW9uIiwiZGVzY3JpcHRpb24iLCJhZGRFbENvbnRyb2xzIiwiY29udHJvbHMiLCJhZGRFbExhYmVsIiwiYWRkRWxJZCIsImFkZEVsTGl2ZSIsImxpdmUiLCJkaXNhYmxlRWwiLCJlbmFibGVFbCIsIm9uRW50ZXJPclNwYWNlS2V5IiwidXBkYXRlTmF2aWdhdGlvbiIsImhhc1BhZ2luYXRpb24iLCJoYXNDbGlja2FibGVQYWdpbmF0aW9uIiwidXBkYXRlUGFnaW5hdGlvbiIsImluaXROYXZFbCIsIndyYXBwZXJJZCIsImhhbmRsZVBvaW50ZXJEb3duIiwiaGFuZGxlUG9pbnRlclVwIiwib25WaXNpYmlsaXR5Q2hhbmdlIiwiaGFuZGxlRm9jdXMiLCJpc0FjdGl2ZSIsImFyaWFMYWJlbE1lc3NhZ2UiLCJIaXN0b3J5IiwicGF0aHMiLCJzbHVnaWZ5IiwiZ2V0UGF0aFZhbHVlcyIsInVybE92ZXJyaWRlIiwibG9jYXRpb24iLCJwYXRoQXJyYXkiLCJwYXJ0Iiwic2V0SGlzdG9yeSIsImN1cnJlbnRTdGF0ZSIsInNjcm9sbFRvU2xpZGUiLCJsZW5ndGgiLCJzZXRIaXN0b3J5UG9wU3RhdGUiLCJIYXNoTmF2aWdhdGlvbiIsImhhc2giLCJzbGlkZVdpdGhIYXNoIiwib25IYXNoQ2hhbmdlIiwibmV3SGFzaCIsImFjdGl2ZVNsaWRlRWwiLCJhY3RpdmVTbGlkZUhhc2giLCJzZXRIYXNoIiwiQXV0b3BsYXkiLCJyYWYiLCJhdXRvcGxheURlbGF5VG90YWwiLCJhdXRvcGxheURlbGF5Q3VycmVudCIsImF1dG9wbGF5VGltZUxlZnQiLCJhdXRvcGxheVN0YXJ0VGltZSIsIndhc1BhdXNlZCIsInBhdXNlZEJ5VG91Y2giLCJ0b3VjaFN0YXJ0VGltZW91dCIsInNsaWRlQ2hhbmdlZCIsInBhdXNlZEJ5SW50ZXJhY3Rpb24iLCJwYXVzZWRCeVBvaW50ZXJFbnRlciIsInJlc3VtZSIsImNhbGNUaW1lTGVmdCIsInRpbWVMZWZ0IiwiZ2V0U2xpZGVEZWxheSIsImRlbGF5Rm9yY2UiLCJjdXJyZW50U2xpZGVEZWxheSIsInByb2NlZWQiLCJwYXVzZSIsInJlc2V0Iiwib25Qb2ludGVyRW50ZXIiLCJvblBvaW50ZXJMZWF2ZSIsImF0dGFjaE1vdXNlRXZlbnRzIiwiZGV0YWNoTW91c2VFdmVudHMiLCJhdHRhY2hEb2N1bWVudEV2ZW50cyIsImRldGFjaERvY3VtZW50RXZlbnRzIiwiVGh1bWIiLCJzd2lwZXJDcmVhdGVkIiwib25UaHVtYkNsaWNrIiwidGh1bWJzU3dpcGVyIiwiY2xpY2tlZEluZGV4IiwiY2xpY2tlZFNsaWRlIiwidGh1bWJzUGFyYW1zIiwiU3dpcGVyQ2xhc3MiLCJ0aHVtYnNTd2lwZXJQYXJhbXMiLCJ0aHVtYnNUb0FjdGl2YXRlIiwidGh1bWJBY3RpdmVDbGFzcyIsImF1dG9TY3JvbGxPZmZzZXQiLCJ1c2VPZmZzZXQiLCJjdXJyZW50VGh1bWJzSW5kZXgiLCJuZXdUaHVtYnNJbmRleCIsIm5ld1RodW1ic1NsaWRlIiwidGh1bWJzIiwiZ2V0VGh1bWJzRWxlbWVudEFuZEluaXQiLCJ0aHVtYnNFbGVtZW50Iiwib25UaHVtYnNTd2lwZXIiLCJ3YXRjaEZvclRodW1ic1RvQXBwZWFyIiwiZnJlZU1vZGUiLCJsYXN0TW92ZUV2ZW50IiwidmVsb2NpdHlFdmVudCIsImRpc3RhbmNlIiwibW9tZW50dW1EaXN0YW5jZSIsIm5ld1Bvc2l0aW9uIiwiZG9Cb3VuY2UiLCJhZnRlckJvdW5jZVBvc2l0aW9uIiwiYm91bmNlQW1vdW50IiwibmVlZHNMb29wRml4IiwiaiIsIm1vdmVEaXN0YW5jZSIsImN1cnJlbnRTbGlkZVNpemUiLCJHcmlkIiwic2xpZGVzTnVtYmVyRXZlblRvUm93cyIsInNsaWRlc1BlclJvdyIsIm51bUZ1bGxDb2x1bW5zIiwiZ2V0U3BhY2VCZXR3ZWVuIiwicm93cyIsImZpbGwiLCJ1bnNldFNsaWRlcyIsInVwZGF0ZVNsaWRlIiwibmV3U2xpZGVPcmRlckluZGV4IiwiY29sdW1uIiwicm93IiwiZ3JvdXBJbmRleCIsInNsaWRlSW5kZXhJbkdyb3VwIiwiY29sdW1uc0luR3JvdXAiLCJ1cGRhdGVXcmFwcGVyU2l6ZSIsInJvdW5kTGVuZ3RocyIsIm9uSW5pdCIsIm9uVXBkYXRlIiwiYXBwZW5kRWxlbWVudCIsInByZXBlbmRFbGVtZW50IiwiYWRkU2xpZGUiLCJhY3RpdmVJbmRleEJ1ZmZlciIsImJhc2VMZW5ndGgiLCJzbGlkZXNCdWZmZXIiLCJjdXJyZW50U2xpZGUiLCJpbmRleFRvUmVtb3ZlIiwiTWFuaXB1bGF0aW9uIiwiZWZmZWN0SW5pdCIsIm92ZXJ3cml0ZVBhcmFtcyIsInBlcnNwZWN0aXZlIiwicmVjcmVhdGVTaGFkb3dzIiwiZ2V0RWZmZWN0UGFyYW1zIiwib3ZlcndyaXRlUGFyYW1zUmVzdWx0Iiwic2hhZG93RWwiLCJyZXF1aXJlVXBkYXRlT25WaXJ0dWFsIiwiZWZmZWN0VGFyZ2V0IiwiZWZmZWN0UGFyYW1zIiwidHJhbnNmb3JtRWwiLCJlZmZlY3RWaXJ0dWFsVHJhbnNpdGlvbkVuZCIsInRyYW5zZm9ybUVsZW1lbnRzIiwiYWxsU2xpZGVzIiwiZ2V0U2xpZGUiLCJldmVudFRyaWdnZXJlZCIsInRyYW5zaXRpb25FbmRUYXJnZXQiLCJFZmZlY3RGYWRlIiwidHgiLCJ0eSIsInNsaWRlT3BhY2l0eSIsIkVmZmVjdEN1YmUiLCJjcmVhdGVTbGlkZVNoYWRvd3MiLCJpc0hvcml6b250YWwiLCJzaGFkb3dCZWZvcmUiLCJzaGFkb3dBZnRlciIsIndyYXBwZXJSb3RhdGUiLCJjdWJlU2hhZG93RWwiLCJzbGlkZUFuZ2xlIiwicm91bmQiLCJ0eiIsInNoYWRvd0FuZ2xlIiwic2NhbGUxIiwic2NhbGUyIiwiekZhY3RvciIsImNyZWF0ZVNoYWRvdyIsInNoYWRvd0NsYXNzIiwic2hhZG93Q29udGFpbmVyIiwiRWZmZWN0RmxpcCIsInJvdGF0ZVkiLCJyb3RhdGVYIiwiRWZmZWN0Q292ZXJmbG93IiwiY2VudGVyIiwiY2VudGVyT2Zmc2V0Iiwib2Zmc2V0TXVsdGlwbGllciIsInRyYW5zbGF0ZVoiLCJzdHJldGNoIiwic2xpZGVUcmFuc2Zvcm0iLCJzaGFkb3dCZWZvcmVFbCIsInNoYWRvd0FmdGVyRWwiLCJFZmZlY3RDcmVhdGl2ZSIsImdldFRyYW5zbGF0ZVZhbHVlIiwiaXNDZW50ZXJlZFNsaWRlcyIsIm1hcmdpbiIsIm9yaWdpbmFsUHJvZ3Jlc3MiLCJjdXN0b20iLCJ0cmFuc2xhdGVTdHJpbmciLCJyb3RhdGVTdHJpbmciLCJzY2FsZVN0cmluZyIsIm9wYWNpdHlTdHJpbmciLCJzaGFkb3dPcGFjaXR5IiwiRWZmZWN0Q2FyZHMiLCJzdGFydFRyYW5zbGF0ZSIsInRYIiwidFkiLCJ0WiIsInRYQWRkIiwiaXNTd2lwZVRvTmV4dCIsImlzU3dpcGVUb1ByZXYiLCJzdWJQcm9ncmVzcyIsInByZXZZIiwiY2FuZGlkYXRlU2VsZWN0b3JzIiwiY2FuZGlkYXRlU2VsZWN0b3IiLCJOb0VsZW1lbnQiLCJtYXRjaGVzIiwiZ2V0Um9vdE5vZGUiLCJnZXRDYW5kaWRhdGVzIiwiaW5jbHVkZUNvbnRhaW5lciIsImZpbHRlciIsImNhbmRpZGF0ZXMiLCJnZXRDYW5kaWRhdGVzSXRlcmF0aXZlbHkiLCJnZXRDYW5kaWRhdGVzSXRlcmF0aXZlbHkyIiwiZWxlbWVudHNUb0NoZWNrIiwiYXNzaWduZWQiLCJjb250ZW50IiwibmVzdGVkQ2FuZGlkYXRlcyIsInZhbGlkQ2FuZGlkYXRlIiwic2hhZG93Um9vdCIsInZhbGlkU2hhZG93Um9vdCIsIl9uZXN0ZWRDYW5kaWRhdGVzIiwiZ2V0VGFiaW5kZXgiLCJpc1Njb3BlIiwic29ydE9yZGVyZWRUYWJiYWJsZXMiLCJpc0lucHV0IiwiaXNIaWRkZW5JbnB1dCIsImlzRGV0YWlsc1dpdGhTdW1tYXJ5IiwiZ2V0Q2hlY2tlZFJhZGlvIiwibm9kZXMiLCJmb3JtIiwiaXNUYWJiYWJsZVJhZGlvIiwicmFkaW9TY29wZSIsInF1ZXJ5UmFkaW9zIiwicmFkaW9TZXQiLCJlcnIiLCJjaGVja2VkIiwiaXNSYWRpbyIsImlzTm9uVGFiYmFibGVSYWRpbyIsImlzWmVyb0FyZWEiLCJfbm9kZSRnZXRCb3VuZGluZ0NsaWUiLCJkaXNwbGF5Q2hlY2siLCJnZXRTaGFkb3dSb290IiwiaXNEaXJlY3RTdW1tYXJ5Iiwibm9kZVVuZGVyRGV0YWlscyIsIm5vZGVSb290SG9zdCIsIm5vZGVJc0F0dGFjaGVkIiwib3JpZ2luYWxOb2RlIiwicGFyZW50RWxlbWVudCIsInJvb3ROb2RlIiwiaXNEaXNhYmxlZEZyb21GaWVsZHNldCIsInBhcmVudE5vZGUiLCJpc05vZGVNYXRjaGluZ1NlbGVjdG9yRm9jdXNhYmxlIiwiaXNOb2RlTWF0Y2hpbmdTZWxlY3RvclRhYmJhYmxlIiwiaXNWYWxpZFNoYWRvd1Jvb3RUYWJiYWJsZSIsInNoYWRvd0hvc3ROb2RlIiwidGFiSW5kZXgiLCJzb3J0QnlPcmRlciIsInNvcnRCeU9yZGVyMiIsInJlZ3VsYXJUYWJiYWJsZXMiLCJvcmRlcmVkVGFiYmFibGVzIiwiY2FuZGlkYXRlVGFiaW5kZXgiLCJzb3J0YWJsZSIsInRhYmJhYmxlIiwiZm9jdXNhYmxlIiwiaXNUYWJiYWJsZSIsImZvY3VzYWJsZUNhbmRpZGF0ZVNlbGVjdG9yIiwiaXNGb2N1c2FibGUiLCJlbnVtZXJhYmxlT25seSIsInN5bWJvbHMiLCJzeW0iLCJfb2JqZWN0U3ByZWFkMiIsInNvdXJjZSIsIl9kZWZpbmVQcm9wZXJ0eSIsImFjdGl2ZUZvY3VzVHJhcHMiLCJ0cmFwUXVldWUiLCJ0cmFwIiwiYWN0aXZlVHJhcCIsInRyYXBJbmRleCIsImlzU2VsZWN0YWJsZUlucHV0IiwiaXNFc2NhcGVFdmVudCIsImlzVGFiRXZlbnQiLCJmaW5kSW5kZXgiLCJpZHgiLCJ2YWx1ZU9ySGFuZGxlciIsImdldEFjdHVhbFRhcmdldCIsImNyZWF0ZUZvY3VzVHJhcCIsInVzZXJPcHRpb25zIiwiY29uZmlnIiwic3RhdGUiLCJnZXRPcHRpb24iLCJjb25maWdPdmVycmlkZU9wdGlvbnMiLCJvcHRpb25OYW1lIiwiY29uZmlnT3B0aW9uTmFtZSIsImZpbmRDb250YWluZXJJbmRleCIsImNvbnRhaW5lciIsInRhYmJhYmxlTm9kZXMiLCJnZXROb2RlRm9yT3B0aW9uIiwib3B0aW9uVmFsdWUiLCJnZXRJbml0aWFsRm9jdXNOb2RlIiwiZmlyc3RUYWJiYWJsZUdyb3VwIiwiZmlyc3RUYWJiYWJsZU5vZGUiLCJ1cGRhdGVUYWJiYWJsZU5vZGVzIiwiZm9jdXNhYmxlTm9kZXMiLCJmb3J3YXJkIiwibm9kZUlkeCIsIm4iLCJncm91cCIsInRyeUZvY3VzIiwidHJ5Rm9jdXMyIiwiZ2V0UmV0dXJuRm9jdXNOb2RlIiwicHJldmlvdXNBY3RpdmVFbGVtZW50IiwiY2hlY2tQb2ludGVyRG93biIsImNoZWNrRm9jdXNJbiIsInRhcmdldENvbnRhaW5lZCIsImNoZWNrVGFiIiwiZGVzdGluYXRpb25Ob2RlIiwiY29udGFpbmVySW5kZXgiLCJjb250YWluZXJHcm91cCIsInN0YXJ0T2ZHcm91cEluZGV4IiwiZGVzdGluYXRpb25Hcm91cEluZGV4IiwiZGVzdGluYXRpb25Hcm91cCIsImxhc3RPZkdyb3VwSW5kZXgiLCJfcmVmMyIsImxhc3RUYWJiYWJsZU5vZGUiLCJfZGVzdGluYXRpb25Hcm91cEluZGV4IiwiX2Rlc3RpbmF0aW9uR3JvdXAiLCJjaGVja0tleSIsImNoZWNrQ2xpY2siLCJhZGRMaXN0ZW5lcnMiLCJyZW1vdmVMaXN0ZW5lcnMiLCJhY3RpdmF0ZU9wdGlvbnMiLCJvbkFjdGl2YXRlIiwib25Qb3N0QWN0aXZhdGUiLCJjaGVja0NhbkZvY3VzVHJhcCIsImZpbmlzaEFjdGl2YXRpb24iLCJkZWFjdGl2YXRlT3B0aW9ucyIsIm9uRGVhY3RpdmF0ZSIsIm9uUG9zdERlYWN0aXZhdGUiLCJjaGVja0NhblJldHVybkZvY3VzIiwicmV0dXJuRm9jdXMiLCJmaW5pc2hEZWFjdGl2YXRpb24iLCJjb250YWluZXJFbGVtZW50cyIsImVsZW1lbnRzQXNBcnJheSIsImxhc3RGb2N1c2VkIiwiY3VycmVudEZvY3VzZWQiLCJ3aXRoaW4iLCJlbHMiLCJhdXRvZm9jdXNFbCIsInVuZG9JbmVydCIsInVuZG9EaXNhYmxlU2Nyb2xsaW5nIiwicmVsZWFzZUZvY3VzIiwiZGlzYWJsZVNjcm9sbGluZyIsInNldEluZXJ0IiwidW5kb3MiLCJjcmF3bFNpYmxpbmdzVXAiLCJzaWJsaW5nIiwib3ZlcmZsb3ciLCJzY3JvbGxiYXJXaWR0aCIsImNvbGxhcHNlIiwiZmxvb3IiLCJmdWxseUhpZGUiLCJzdHlsZXMiLCJyZXZlcnRGdW5jdGlvbiIsInRyYW5zaXRpb25TdHlsZXMiLCJmdWxsIiwibWF4IiwiY3JlYXRlQ29vcmRzIiwib3Bwb3NpdGVTaWRlTWFwIiwib3Bwb3NpdGVBbGlnbm1lbnRNYXAiLCJjbGFtcCIsInBhcmFtIiwiZ2V0U2lkZSIsInBsYWNlbWVudCIsImdldEFsaWdubWVudCIsImdldE9wcG9zaXRlQXhpcyIsImdldEF4aXNMZW5ndGgiLCJnZXRTaWRlQXhpcyIsImdldEFsaWdubWVudEF4aXMiLCJnZXRBbGlnbm1lbnRTaWRlcyIsInJlY3RzIiwiYWxpZ25tZW50IiwiYWxpZ25tZW50QXhpcyIsIm1haW5BbGlnbm1lbnRTaWRlIiwiZ2V0T3Bwb3NpdGVQbGFjZW1lbnQiLCJnZXRFeHBhbmRlZFBsYWNlbWVudHMiLCJvcHBvc2l0ZVBsYWNlbWVudCIsImdldE9wcG9zaXRlQWxpZ25tZW50UGxhY2VtZW50IiwiZ2V0U2lkZUxpc3QiLCJpc1N0YXJ0IiwibHIiLCJybCIsInRiIiwiYnQiLCJnZXRPcHBvc2l0ZUF4aXNQbGFjZW1lbnRzIiwiZmxpcEFsaWdubWVudCIsImV4cGFuZFBhZGRpbmdPYmplY3QiLCJwYWRkaW5nIiwiZ2V0UGFkZGluZ09iamVjdCIsInJlY3RUb0NsaWVudFJlY3QiLCJyZWN0IiwiY29tcHV0ZUNvb3Jkc0Zyb21QbGFjZW1lbnQiLCJmbG9hdGluZyIsInNpZGVBeGlzIiwiYWxpZ25MZW5ndGgiLCJpc1ZlcnRpY2FsIiwiY29tbW9uWCIsImNvbW1vblkiLCJjb21tb25BbGlnbiIsImNvb3JkcyIsImNvbXB1dGVQb3NpdGlvbiIsInN0cmF0ZWd5IiwibWlkZGxld2FyZSIsInBsYXRmb3JtMiIsInZhbGlkTWlkZGxld2FyZSIsInN0YXRlZnVsUGxhY2VtZW50IiwibWlkZGxld2FyZURhdGEiLCJyZXNldENvdW50IiwibmV4dFgiLCJuZXh0WSIsImRldGVjdE92ZXJmbG93IiwiX2F3YWl0JHBsYXRmb3JtJGlzRWxlIiwiYm91bmRhcnkiLCJyb290Qm91bmRhcnkiLCJlbGVtZW50Q29udGV4dCIsImFsdEJvdW5kYXJ5IiwicGFkZGluZ09iamVjdCIsImNsaXBwaW5nQ2xpZW50UmVjdCIsIm9mZnNldFBhcmVudCIsIm9mZnNldFNjYWxlIiwiZWxlbWVudENsaWVudFJlY3QiLCJmbGlwIiwiX21pZGRsZXdhcmVEYXRhJGFycm93IiwiX21pZGRsZXdhcmVEYXRhJGZsaXAiLCJpbml0aWFsUGxhY2VtZW50IiwiY2hlY2tNYWluQXhpcyIsImNoZWNrQ3Jvc3NBeGlzIiwic3BlY2lmaWVkRmFsbGJhY2tQbGFjZW1lbnRzIiwiZmFsbGJhY2tTdHJhdGVneSIsImZhbGxiYWNrQXhpc1NpZGVEaXJlY3Rpb24iLCJkZXRlY3RPdmVyZmxvd09wdGlvbnMiLCJpc0Jhc2VQbGFjZW1lbnQiLCJmYWxsYmFja1BsYWNlbWVudHMiLCJwbGFjZW1lbnRzMiIsIm92ZXJmbG93cyIsIm92ZXJmbG93c0RhdGEiLCJzaWRlczIiLCJzaWRlMiIsIl9taWRkbGV3YXJlRGF0YSRmbGlwMiIsIl9vdmVyZmxvd3NEYXRhJGZpbHRlciIsIm5leHRQbGFjZW1lbnQiLCJyZXNldFBsYWNlbWVudCIsImQiLCJfb3ZlcmZsb3dzRGF0YSRtYXAkc28iLCJwbGFjZW1lbnQyIiwib3ZlcmZsb3cyIiwiY29udmVydFZhbHVlVG9Db29yZHMiLCJtYWluQXhpc011bHRpIiwiY3Jvc3NBeGlzTXVsdGkiLCJtYWluQXhpcyIsImNyb3NzQXhpcyIsImRpZmZDb29yZHMiLCJsaW1pdGVyIiwibWFpbkF4aXNDb29yZCIsImNyb3NzQXhpc0Nvb3JkIiwibWluU2lkZSIsIm1heFNpZGUiLCJtaW4yIiwibWF4MiIsImxpbWl0ZWRDb29yZHMiLCJnZXROb2RlTmFtZSIsIl9ub2RlJG93bmVyRG9jdW1lbnQiLCJnZXREb2N1bWVudEVsZW1lbnQiLCJpc0hUTUxFbGVtZW50IiwiaXNTaGFkb3dSb290IiwiaXNPdmVyZmxvd0VsZW1lbnQiLCJvdmVyZmxvd1giLCJvdmVyZmxvd1kiLCJkaXNwbGF5IiwiaXNUYWJsZUVsZW1lbnQiLCJpc0NvbnRhaW5pbmdCbG9jayIsIndlYmtpdCIsImlzV2ViS2l0IiwiY3NzIiwiZ2V0Q29udGFpbmluZ0Jsb2NrIiwiY3VycmVudE5vZGUiLCJnZXRQYXJlbnROb2RlIiwiaXNMYXN0VHJhdmVyc2FibGVOb2RlIiwiZ2V0Tm9kZVNjcm9sbCIsImdldE5lYXJlc3RPdmVyZmxvd0FuY2VzdG9yIiwiZ2V0T3ZlcmZsb3dBbmNlc3RvcnMiLCJ0cmF2ZXJzZUlmcmFtZXMiLCJfbm9kZSRvd25lckRvY3VtZW50MiIsInNjcm9sbGFibGVBbmNlc3RvciIsImlzQm9keSIsImdldENzc0RpbWVuc2lvbnMiLCJoYXNPZmZzZXQiLCJvZmZzZXRIZWlnaHQiLCJzaG91bGRGYWxsYmFjayIsInVud3JhcEVsZW1lbnQiLCJnZXRTY2FsZSIsImRvbUVsZW1lbnQiLCIkIiwibm9PZmZzZXRzIiwiZ2V0VmlzdWFsT2Zmc2V0cyIsInNob3VsZEFkZFZpc3VhbE9mZnNldHMiLCJpc0ZpeGVkIiwiZmxvYXRpbmdPZmZzZXRQYXJlbnQiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJpbmNsdWRlU2NhbGUiLCJpc0ZpeGVkU3RyYXRlZ3kiLCJjbGllbnRSZWN0IiwidmlzdWFsT2Zmc2V0cyIsIm9mZnNldFdpbiIsImN1cnJlbnRJRnJhbWUiLCJpZnJhbWVTY2FsZSIsImlmcmFtZVJlY3QiLCJsZWZ0IiwidG9wIiwiY29udmVydE9mZnNldFBhcmVudFJlbGF0aXZlUmVjdFRvVmlld3BvcnRSZWxhdGl2ZVJlY3QiLCJpc09mZnNldFBhcmVudEFuRWxlbWVudCIsImRvY3VtZW50RWxlbWVudCIsInNjcm9sbCIsIm9mZnNldHMiLCJvZmZzZXRSZWN0IiwiZ2V0Q2xpZW50UmVjdHMiLCJnZXRXaW5kb3dTY3JvbGxCYXJYIiwiZ2V0RG9jdW1lbnRSZWN0IiwiaHRtbCIsImdldFZpZXdwb3J0UmVjdCIsInZpc3VhbFZpZXdwb3J0IiwidmlzdWFsVmlld3BvcnRCYXNlZCIsImdldElubmVyQm91bmRpbmdDbGllbnRSZWN0IiwiZ2V0Q2xpZW50UmVjdEZyb21DbGlwcGluZ0FuY2VzdG9yIiwiY2xpcHBpbmdBbmNlc3RvciIsImhhc0ZpeGVkUG9zaXRpb25BbmNlc3RvciIsInN0b3BOb2RlIiwiZ2V0Q2xpcHBpbmdFbGVtZW50QW5jZXN0b3JzIiwiY2FjaGVkUmVzdWx0IiwiY3VycmVudENvbnRhaW5pbmdCbG9ja0NvbXB1dGVkU3R5bGUiLCJlbGVtZW50SXNGaXhlZCIsImNvbXB1dGVkU3R5bGUiLCJjdXJyZW50Tm9kZUlzQ29udGFpbmluZyIsImFuY2VzdG9yIiwiZ2V0Q2xpcHBpbmdSZWN0IiwiY2xpcHBpbmdBbmNlc3RvcnMiLCJmaXJzdENsaXBwaW5nQW5jZXN0b3IiLCJjbGlwcGluZ1JlY3QiLCJhY2NSZWN0IiwiZ2V0RGltZW5zaW9ucyIsImdldFJlY3RSZWxhdGl2ZVRvT2Zmc2V0UGFyZW50IiwiZ2V0VHJ1ZU9mZnNldFBhcmVudCIsInBvbHlmaWxsIiwiZ2V0T2Zmc2V0UGFyZW50Iiwid2luZG93MiIsImdldEVsZW1lbnRSZWN0cyIsImdldE9mZnNldFBhcmVudEZuIiwiZ2V0RGltZW5zaW9uc0ZuIiwiaXNSVEwiLCJvYnNlcnZlTW92ZSIsIm9uTW92ZSIsImlvIiwidGltZW91dElkIiwicmVmcmVzaCIsImluc2V0VG9wIiwiaW5zZXRSaWdodCIsImluc2V0Qm90dG9tIiwiaW5zZXRMZWZ0IiwiaXNGaXJzdFVwZGF0ZSIsImhhbmRsZU9ic2VydmUiLCJhdXRvVXBkYXRlIiwiYW5jZXN0b3JTY3JvbGwiLCJhbmNlc3RvclJlc2l6ZSIsImVsZW1lbnRSZXNpemUiLCJsYXlvdXRTaGlmdCIsInJlZmVyZW5jZUVsIiwiYW5jZXN0b3JzIiwiY2xlYW51cElvIiwicmVvYnNlcnZlRnJhbWUiLCJyZXNpemVPYnNlcnZlciIsImZpcnN0RW50cnkiLCJmcmFtZUlkIiwicHJldlJlZlJlY3QiLCJmcmFtZUxvb3AiLCJuZXh0UmVmUmVjdCIsImNvbXB1dGVQb3NpdGlvbjIiLCJtZXJnZWRPcHRpb25zIiwicGxhdGZvcm1XaXRoQ2FjaGUiLCJvZmZzZXRWYWx1ZSIsInVuc3R5bGVkIiwiZ2V0T3B0aW9ucyIsImNvbXB1dGUiLCJwcmV2aW91c1ZhbHVlIiwiaW5kZXgwIiwia19yX3N1Ym1pdHRlciIsImtfcl9zdWNjZXNzX2NvbnRybHMiLCJicmFja2V0cyIsInNlcmlhbGl6ZSIsInNlcmlhbGl6ZXIiLCJoYXNoX3NlcmlhbGl6ZXIiLCJzdHJfc2VyaWFsaXplIiwicmFkaW9fc3RvcmUiLCJzZWxlY3RPcHRpb25zIiwiaXNTZWxlY3RlZE9wdGlvbnMiLCJhbGxvd2VkRW1wdHkiLCJoYXNWYWx1ZSIsInBhcnNlX2tleXMiLCJzdHJpbmciLCJjaGlsZHJlbiIsImhhc2hfYXNzaWduIiwiYmV0d2VlbiIsImV4aXN0aW5nIiwiZm9ybVNlcmlhbGl6ZSIsIkNhcnRVdGlscyIsImNhcnQiLCJpdGVtQ291bnQiLCJidXR0b24iLCJpc0xvYWRpbmciLCJyZXNwb25zZSIsInNlY3Rpb24iLCJzZWN0aW9uSHRtbCIsInNlY3Rpb25zIiwiZm9ybURhdGEiLCJhZGRUb0NhcnRCdXR0b24iLCJsaW5lIiwicXVhbnRpdHlJbnB1dCIsInF1YW50aXR5Iiwic2VjdGlvbnNUb1JlbmRlciIsImVuZFBvaW50IiwiZHJhd2VyU2VjdGlvbiIsInJlc3BvbnNlSHRtbCIsImZvY3VzIiwiYW5jaG9yIl0sIm1hcHBpbmdzIjoiQUFDQSxJQUFJQSxHQUFlLEdBQ2ZDLEdBQVcsR0FDWEMsR0FBUSxDQUFBLEVBQ1JDLEdBQW1CLEdBQ3ZCLFNBQVND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QixDQUNuQixTQUFTLGlCQUFpQixRQUFVdjhCLEdBQU0sQ0FDeEMsTUFBTTlCLEVBQVM4QixFQUFFLE9BRWI5QixFQUFPLFFBQVFxK0IsRUFBUyxlQUFlLElBQ3pDdjhCLEVBQUUsZUFBYyxFQUNoQixLQUFLLFVBQVU5QixFQUFPLFFBQVFxK0IsRUFBUyxlQUFlLENBQUMsR0FHckRyK0IsRUFBTyxRQUFRcStCLEVBQVMsY0FBYyxHQUN4QyxLQUFLLFdBQVdyK0IsRUFBTyxRQUFRcStCLEVBQVMsY0FBYyxDQUFDLEVBR3JEcitCLEVBQU8sUUFBUXErQixFQUFTLGlCQUFpQixJQUMzQ3Y4QixFQUFFLGVBQWMsRUFDaEJnMUQsRUFBVSxlQUFjLElBR3RCOTJELEVBQU8sUUFBUXErQixFQUFTLGlCQUFpQixHQUFLcitCLEVBQU8sUUFBUXErQixFQUFTLGVBQWUsSUFDdkZ5NEIsRUFBVSxnQkFBZSxDQUVqQyxDQUFLLENBQ0YsRUFFRCxvQkFBcUIsQ0FDbkIsT0FBTyxpQkFBaUIsVUFBVyxTQUFVdDVDLEVBQU8sQ0FDOUNBLEVBQU0sTUFBUSxVQUNaLFNBQVMsY0FBYzZnQixFQUFTLFVBQVUsRUFBRSxVQUFVLFNBQVMsU0FBUyxHQUMxRXk0QixFQUFVLGdCQUFlLENBR25DLENBQUssQ0FDRixDQUNILENBQUMsRUMvUkQsT0FBTyxPQUFTdGpELEdBQ2hCLE9BQU8sT0FBU29yQixHQVNoQnByQixHQUFPLE9BQU93a0QsRUFBSyxFQUNuQnhrRCxHQUFPLE9BQU93ekMsRUFBUSxFQUN0Qnh6QyxHQUFPLE9BQU95a0QsRUFBTSxFQUNwQnprRCxHQUFPLE1BQU8iLCJ4X2dvb2dsZV9pZ25vcmVMaXN0IjpbMCwxLDIsMyw0LDUsNiw3LDgsOSwxMCwxMSwxMiwxMywxNCwxNSwxNiwxNywxOCwxOSwyMCwyMSwyMiwyMywyNCwyNSwyNiwyNywyOCwyOSwzMCwzMSwzMiwzMywzNCwzNSwzNiwzOF19
