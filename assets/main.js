var xi=!1,Si=!1,Pe=[],Ei=-1;function Bs(t){Hs(t)}function Hs(t){Pe.includes(t)||Pe.push(t),Gs()}function tn(t){let e=Pe.indexOf(t);e!==-1&&e>Ei&&Pe.splice(e,1)}function Gs(){!Si&&!xi&&(xi=!0,queueMicrotask(Vs))}function Vs(){xi=!1,Si=!0;for(let t=0;t<Pe.length;t++)Pe[t](),Ei=t;Pe.length=0,Ei=-1,Si=!1}var Ye,Ne,Ue,rn,Ti=!0;function js(t){Ti=!1,t(),Ti=!0}function Ws(t){Ye=t.reactive,Ue=t.release,Ne=e=>t.effect(e,{scheduler:i=>{Ti?Bs(i):i()}}),rn=t.raw}function yr(t){Ne=t}function Xs(t){let e=()=>{};return[r=>{let n=Ne(r);return t._x_effects||(t._x_effects=new Set,t._x_runEffects=()=>{t._x_effects.forEach(s=>s())}),t._x_effects.add(n),e=()=>{n!==void 0&&(t._x_effects.delete(n),Ue(n))},n},()=>{e()}]}function nn(t,e){let i=!0,r,n=Ne(()=>{let s=t();JSON.stringify(s),i?r=s:queueMicrotask(()=>{e(s,r),r=s}),i=!1});return()=>Ue(n)}var sn=[],an=[],on=[];function qs(t){on.push(t)}function ji(t,e){typeof e=="function"?(t._x_cleanups||(t._x_cleanups=[]),t._x_cleanups.push(e)):(e=t,an.push(e))}function ln(t){sn.push(t)}function cn(t,e,i){t._x_attributeCleanups||(t._x_attributeCleanups={}),t._x_attributeCleanups[e]||(t._x_attributeCleanups[e]=[]),t._x_attributeCleanups[e].push(i)}function dn(t,e){t._x_attributeCleanups&&Object.entries(t._x_attributeCleanups).forEach(([i,r])=>{(e===void 0||e.includes(i))&&(r.forEach(n=>n()),delete t._x_attributeCleanups[i])})}function Ys(t){if(t._x_cleanups)for(;t._x_cleanups.length;)t._x_cleanups.pop()()}var Wi=new MutationObserver(Ui),Xi=!1;function qi(){Wi.observe(document,{subtree:!0,childList:!0,attributes:!0,attributeOldValue:!0}),Xi=!0}function un(){Us(),Wi.disconnect(),Xi=!1}var et=[];function Us(){let t=Wi.takeRecords();et.push(()=>t.length>0&&Ui(t));let e=et.length;queueMicrotask(()=>{if(et.length===e)for(;et.length>0;)et.shift()()})}function Y(t){if(!Xi)return t();un();let e=t();return qi(),e}var Yi=!1,$t=[];function Ks(){Yi=!0}function Js(){Yi=!1,Ui($t),$t=[]}function Ui(t){if(Yi){$t=$t.concat(t);return}let e=new Set,i=new Set,r=new Map,n=new Map;for(let s=0;s<t.length;s++)if(!t[s].target._x_ignoreMutationObserver&&(t[s].type==="childList"&&(t[s].addedNodes.forEach(a=>a.nodeType===1&&e.add(a)),t[s].removedNodes.forEach(a=>a.nodeType===1&&i.add(a))),t[s].type==="attributes")){let a=t[s].target,o=t[s].attributeName,l=t[s].oldValue,u=()=>{r.has(a)||r.set(a,[]),r.get(a).push({name:o,value:a.getAttribute(o)})},d=()=>{n.has(a)||n.set(a,[]),n.get(a).push(o)};a.hasAttribute(o)&&l===null?u():a.hasAttribute(o)?(d(),u()):d()}n.forEach((s,a)=>{dn(a,s)}),r.forEach((s,a)=>{sn.forEach(o=>o(a,s))});for(let s of i)e.has(s)||an.forEach(a=>a(s));e.forEach(s=>{s._x_ignoreSelf=!0,s._x_ignore=!0});for(let s of e)i.has(s)||s.isConnected&&(delete s._x_ignoreSelf,delete s._x_ignore,on.forEach(a=>a(s)),s._x_ignore=!0,s._x_ignoreSelf=!0);e.forEach(s=>{delete s._x_ignoreSelf,delete s._x_ignore}),e=null,i=null,r=null,n=null}function fn(t){return mt(je(t))}function pt(t,e,i){return t._x_dataStack=[e,...je(i||t)],()=>{t._x_dataStack=t._x_dataStack.filter(r=>r!==e)}}function je(t){return t._x_dataStack?t._x_dataStack:typeof ShadowRoot=="function"&&t instanceof ShadowRoot?je(t.host):t.parentNode?je(t.parentNode):[]}function mt(t){return new Proxy({objects:t},Zs)}var Zs={ownKeys({objects:t}){return Array.from(new Set(t.flatMap(e=>Object.keys(e))))},has({objects:t},e){return e==Symbol.unscopables?!1:t.some(i=>Object.prototype.hasOwnProperty.call(i,e)||Reflect.has(i,e))},get({objects:t},e,i){return e=="toJSON"?Qs:Reflect.get(t.find(r=>Reflect.has(r,e))||{},e,i)},set({objects:t},e,i,r){const n=t.find(a=>Object.prototype.hasOwnProperty.call(a,e))||t[t.length-1],s=Object.getOwnPropertyDescriptor(n,e);return s!=null&&s.set&&(s!=null&&s.get)?s.set.call(r,i)||!0:Reflect.set(n,e,i)}};function Qs(){return Reflect.ownKeys(this).reduce((e,i)=>(e[i]=Reflect.get(this,i),e),{})}function pn(t){let e=r=>typeof r=="object"&&!Array.isArray(r)&&r!==null,i=(r,n="")=>{Object.entries(Object.getOwnPropertyDescriptors(r)).forEach(([s,{value:a,enumerable:o}])=>{if(o===!1||a===void 0||typeof a=="object"&&a!==null&&a.__v_skip)return;let l=n===""?s:`${n}.${s}`;typeof a=="object"&&a!==null&&a._x_interceptor?r[s]=a.initialize(t,l,s):e(a)&&a!==r&&!(a instanceof Element)&&i(a,l)})};return i(t)}function mn(t,e=()=>{}){let i={initialValue:void 0,_x_interceptor:!0,initialize(r,n,s){return t(this.initialValue,()=>ea(r,n),a=>_i(r,n,a),n,s)}};return e(i),r=>{if(typeof r=="object"&&r!==null&&r._x_interceptor){let n=i.initialize.bind(i);i.initialize=(s,a,o)=>{let l=r.initialize(s,a,o);return i.initialValue=l,n(s,a,o)}}else i.initialValue=r;return i}}function ea(t,e){return e.split(".").reduce((i,r)=>i[r],t)}function _i(t,e,i){if(typeof e=="string"&&(e=e.split(".")),e.length===1)t[e[0]]=i;else{if(e.length===0)throw error;return t[e[0]]||(t[e[0]]={}),_i(t[e[0]],e.slice(1),i)}}var hn={};function le(t,e){hn[t]=e}function Ci(t,e){return Object.entries(hn).forEach(([i,r])=>{let n=null;function s(){if(n)return n;{let[a,o]=xn(e);return n={interceptor:mn,...a},ji(e,o),n}}Object.defineProperty(t,`$${i}`,{get(){return r(e,s())},enumerable:!1})}),t}function ta(t,e,i,...r){try{return i(...r)}catch(n){dt(n,t,e)}}function dt(t,e,i=void 0){t=Object.assign(t??{message:"No error message given."},{el:e,expression:i}),console.warn(`Alpine Expression Error: ${t.message}

${i?'Expression: "'+i+`"

`:""}`,e),setTimeout(()=>{throw t},0)}var Lt=!0;function gn(t){let e=Lt;Lt=!1;let i=t();return Lt=e,i}function Le(t,e,i={}){let r;return ee(t,e)(n=>r=n,i),r}function ee(...t){return vn(...t)}var vn=wn;function ia(t){vn=t}function wn(t,e){let i={};Ci(i,t);let r=[i,...je(t)],n=typeof e=="function"?ra(r,e):sa(r,e,t);return ta.bind(null,t,e,n)}function ra(t,e){return(i=()=>{},{scope:r={},params:n=[]}={})=>{let s=e.apply(mt([r,...t]),n);zt(i,s)}}var ci={};function na(t,e){if(ci[t])return ci[t];let i=Object.getPrototypeOf(async function(){}).constructor,r=/^[\n\s]*if.*\(.*\)/.test(t.trim())||/^(let|const)\s/.test(t.trim())?`(async()=>{ ${t} })()`:t,s=(()=>{try{let a=new i(["__self","scope"],`with (scope) { __self.result = ${r} }; __self.finished = true; return __self.result;`);return Object.defineProperty(a,"name",{value:`[Alpine] ${t}`}),a}catch(a){return dt(a,e,t),Promise.resolve()}})();return ci[t]=s,s}function sa(t,e,i){let r=na(e,i);return(n=()=>{},{scope:s={},params:a=[]}={})=>{r.result=void 0,r.finished=!1;let o=mt([s,...t]);if(typeof r=="function"){let l=r(r,o).catch(u=>dt(u,i,e));r.finished?(zt(n,r.result,o,a,i),r.result=void 0):l.then(u=>{zt(n,u,o,a,i)}).catch(u=>dt(u,i,e)).finally(()=>r.result=void 0)}}}function zt(t,e,i,r,n){if(Lt&&typeof e=="function"){let s=e.apply(i,r);s instanceof Promise?s.then(a=>zt(t,a,i,r)).catch(a=>dt(a,n,e)):t(s)}else typeof e=="object"&&e instanceof Promise?e.then(s=>t(s)):t(e)}var Ki="x-";function Ke(t=""){return Ki+t}function aa(t){Ki=t}var Rt={};function q(t,e){return Rt[t]=e,{before(i){if(!Rt[i]){console.warn(String.raw`Cannot find directive \`${i}\`. \`${t}\` will use the default order of execution`);return}const r=Ae.indexOf(i);Ae.splice(r>=0?r:Ae.indexOf("DEFAULT"),0,t)}}}function oa(t){return Object.keys(Rt).includes(t)}function Ji(t,e,i){if(e=Array.from(e),t._x_virtualDirectives){let s=Object.entries(t._x_virtualDirectives).map(([o,l])=>({name:o,value:l})),a=bn(s);s=s.map(o=>a.find(l=>l.name===o.name)?{name:`x-bind:${o.name}`,value:`"${o.value}"`}:o),e=e.concat(s)}let r={};return e.map(Tn((s,a)=>r[s]=a)).filter(Cn).map(da(r,i)).sort(ua).map(s=>ca(t,s))}function bn(t){return Array.from(t).map(Tn()).filter(e=>!Cn(e))}var Mi=!1,nt=new Map,yn=Symbol();function la(t){Mi=!0;let e=Symbol();yn=e,nt.set(e,[]);let i=()=>{for(;nt.get(e).length;)nt.get(e).shift()();nt.delete(e)},r=()=>{Mi=!1,i()};t(i),r()}function xn(t){let e=[],i=o=>e.push(o),[r,n]=Xs(t);return e.push(n),[{Alpine:gt,effect:r,cleanup:i,evaluateLater:ee.bind(ee,t),evaluate:Le.bind(Le,t)},()=>e.forEach(o=>o())]}function ca(t,e){let i=()=>{},r=Rt[e.type]||i,[n,s]=xn(t);cn(t,e.original,s);let a=()=>{t._x_ignore||t._x_ignoreSelf||(r.inline&&r.inline(t,e,n),r=r.bind(r,t,e,n),Mi?nt.get(yn).push(r):r())};return a.runCleanups=s,a}var Sn=(t,e)=>({name:i,value:r})=>(i.startsWith(t)&&(i=i.replace(t,e)),{name:i,value:r}),En=t=>t;function Tn(t=()=>{}){return({name:e,value:i})=>{let{name:r,value:n}=_n.reduce((s,a)=>a(s),{name:e,value:i});return r!==e&&t(r,e),{name:r,value:n}}}var _n=[];function Zi(t){_n.push(t)}function Cn({name:t}){return Mn().test(t)}var Mn=()=>new RegExp(`^${Ki}([^:^.]+)\\b`);function da(t,e){return({name:i,value:r})=>{let n=i.match(Mn()),s=i.match(/:([a-zA-Z0-9\-_:]+)/),a=i.match(/\.[^.\]]+(?=[^\]]*$)/g)||[],o=e||t[i]||i;return{type:n?n[1]:null,value:s?s[1]:null,modifiers:a.map(l=>l.replace(".","")),expression:r,original:o}}}var Ai="DEFAULT",Ae=["ignore","ref","data","id","anchor","bind","init","for","model","modelable","transition","show","if",Ai,"teleport"];function ua(t,e){let i=Ae.indexOf(t.type)===-1?Ai:t.type,r=Ae.indexOf(e.type)===-1?Ai:e.type;return Ae.indexOf(i)-Ae.indexOf(r)}function ot(t,e,i={}){t.dispatchEvent(new CustomEvent(e,{detail:i,bubbles:!0,composed:!0,cancelable:!0}))}function ye(t,e){if(typeof ShadowRoot=="function"&&t instanceof ShadowRoot){Array.from(t.children).forEach(n=>ye(n,e));return}let i=!1;if(e(t,()=>i=!0),i)return;let r=t.firstElementChild;for(;r;)ye(r,e),r=r.nextElementSibling}function se(t,...e){console.warn(`Alpine Warning: ${t}`,...e)}var xr=!1;function fa(){xr&&se("Alpine has already been initialized on this page. Calling Alpine.start() more than once can cause problems."),xr=!0,document.body||se("Unable to initialize. Trying to load Alpine before `<body>` is available. Did you forget to add `defer` in Alpine's `<script>` tag?"),ot(document,"alpine:init"),ot(document,"alpine:initializing"),qi(),qs(e=>me(e,ye)),ji(e=>$n(e)),ln((e,i)=>{Ji(e,i).forEach(r=>r())});let t=e=>!Xt(e.parentElement,!0);Array.from(document.querySelectorAll(Ln().join(","))).filter(t).forEach(e=>{me(e)}),ot(document,"alpine:initialized"),setTimeout(()=>{ha()})}var Qi=[],An=[];function Pn(){return Qi.map(t=>t())}function Ln(){return Qi.concat(An).map(t=>t())}function In(t){Qi.push(t)}function On(t){An.push(t)}function Xt(t,e=!1){return ht(t,i=>{if((e?Ln():Pn()).some(n=>i.matches(n)))return!0})}function ht(t,e){if(t){if(e(t))return t;if(t._x_teleportBack&&(t=t._x_teleportBack),!!t.parentElement)return ht(t.parentElement,e)}}function pa(t){return Pn().some(e=>t.matches(e))}var Dn=[];function ma(t){Dn.push(t)}function me(t,e=ye,i=()=>{}){la(()=>{e(t,(r,n)=>{i(r,n),Dn.forEach(s=>s(r,n)),Ji(r,r.attributes).forEach(s=>s()),r._x_ignore&&n()})})}function $n(t,e=ye){e(t,i=>{dn(i),Ys(i)})}function ha(){[["ui","dialog",["[x-dialog], [x-popover]"]],["anchor","anchor",["[x-anchor]"]],["sort","sort",["[x-sort]"]]].forEach(([e,i,r])=>{oa(i)||r.some(n=>{if(document.querySelector(n))return se(`found "${n}", but missing ${e} plugin`),!0})})}var Pi=[],er=!1;function tr(t=()=>{}){return queueMicrotask(()=>{er||setTimeout(()=>{Li()})}),new Promise(e=>{Pi.push(()=>{t(),e()})})}function Li(){for(er=!1;Pi.length;)Pi.shift()()}function ga(){er=!0}function ir(t,e){return Array.isArray(e)?Sr(t,e.join(" ")):typeof e=="object"&&e!==null?va(t,e):typeof e=="function"?ir(t,e()):Sr(t,e)}function Sr(t,e){let i=n=>n.split(" ").filter(s=>!t.classList.contains(s)).filter(Boolean),r=n=>(t.classList.add(...n),()=>{t.classList.remove(...n)});return e=e===!0?e="":e||"",r(i(e))}function va(t,e){let i=o=>o.split(" ").filter(Boolean),r=Object.entries(e).flatMap(([o,l])=>l?i(o):!1).filter(Boolean),n=Object.entries(e).flatMap(([o,l])=>l?!1:i(o)).filter(Boolean),s=[],a=[];return n.forEach(o=>{t.classList.contains(o)&&(t.classList.remove(o),a.push(o))}),r.forEach(o=>{t.classList.contains(o)||(t.classList.add(o),s.push(o))}),()=>{a.forEach(o=>t.classList.add(o)),s.forEach(o=>t.classList.remove(o))}}function qt(t,e){return typeof e=="object"&&e!==null?wa(t,e):ba(t,e)}function wa(t,e){let i={};return Object.entries(e).forEach(([r,n])=>{i[r]=t.style[r],r.startsWith("--")||(r=ya(r)),t.style.setProperty(r,n)}),setTimeout(()=>{t.style.length===0&&t.removeAttribute("style")}),()=>{qt(t,i)}}function ba(t,e){let i=t.getAttribute("style",e);return t.setAttribute("style",e),()=>{t.setAttribute("style",i||"")}}function ya(t){return t.replace(/([a-z])([A-Z])/g,"$1-$2").toLowerCase()}function Ii(t,e=()=>{}){let i=!1;return function(){i?e.apply(this,arguments):(i=!0,t.apply(this,arguments))}}q("transition",(t,{value:e,modifiers:i,expression:r},{evaluate:n})=>{typeof r=="function"&&(r=n(r)),r!==!1&&(!r||typeof r=="boolean"?Sa(t,i,e):xa(t,r,e))});function xa(t,e,i){zn(t,ir,""),{enter:n=>{t._x_transition.enter.during=n},"enter-start":n=>{t._x_transition.enter.start=n},"enter-end":n=>{t._x_transition.enter.end=n},leave:n=>{t._x_transition.leave.during=n},"leave-start":n=>{t._x_transition.leave.start=n},"leave-end":n=>{t._x_transition.leave.end=n}}[i](e)}function Sa(t,e,i){zn(t,qt);let r=!e.includes("in")&&!e.includes("out")&&!i,n=r||e.includes("in")||["enter"].includes(i),s=r||e.includes("out")||["leave"].includes(i);e.includes("in")&&!r&&(e=e.filter((p,b)=>b<e.indexOf("out"))),e.includes("out")&&!r&&(e=e.filter((p,b)=>b>e.indexOf("out")));let a=!e.includes("opacity")&&!e.includes("scale"),o=a||e.includes("opacity"),l=a||e.includes("scale"),u=o?0:1,d=l?tt(e,"scale",95)/100:1,c=tt(e,"delay",0)/1e3,f=tt(e,"origin","center"),m="opacity, transform",g=tt(e,"duration",150)/1e3,v=tt(e,"duration",75)/1e3,h="cubic-bezier(0.4, 0.0, 0.2, 1)";n&&(t._x_transition.enter.during={transformOrigin:f,transitionDelay:`${c}s`,transitionProperty:m,transitionDuration:`${g}s`,transitionTimingFunction:h},t._x_transition.enter.start={opacity:u,transform:`scale(${d})`},t._x_transition.enter.end={opacity:1,transform:"scale(1)"}),s&&(t._x_transition.leave.during={transformOrigin:f,transitionDelay:`${c}s`,transitionProperty:m,transitionDuration:`${v}s`,transitionTimingFunction:h},t._x_transition.leave.start={opacity:1,transform:"scale(1)"},t._x_transition.leave.end={opacity:u,transform:`scale(${d})`})}function zn(t,e,i={}){t._x_transition||(t._x_transition={enter:{during:i,start:i,end:i},leave:{during:i,start:i,end:i},in(r=()=>{},n=()=>{}){Oi(t,e,{during:this.enter.during,start:this.enter.start,end:this.enter.end},r,n)},out(r=()=>{},n=()=>{}){Oi(t,e,{during:this.leave.during,start:this.leave.start,end:this.leave.end},r,n)}})}window.Element.prototype._x_toggleAndCascadeWithTransitions=function(t,e,i,r){const n=document.visibilityState==="visible"?requestAnimationFrame:setTimeout;let s=()=>n(i);if(e){t._x_transition&&(t._x_transition.enter||t._x_transition.leave)?t._x_transition.enter&&(Object.entries(t._x_transition.enter.during).length||Object.entries(t._x_transition.enter.start).length||Object.entries(t._x_transition.enter.end).length)?t._x_transition.in(i):s():t._x_transition?t._x_transition.in(i):s();return}t._x_hidePromise=t._x_transition?new Promise((a,o)=>{t._x_transition.out(()=>{},()=>a(r)),t._x_transitioning&&t._x_transitioning.beforeCancel(()=>o({isFromCancelledTransition:!0}))}):Promise.resolve(r),queueMicrotask(()=>{let a=Rn(t);a?(a._x_hideChildren||(a._x_hideChildren=[]),a._x_hideChildren.push(t)):n(()=>{let o=l=>{let u=Promise.all([l._x_hidePromise,...(l._x_hideChildren||[]).map(o)]).then(([d])=>d==null?void 0:d());return delete l._x_hidePromise,delete l._x_hideChildren,u};o(t).catch(l=>{if(!l.isFromCancelledTransition)throw l})})})};function Rn(t){let e=t.parentNode;if(e)return e._x_hidePromise?e:Rn(e)}function Oi(t,e,{during:i,start:r,end:n}={},s=()=>{},a=()=>{}){if(t._x_transitioning&&t._x_transitioning.cancel(),Object.keys(i).length===0&&Object.keys(r).length===0&&Object.keys(n).length===0){s(),a();return}let o,l,u;Ea(t,{start(){o=e(t,r)},during(){l=e(t,i)},before:s,end(){o(),u=e(t,n)},after:a,cleanup(){l(),u()}})}function Ea(t,e){let i,r,n,s=Ii(()=>{Y(()=>{i=!0,r||e.before(),n||(e.end(),Li()),e.after(),t.isConnected&&e.cleanup(),delete t._x_transitioning})});t._x_transitioning={beforeCancels:[],beforeCancel(a){this.beforeCancels.push(a)},cancel:Ii(function(){for(;this.beforeCancels.length;)this.beforeCancels.shift()();s()}),finish:s},Y(()=>{e.start(),e.during()}),ga(),requestAnimationFrame(()=>{if(i)return;let a=Number(getComputedStyle(t).transitionDuration.replace(/,.*/,"").replace("s",""))*1e3,o=Number(getComputedStyle(t).transitionDelay.replace(/,.*/,"").replace("s",""))*1e3;a===0&&(a=Number(getComputedStyle(t).animationDuration.replace("s",""))*1e3),Y(()=>{e.before()}),r=!0,requestAnimationFrame(()=>{i||(Y(()=>{e.end()}),Li(),setTimeout(t._x_transitioning.finish,a+o),n=!0)})})}function tt(t,e,i){if(t.indexOf(e)===-1)return i;const r=t[t.indexOf(e)+1];if(!r||e==="scale"&&isNaN(r))return i;if(e==="duration"||e==="delay"){let n=r.match(/([0-9]+)ms/);if(n)return n[1]}return e==="origin"&&["top","right","left","center","bottom"].includes(t[t.indexOf(e)+2])?[r,t[t.indexOf(e)+2]].join(" "):r}var xe=!1;function _e(t,e=()=>{}){return(...i)=>xe?e(...i):t(...i)}function Ta(t){return(...e)=>xe&&t(...e)}var kn=[];function Yt(t){kn.push(t)}function _a(t,e){kn.forEach(i=>i(t,e)),xe=!0,Fn(()=>{me(e,(i,r)=>{r(i,()=>{})})}),xe=!1}var Di=!1;function Ca(t,e){e._x_dataStack||(e._x_dataStack=t._x_dataStack),xe=!0,Di=!0,Fn(()=>{Ma(e)}),xe=!1,Di=!1}function Ma(t){let e=!1;me(t,(r,n)=>{ye(r,(s,a)=>{if(e&&pa(s))return a();e=!0,n(s,a)})})}function Fn(t){let e=Ne;yr((i,r)=>{let n=e(i);return Ue(n),()=>{}}),t(),yr(e)}function Nn(t,e,i,r=[]){switch(t._x_bindings||(t._x_bindings=Ye({})),t._x_bindings[e]=i,e=r.includes("camel")?za(e):e,e){case"value":Aa(t,i);break;case"style":La(t,i);break;case"class":Pa(t,i);break;case"selected":case"checked":Ia(t,e,i);break;default:Bn(t,e,i);break}}function Aa(t,e){if(t.type==="radio")t.attributes.value===void 0&&(t.value=e),window.fromModel&&(typeof e=="boolean"?t.checked=It(t.value)===e:t.checked=Er(t.value,e));else if(t.type==="checkbox")Number.isInteger(e)?t.value=e:!Array.isArray(e)&&typeof e!="boolean"&&![null,void 0].includes(e)?t.value=String(e):Array.isArray(e)?t.checked=e.some(i=>Er(i,t.value)):t.checked=!!e;else if(t.tagName==="SELECT")$a(t,e);else{if(t.value===e)return;t.value=e===void 0?"":e}}function Pa(t,e){t._x_undoAddedClasses&&t._x_undoAddedClasses(),t._x_undoAddedClasses=ir(t,e)}function La(t,e){t._x_undoAddedStyles&&t._x_undoAddedStyles(),t._x_undoAddedStyles=qt(t,e)}function Ia(t,e,i){Bn(t,e,i),Da(t,e,i)}function Bn(t,e,i){[null,void 0,!1].includes(i)&&Ra(e)?t.removeAttribute(e):(Hn(e)&&(i=e),Oa(t,e,i))}function Oa(t,e,i){t.getAttribute(e)!=i&&t.setAttribute(e,i)}function Da(t,e,i){t[e]!==i&&(t[e]=i)}function $a(t,e){const i=[].concat(e).map(r=>r+"");Array.from(t.options).forEach(r=>{r.selected=i.includes(r.value)})}function za(t){return t.toLowerCase().replace(/-(\w)/g,(e,i)=>i.toUpperCase())}function Er(t,e){return t==e}function It(t){return[1,"1","true","on","yes",!0].includes(t)?!0:[0,"0","false","off","no",!1].includes(t)?!1:t?!!t:null}function Hn(t){return["disabled","checked","required","readonly","open","selected","autofocus","itemscope","multiple","novalidate","allowfullscreen","allowpaymentrequest","formnovalidate","autoplay","controls","loop","muted","playsinline","default","ismap","reversed","async","defer","nomodule"].includes(t)}function Ra(t){return!["aria-pressed","aria-checked","aria-expanded","aria-selected"].includes(t)}function ka(t,e,i){return t._x_bindings&&t._x_bindings[e]!==void 0?t._x_bindings[e]:Gn(t,e,i)}function Fa(t,e,i,r=!0){if(t._x_bindings&&t._x_bindings[e]!==void 0)return t._x_bindings[e];if(t._x_inlineBindings&&t._x_inlineBindings[e]!==void 0){let n=t._x_inlineBindings[e];return n.extract=r,gn(()=>Le(t,n.expression))}return Gn(t,e,i)}function Gn(t,e,i){let r=t.getAttribute(e);return r===null?typeof i=="function"?i():i:r===""?!0:Hn(e)?!![e,"true"].includes(r):r}function Vn(t,e){var i;return function(){var r=this,n=arguments,s=function(){i=null,t.apply(r,n)};clearTimeout(i),i=setTimeout(s,e)}}function jn(t,e){let i;return function(){let r=this,n=arguments;i||(t.apply(r,n),i=!0,setTimeout(()=>i=!1,e))}}function Wn({get:t,set:e},{get:i,set:r}){let n=!0,s,a=Ne(()=>{let o=t(),l=i();if(n)r(di(o)),n=!1;else{let u=JSON.stringify(o),d=JSON.stringify(l);u!==s?r(di(o)):u!==d&&e(di(l))}s=JSON.stringify(t()),JSON.stringify(i())});return()=>{Ue(a)}}function di(t){return typeof t=="object"?JSON.parse(JSON.stringify(t)):t}function Na(t){(Array.isArray(t)?t:[t]).forEach(i=>i(gt))}var Me={},Tr=!1;function Ba(t,e){if(Tr||(Me=Ye(Me),Tr=!0),e===void 0)return Me[t];Me[t]=e,typeof e=="object"&&e!==null&&e.hasOwnProperty("init")&&typeof e.init=="function"&&Me[t].init(),pn(Me[t])}function Ha(){return Me}var Xn={};function Ga(t,e){let i=typeof e!="function"?()=>e:e;return t instanceof Element?qn(t,i()):(Xn[t]=i,()=>{})}function Va(t){return Object.entries(Xn).forEach(([e,i])=>{Object.defineProperty(t,e,{get(){return(...r)=>i(...r)}})}),t}function qn(t,e,i){let r=[];for(;r.length;)r.pop()();let n=Object.entries(e).map(([a,o])=>({name:a,value:o})),s=bn(n);return n=n.map(a=>s.find(o=>o.name===a.name)?{name:`x-bind:${a.name}`,value:`"${a.value}"`}:a),Ji(t,n,i).map(a=>{r.push(a.runCleanups),a()}),()=>{for(;r.length;)r.pop()()}}var Yn={};function ja(t,e){Yn[t]=e}function Wa(t,e){return Object.entries(Yn).forEach(([i,r])=>{Object.defineProperty(t,i,{get(){return(...n)=>r.bind(e)(...n)},enumerable:!1})}),t}var Xa={get reactive(){return Ye},get release(){return Ue},get effect(){return Ne},get raw(){return rn},version:"3.14.1",flushAndStopDeferringMutations:Js,dontAutoEvaluateFunctions:gn,disableEffectScheduling:js,startObservingMutations:qi,stopObservingMutations:un,setReactivityEngine:Ws,onAttributeRemoved:cn,onAttributesAdded:ln,closestDataStack:je,skipDuringClone:_e,onlyDuringClone:Ta,addRootSelector:In,addInitSelector:On,interceptClone:Yt,addScopeToNode:pt,deferMutations:Ks,mapAttributes:Zi,evaluateLater:ee,interceptInit:ma,setEvaluator:ia,mergeProxies:mt,extractProp:Fa,findClosest:ht,onElRemoved:ji,closestRoot:Xt,destroyTree:$n,interceptor:mn,transition:Oi,setStyles:qt,mutateDom:Y,directive:q,entangle:Wn,throttle:jn,debounce:Vn,evaluate:Le,initTree:me,nextTick:tr,prefixed:Ke,prefix:aa,plugin:Na,magic:le,store:Ba,start:fa,clone:Ca,cloneNode:_a,bound:ka,$data:fn,watch:nn,walk:ye,data:ja,bind:Ga},gt=Xa;function qa(t,e){const i=Object.create(null),r=t.split(",");for(let n=0;n<r.length;n++)i[r[n]]=!0;return n=>!!i[n]}var Ya=Object.freeze({}),Ua=Object.prototype.hasOwnProperty,Ut=(t,e)=>Ua.call(t,e),Ie=Array.isArray,lt=t=>Un(t)==="[object Map]",Ka=t=>typeof t=="string",rr=t=>typeof t=="symbol",Kt=t=>t!==null&&typeof t=="object",Ja=Object.prototype.toString,Un=t=>Ja.call(t),Kn=t=>Un(t).slice(8,-1),nr=t=>Ka(t)&&t!=="NaN"&&t[0]!=="-"&&""+parseInt(t,10)===t,Za=t=>{const e=Object.create(null);return i=>e[i]||(e[i]=t(i))},Qa=Za(t=>t.charAt(0).toUpperCase()+t.slice(1)),Jn=(t,e)=>t!==e&&(t===t||e===e),$i=new WeakMap,it=[],ce,Oe=Symbol("iterate"),zi=Symbol("Map key iterate");function eo(t){return t&&t._isEffect===!0}function to(t,e=Ya){eo(t)&&(t=t.raw);const i=no(t,e);return e.lazy||i(),i}function io(t){t.active&&(Zn(t),t.options.onStop&&t.options.onStop(),t.active=!1)}var ro=0;function no(t,e){const i=function(){if(!i.active)return t();if(!it.includes(i)){Zn(i);try{return ao(),it.push(i),ce=i,t()}finally{it.pop(),Qn(),ce=it[it.length-1]}}};return i.id=ro++,i.allowRecurse=!!e.allowRecurse,i._isEffect=!0,i.active=!0,i.raw=t,i.deps=[],i.options=e,i}function Zn(t){const{deps:e}=t;if(e.length){for(let i=0;i<e.length;i++)e[i].delete(t);e.length=0}}var We=!0,sr=[];function so(){sr.push(We),We=!1}function ao(){sr.push(We),We=!0}function Qn(){const t=sr.pop();We=t===void 0?!0:t}function oe(t,e,i){if(!We||ce===void 0)return;let r=$i.get(t);r||$i.set(t,r=new Map);let n=r.get(i);n||r.set(i,n=new Set),n.has(ce)||(n.add(ce),ce.deps.push(n),ce.options.onTrack&&ce.options.onTrack({effect:ce,target:t,type:e,key:i}))}function Se(t,e,i,r,n,s){const a=$i.get(t);if(!a)return;const o=new Set,l=d=>{d&&d.forEach(c=>{(c!==ce||c.allowRecurse)&&o.add(c)})};if(e==="clear")a.forEach(l);else if(i==="length"&&Ie(t))a.forEach((d,c)=>{(c==="length"||c>=r)&&l(d)});else switch(i!==void 0&&l(a.get(i)),e){case"add":Ie(t)?nr(i)&&l(a.get("length")):(l(a.get(Oe)),lt(t)&&l(a.get(zi)));break;case"delete":Ie(t)||(l(a.get(Oe)),lt(t)&&l(a.get(zi)));break;case"set":lt(t)&&l(a.get(Oe));break}const u=d=>{d.options.onTrigger&&d.options.onTrigger({effect:d,target:t,key:i,type:e,newValue:r,oldValue:n,oldTarget:s}),d.options.scheduler?d.options.scheduler(d):d()};o.forEach(u)}var oo=qa("__proto__,__v_isRef,__isVue"),es=new Set(Object.getOwnPropertyNames(Symbol).map(t=>Symbol[t]).filter(rr)),lo=ts(),co=ts(!0),_r=uo();function uo(){const t={};return["includes","indexOf","lastIndexOf"].forEach(e=>{t[e]=function(...i){const r=j(this);for(let s=0,a=this.length;s<a;s++)oe(r,"get",s+"");const n=r[e](...i);return n===-1||n===!1?r[e](...i.map(j)):n}}),["push","pop","shift","unshift","splice"].forEach(e=>{t[e]=function(...i){so();const r=j(this)[e].apply(this,i);return Qn(),r}}),t}function ts(t=!1,e=!1){return function(r,n,s){if(n==="__v_isReactive")return!t;if(n==="__v_isReadonly")return t;if(n==="__v_raw"&&s===(t?e?_o:ss:e?To:ns).get(r))return r;const a=Ie(r);if(!t&&a&&Ut(_r,n))return Reflect.get(_r,n,s);const o=Reflect.get(r,n,s);return(rr(n)?es.has(n):oo(n))||(t||oe(r,"get",n),e)?o:Ri(o)?!a||!nr(n)?o.value:o:Kt(o)?t?as(o):cr(o):o}}var fo=po();function po(t=!1){return function(i,r,n,s){let a=i[r];if(!t&&(n=j(n),a=j(a),!Ie(i)&&Ri(a)&&!Ri(n)))return a.value=n,!0;const o=Ie(i)&&nr(r)?Number(r)<i.length:Ut(i,r),l=Reflect.set(i,r,n,s);return i===j(s)&&(o?Jn(n,a)&&Se(i,"set",r,n,a):Se(i,"add",r,n)),l}}function mo(t,e){const i=Ut(t,e),r=t[e],n=Reflect.deleteProperty(t,e);return n&&i&&Se(t,"delete",e,void 0,r),n}function ho(t,e){const i=Reflect.has(t,e);return(!rr(e)||!es.has(e))&&oe(t,"has",e),i}function go(t){return oe(t,"iterate",Ie(t)?"length":Oe),Reflect.ownKeys(t)}var vo={get:lo,set:fo,deleteProperty:mo,has:ho,ownKeys:go},wo={get:co,set(t,e){return console.warn(`Set operation on key "${String(e)}" failed: target is readonly.`,t),!0},deleteProperty(t,e){return console.warn(`Delete operation on key "${String(e)}" failed: target is readonly.`,t),!0}},ar=t=>Kt(t)?cr(t):t,or=t=>Kt(t)?as(t):t,lr=t=>t,Jt=t=>Reflect.getPrototypeOf(t);function St(t,e,i=!1,r=!1){t=t.__v_raw;const n=j(t),s=j(e);e!==s&&!i&&oe(n,"get",e),!i&&oe(n,"get",s);const{has:a}=Jt(n),o=r?lr:i?or:ar;if(a.call(n,e))return o(t.get(e));if(a.call(n,s))return o(t.get(s));t!==n&&t.get(e)}function Et(t,e=!1){const i=this.__v_raw,r=j(i),n=j(t);return t!==n&&!e&&oe(r,"has",t),!e&&oe(r,"has",n),t===n?i.has(t):i.has(t)||i.has(n)}function Tt(t,e=!1){return t=t.__v_raw,!e&&oe(j(t),"iterate",Oe),Reflect.get(t,"size",t)}function Cr(t){t=j(t);const e=j(this);return Jt(e).has.call(e,t)||(e.add(t),Se(e,"add",t,t)),this}function Mr(t,e){e=j(e);const i=j(this),{has:r,get:n}=Jt(i);let s=r.call(i,t);s?rs(i,r,t):(t=j(t),s=r.call(i,t));const a=n.call(i,t);return i.set(t,e),s?Jn(e,a)&&Se(i,"set",t,e,a):Se(i,"add",t,e),this}function Ar(t){const e=j(this),{has:i,get:r}=Jt(e);let n=i.call(e,t);n?rs(e,i,t):(t=j(t),n=i.call(e,t));const s=r?r.call(e,t):void 0,a=e.delete(t);return n&&Se(e,"delete",t,void 0,s),a}function Pr(){const t=j(this),e=t.size!==0,i=lt(t)?new Map(t):new Set(t),r=t.clear();return e&&Se(t,"clear",void 0,void 0,i),r}function _t(t,e){return function(r,n){const s=this,a=s.__v_raw,o=j(a),l=e?lr:t?or:ar;return!t&&oe(o,"iterate",Oe),a.forEach((u,d)=>r.call(n,l(u),l(d),s))}}function Ct(t,e,i){return function(...r){const n=this.__v_raw,s=j(n),a=lt(s),o=t==="entries"||t===Symbol.iterator&&a,l=t==="keys"&&a,u=n[t](...r),d=i?lr:e?or:ar;return!e&&oe(s,"iterate",l?zi:Oe),{next(){const{value:c,done:f}=u.next();return f?{value:c,done:f}:{value:o?[d(c[0]),d(c[1])]:d(c),done:f}},[Symbol.iterator](){return this}}}}function ve(t){return function(...e){{const i=e[0]?`on key "${e[0]}" `:"";console.warn(`${Qa(t)} operation ${i}failed: target is readonly.`,j(this))}return t==="delete"?!1:this}}function bo(){const t={get(s){return St(this,s)},get size(){return Tt(this)},has:Et,add:Cr,set:Mr,delete:Ar,clear:Pr,forEach:_t(!1,!1)},e={get(s){return St(this,s,!1,!0)},get size(){return Tt(this)},has:Et,add:Cr,set:Mr,delete:Ar,clear:Pr,forEach:_t(!1,!0)},i={get(s){return St(this,s,!0)},get size(){return Tt(this,!0)},has(s){return Et.call(this,s,!0)},add:ve("add"),set:ve("set"),delete:ve("delete"),clear:ve("clear"),forEach:_t(!0,!1)},r={get(s){return St(this,s,!0,!0)},get size(){return Tt(this,!0)},has(s){return Et.call(this,s,!0)},add:ve("add"),set:ve("set"),delete:ve("delete"),clear:ve("clear"),forEach:_t(!0,!0)};return["keys","values","entries",Symbol.iterator].forEach(s=>{t[s]=Ct(s,!1,!1),i[s]=Ct(s,!0,!1),e[s]=Ct(s,!1,!0),r[s]=Ct(s,!0,!0)}),[t,i,e,r]}var[yo,xo,Ud,Kd]=bo();function is(t,e){const i=t?xo:yo;return(r,n,s)=>n==="__v_isReactive"?!t:n==="__v_isReadonly"?t:n==="__v_raw"?r:Reflect.get(Ut(i,n)&&n in r?i:r,n,s)}var So={get:is(!1)},Eo={get:is(!0)};function rs(t,e,i){const r=j(i);if(r!==i&&e.call(t,r)){const n=Kn(t);console.warn(`Reactive ${n} contains both the raw and reactive versions of the same object${n==="Map"?" as keys":""}, which can lead to inconsistencies. Avoid differentiating between the raw and reactive versions of an object and only use the reactive version if possible.`)}}var ns=new WeakMap,To=new WeakMap,ss=new WeakMap,_o=new WeakMap;function Co(t){switch(t){case"Object":case"Array":return 1;case"Map":case"Set":case"WeakMap":case"WeakSet":return 2;default:return 0}}function Mo(t){return t.__v_skip||!Object.isExtensible(t)?0:Co(Kn(t))}function cr(t){return t&&t.__v_isReadonly?t:os(t,!1,vo,So,ns)}function as(t){return os(t,!0,wo,Eo,ss)}function os(t,e,i,r,n){if(!Kt(t))return console.warn(`value cannot be made reactive: ${String(t)}`),t;if(t.__v_raw&&!(e&&t.__v_isReactive))return t;const s=n.get(t);if(s)return s;const a=Mo(t);if(a===0)return t;const o=new Proxy(t,a===2?r:i);return n.set(t,o),o}function j(t){return t&&j(t.__v_raw)||t}function Ri(t){return!!(t&&t.__v_isRef===!0)}le("nextTick",()=>tr);le("dispatch",t=>ot.bind(ot,t));le("watch",(t,{evaluateLater:e,cleanup:i})=>(r,n)=>{let s=e(r),o=nn(()=>{let l;return s(u=>l=u),l},n);i(o)});le("store",Ha);le("data",t=>fn(t));le("root",t=>Xt(t));le("refs",t=>(t._x_refs_proxy||(t._x_refs_proxy=mt(Ao(t))),t._x_refs_proxy));function Ao(t){let e=[];return ht(t,i=>{i._x_refs&&e.push(i._x_refs)}),e}var ui={};function ls(t){return ui[t]||(ui[t]=0),++ui[t]}function Po(t,e){return ht(t,i=>{if(i._x_ids&&i._x_ids[e])return!0})}function Lo(t,e){t._x_ids||(t._x_ids={}),t._x_ids[e]||(t._x_ids[e]=ls(e))}le("id",(t,{cleanup:e})=>(i,r=null)=>{let n=`${i}${r?`-${r}`:""}`;return Io(t,n,e,()=>{let s=Po(t,i),a=s?s._x_ids[i]:ls(i);return r?`${i}-${a}-${r}`:`${i}-${a}`})});Yt((t,e)=>{t._x_id&&(e._x_id=t._x_id)});function Io(t,e,i,r){if(t._x_id||(t._x_id={}),t._x_id[e])return t._x_id[e];let n=r();return t._x_id[e]=n,i(()=>{delete t._x_id[e]}),n}le("el",t=>t);cs("Focus","focus","focus");cs("Persist","persist","persist");function cs(t,e,i){le(e,r=>se(`You can't use [$${e}] without first installing the "${t}" plugin here: https://alpinejs.dev/plugins/${i}`,r))}q("modelable",(t,{expression:e},{effect:i,evaluateLater:r,cleanup:n})=>{let s=r(e),a=()=>{let d;return s(c=>d=c),d},o=r(`${e} = __placeholder`),l=d=>o(()=>{},{scope:{__placeholder:d}}),u=a();l(u),queueMicrotask(()=>{if(!t._x_model)return;t._x_removeModelListeners.default();let d=t._x_model.get,c=t._x_model.set,f=Wn({get(){return d()},set(m){c(m)}},{get(){return a()},set(m){l(m)}});n(f)})});q("teleport",(t,{modifiers:e,expression:i},{cleanup:r})=>{t.tagName.toLowerCase()!=="template"&&se("x-teleport can only be used on a <template> tag",t);let n=Lr(i),s=t.content.cloneNode(!0).firstElementChild;t._x_teleport=s,s._x_teleportBack=t,t.setAttribute("data-teleport-template",!0),s.setAttribute("data-teleport-target",!0),t._x_forwardEvents&&t._x_forwardEvents.forEach(o=>{s.addEventListener(o,l=>{l.stopPropagation(),t.dispatchEvent(new l.constructor(l.type,l))})}),pt(s,{},t);let a=(o,l,u)=>{u.includes("prepend")?l.parentNode.insertBefore(o,l):u.includes("append")?l.parentNode.insertBefore(o,l.nextSibling):l.appendChild(o)};Y(()=>{a(s,n,e),_e(()=>{me(s),s._x_ignore=!0})()}),t._x_teleportPutBack=()=>{let o=Lr(i);Y(()=>{a(t._x_teleport,o,e)})},r(()=>s.remove())});var Oo=document.createElement("div");function Lr(t){let e=_e(()=>document.querySelector(t),()=>Oo)();return e||se(`Cannot find x-teleport element for selector: "${t}"`),e}var ds=()=>{};ds.inline=(t,{modifiers:e},{cleanup:i})=>{e.includes("self")?t._x_ignoreSelf=!0:t._x_ignore=!0,i(()=>{e.includes("self")?delete t._x_ignoreSelf:delete t._x_ignore})};q("ignore",ds);q("effect",_e((t,{expression:e},{effect:i})=>{i(ee(t,e))}));function ki(t,e,i,r){let n=t,s=l=>r(l),a={},o=(l,u)=>d=>u(l,d);if(i.includes("dot")&&(e=Do(e)),i.includes("camel")&&(e=$o(e)),i.includes("passive")&&(a.passive=!0),i.includes("capture")&&(a.capture=!0),i.includes("window")&&(n=window),i.includes("document")&&(n=document),i.includes("debounce")){let l=i[i.indexOf("debounce")+1]||"invalid-wait",u=kt(l.split("ms")[0])?Number(l.split("ms")[0]):250;s=Vn(s,u)}if(i.includes("throttle")){let l=i[i.indexOf("throttle")+1]||"invalid-wait",u=kt(l.split("ms")[0])?Number(l.split("ms")[0]):250;s=jn(s,u)}return i.includes("prevent")&&(s=o(s,(l,u)=>{u.preventDefault(),l(u)})),i.includes("stop")&&(s=o(s,(l,u)=>{u.stopPropagation(),l(u)})),i.includes("once")&&(s=o(s,(l,u)=>{l(u),n.removeEventListener(e,s,a)})),(i.includes("away")||i.includes("outside"))&&(n=document,s=o(s,(l,u)=>{t.contains(u.target)||u.target.isConnected!==!1&&(t.offsetWidth<1&&t.offsetHeight<1||t._x_isShown!==!1&&l(u))})),i.includes("self")&&(s=o(s,(l,u)=>{u.target===t&&l(u)})),(Ro(e)||us(e))&&(s=o(s,(l,u)=>{ko(u,i)||l(u)})),n.addEventListener(e,s,a),()=>{n.removeEventListener(e,s,a)}}function Do(t){return t.replace(/-/g,".")}function $o(t){return t.toLowerCase().replace(/-(\w)/g,(e,i)=>i.toUpperCase())}function kt(t){return!Array.isArray(t)&&!isNaN(t)}function zo(t){return[" ","_"].includes(t)?t:t.replace(/([a-z])([A-Z])/g,"$1-$2").replace(/[_\s]/,"-").toLowerCase()}function Ro(t){return["keydown","keyup"].includes(t)}function us(t){return["contextmenu","click","mouse"].some(e=>t.includes(e))}function ko(t,e){let i=e.filter(s=>!["window","document","prevent","stop","once","capture","self","away","outside","passive"].includes(s));if(i.includes("debounce")){let s=i.indexOf("debounce");i.splice(s,kt((i[s+1]||"invalid-wait").split("ms")[0])?2:1)}if(i.includes("throttle")){let s=i.indexOf("throttle");i.splice(s,kt((i[s+1]||"invalid-wait").split("ms")[0])?2:1)}if(i.length===0||i.length===1&&Ir(t.key).includes(i[0]))return!1;const n=["ctrl","shift","alt","meta","cmd","super"].filter(s=>i.includes(s));return i=i.filter(s=>!n.includes(s)),!(n.length>0&&n.filter(a=>((a==="cmd"||a==="super")&&(a="meta"),t[`${a}Key`])).length===n.length&&(us(t.type)||Ir(t.key).includes(i[0])))}function Ir(t){if(!t)return[];t=zo(t);let e={ctrl:"control",slash:"/",space:" ",spacebar:" ",cmd:"meta",esc:"escape",up:"arrow-up",down:"arrow-down",left:"arrow-left",right:"arrow-right",period:".",comma:",",equal:"=",minus:"-",underscore:"_"};return e[t]=t,Object.keys(e).map(i=>{if(e[i]===t)return i}).filter(i=>i)}q("model",(t,{modifiers:e,expression:i},{effect:r,cleanup:n})=>{let s=t;e.includes("parent")&&(s=t.parentNode);let a=ee(s,i),o;typeof i=="string"?o=ee(s,`${i} = __placeholder`):typeof i=="function"&&typeof i()=="string"?o=ee(s,`${i()} = __placeholder`):o=()=>{};let l=()=>{let f;return a(m=>f=m),Or(f)?f.get():f},u=f=>{let m;a(g=>m=g),Or(m)?m.set(f):o(()=>{},{scope:{__placeholder:f}})};typeof i=="string"&&t.type==="radio"&&Y(()=>{t.hasAttribute("name")||t.setAttribute("name",i)});var d=t.tagName.toLowerCase()==="select"||["checkbox","radio"].includes(t.type)||e.includes("lazy")?"change":"input";let c=xe?()=>{}:ki(t,d,e,f=>{u(fi(t,e,f,l()))});if(e.includes("fill")&&([void 0,null,""].includes(l())||t.type==="checkbox"&&Array.isArray(l())||t.tagName.toLowerCase()==="select"&&t.multiple)&&u(fi(t,e,{target:t},l())),t._x_removeModelListeners||(t._x_removeModelListeners={}),t._x_removeModelListeners.default=c,n(()=>t._x_removeModelListeners.default()),t.form){let f=ki(t.form,"reset",[],m=>{tr(()=>t._x_model&&t._x_model.set(fi(t,e,{target:t},l())))});n(()=>f())}t._x_model={get(){return l()},set(f){u(f)}},t._x_forceModelUpdate=f=>{f===void 0&&typeof i=="string"&&i.match(/\./)&&(f=""),window.fromModel=!0,Y(()=>Nn(t,"value",f)),delete window.fromModel},r(()=>{let f=l();e.includes("unintrusive")&&document.activeElement.isSameNode(t)||t._x_forceModelUpdate(f)})});function fi(t,e,i,r){return Y(()=>{if(i instanceof CustomEvent&&i.detail!==void 0)return i.detail!==null&&i.detail!==void 0?i.detail:i.target.value;if(t.type==="checkbox")if(Array.isArray(r)){let n=null;return e.includes("number")?n=pi(i.target.value):e.includes("boolean")?n=It(i.target.value):n=i.target.value,i.target.checked?r.includes(n)?r:r.concat([n]):r.filter(s=>!Fo(s,n))}else return i.target.checked;else{if(t.tagName.toLowerCase()==="select"&&t.multiple)return e.includes("number")?Array.from(i.target.selectedOptions).map(n=>{let s=n.value||n.text;return pi(s)}):e.includes("boolean")?Array.from(i.target.selectedOptions).map(n=>{let s=n.value||n.text;return It(s)}):Array.from(i.target.selectedOptions).map(n=>n.value||n.text);{let n;return t.type==="radio"?i.target.checked?n=i.target.value:n=r:n=i.target.value,e.includes("number")?pi(n):e.includes("boolean")?It(n):e.includes("trim")?n.trim():n}}})}function pi(t){let e=t?parseFloat(t):null;return No(e)?e:t}function Fo(t,e){return t==e}function No(t){return!Array.isArray(t)&&!isNaN(t)}function Or(t){return t!==null&&typeof t=="object"&&typeof t.get=="function"&&typeof t.set=="function"}q("cloak",t=>queueMicrotask(()=>Y(()=>t.removeAttribute(Ke("cloak")))));On(()=>`[${Ke("init")}]`);q("init",_e((t,{expression:e},{evaluate:i})=>typeof e=="string"?!!e.trim()&&i(e,{},!1):i(e,{},!1)));q("text",(t,{expression:e},{effect:i,evaluateLater:r})=>{let n=r(e);i(()=>{n(s=>{Y(()=>{t.textContent=s})})})});q("html",(t,{expression:e},{effect:i,evaluateLater:r})=>{let n=r(e);i(()=>{n(s=>{Y(()=>{t.innerHTML=s,t._x_ignoreSelf=!0,me(t),delete t._x_ignoreSelf})})})});Zi(Sn(":",En(Ke("bind:"))));var fs=(t,{value:e,modifiers:i,expression:r,original:n},{effect:s,cleanup:a})=>{if(!e){let l={};Va(l),ee(t,r)(d=>{qn(t,d,n)},{scope:l});return}if(e==="key")return Bo(t,r);if(t._x_inlineBindings&&t._x_inlineBindings[e]&&t._x_inlineBindings[e].extract)return;let o=ee(t,r);s(()=>o(l=>{l===void 0&&typeof r=="string"&&r.match(/\./)&&(l=""),Y(()=>Nn(t,e,l,i))})),a(()=>{t._x_undoAddedClasses&&t._x_undoAddedClasses(),t._x_undoAddedStyles&&t._x_undoAddedStyles()})};fs.inline=(t,{value:e,modifiers:i,expression:r})=>{e&&(t._x_inlineBindings||(t._x_inlineBindings={}),t._x_inlineBindings[e]={expression:r,extract:!1})};q("bind",fs);function Bo(t,e){t._x_keyExpression=e}In(()=>`[${Ke("data")}]`);q("data",(t,{expression:e},{cleanup:i})=>{if(Ho(t))return;e=e===""?"{}":e;let r={};Ci(r,t);let n={};Wa(n,r);let s=Le(t,e,{scope:n});(s===void 0||s===!0)&&(s={}),Ci(s,t);let a=Ye(s);pn(a);let o=pt(t,a);a.init&&Le(t,a.init),i(()=>{a.destroy&&Le(t,a.destroy),o()})});Yt((t,e)=>{t._x_dataStack&&(e._x_dataStack=t._x_dataStack,e.setAttribute("data-has-alpine-state",!0))});function Ho(t){return xe?Di?!0:t.hasAttribute("data-has-alpine-state"):!1}q("show",(t,{modifiers:e,expression:i},{effect:r})=>{let n=ee(t,i);t._x_doHide||(t._x_doHide=()=>{Y(()=>{t.style.setProperty("display","none",e.includes("important")?"important":void 0)})}),t._x_doShow||(t._x_doShow=()=>{Y(()=>{t.style.length===1&&t.style.display==="none"?t.removeAttribute("style"):t.style.removeProperty("display")})});let s=()=>{t._x_doHide(),t._x_isShown=!1},a=()=>{t._x_doShow(),t._x_isShown=!0},o=()=>setTimeout(a),l=Ii(c=>c?a():s(),c=>{typeof t._x_toggleAndCascadeWithTransitions=="function"?t._x_toggleAndCascadeWithTransitions(t,c,a,s):c?o():s()}),u,d=!0;r(()=>n(c=>{!d&&c===u||(e.includes("immediate")&&(c?o():s()),l(c),u=c,d=!1)}))});q("for",(t,{expression:e},{effect:i,cleanup:r})=>{let n=Vo(e),s=ee(t,n.items),a=ee(t,t._x_keyExpression||"index");t._x_prevKeys=[],t._x_lookup={},i(()=>Go(t,n,s,a)),r(()=>{Object.values(t._x_lookup).forEach(o=>o.remove()),delete t._x_prevKeys,delete t._x_lookup})});function Go(t,e,i,r){let n=a=>typeof a=="object"&&!Array.isArray(a),s=t;i(a=>{jo(a)&&a>=0&&(a=Array.from(Array(a).keys(),h=>h+1)),a===void 0&&(a=[]);let o=t._x_lookup,l=t._x_prevKeys,u=[],d=[];if(n(a))a=Object.entries(a).map(([h,p])=>{let b=Dr(e,p,h,a);r(w=>{d.includes(w)&&se("Duplicate key on x-for",t),d.push(w)},{scope:{index:h,...b}}),u.push(b)});else for(let h=0;h<a.length;h++){let p=Dr(e,a[h],h,a);r(b=>{d.includes(b)&&se("Duplicate key on x-for",t),d.push(b)},{scope:{index:h,...p}}),u.push(p)}let c=[],f=[],m=[],g=[];for(let h=0;h<l.length;h++){let p=l[h];d.indexOf(p)===-1&&m.push(p)}l=l.filter(h=>!m.includes(h));let v="template";for(let h=0;h<d.length;h++){let p=d[h],b=l.indexOf(p);if(b===-1)l.splice(h,0,p),c.push([v,h]);else if(b!==h){let w=l.splice(h,1)[0],y=l.splice(b-1,1)[0];l.splice(h,0,y),l.splice(b,0,w),f.push([w,y])}else g.push(p);v=p}for(let h=0;h<m.length;h++){let p=m[h];o[p]._x_effects&&o[p]._x_effects.forEach(tn),o[p].remove(),o[p]=null,delete o[p]}for(let h=0;h<f.length;h++){let[p,b]=f[h],w=o[p],y=o[b],E=document.createElement("div");Y(()=>{y||se('x-for ":key" is undefined or invalid',s,b,o),y.after(E),w.after(y),y._x_currentIfEl&&y.after(y._x_currentIfEl),E.before(w),w._x_currentIfEl&&w.after(w._x_currentIfEl),E.remove()}),y._x_refreshXForScope(u[d.indexOf(b)])}for(let h=0;h<c.length;h++){let[p,b]=c[h],w=p==="template"?s:o[p];w._x_currentIfEl&&(w=w._x_currentIfEl);let y=u[b],E=d[b],x=document.importNode(s.content,!0).firstElementChild,A=Ye(y);pt(x,A,s),x._x_refreshXForScope=S=>{Object.entries(S).forEach(([P,C])=>{A[P]=C})},Y(()=>{w.after(x),_e(()=>me(x))()}),typeof E=="object"&&se("x-for key cannot be an object, it must be a string or an integer",s),o[E]=x}for(let h=0;h<g.length;h++)o[g[h]]._x_refreshXForScope(u[d.indexOf(g[h])]);s._x_prevKeys=d})}function Vo(t){let e=/,([^,\}\]]*)(?:,([^,\}\]]*))?$/,i=/^\s*\(|\)\s*$/g,r=/([\s\S]*?)\s+(?:in|of)\s+([\s\S]*)/,n=t.match(r);if(!n)return;let s={};s.items=n[2].trim();let a=n[1].replace(i,"").trim(),o=a.match(e);return o?(s.item=a.replace(e,"").trim(),s.index=o[1].trim(),o[2]&&(s.collection=o[2].trim())):s.item=a,s}function Dr(t,e,i,r){let n={};return/^\[.*\]$/.test(t.item)&&Array.isArray(e)?t.item.replace("[","").replace("]","").split(",").map(a=>a.trim()).forEach((a,o)=>{n[a]=e[o]}):/^\{.*\}$/.test(t.item)&&!Array.isArray(e)&&typeof e=="object"?t.item.replace("{","").replace("}","").split(",").map(a=>a.trim()).forEach(a=>{n[a]=e[a]}):n[t.item]=e,t.index&&(n[t.index]=i),t.collection&&(n[t.collection]=r),n}function jo(t){return!Array.isArray(t)&&!isNaN(t)}function ps(){}ps.inline=(t,{expression:e},{cleanup:i})=>{let r=Xt(t);r._x_refs||(r._x_refs={}),r._x_refs[e]=t,i(()=>delete r._x_refs[e])};q("ref",ps);q("if",(t,{expression:e},{effect:i,cleanup:r})=>{t.tagName.toLowerCase()!=="template"&&se("x-if can only be used on a <template> tag",t);let n=ee(t,e),s=()=>{if(t._x_currentIfEl)return t._x_currentIfEl;let o=t.content.cloneNode(!0).firstElementChild;return pt(o,{},t),Y(()=>{t.after(o),_e(()=>me(o))()}),t._x_currentIfEl=o,t._x_undoIf=()=>{ye(o,l=>{l._x_effects&&l._x_effects.forEach(tn)}),o.remove(),delete t._x_currentIfEl},o},a=()=>{t._x_undoIf&&(t._x_undoIf(),delete t._x_undoIf)};i(()=>n(o=>{o?s():a()})),r(()=>t._x_undoIf&&t._x_undoIf())});q("id",(t,{expression:e},{evaluate:i})=>{i(e).forEach(n=>Lo(t,n))});Yt((t,e)=>{t._x_ids&&(e._x_ids=t._x_ids)});Zi(Sn("@",En(Ke("on:"))));q("on",_e((t,{value:e,modifiers:i,expression:r},{cleanup:n})=>{let s=r?ee(t,r):()=>{};t.tagName.toLowerCase()==="template"&&(t._x_forwardEvents||(t._x_forwardEvents=[]),t._x_forwardEvents.includes(e)||t._x_forwardEvents.push(e));let a=ki(t,e,i,o=>{s(()=>{},{scope:{$event:o},params:[o]})});n(()=>a())}));Zt("Collapse","collapse","collapse");Zt("Intersect","intersect","intersect");Zt("Focus","trap","focus");Zt("Mask","mask","mask");function Zt(t,e,i){q(e,r=>se(`You can't use [x-${e}] without first installing the "${t}" plugin here: https://alpinejs.dev/plugins/${i}`,r))}gt.setEvaluator(wn);gt.setReactivityEngine({reactive:cr,effect:to,release:io,raw:j});var Wo=gt,de=Wo;function $r(t){return t!==null&&typeof t=="object"&&"constructor"in t&&t.constructor===Object}function dr(t,e){t===void 0&&(t={}),e===void 0&&(e={}),Object.keys(e).forEach(i=>{typeof t[i]>"u"?t[i]=e[i]:$r(e[i])&&$r(t[i])&&Object.keys(e[i]).length>0&&dr(t[i],e[i])})}const ms={body:{},addEventListener(){},removeEventListener(){},activeElement:{blur(){},nodeName:""},querySelector(){return null},querySelectorAll(){return[]},getElementById(){return null},createEvent(){return{initEvent(){}}},createElement(){return{children:[],childNodes:[],style:{},setAttribute(){},getElementsByTagName(){return[]}}},createElementNS(){return{}},importNode(){return null},location:{hash:"",host:"",hostname:"",href:"",origin:"",pathname:"",protocol:"",search:""}};function J(){const t=typeof document<"u"?document:{};return dr(t,ms),t}const Xo={document:ms,navigator:{userAgent:""},location:{hash:"",host:"",hostname:"",href:"",origin:"",pathname:"",protocol:"",search:""},history:{replaceState(){},pushState(){},go(){},back(){}},CustomEvent:function(){return this},addEventListener(){},removeEventListener(){},getComputedStyle(){return{getPropertyValue(){return""}}},Image(){},Date(){},screen:{},setTimeout(){},clearTimeout(){},matchMedia(){return{}},requestAnimationFrame(t){return typeof setTimeout>"u"?(t(),null):setTimeout(t,0)},cancelAnimationFrame(t){typeof setTimeout>"u"||clearTimeout(t)}};function W(){const t=typeof window<"u"?window:{};return dr(t,Xo),t}function we(t){return t===void 0&&(t=""),t.trim().split(" ").filter(e=>!!e.trim())}function qo(t){const e=t;Object.keys(e).forEach(i=>{try{e[i]=null}catch{}try{delete e[i]}catch{}})}function ze(t,e){return e===void 0&&(e=0),setTimeout(t,e)}function ne(){return Date.now()}function Yo(t){const e=W();let i;return e.getComputedStyle&&(i=e.getComputedStyle(t,null)),!i&&t.currentStyle&&(i=t.currentStyle),i||(i=t.style),i}function Fi(t,e){e===void 0&&(e="x");const i=W();let r,n,s;const a=Yo(t);return i.WebKitCSSMatrix?(n=a.transform||a.webkitTransform,n.split(",").length>6&&(n=n.split(", ").map(o=>o.replace(",",".")).join(", ")),s=new i.WebKitCSSMatrix(n==="none"?"":n)):(s=a.MozTransform||a.OTransform||a.MsTransform||a.msTransform||a.transform||a.getPropertyValue("transform").replace("translate(","matrix(1, 0, 0, 1,"),r=s.toString().split(",")),e==="x"&&(i.WebKitCSSMatrix?n=s.m41:r.length===16?n=parseFloat(r[12]):n=parseFloat(r[4])),e==="y"&&(i.WebKitCSSMatrix?n=s.m42:r.length===16?n=parseFloat(r[13]):n=parseFloat(r[5])),n||0}function st(t){return typeof t=="object"&&t!==null&&t.constructor&&Object.prototype.toString.call(t).slice(8,-1)==="Object"}function Uo(t){return typeof window<"u"&&typeof window.HTMLElement<"u"?t instanceof HTMLElement:t&&(t.nodeType===1||t.nodeType===11)}function te(){const t=Object(arguments.length<=0?void 0:arguments[0]),e=["__proto__","constructor","prototype"];for(let i=1;i<arguments.length;i+=1){const r=i<0||arguments.length<=i?void 0:arguments[i];if(r!=null&&!Uo(r)){const n=Object.keys(Object(r)).filter(s=>e.indexOf(s)<0);for(let s=0,a=n.length;s<a;s+=1){const o=n[s],l=Object.getOwnPropertyDescriptor(r,o);l!==void 0&&l.enumerable&&(st(t[o])&&st(r[o])?r[o].__swiper__?t[o]=r[o]:te(t[o],r[o]):!st(t[o])&&st(r[o])?(t[o]={},r[o].__swiper__?t[o]=r[o]:te(t[o],r[o])):t[o]=r[o])}}}return t}function at(t,e,i){t.style.setProperty(e,i)}function hs(t){let{swiper:e,targetPosition:i,side:r}=t;const n=W(),s=-e.translate;let a=null,o;const l=e.params.speed;e.wrapperEl.style.scrollSnapType="none",n.cancelAnimationFrame(e.cssModeFrameID);const u=i>s?"next":"prev",d=(f,m)=>u==="next"&&f>=m||u==="prev"&&f<=m,c=()=>{o=new Date().getTime(),a===null&&(a=o);const f=Math.max(Math.min((o-a)/l,1),0),m=.5-Math.cos(f*Math.PI)/2;let g=s+m*(i-s);if(d(g,i)&&(g=i),e.wrapperEl.scrollTo({[r]:g}),d(g,i)){e.wrapperEl.style.overflow="hidden",e.wrapperEl.style.scrollSnapType="",setTimeout(()=>{e.wrapperEl.style.overflow="",e.wrapperEl.scrollTo({[r]:g})}),n.cancelAnimationFrame(e.cssModeFrameID);return}e.cssModeFrameID=n.requestAnimationFrame(c)};c()}function Be(t){return t.querySelector(".swiper-slide-transform")||t.shadowRoot&&t.shadowRoot.querySelector(".swiper-slide-transform")||t}function K(t,e){return e===void 0&&(e=""),[...t.children].filter(i=>i.matches(e))}function Ft(t){try{console.warn(t);return}catch{}}function ie(t,e){e===void 0&&(e=[]);const i=document.createElement(t);return i.classList.add(...Array.isArray(e)?e:we(e)),i}function Nt(t){const e=W(),i=J(),r=t.getBoundingClientRect(),n=i.body,s=t.clientTop||n.clientTop||0,a=t.clientLeft||n.clientLeft||0,o=t===e?e.scrollY:t.scrollTop,l=t===e?e.scrollX:t.scrollLeft;return{top:r.top+o-s,left:r.left+l-a}}function Ko(t,e){const i=[];for(;t.previousElementSibling;){const r=t.previousElementSibling;e?r.matches(e)&&i.push(r):i.push(r),t=r}return i}function Jo(t,e){const i=[];for(;t.nextElementSibling;){const r=t.nextElementSibling;e?r.matches(e)&&i.push(r):i.push(r),t=r}return i}function be(t,e){return W().getComputedStyle(t,null).getPropertyValue(e)}function ut(t){let e=t,i;if(e){for(i=0;(e=e.previousSibling)!==null;)e.nodeType===1&&(i+=1);return i}}function De(t,e){const i=[];let r=t.parentElement;for(;r;)e?r.matches(e)&&i.push(r):i.push(r),r=r.parentElement;return i}function ct(t,e){function i(r){r.target===t&&(e.call(t,r),t.removeEventListener("transitionend",i))}e&&t.addEventListener("transitionend",i)}function Ni(t,e,i){const r=W();return t[e==="width"?"offsetWidth":"offsetHeight"]+parseFloat(r.getComputedStyle(t,null).getPropertyValue(e==="width"?"margin-right":"margin-top"))+parseFloat(r.getComputedStyle(t,null).getPropertyValue(e==="width"?"margin-left":"margin-bottom"))}function H(t){return(Array.isArray(t)?t:[t]).filter(e=>!!e)}let mi;function Zo(){const t=W(),e=J();return{smoothScroll:e.documentElement&&e.documentElement.style&&"scrollBehavior"in e.documentElement.style,touch:!!("ontouchstart"in t||t.DocumentTouch&&e instanceof t.DocumentTouch)}}function gs(){return mi||(mi=Zo()),mi}let hi;function Qo(t){let{userAgent:e}=t===void 0?{}:t;const i=gs(),r=W(),n=r.navigator.platform,s=e||r.navigator.userAgent,a={ios:!1,android:!1},o=r.screen.width,l=r.screen.height,u=s.match(/(Android);?[\s\/]+([\d.]+)?/);let d=s.match(/(iPad).*OS\s([\d_]+)/);const c=s.match(/(iPod)(.*OS\s([\d_]+))?/),f=!d&&s.match(/(iPhone\sOS|iOS)\s([\d_]+)/),m=n==="Win32";let g=n==="MacIntel";const v=["1024x1366","1366x1024","834x1194","1194x834","834x1112","1112x834","768x1024","1024x768","820x1180","1180x820","810x1080","1080x810"];return!d&&g&&i.touch&&v.indexOf(`${o}x${l}`)>=0&&(d=s.match(/(Version)\/([\d.]+)/),d||(d=[0,1,"13_0_0"]),g=!1),u&&!m&&(a.os="android",a.android=!0),(d||f||c)&&(a.os="ios",a.ios=!0),a}function vs(t){return t===void 0&&(t={}),hi||(hi=Qo(t)),hi}let gi;function el(){const t=W(),e=vs();let i=!1;function r(){const o=t.navigator.userAgent.toLowerCase();return o.indexOf("safari")>=0&&o.indexOf("chrome")<0&&o.indexOf("android")<0}if(r()){const o=String(t.navigator.userAgent);if(o.includes("Version/")){const[l,u]=o.split("Version/")[1].split(" ")[0].split(".").map(d=>Number(d));i=l<16||l===16&&u<2}}const n=/(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/i.test(t.navigator.userAgent),s=r(),a=s||n&&e.ios;return{isSafari:i||s,needPerspectiveFix:i,need3dFix:a,isWebView:n}}function tl(){return gi||(gi=el()),gi}function il(t){let{swiper:e,on:i,emit:r}=t;const n=W();let s=null,a=null;const o=()=>{!e||e.destroyed||!e.initialized||(r("beforeResize"),r("resize"))},l=()=>{!e||e.destroyed||!e.initialized||(s=new ResizeObserver(c=>{a=n.requestAnimationFrame(()=>{const{width:f,height:m}=e;let g=f,v=m;c.forEach(h=>{let{contentBoxSize:p,contentRect:b,target:w}=h;w&&w!==e.el||(g=b?b.width:(p[0]||p).inlineSize,v=b?b.height:(p[0]||p).blockSize)}),(g!==f||v!==m)&&o()})}),s.observe(e.el))},u=()=>{a&&n.cancelAnimationFrame(a),s&&s.unobserve&&e.el&&(s.unobserve(e.el),s=null)},d=()=>{!e||e.destroyed||!e.initialized||r("orientationchange")};i("init",()=>{if(e.params.resizeObserver&&typeof n.ResizeObserver<"u"){l();return}n.addEventListener("resize",o),n.addEventListener("orientationchange",d)}),i("destroy",()=>{u(),n.removeEventListener("resize",o),n.removeEventListener("orientationchange",d)})}function rl(t){let{swiper:e,extendParams:i,on:r,emit:n}=t;const s=[],a=W(),o=function(d,c){c===void 0&&(c={});const f=a.MutationObserver||a.WebkitMutationObserver,m=new f(g=>{if(e.__preventObserver__)return;if(g.length===1){n("observerUpdate",g[0]);return}const v=function(){n("observerUpdate",g[0])};a.requestAnimationFrame?a.requestAnimationFrame(v):a.setTimeout(v,0)});m.observe(d,{attributes:typeof c.attributes>"u"?!0:c.attributes,childList:typeof c.childList>"u"?!0:c.childList,characterData:typeof c.characterData>"u"?!0:c.characterData}),s.push(m)},l=()=>{if(e.params.observer){if(e.params.observeParents){const d=De(e.hostEl);for(let c=0;c<d.length;c+=1)o(d[c])}o(e.hostEl,{childList:e.params.observeSlideChildren}),o(e.wrapperEl,{attributes:!1})}},u=()=>{s.forEach(d=>{d.disconnect()}),s.splice(0,s.length)};i({observer:!1,observeParents:!1,observeSlideChildren:!1}),r("init",l),r("destroy",u)}var nl={on(t,e,i){const r=this;if(!r.eventsListeners||r.destroyed||typeof e!="function")return r;const n=i?"unshift":"push";return t.split(" ").forEach(s=>{r.eventsListeners[s]||(r.eventsListeners[s]=[]),r.eventsListeners[s][n](e)}),r},once(t,e,i){const r=this;if(!r.eventsListeners||r.destroyed||typeof e!="function")return r;function n(){r.off(t,n),n.__emitterProxy&&delete n.__emitterProxy;for(var s=arguments.length,a=new Array(s),o=0;o<s;o++)a[o]=arguments[o];e.apply(r,a)}return n.__emitterProxy=e,r.on(t,n,i)},onAny(t,e){const i=this;if(!i.eventsListeners||i.destroyed||typeof t!="function")return i;const r=e?"unshift":"push";return i.eventsAnyListeners.indexOf(t)<0&&i.eventsAnyListeners[r](t),i},offAny(t){const e=this;if(!e.eventsListeners||e.destroyed||!e.eventsAnyListeners)return e;const i=e.eventsAnyListeners.indexOf(t);return i>=0&&e.eventsAnyListeners.splice(i,1),e},off(t,e){const i=this;return!i.eventsListeners||i.destroyed||!i.eventsListeners||t.split(" ").forEach(r=>{typeof e>"u"?i.eventsListeners[r]=[]:i.eventsListeners[r]&&i.eventsListeners[r].forEach((n,s)=>{(n===e||n.__emitterProxy&&n.__emitterProxy===e)&&i.eventsListeners[r].splice(s,1)})}),i},emit(){const t=this;if(!t.eventsListeners||t.destroyed||!t.eventsListeners)return t;let e,i,r;for(var n=arguments.length,s=new Array(n),a=0;a<n;a++)s[a]=arguments[a];return typeof s[0]=="string"||Array.isArray(s[0])?(e=s[0],i=s.slice(1,s.length),r=t):(e=s[0].events,i=s[0].data,r=s[0].context||t),i.unshift(r),(Array.isArray(e)?e:e.split(" ")).forEach(l=>{t.eventsAnyListeners&&t.eventsAnyListeners.length&&t.eventsAnyListeners.forEach(u=>{u.apply(r,[l,...i])}),t.eventsListeners&&t.eventsListeners[l]&&t.eventsListeners[l].forEach(u=>{u.apply(r,i)})}),t}};function sl(){const t=this;let e,i;const r=t.el;typeof t.params.width<"u"&&t.params.width!==null?e=t.params.width:e=r.clientWidth,typeof t.params.height<"u"&&t.params.height!==null?i=t.params.height:i=r.clientHeight,!(e===0&&t.isHorizontal()||i===0&&t.isVertical())&&(e=e-parseInt(be(r,"padding-left")||0,10)-parseInt(be(r,"padding-right")||0,10),i=i-parseInt(be(r,"padding-top")||0,10)-parseInt(be(r,"padding-bottom")||0,10),Number.isNaN(e)&&(e=0),Number.isNaN(i)&&(i=0),Object.assign(t,{width:e,height:i,size:t.isHorizontal()?e:i}))}function al(){const t=this;function e(C,O){return parseFloat(C.getPropertyValue(t.getDirectionLabel(O))||0)}const i=t.params,{wrapperEl:r,slidesEl:n,size:s,rtlTranslate:a,wrongRTL:o}=t,l=t.virtual&&i.virtual.enabled,u=l?t.virtual.slides.length:t.slides.length,d=K(n,`.${t.params.slideClass}, swiper-slide`),c=l?t.virtual.slides.length:d.length;let f=[];const m=[],g=[];let v=i.slidesOffsetBefore;typeof v=="function"&&(v=i.slidesOffsetBefore.call(t));let h=i.slidesOffsetAfter;typeof h=="function"&&(h=i.slidesOffsetAfter.call(t));const p=t.snapGrid.length,b=t.slidesGrid.length;let w=i.spaceBetween,y=-v,E=0,x=0;if(typeof s>"u")return;typeof w=="string"&&w.indexOf("%")>=0?w=parseFloat(w.replace("%",""))/100*s:typeof w=="string"&&(w=parseFloat(w)),t.virtualSize=-w,d.forEach(C=>{a?C.style.marginLeft="":C.style.marginRight="",C.style.marginBottom="",C.style.marginTop=""}),i.centeredSlides&&i.cssMode&&(at(r,"--swiper-centered-offset-before",""),at(r,"--swiper-centered-offset-after",""));const A=i.grid&&i.grid.rows>1&&t.grid;A?t.grid.initSlides(d):t.grid&&t.grid.unsetSlides();let S;const P=i.slidesPerView==="auto"&&i.breakpoints&&Object.keys(i.breakpoints).filter(C=>typeof i.breakpoints[C].slidesPerView<"u").length>0;for(let C=0;C<c;C+=1){S=0;let O;if(d[C]&&(O=d[C]),A&&t.grid.updateSlide(C,O,d),!(d[C]&&be(O,"display")==="none")){if(i.slidesPerView==="auto"){P&&(d[C].style[t.getDirectionLabel("width")]="");const T=getComputedStyle(O),_=O.style.transform,M=O.style.webkitTransform;if(_&&(O.style.transform="none"),M&&(O.style.webkitTransform="none"),i.roundLengths)S=t.isHorizontal()?Ni(O,"width"):Ni(O,"height");else{const D=e(T,"width"),k=e(T,"padding-left"),L=e(T,"padding-right"),I=e(T,"margin-left"),R=e(T,"margin-right"),B=T.getPropertyValue("box-sizing");if(B&&B==="border-box")S=D+I+R;else{const{clientWidth:$,offsetWidth:z}=O;S=D+k+L+I+R+(z-$)}}_&&(O.style.transform=_),M&&(O.style.webkitTransform=M),i.roundLengths&&(S=Math.floor(S))}else S=(s-(i.slidesPerView-1)*w)/i.slidesPerView,i.roundLengths&&(S=Math.floor(S)),d[C]&&(d[C].style[t.getDirectionLabel("width")]=`${S}px`);d[C]&&(d[C].swiperSlideSize=S),g.push(S),i.centeredSlides?(y=y+S/2+E/2+w,E===0&&C!==0&&(y=y-s/2-w),C===0&&(y=y-s/2-w),Math.abs(y)<1/1e3&&(y=0),i.roundLengths&&(y=Math.floor(y)),x%i.slidesPerGroup===0&&f.push(y),m.push(y)):(i.roundLengths&&(y=Math.floor(y)),(x-Math.min(t.params.slidesPerGroupSkip,x))%t.params.slidesPerGroup===0&&f.push(y),m.push(y),y=y+S+w),t.virtualSize+=S+w,E=S,x+=1}}if(t.virtualSize=Math.max(t.virtualSize,s)+h,a&&o&&(i.effect==="slide"||i.effect==="coverflow")&&(r.style.width=`${t.virtualSize+w}px`),i.setWrapperSize&&(r.style[t.getDirectionLabel("width")]=`${t.virtualSize+w}px`),A&&t.grid.updateWrapperSize(S,f),!i.centeredSlides){const C=[];for(let O=0;O<f.length;O+=1){let T=f[O];i.roundLengths&&(T=Math.floor(T)),f[O]<=t.virtualSize-s&&C.push(T)}f=C,Math.floor(t.virtualSize-s)-Math.floor(f[f.length-1])>1&&f.push(t.virtualSize-s)}if(l&&i.loop){const C=g[0]+w;if(i.slidesPerGroup>1){const O=Math.ceil((t.virtual.slidesBefore+t.virtual.slidesAfter)/i.slidesPerGroup),T=C*i.slidesPerGroup;for(let _=0;_<O;_+=1)f.push(f[f.length-1]+T)}for(let O=0;O<t.virtual.slidesBefore+t.virtual.slidesAfter;O+=1)i.slidesPerGroup===1&&f.push(f[f.length-1]+C),m.push(m[m.length-1]+C),t.virtualSize+=C}if(f.length===0&&(f=[0]),w!==0){const C=t.isHorizontal()&&a?"marginLeft":t.getDirectionLabel("marginRight");d.filter((O,T)=>!i.cssMode||i.loop?!0:T!==d.length-1).forEach(O=>{O.style[C]=`${w}px`})}if(i.centeredSlides&&i.centeredSlidesBounds){let C=0;g.forEach(T=>{C+=T+(w||0)}),C-=w;const O=C-s;f=f.map(T=>T<=0?-v:T>O?O+h:T)}if(i.centerInsufficientSlides){let C=0;g.forEach(T=>{C+=T+(w||0)}),C-=w;const O=(i.slidesOffsetBefore||0)+(i.slidesOffsetAfter||0);if(C+O<s){const T=(s-C-O)/2;f.forEach((_,M)=>{f[M]=_-T}),m.forEach((_,M)=>{m[M]=_+T})}}if(Object.assign(t,{slides:d,snapGrid:f,slidesGrid:m,slidesSizesGrid:g}),i.centeredSlides&&i.cssMode&&!i.centeredSlidesBounds){at(r,"--swiper-centered-offset-before",`${-f[0]}px`),at(r,"--swiper-centered-offset-after",`${t.size/2-g[g.length-1]/2}px`);const C=-t.snapGrid[0],O=-t.slidesGrid[0];t.snapGrid=t.snapGrid.map(T=>T+C),t.slidesGrid=t.slidesGrid.map(T=>T+O)}if(c!==u&&t.emit("slidesLengthChange"),f.length!==p&&(t.params.watchOverflow&&t.checkOverflow(),t.emit("snapGridLengthChange")),m.length!==b&&t.emit("slidesGridLengthChange"),i.watchSlidesProgress&&t.updateSlidesOffset(),t.emit("slidesUpdated"),!l&&!i.cssMode&&(i.effect==="slide"||i.effect==="fade")){const C=`${i.containerModifierClass}backface-hidden`,O=t.el.classList.contains(C);c<=i.maxBackfaceHiddenSlides?O||t.el.classList.add(C):O&&t.el.classList.remove(C)}}function ol(t){const e=this,i=[],r=e.virtual&&e.params.virtual.enabled;let n=0,s;typeof t=="number"?e.setTransition(t):t===!0&&e.setTransition(e.params.speed);const a=o=>r?e.slides[e.getSlideIndexByData(o)]:e.slides[o];if(e.params.slidesPerView!=="auto"&&e.params.slidesPerView>1)if(e.params.centeredSlides)(e.visibleSlides||[]).forEach(o=>{i.push(o)});else for(s=0;s<Math.ceil(e.params.slidesPerView);s+=1){const o=e.activeIndex+s;if(o>e.slides.length&&!r)break;i.push(a(o))}else i.push(a(e.activeIndex));for(s=0;s<i.length;s+=1)if(typeof i[s]<"u"){const o=i[s].offsetHeight;n=o>n?o:n}(n||n===0)&&(e.wrapperEl.style.height=`${n}px`)}function ll(){const t=this,e=t.slides,i=t.isElement?t.isHorizontal()?t.wrapperEl.offsetLeft:t.wrapperEl.offsetTop:0;for(let r=0;r<e.length;r+=1)e[r].swiperSlideOffset=(t.isHorizontal()?e[r].offsetLeft:e[r].offsetTop)-i-t.cssOverflowAdjustment()}const zr=(t,e,i)=>{e&&!t.classList.contains(i)?t.classList.add(i):!e&&t.classList.contains(i)&&t.classList.remove(i)};function cl(t){t===void 0&&(t=this&&this.translate||0);const e=this,i=e.params,{slides:r,rtlTranslate:n,snapGrid:s}=e;if(r.length===0)return;typeof r[0].swiperSlideOffset>"u"&&e.updateSlidesOffset();let a=-t;n&&(a=t),e.visibleSlidesIndexes=[],e.visibleSlides=[];let o=i.spaceBetween;typeof o=="string"&&o.indexOf("%")>=0?o=parseFloat(o.replace("%",""))/100*e.size:typeof o=="string"&&(o=parseFloat(o));for(let l=0;l<r.length;l+=1){const u=r[l];let d=u.swiperSlideOffset;i.cssMode&&i.centeredSlides&&(d-=r[0].swiperSlideOffset);const c=(a+(i.centeredSlides?e.minTranslate():0)-d)/(u.swiperSlideSize+o),f=(a-s[0]+(i.centeredSlides?e.minTranslate():0)-d)/(u.swiperSlideSize+o),m=-(a-d),g=m+e.slidesSizesGrid[l],v=m>=0&&m<=e.size-e.slidesSizesGrid[l],h=m>=0&&m<e.size-1||g>1&&g<=e.size||m<=0&&g>=e.size;h&&(e.visibleSlides.push(u),e.visibleSlidesIndexes.push(l)),zr(u,h,i.slideVisibleClass),zr(u,v,i.slideFullyVisibleClass),u.progress=n?-c:c,u.originalProgress=n?-f:f}}function dl(t){const e=this;if(typeof t>"u"){const d=e.rtlTranslate?-1:1;t=e&&e.translate&&e.translate*d||0}const i=e.params,r=e.maxTranslate()-e.minTranslate();let{progress:n,isBeginning:s,isEnd:a,progressLoop:o}=e;const l=s,u=a;if(r===0)n=0,s=!0,a=!0;else{n=(t-e.minTranslate())/r;const d=Math.abs(t-e.minTranslate())<1,c=Math.abs(t-e.maxTranslate())<1;s=d||n<=0,a=c||n>=1,d&&(n=0),c&&(n=1)}if(i.loop){const d=e.getSlideIndexByData(0),c=e.getSlideIndexByData(e.slides.length-1),f=e.slidesGrid[d],m=e.slidesGrid[c],g=e.slidesGrid[e.slidesGrid.length-1],v=Math.abs(t);v>=f?o=(v-f)/g:o=(v+g-m)/g,o>1&&(o-=1)}Object.assign(e,{progress:n,progressLoop:o,isBeginning:s,isEnd:a}),(i.watchSlidesProgress||i.centeredSlides&&i.autoHeight)&&e.updateSlidesProgress(t),s&&!l&&e.emit("reachBeginning toEdge"),a&&!u&&e.emit("reachEnd toEdge"),(l&&!s||u&&!a)&&e.emit("fromEdge"),e.emit("progress",n)}const vi=(t,e,i)=>{e&&!t.classList.contains(i)?t.classList.add(i):!e&&t.classList.contains(i)&&t.classList.remove(i)};function ul(){const t=this,{slides:e,params:i,slidesEl:r,activeIndex:n}=t,s=t.virtual&&i.virtual.enabled,a=t.grid&&i.grid&&i.grid.rows>1,o=c=>K(r,`.${i.slideClass}${c}, swiper-slide${c}`)[0];let l,u,d;if(s)if(i.loop){let c=n-t.virtual.slidesBefore;c<0&&(c=t.virtual.slides.length+c),c>=t.virtual.slides.length&&(c-=t.virtual.slides.length),l=o(`[data-swiper-slide-index="${c}"]`)}else l=o(`[data-swiper-slide-index="${n}"]`);else a?(l=e.filter(c=>c.column===n)[0],d=e.filter(c=>c.column===n+1)[0],u=e.filter(c=>c.column===n-1)[0]):l=e[n];l&&(a||(d=Jo(l,`.${i.slideClass}, swiper-slide`)[0],i.loop&&!d&&(d=e[0]),u=Ko(l,`.${i.slideClass}, swiper-slide`)[0],i.loop&&!u===0&&(u=e[e.length-1]))),e.forEach(c=>{vi(c,c===l,i.slideActiveClass),vi(c,c===d,i.slideNextClass),vi(c,c===u,i.slidePrevClass)}),t.emitSlidesClasses()}const Ot=(t,e)=>{if(!t||t.destroyed||!t.params)return;const i=()=>t.isElement?"swiper-slide":`.${t.params.slideClass}`,r=e.closest(i());if(r){let n=r.querySelector(`.${t.params.lazyPreloaderClass}`);!n&&t.isElement&&(r.shadowRoot?n=r.shadowRoot.querySelector(`.${t.params.lazyPreloaderClass}`):requestAnimationFrame(()=>{r.shadowRoot&&(n=r.shadowRoot.querySelector(`.${t.params.lazyPreloaderClass}`),n&&n.remove())})),n&&n.remove()}},wi=(t,e)=>{if(!t.slides[e])return;const i=t.slides[e].querySelector('[loading="lazy"]');i&&i.removeAttribute("loading")},Bi=t=>{if(!t||t.destroyed||!t.params)return;let e=t.params.lazyPreloadPrevNext;const i=t.slides.length;if(!i||!e||e<0)return;e=Math.min(e,i);const r=t.params.slidesPerView==="auto"?t.slidesPerViewDynamic():Math.ceil(t.params.slidesPerView),n=t.activeIndex;if(t.params.grid&&t.params.grid.rows>1){const a=n,o=[a-e];o.push(...Array.from({length:e}).map((l,u)=>a+r+u)),t.slides.forEach((l,u)=>{o.includes(l.column)&&wi(t,u)});return}const s=n+r-1;if(t.params.rewind||t.params.loop)for(let a=n-e;a<=s+e;a+=1){const o=(a%i+i)%i;(o<n||o>s)&&wi(t,o)}else for(let a=Math.max(n-e,0);a<=Math.min(s+e,i-1);a+=1)a!==n&&(a>s||a<n)&&wi(t,a)};function fl(t){const{slidesGrid:e,params:i}=t,r=t.rtlTranslate?t.translate:-t.translate;let n;for(let s=0;s<e.length;s+=1)typeof e[s+1]<"u"?r>=e[s]&&r<e[s+1]-(e[s+1]-e[s])/2?n=s:r>=e[s]&&r<e[s+1]&&(n=s+1):r>=e[s]&&(n=s);return i.normalizeSlideIndex&&(n<0||typeof n>"u")&&(n=0),n}function pl(t){const e=this,i=e.rtlTranslate?e.translate:-e.translate,{snapGrid:r,params:n,activeIndex:s,realIndex:a,snapIndex:o}=e;let l=t,u;const d=m=>{let g=m-e.virtual.slidesBefore;return g<0&&(g=e.virtual.slides.length+g),g>=e.virtual.slides.length&&(g-=e.virtual.slides.length),g};if(typeof l>"u"&&(l=fl(e)),r.indexOf(i)>=0)u=r.indexOf(i);else{const m=Math.min(n.slidesPerGroupSkip,l);u=m+Math.floor((l-m)/n.slidesPerGroup)}if(u>=r.length&&(u=r.length-1),l===s&&!e.params.loop){u!==o&&(e.snapIndex=u,e.emit("snapIndexChange"));return}if(l===s&&e.params.loop&&e.virtual&&e.params.virtual.enabled){e.realIndex=d(l);return}const c=e.grid&&n.grid&&n.grid.rows>1;let f;if(e.virtual&&n.virtual.enabled&&n.loop)f=d(l);else if(c){const m=e.slides.filter(v=>v.column===l)[0];let g=parseInt(m.getAttribute("data-swiper-slide-index"),10);Number.isNaN(g)&&(g=Math.max(e.slides.indexOf(m),0)),f=Math.floor(g/n.grid.rows)}else if(e.slides[l]){const m=e.slides[l].getAttribute("data-swiper-slide-index");m?f=parseInt(m,10):f=l}else f=l;Object.assign(e,{previousSnapIndex:o,snapIndex:u,previousRealIndex:a,realIndex:f,previousIndex:s,activeIndex:l}),e.initialized&&Bi(e),e.emit("activeIndexChange"),e.emit("snapIndexChange"),(e.initialized||e.params.runCallbacksOnInit)&&(a!==f&&e.emit("realIndexChange"),e.emit("slideChange"))}function ml(t,e){const i=this,r=i.params;let n=t.closest(`.${r.slideClass}, swiper-slide`);!n&&i.isElement&&e&&e.length>1&&e.includes(t)&&[...e.slice(e.indexOf(t)+1,e.length)].forEach(o=>{!n&&o.matches&&o.matches(`.${r.slideClass}, swiper-slide`)&&(n=o)});let s=!1,a;if(n){for(let o=0;o<i.slides.length;o+=1)if(i.slides[o]===n){s=!0,a=o;break}}if(n&&s)i.clickedSlide=n,i.virtual&&i.params.virtual.enabled?i.clickedIndex=parseInt(n.getAttribute("data-swiper-slide-index"),10):i.clickedIndex=a;else{i.clickedSlide=void 0,i.clickedIndex=void 0;return}r.slideToClickedSlide&&i.clickedIndex!==void 0&&i.clickedIndex!==i.activeIndex&&i.slideToClickedSlide()}var hl={updateSize:sl,updateSlides:al,updateAutoHeight:ol,updateSlidesOffset:ll,updateSlidesProgress:cl,updateProgress:dl,updateSlidesClasses:ul,updateActiveIndex:pl,updateClickedSlide:ml};function gl(t){t===void 0&&(t=this.isHorizontal()?"x":"y");const e=this,{params:i,rtlTranslate:r,translate:n,wrapperEl:s}=e;if(i.virtualTranslate)return r?-n:n;if(i.cssMode)return n;let a=Fi(s,t);return a+=e.cssOverflowAdjustment(),r&&(a=-a),a||0}function vl(t,e){const i=this,{rtlTranslate:r,params:n,wrapperEl:s,progress:a}=i;let o=0,l=0;const u=0;i.isHorizontal()?o=r?-t:t:l=t,n.roundLengths&&(o=Math.floor(o),l=Math.floor(l)),i.previousTranslate=i.translate,i.translate=i.isHorizontal()?o:l,n.cssMode?s[i.isHorizontal()?"scrollLeft":"scrollTop"]=i.isHorizontal()?-o:-l:n.virtualTranslate||(i.isHorizontal()?o-=i.cssOverflowAdjustment():l-=i.cssOverflowAdjustment(),s.style.transform=`translate3d(${o}px, ${l}px, ${u}px)`);let d;const c=i.maxTranslate()-i.minTranslate();c===0?d=0:d=(t-i.minTranslate())/c,d!==a&&i.updateProgress(t),i.emit("setTranslate",i.translate,e)}function wl(){return-this.snapGrid[0]}function bl(){return-this.snapGrid[this.snapGrid.length-1]}function yl(t,e,i,r,n){t===void 0&&(t=0),e===void 0&&(e=this.params.speed),i===void 0&&(i=!0),r===void 0&&(r=!0);const s=this,{params:a,wrapperEl:o}=s;if(s.animating&&a.preventInteractionOnTransition)return!1;const l=s.minTranslate(),u=s.maxTranslate();let d;if(r&&t>l?d=l:r&&t<u?d=u:d=t,s.updateProgress(d),a.cssMode){const c=s.isHorizontal();if(e===0)o[c?"scrollLeft":"scrollTop"]=-d;else{if(!s.support.smoothScroll)return hs({swiper:s,targetPosition:-d,side:c?"left":"top"}),!0;o.scrollTo({[c?"left":"top"]:-d,behavior:"smooth"})}return!0}return e===0?(s.setTransition(0),s.setTranslate(d),i&&(s.emit("beforeTransitionStart",e,n),s.emit("transitionEnd"))):(s.setTransition(e),s.setTranslate(d),i&&(s.emit("beforeTransitionStart",e,n),s.emit("transitionStart")),s.animating||(s.animating=!0,s.onTranslateToWrapperTransitionEnd||(s.onTranslateToWrapperTransitionEnd=function(f){!s||s.destroyed||f.target===this&&(s.wrapperEl.removeEventListener("transitionend",s.onTranslateToWrapperTransitionEnd),s.onTranslateToWrapperTransitionEnd=null,delete s.onTranslateToWrapperTransitionEnd,s.animating=!1,i&&s.emit("transitionEnd"))}),s.wrapperEl.addEventListener("transitionend",s.onTranslateToWrapperTransitionEnd))),!0}var xl={getTranslate:gl,setTranslate:vl,minTranslate:wl,maxTranslate:bl,translateTo:yl};function Sl(t,e){const i=this;i.params.cssMode||(i.wrapperEl.style.transitionDuration=`${t}ms`,i.wrapperEl.style.transitionDelay=t===0?"0ms":""),i.emit("setTransition",t,e)}function ws(t){let{swiper:e,runCallbacks:i,direction:r,step:n}=t;const{activeIndex:s,previousIndex:a}=e;let o=r;if(o||(s>a?o="next":s<a?o="prev":o="reset"),e.emit(`transition${n}`),i&&s!==a){if(o==="reset"){e.emit(`slideResetTransition${n}`);return}e.emit(`slideChangeTransition${n}`),o==="next"?e.emit(`slideNextTransition${n}`):e.emit(`slidePrevTransition${n}`)}}function El(t,e){t===void 0&&(t=!0);const i=this,{params:r}=i;r.cssMode||(r.autoHeight&&i.updateAutoHeight(),ws({swiper:i,runCallbacks:t,direction:e,step:"Start"}))}function Tl(t,e){t===void 0&&(t=!0);const i=this,{params:r}=i;i.animating=!1,!r.cssMode&&(i.setTransition(0),ws({swiper:i,runCallbacks:t,direction:e,step:"End"}))}var _l={setTransition:Sl,transitionStart:El,transitionEnd:Tl};function Cl(t,e,i,r,n){t===void 0&&(t=0),i===void 0&&(i=!0),typeof t=="string"&&(t=parseInt(t,10));const s=this;let a=t;a<0&&(a=0);const{params:o,snapGrid:l,slidesGrid:u,previousIndex:d,activeIndex:c,rtlTranslate:f,wrapperEl:m,enabled:g}=s;if(!g&&!r&&!n||s.destroyed||s.animating&&o.preventInteractionOnTransition)return!1;typeof e>"u"&&(e=s.params.speed);const v=Math.min(s.params.slidesPerGroupSkip,a);let h=v+Math.floor((a-v)/s.params.slidesPerGroup);h>=l.length&&(h=l.length-1);const p=-l[h];if(o.normalizeSlideIndex)for(let w=0;w<u.length;w+=1){const y=-Math.floor(p*100),E=Math.floor(u[w]*100),x=Math.floor(u[w+1]*100);typeof u[w+1]<"u"?y>=E&&y<x-(x-E)/2?a=w:y>=E&&y<x&&(a=w+1):y>=E&&(a=w)}if(s.initialized&&a!==c&&(!s.allowSlideNext&&(f?p>s.translate&&p>s.minTranslate():p<s.translate&&p<s.minTranslate())||!s.allowSlidePrev&&p>s.translate&&p>s.maxTranslate()&&(c||0)!==a))return!1;a!==(d||0)&&i&&s.emit("beforeSlideChangeStart"),s.updateProgress(p);let b;if(a>c?b="next":a<c?b="prev":b="reset",f&&-p===s.translate||!f&&p===s.translate)return s.updateActiveIndex(a),o.autoHeight&&s.updateAutoHeight(),s.updateSlidesClasses(),o.effect!=="slide"&&s.setTranslate(p),b!=="reset"&&(s.transitionStart(i,b),s.transitionEnd(i,b)),!1;if(o.cssMode){const w=s.isHorizontal(),y=f?p:-p;if(e===0){const E=s.virtual&&s.params.virtual.enabled;E&&(s.wrapperEl.style.scrollSnapType="none",s._immediateVirtual=!0),E&&!s._cssModeVirtualInitialSet&&s.params.initialSlide>0?(s._cssModeVirtualInitialSet=!0,requestAnimationFrame(()=>{m[w?"scrollLeft":"scrollTop"]=y})):m[w?"scrollLeft":"scrollTop"]=y,E&&requestAnimationFrame(()=>{s.wrapperEl.style.scrollSnapType="",s._immediateVirtual=!1})}else{if(!s.support.smoothScroll)return hs({swiper:s,targetPosition:y,side:w?"left":"top"}),!0;m.scrollTo({[w?"left":"top"]:y,behavior:"smooth"})}return!0}return s.setTransition(e),s.setTranslate(p),s.updateActiveIndex(a),s.updateSlidesClasses(),s.emit("beforeTransitionStart",e,r),s.transitionStart(i,b),e===0?s.transitionEnd(i,b):s.animating||(s.animating=!0,s.onSlideToWrapperTransitionEnd||(s.onSlideToWrapperTransitionEnd=function(y){!s||s.destroyed||y.target===this&&(s.wrapperEl.removeEventListener("transitionend",s.onSlideToWrapperTransitionEnd),s.onSlideToWrapperTransitionEnd=null,delete s.onSlideToWrapperTransitionEnd,s.transitionEnd(i,b))}),s.wrapperEl.addEventListener("transitionend",s.onSlideToWrapperTransitionEnd)),!0}function Ml(t,e,i,r){t===void 0&&(t=0),i===void 0&&(i=!0),typeof t=="string"&&(t=parseInt(t,10));const n=this;if(n.destroyed)return;typeof e>"u"&&(e=n.params.speed);const s=n.grid&&n.params.grid&&n.params.grid.rows>1;let a=t;if(n.params.loop)if(n.virtual&&n.params.virtual.enabled)a=a+n.virtual.slidesBefore;else{let o;if(s){const f=a*n.params.grid.rows;o=n.slides.filter(m=>m.getAttribute("data-swiper-slide-index")*1===f)[0].column}else o=n.getSlideIndexByData(a);const l=s?Math.ceil(n.slides.length/n.params.grid.rows):n.slides.length,{centeredSlides:u}=n.params;let d=n.params.slidesPerView;d==="auto"?d=n.slidesPerViewDynamic():(d=Math.ceil(parseFloat(n.params.slidesPerView,10)),u&&d%2===0&&(d=d+1));let c=l-o<d;if(u&&(c=c||o<Math.ceil(d/2)),r&&u&&n.params.slidesPerView!=="auto"&&!s&&(c=!1),c){const f=u?o<n.activeIndex?"prev":"next":o-n.activeIndex-1<n.params.slidesPerView?"next":"prev";n.loopFix({direction:f,slideTo:!0,activeSlideIndex:f==="next"?o+1:o-l+1,slideRealIndex:f==="next"?n.realIndex:void 0})}if(s){const f=a*n.params.grid.rows;a=n.slides.filter(m=>m.getAttribute("data-swiper-slide-index")*1===f)[0].column}else a=n.getSlideIndexByData(a)}return requestAnimationFrame(()=>{n.slideTo(a,e,i,r)}),n}function Al(t,e,i){e===void 0&&(e=!0);const r=this,{enabled:n,params:s,animating:a}=r;if(!n||r.destroyed)return r;typeof t>"u"&&(t=r.params.speed);let o=s.slidesPerGroup;s.slidesPerView==="auto"&&s.slidesPerGroup===1&&s.slidesPerGroupAuto&&(o=Math.max(r.slidesPerViewDynamic("current",!0),1));const l=r.activeIndex<s.slidesPerGroupSkip?1:o,u=r.virtual&&s.virtual.enabled;if(s.loop){if(a&&!u&&s.loopPreventsSliding)return!1;if(r.loopFix({direction:"next"}),r._clientLeft=r.wrapperEl.clientLeft,r.activeIndex===r.slides.length-1&&s.cssMode)return requestAnimationFrame(()=>{r.slideTo(r.activeIndex+l,t,e,i)}),!0}return s.rewind&&r.isEnd?r.slideTo(0,t,e,i):r.slideTo(r.activeIndex+l,t,e,i)}function Pl(t,e,i){e===void 0&&(e=!0);const r=this,{params:n,snapGrid:s,slidesGrid:a,rtlTranslate:o,enabled:l,animating:u}=r;if(!l||r.destroyed)return r;typeof t>"u"&&(t=r.params.speed);const d=r.virtual&&n.virtual.enabled;if(n.loop){if(u&&!d&&n.loopPreventsSliding)return!1;r.loopFix({direction:"prev"}),r._clientLeft=r.wrapperEl.clientLeft}const c=o?r.translate:-r.translate;function f(p){return p<0?-Math.floor(Math.abs(p)):Math.floor(p)}const m=f(c),g=s.map(p=>f(p));let v=s[g.indexOf(m)-1];if(typeof v>"u"&&n.cssMode){let p;s.forEach((b,w)=>{m>=b&&(p=w)}),typeof p<"u"&&(v=s[p>0?p-1:p])}let h=0;if(typeof v<"u"&&(h=a.indexOf(v),h<0&&(h=r.activeIndex-1),n.slidesPerView==="auto"&&n.slidesPerGroup===1&&n.slidesPerGroupAuto&&(h=h-r.slidesPerViewDynamic("previous",!0)+1,h=Math.max(h,0))),n.rewind&&r.isBeginning){const p=r.params.virtual&&r.params.virtual.enabled&&r.virtual?r.virtual.slides.length-1:r.slides.length-1;return r.slideTo(p,t,e,i)}else if(n.loop&&r.activeIndex===0&&n.cssMode)return requestAnimationFrame(()=>{r.slideTo(h,t,e,i)}),!0;return r.slideTo(h,t,e,i)}function Ll(t,e,i){e===void 0&&(e=!0);const r=this;if(!r.destroyed)return typeof t>"u"&&(t=r.params.speed),r.slideTo(r.activeIndex,t,e,i)}function Il(t,e,i,r){e===void 0&&(e=!0),r===void 0&&(r=.5);const n=this;if(n.destroyed)return;typeof t>"u"&&(t=n.params.speed);let s=n.activeIndex;const a=Math.min(n.params.slidesPerGroupSkip,s),o=a+Math.floor((s-a)/n.params.slidesPerGroup),l=n.rtlTranslate?n.translate:-n.translate;if(l>=n.snapGrid[o]){const u=n.snapGrid[o],d=n.snapGrid[o+1];l-u>(d-u)*r&&(s+=n.params.slidesPerGroup)}else{const u=n.snapGrid[o-1],d=n.snapGrid[o];l-u<=(d-u)*r&&(s-=n.params.slidesPerGroup)}return s=Math.max(s,0),s=Math.min(s,n.slidesGrid.length-1),n.slideTo(s,t,e,i)}function Ol(){const t=this;if(t.destroyed)return;const{params:e,slidesEl:i}=t,r=e.slidesPerView==="auto"?t.slidesPerViewDynamic():e.slidesPerView;let n=t.clickedIndex,s;const a=t.isElement?"swiper-slide":`.${e.slideClass}`;if(e.loop){if(t.animating)return;s=parseInt(t.clickedSlide.getAttribute("data-swiper-slide-index"),10),e.centeredSlides?n<t.loopedSlides-r/2||n>t.slides.length-t.loopedSlides+r/2?(t.loopFix(),n=t.getSlideIndex(K(i,`${a}[data-swiper-slide-index="${s}"]`)[0]),ze(()=>{t.slideTo(n)})):t.slideTo(n):n>t.slides.length-r?(t.loopFix(),n=t.getSlideIndex(K(i,`${a}[data-swiper-slide-index="${s}"]`)[0]),ze(()=>{t.slideTo(n)})):t.slideTo(n)}else t.slideTo(n)}var Dl={slideTo:Cl,slideToLoop:Ml,slideNext:Al,slidePrev:Pl,slideReset:Ll,slideToClosest:Il,slideToClickedSlide:Ol};function $l(t){const e=this,{params:i,slidesEl:r}=e;if(!i.loop||e.virtual&&e.params.virtual.enabled)return;const n=()=>{K(r,`.${i.slideClass}, swiper-slide`).forEach((c,f)=>{c.setAttribute("data-swiper-slide-index",f)})},s=e.grid&&i.grid&&i.grid.rows>1,a=i.slidesPerGroup*(s?i.grid.rows:1),o=e.slides.length%a!==0,l=s&&e.slides.length%i.grid.rows!==0,u=d=>{for(let c=0;c<d;c+=1){const f=e.isElement?ie("swiper-slide",[i.slideBlankClass]):ie("div",[i.slideClass,i.slideBlankClass]);e.slidesEl.append(f)}};if(o){if(i.loopAddBlankSlides){const d=a-e.slides.length%a;u(d),e.recalcSlides(),e.updateSlides()}else Ft("Swiper Loop Warning: The number of slides is not even to slidesPerGroup, loop mode may not function properly. You need to add more slides (or make duplicates, or empty slides)");n()}else if(l){if(i.loopAddBlankSlides){const d=i.grid.rows-e.slides.length%i.grid.rows;u(d),e.recalcSlides(),e.updateSlides()}else Ft("Swiper Loop Warning: The number of slides is not even to grid.rows, loop mode may not function properly. You need to add more slides (or make duplicates, or empty slides)");n()}else n();e.loopFix({slideRealIndex:t,direction:i.centeredSlides?void 0:"next"})}function zl(t){let{slideRealIndex:e,slideTo:i=!0,direction:r,setTranslate:n,activeSlideIndex:s,byController:a,byMousewheel:o}=t===void 0?{}:t;const l=this;if(!l.params.loop)return;l.emit("beforeLoopFix");const{slides:u,allowSlidePrev:d,allowSlideNext:c,slidesEl:f,params:m}=l,{centeredSlides:g}=m;if(l.allowSlidePrev=!0,l.allowSlideNext=!0,l.virtual&&m.virtual.enabled){i&&(!m.centeredSlides&&l.snapIndex===0?l.slideTo(l.virtual.slides.length,0,!1,!0):m.centeredSlides&&l.snapIndex<m.slidesPerView?l.slideTo(l.virtual.slides.length+l.snapIndex,0,!1,!0):l.snapIndex===l.snapGrid.length-1&&l.slideTo(l.virtual.slidesBefore,0,!1,!0)),l.allowSlidePrev=d,l.allowSlideNext=c,l.emit("loopFix");return}let v=m.slidesPerView;v==="auto"?v=l.slidesPerViewDynamic():(v=Math.ceil(parseFloat(m.slidesPerView,10)),g&&v%2===0&&(v=v+1));const h=m.slidesPerGroupAuto?v:m.slidesPerGroup;let p=h;p%h!==0&&(p+=h-p%h),p+=m.loopAdditionalSlides,l.loopedSlides=p;const b=l.grid&&m.grid&&m.grid.rows>1;u.length<v+p?Ft("Swiper Loop Warning: The number of slides is not enough for loop mode, it will be disabled and not function properly. You need to add more slides (or make duplicates) or lower the values of slidesPerView and slidesPerGroup parameters"):b&&m.grid.fill==="row"&&Ft("Swiper Loop Warning: Loop mode is not compatible with grid.fill = `row`");const w=[],y=[];let E=l.activeIndex;typeof s>"u"?s=l.getSlideIndex(u.filter(_=>_.classList.contains(m.slideActiveClass))[0]):E=s;const x=r==="next"||!r,A=r==="prev"||!r;let S=0,P=0;const C=b?Math.ceil(u.length/m.grid.rows):u.length,T=(b?u[s].column:s)+(g&&typeof n>"u"?-v/2+.5:0);if(T<p){S=Math.max(p-T,h);for(let _=0;_<p-T;_+=1){const M=_-Math.floor(_/C)*C;if(b){const D=C-M-1;for(let k=u.length-1;k>=0;k-=1)u[k].column===D&&w.push(k)}else w.push(C-M-1)}}else if(T+v>C-p){P=Math.max(T-(C-p*2),h);for(let _=0;_<P;_+=1){const M=_-Math.floor(_/C)*C;b?u.forEach((D,k)=>{D.column===M&&y.push(k)}):y.push(M)}}if(l.__preventObserver__=!0,requestAnimationFrame(()=>{l.__preventObserver__=!1}),A&&w.forEach(_=>{u[_].swiperLoopMoveDOM=!0,f.prepend(u[_]),u[_].swiperLoopMoveDOM=!1}),x&&y.forEach(_=>{u[_].swiperLoopMoveDOM=!0,f.append(u[_]),u[_].swiperLoopMoveDOM=!1}),l.recalcSlides(),m.slidesPerView==="auto"?l.updateSlides():b&&(w.length>0&&A||y.length>0&&x)&&l.slides.forEach((_,M)=>{l.grid.updateSlide(M,_,l.slides)}),m.watchSlidesProgress&&l.updateSlidesOffset(),i){if(w.length>0&&A){if(typeof e>"u"){const _=l.slidesGrid[E],D=l.slidesGrid[E+S]-_;o?l.setTranslate(l.translate-D):(l.slideTo(E+Math.ceil(S),0,!1,!0),n&&(l.touchEventsData.startTranslate=l.touchEventsData.startTranslate-D,l.touchEventsData.currentTranslate=l.touchEventsData.currentTranslate-D))}else if(n){const _=b?w.length/m.grid.rows:w.length;l.slideTo(l.activeIndex+_,0,!1,!0),l.touchEventsData.currentTranslate=l.translate}}else if(y.length>0&&x)if(typeof e>"u"){const _=l.slidesGrid[E],D=l.slidesGrid[E-P]-_;o?l.setTranslate(l.translate-D):(l.slideTo(E-P,0,!1,!0),n&&(l.touchEventsData.startTranslate=l.touchEventsData.startTranslate-D,l.touchEventsData.currentTranslate=l.touchEventsData.currentTranslate-D))}else{const _=b?y.length/m.grid.rows:y.length;l.slideTo(l.activeIndex-_,0,!1,!0)}}if(l.allowSlidePrev=d,l.allowSlideNext=c,l.controller&&l.controller.control&&!a){const _={slideRealIndex:e,direction:r,setTranslate:n,activeSlideIndex:s,byController:!0};Array.isArray(l.controller.control)?l.controller.control.forEach(M=>{!M.destroyed&&M.params.loop&&M.loopFix({..._,slideTo:M.params.slidesPerView===m.slidesPerView?i:!1})}):l.controller.control instanceof l.constructor&&l.controller.control.params.loop&&l.controller.control.loopFix({..._,slideTo:l.controller.control.params.slidesPerView===m.slidesPerView?i:!1})}l.emit("loopFix")}function Rl(){const t=this,{params:e,slidesEl:i}=t;if(!e.loop||t.virtual&&t.params.virtual.enabled)return;t.recalcSlides();const r=[];t.slides.forEach(n=>{const s=typeof n.swiperSlideIndex>"u"?n.getAttribute("data-swiper-slide-index")*1:n.swiperSlideIndex;r[s]=n}),t.slides.forEach(n=>{n.removeAttribute("data-swiper-slide-index")}),r.forEach(n=>{i.append(n)}),t.recalcSlides(),t.slideTo(t.realIndex,0)}var kl={loopCreate:$l,loopFix:zl,loopDestroy:Rl};function Fl(t){const e=this;if(!e.params.simulateTouch||e.params.watchOverflow&&e.isLocked||e.params.cssMode)return;const i=e.params.touchEventsTarget==="container"?e.el:e.wrapperEl;e.isElement&&(e.__preventObserver__=!0),i.style.cursor="move",i.style.cursor=t?"grabbing":"grab",e.isElement&&requestAnimationFrame(()=>{e.__preventObserver__=!1})}function Nl(){const t=this;t.params.watchOverflow&&t.isLocked||t.params.cssMode||(t.isElement&&(t.__preventObserver__=!0),t[t.params.touchEventsTarget==="container"?"el":"wrapperEl"].style.cursor="",t.isElement&&requestAnimationFrame(()=>{t.__preventObserver__=!1}))}var Bl={setGrabCursor:Fl,unsetGrabCursor:Nl};function Hl(t,e){e===void 0&&(e=this);function i(r){if(!r||r===J()||r===W())return null;r.assignedSlot&&(r=r.assignedSlot);const n=r.closest(t);return!n&&!r.getRootNode?null:n||i(r.getRootNode().host)}return i(e)}function Rr(t,e,i){const r=W(),{params:n}=t,s=n.edgeSwipeDetection,a=n.edgeSwipeThreshold;return s&&(i<=a||i>=r.innerWidth-a)?s==="prevent"?(e.preventDefault(),!0):!1:!0}function Gl(t){const e=this,i=J();let r=t;r.originalEvent&&(r=r.originalEvent);const n=e.touchEventsData;if(r.type==="pointerdown"){if(n.pointerId!==null&&n.pointerId!==r.pointerId)return;n.pointerId=r.pointerId}else r.type==="touchstart"&&r.targetTouches.length===1&&(n.touchId=r.targetTouches[0].identifier);if(r.type==="touchstart"){Rr(e,r,r.targetTouches[0].pageX);return}const{params:s,touches:a,enabled:o}=e;if(!o||!s.simulateTouch&&r.pointerType==="mouse"||e.animating&&s.preventInteractionOnTransition)return;!e.animating&&s.cssMode&&s.loop&&e.loopFix();let l=r.target;if(s.touchEventsTarget==="wrapper"&&!e.wrapperEl.contains(l)||"which"in r&&r.which===3||"button"in r&&r.button>0||n.isTouched&&n.isMoved)return;const u=!!s.noSwipingClass&&s.noSwipingClass!=="",d=r.composedPath?r.composedPath():r.path;u&&r.target&&r.target.shadowRoot&&d&&(l=d[0]);const c=s.noSwipingSelector?s.noSwipingSelector:`.${s.noSwipingClass}`,f=!!(r.target&&r.target.shadowRoot);if(s.noSwiping&&(f?Hl(c,l):l.closest(c))){e.allowClick=!0;return}if(s.swipeHandler&&!l.closest(s.swipeHandler))return;a.currentX=r.pageX,a.currentY=r.pageY;const m=a.currentX,g=a.currentY;if(!Rr(e,r,m))return;Object.assign(n,{isTouched:!0,isMoved:!1,allowTouchCallbacks:!0,isScrolling:void 0,startMoving:void 0}),a.startX=m,a.startY=g,n.touchStartTime=ne(),e.allowClick=!0,e.updateSize(),e.swipeDirection=void 0,s.threshold>0&&(n.allowThresholdMove=!1);let v=!0;l.matches(n.focusableElements)&&(v=!1,l.nodeName==="SELECT"&&(n.isTouched=!1)),i.activeElement&&i.activeElement.matches(n.focusableElements)&&i.activeElement!==l&&i.activeElement.blur();const h=v&&e.allowTouchMove&&s.touchStartPreventDefault;(s.touchStartForcePreventDefault||h)&&!l.isContentEditable&&r.preventDefault(),s.freeMode&&s.freeMode.enabled&&e.freeMode&&e.animating&&!s.cssMode&&e.freeMode.onTouchStart(),e.emit("touchStart",r)}function Vl(t){const e=J(),i=this,r=i.touchEventsData,{params:n,touches:s,rtlTranslate:a,enabled:o}=i;if(!o||!n.simulateTouch&&t.pointerType==="mouse")return;let l=t;if(l.originalEvent&&(l=l.originalEvent),l.type==="pointermove"&&(r.touchId!==null||l.pointerId!==r.pointerId))return;let u;if(l.type==="touchmove"){if(u=[...l.changedTouches].filter(x=>x.identifier===r.touchId)[0],!u||u.identifier!==r.touchId)return}else u=l;if(!r.isTouched){r.startMoving&&r.isScrolling&&i.emit("touchMoveOpposite",l);return}const d=u.pageX,c=u.pageY;if(l.preventedByNestedSwiper){s.startX=d,s.startY=c;return}if(!i.allowTouchMove){l.target.matches(r.focusableElements)||(i.allowClick=!1),r.isTouched&&(Object.assign(s,{startX:d,startY:c,currentX:d,currentY:c}),r.touchStartTime=ne());return}if(n.touchReleaseOnEdges&&!n.loop){if(i.isVertical()){if(c<s.startY&&i.translate<=i.maxTranslate()||c>s.startY&&i.translate>=i.minTranslate()){r.isTouched=!1,r.isMoved=!1;return}}else if(d<s.startX&&i.translate<=i.maxTranslate()||d>s.startX&&i.translate>=i.minTranslate())return}if(e.activeElement&&l.target===e.activeElement&&l.target.matches(r.focusableElements)){r.isMoved=!0,i.allowClick=!1;return}r.allowTouchCallbacks&&i.emit("touchMove",l),s.previousX=s.currentX,s.previousY=s.currentY,s.currentX=d,s.currentY=c;const f=s.currentX-s.startX,m=s.currentY-s.startY;if(i.params.threshold&&Math.sqrt(f**2+m**2)<i.params.threshold)return;if(typeof r.isScrolling>"u"){let x;i.isHorizontal()&&s.currentY===s.startY||i.isVertical()&&s.currentX===s.startX?r.isScrolling=!1:f*f+m*m>=25&&(x=Math.atan2(Math.abs(m),Math.abs(f))*180/Math.PI,r.isScrolling=i.isHorizontal()?x>n.touchAngle:90-x>n.touchAngle)}if(r.isScrolling&&i.emit("touchMoveOpposite",l),typeof r.startMoving>"u"&&(s.currentX!==s.startX||s.currentY!==s.startY)&&(r.startMoving=!0),r.isScrolling||l.type==="touchmove"&&r.preventTouchMoveFromPointerMove){r.isTouched=!1;return}if(!r.startMoving)return;i.allowClick=!1,!n.cssMode&&l.cancelable&&l.preventDefault(),n.touchMoveStopPropagation&&!n.nested&&l.stopPropagation();let g=i.isHorizontal()?f:m,v=i.isHorizontal()?s.currentX-s.previousX:s.currentY-s.previousY;n.oneWayMovement&&(g=Math.abs(g)*(a?1:-1),v=Math.abs(v)*(a?1:-1)),s.diff=g,g*=n.touchRatio,a&&(g=-g,v=-v);const h=i.touchesDirection;i.swipeDirection=g>0?"prev":"next",i.touchesDirection=v>0?"prev":"next";const p=i.params.loop&&!n.cssMode,b=i.touchesDirection==="next"&&i.allowSlideNext||i.touchesDirection==="prev"&&i.allowSlidePrev;if(!r.isMoved){if(p&&b&&i.loopFix({direction:i.swipeDirection}),r.startTranslate=i.getTranslate(),i.setTransition(0),i.animating){const x=new window.CustomEvent("transitionend",{bubbles:!0,cancelable:!0,detail:{bySwiperTouchMove:!0}});i.wrapperEl.dispatchEvent(x)}r.allowMomentumBounce=!1,n.grabCursor&&(i.allowSlideNext===!0||i.allowSlidePrev===!0)&&i.setGrabCursor(!0),i.emit("sliderFirstMove",l)}let w;if(new Date().getTime(),r.isMoved&&r.allowThresholdMove&&h!==i.touchesDirection&&p&&b&&Math.abs(g)>=1){Object.assign(s,{startX:d,startY:c,currentX:d,currentY:c,startTranslate:r.currentTranslate}),r.loopSwapReset=!0,r.startTranslate=r.currentTranslate;return}i.emit("sliderMove",l),r.isMoved=!0,r.currentTranslate=g+r.startTranslate;let y=!0,E=n.resistanceRatio;if(n.touchReleaseOnEdges&&(E=0),g>0?(p&&b&&!w&&r.allowThresholdMove&&r.currentTranslate>(n.centeredSlides?i.minTranslate()-i.slidesSizesGrid[i.activeIndex+1]:i.minTranslate())&&i.loopFix({direction:"prev",setTranslate:!0,activeSlideIndex:0}),r.currentTranslate>i.minTranslate()&&(y=!1,n.resistance&&(r.currentTranslate=i.minTranslate()-1+(-i.minTranslate()+r.startTranslate+g)**E))):g<0&&(p&&b&&!w&&r.allowThresholdMove&&r.currentTranslate<(n.centeredSlides?i.maxTranslate()+i.slidesSizesGrid[i.slidesSizesGrid.length-1]:i.maxTranslate())&&i.loopFix({direction:"next",setTranslate:!0,activeSlideIndex:i.slides.length-(n.slidesPerView==="auto"?i.slidesPerViewDynamic():Math.ceil(parseFloat(n.slidesPerView,10)))}),r.currentTranslate<i.maxTranslate()&&(y=!1,n.resistance&&(r.currentTranslate=i.maxTranslate()+1-(i.maxTranslate()-r.startTranslate-g)**E))),y&&(l.preventedByNestedSwiper=!0),!i.allowSlideNext&&i.swipeDirection==="next"&&r.currentTranslate<r.startTranslate&&(r.currentTranslate=r.startTranslate),!i.allowSlidePrev&&i.swipeDirection==="prev"&&r.currentTranslate>r.startTranslate&&(r.currentTranslate=r.startTranslate),!i.allowSlidePrev&&!i.allowSlideNext&&(r.currentTranslate=r.startTranslate),n.threshold>0)if(Math.abs(g)>n.threshold||r.allowThresholdMove){if(!r.allowThresholdMove){r.allowThresholdMove=!0,s.startX=s.currentX,s.startY=s.currentY,r.currentTranslate=r.startTranslate,s.diff=i.isHorizontal()?s.currentX-s.startX:s.currentY-s.startY;return}}else{r.currentTranslate=r.startTranslate;return}!n.followFinger||n.cssMode||((n.freeMode&&n.freeMode.enabled&&i.freeMode||n.watchSlidesProgress)&&(i.updateActiveIndex(),i.updateSlidesClasses()),n.freeMode&&n.freeMode.enabled&&i.freeMode&&i.freeMode.onTouchMove(),i.updateProgress(r.currentTranslate),i.setTranslate(r.currentTranslate))}function jl(t){const e=this,i=e.touchEventsData;let r=t;r.originalEvent&&(r=r.originalEvent);let n;if(r.type==="touchend"||r.type==="touchcancel"){if(n=[...r.changedTouches].filter(E=>E.identifier===i.touchId)[0],!n||n.identifier!==i.touchId)return}else{if(i.touchId!==null||r.pointerId!==i.pointerId)return;n=r}if(["pointercancel","pointerout","pointerleave","contextmenu"].includes(r.type)&&!(["pointercancel","contextmenu"].includes(r.type)&&(e.browser.isSafari||e.browser.isWebView)))return;i.pointerId=null,i.touchId=null;const{params:a,touches:o,rtlTranslate:l,slidesGrid:u,enabled:d}=e;if(!d||!a.simulateTouch&&r.pointerType==="mouse")return;if(i.allowTouchCallbacks&&e.emit("touchEnd",r),i.allowTouchCallbacks=!1,!i.isTouched){i.isMoved&&a.grabCursor&&e.setGrabCursor(!1),i.isMoved=!1,i.startMoving=!1;return}a.grabCursor&&i.isMoved&&i.isTouched&&(e.allowSlideNext===!0||e.allowSlidePrev===!0)&&e.setGrabCursor(!1);const c=ne(),f=c-i.touchStartTime;if(e.allowClick){const E=r.path||r.composedPath&&r.composedPath();e.updateClickedSlide(E&&E[0]||r.target,E),e.emit("tap click",r),f<300&&c-i.lastClickTime<300&&e.emit("doubleTap doubleClick",r)}if(i.lastClickTime=ne(),ze(()=>{e.destroyed||(e.allowClick=!0)}),!i.isTouched||!i.isMoved||!e.swipeDirection||o.diff===0&&!i.loopSwapReset||i.currentTranslate===i.startTranslate&&!i.loopSwapReset){i.isTouched=!1,i.isMoved=!1,i.startMoving=!1;return}i.isTouched=!1,i.isMoved=!1,i.startMoving=!1;let m;if(a.followFinger?m=l?e.translate:-e.translate:m=-i.currentTranslate,a.cssMode)return;if(a.freeMode&&a.freeMode.enabled){e.freeMode.onTouchEnd({currentPos:m});return}const g=m>=-e.maxTranslate()&&!e.params.loop;let v=0,h=e.slidesSizesGrid[0];for(let E=0;E<u.length;E+=E<a.slidesPerGroupSkip?1:a.slidesPerGroup){const x=E<a.slidesPerGroupSkip-1?1:a.slidesPerGroup;typeof u[E+x]<"u"?(g||m>=u[E]&&m<u[E+x])&&(v=E,h=u[E+x]-u[E]):(g||m>=u[E])&&(v=E,h=u[u.length-1]-u[u.length-2])}let p=null,b=null;a.rewind&&(e.isBeginning?b=a.virtual&&a.virtual.enabled&&e.virtual?e.virtual.slides.length-1:e.slides.length-1:e.isEnd&&(p=0));const w=(m-u[v])/h,y=v<a.slidesPerGroupSkip-1?1:a.slidesPerGroup;if(f>a.longSwipesMs){if(!a.longSwipes){e.slideTo(e.activeIndex);return}e.swipeDirection==="next"&&(w>=a.longSwipesRatio?e.slideTo(a.rewind&&e.isEnd?p:v+y):e.slideTo(v)),e.swipeDirection==="prev"&&(w>1-a.longSwipesRatio?e.slideTo(v+y):b!==null&&w<0&&Math.abs(w)>a.longSwipesRatio?e.slideTo(b):e.slideTo(v))}else{if(!a.shortSwipes){e.slideTo(e.activeIndex);return}e.navigation&&(r.target===e.navigation.nextEl||r.target===e.navigation.prevEl)?r.target===e.navigation.nextEl?e.slideTo(v+y):e.slideTo(v):(e.swipeDirection==="next"&&e.slideTo(p!==null?p:v+y),e.swipeDirection==="prev"&&e.slideTo(b!==null?b:v))}}function kr(){const t=this,{params:e,el:i}=t;if(i&&i.offsetWidth===0)return;e.breakpoints&&t.setBreakpoint();const{allowSlideNext:r,allowSlidePrev:n,snapGrid:s}=t,a=t.virtual&&t.params.virtual.enabled;t.allowSlideNext=!0,t.allowSlidePrev=!0,t.updateSize(),t.updateSlides(),t.updateSlidesClasses();const o=a&&e.loop;(e.slidesPerView==="auto"||e.slidesPerView>1)&&t.isEnd&&!t.isBeginning&&!t.params.centeredSlides&&!o?t.slideTo(t.slides.length-1,0,!1,!0):t.params.loop&&!a?t.slideToLoop(t.realIndex,0,!1,!0):t.slideTo(t.activeIndex,0,!1,!0),t.autoplay&&t.autoplay.running&&t.autoplay.paused&&(clearTimeout(t.autoplay.resizeTimeout),t.autoplay.resizeTimeout=setTimeout(()=>{t.autoplay&&t.autoplay.running&&t.autoplay.paused&&t.autoplay.resume()},500)),t.allowSlidePrev=n,t.allowSlideNext=r,t.params.watchOverflow&&s!==t.snapGrid&&t.checkOverflow()}function Wl(t){const e=this;e.enabled&&(e.allowClick||(e.params.preventClicks&&t.preventDefault(),e.params.preventClicksPropagation&&e.animating&&(t.stopPropagation(),t.stopImmediatePropagation())))}function Xl(){const t=this,{wrapperEl:e,rtlTranslate:i,enabled:r}=t;if(!r)return;t.previousTranslate=t.translate,t.isHorizontal()?t.translate=-e.scrollLeft:t.translate=-e.scrollTop,t.translate===0&&(t.translate=0),t.updateActiveIndex(),t.updateSlidesClasses();let n;const s=t.maxTranslate()-t.minTranslate();s===0?n=0:n=(t.translate-t.minTranslate())/s,n!==t.progress&&t.updateProgress(i?-t.translate:t.translate),t.emit("setTranslate",t.translate,!1)}function ql(t){const e=this;Ot(e,t.target),!(e.params.cssMode||e.params.slidesPerView!=="auto"&&!e.params.autoHeight)&&e.update()}function Yl(){const t=this;t.documentTouchHandlerProceeded||(t.documentTouchHandlerProceeded=!0,t.params.touchReleaseOnEdges&&(t.el.style.touchAction="auto"))}const bs=(t,e)=>{const i=J(),{params:r,el:n,wrapperEl:s,device:a}=t,o=!!r.nested,l=e==="on"?"addEventListener":"removeEventListener",u=e;!n||typeof n=="string"||(i[l]("touchstart",t.onDocumentTouchStart,{passive:!1,capture:o}),n[l]("touchstart",t.onTouchStart,{passive:!1}),n[l]("pointerdown",t.onTouchStart,{passive:!1}),i[l]("touchmove",t.onTouchMove,{passive:!1,capture:o}),i[l]("pointermove",t.onTouchMove,{passive:!1,capture:o}),i[l]("touchend",t.onTouchEnd,{passive:!0}),i[l]("pointerup",t.onTouchEnd,{passive:!0}),i[l]("pointercancel",t.onTouchEnd,{passive:!0}),i[l]("touchcancel",t.onTouchEnd,{passive:!0}),i[l]("pointerout",t.onTouchEnd,{passive:!0}),i[l]("pointerleave",t.onTouchEnd,{passive:!0}),i[l]("contextmenu",t.onTouchEnd,{passive:!0}),(r.preventClicks||r.preventClicksPropagation)&&n[l]("click",t.onClick,!0),r.cssMode&&s[l]("scroll",t.onScroll),r.updateOnWindowResize?t[u](a.ios||a.android?"resize orientationchange observerUpdate":"resize observerUpdate",kr,!0):t[u]("observerUpdate",kr,!0),n[l]("load",t.onLoad,{capture:!0}))};function Ul(){const t=this,{params:e}=t;t.onTouchStart=Gl.bind(t),t.onTouchMove=Vl.bind(t),t.onTouchEnd=jl.bind(t),t.onDocumentTouchStart=Yl.bind(t),e.cssMode&&(t.onScroll=Xl.bind(t)),t.onClick=Wl.bind(t),t.onLoad=ql.bind(t),bs(t,"on")}function Kl(){bs(this,"off")}var Jl={attachEvents:Ul,detachEvents:Kl};const Fr=(t,e)=>t.grid&&e.grid&&e.grid.rows>1;function Zl(){const t=this,{realIndex:e,initialized:i,params:r,el:n}=t,s=r.breakpoints;if(!s||s&&Object.keys(s).length===0)return;const a=t.getBreakpoint(s,t.params.breakpointsBase,t.el);if(!a||t.currentBreakpoint===a)return;const l=(a in s?s[a]:void 0)||t.originalParams,u=Fr(t,r),d=Fr(t,l),c=t.params.grabCursor,f=l.grabCursor,m=r.enabled;u&&!d?(n.classList.remove(`${r.containerModifierClass}grid`,`${r.containerModifierClass}grid-column`),t.emitContainerClasses()):!u&&d&&(n.classList.add(`${r.containerModifierClass}grid`),(l.grid.fill&&l.grid.fill==="column"||!l.grid.fill&&r.grid.fill==="column")&&n.classList.add(`${r.containerModifierClass}grid-column`),t.emitContainerClasses()),c&&!f?t.unsetGrabCursor():!c&&f&&t.setGrabCursor(),["navigation","pagination","scrollbar"].forEach(w=>{if(typeof l[w]>"u")return;const y=r[w]&&r[w].enabled,E=l[w]&&l[w].enabled;y&&!E&&t[w].disable(),!y&&E&&t[w].enable()});const g=l.direction&&l.direction!==r.direction,v=r.loop&&(l.slidesPerView!==r.slidesPerView||g),h=r.loop;g&&i&&t.changeDirection(),te(t.params,l);const p=t.params.enabled,b=t.params.loop;Object.assign(t,{allowTouchMove:t.params.allowTouchMove,allowSlideNext:t.params.allowSlideNext,allowSlidePrev:t.params.allowSlidePrev}),m&&!p?t.disable():!m&&p&&t.enable(),t.currentBreakpoint=a,t.emit("_beforeBreakpoint",l),i&&(v?(t.loopDestroy(),t.loopCreate(e),t.updateSlides()):!h&&b?(t.loopCreate(e),t.updateSlides()):h&&!b&&t.loopDestroy()),t.emit("breakpoint",l)}function Ql(t,e,i){if(e===void 0&&(e="window"),!t||e==="container"&&!i)return;let r=!1;const n=W(),s=e==="window"?n.innerHeight:i.clientHeight,a=Object.keys(t).map(o=>{if(typeof o=="string"&&o.indexOf("@")===0){const l=parseFloat(o.substr(1));return{value:s*l,point:o}}return{value:o,point:o}});a.sort((o,l)=>parseInt(o.value,10)-parseInt(l.value,10));for(let o=0;o<a.length;o+=1){const{point:l,value:u}=a[o];e==="window"?n.matchMedia(`(min-width: ${u}px)`).matches&&(r=l):u<=i.clientWidth&&(r=l)}return r||"max"}var ec={setBreakpoint:Zl,getBreakpoint:Ql};function tc(t,e){const i=[];return t.forEach(r=>{typeof r=="object"?Object.keys(r).forEach(n=>{r[n]&&i.push(e+n)}):typeof r=="string"&&i.push(e+r)}),i}function ic(){const t=this,{classNames:e,params:i,rtl:r,el:n,device:s}=t,a=tc(["initialized",i.direction,{"free-mode":t.params.freeMode&&i.freeMode.enabled},{autoheight:i.autoHeight},{rtl:r},{grid:i.grid&&i.grid.rows>1},{"grid-column":i.grid&&i.grid.rows>1&&i.grid.fill==="column"},{android:s.android},{ios:s.ios},{"css-mode":i.cssMode},{centered:i.cssMode&&i.centeredSlides},{"watch-progress":i.watchSlidesProgress}],i.containerModifierClass);e.push(...a),n.classList.add(...e),t.emitContainerClasses()}function rc(){const t=this,{el:e,classNames:i}=t;!e||typeof e=="string"||(e.classList.remove(...i),t.emitContainerClasses())}var nc={addClasses:ic,removeClasses:rc};function sc(){const t=this,{isLocked:e,params:i}=t,{slidesOffsetBefore:r}=i;if(r){const n=t.slides.length-1,s=t.slidesGrid[n]+t.slidesSizesGrid[n]+r*2;t.isLocked=t.size>s}else t.isLocked=t.snapGrid.length===1;i.allowSlideNext===!0&&(t.allowSlideNext=!t.isLocked),i.allowSlidePrev===!0&&(t.allowSlidePrev=!t.isLocked),e&&e!==t.isLocked&&(t.isEnd=!1),e!==t.isLocked&&t.emit(t.isLocked?"lock":"unlock")}var ac={checkOverflow:sc},Nr={init:!0,direction:"horizontal",oneWayMovement:!1,swiperElementNodeName:"SWIPER-CONTAINER",touchEventsTarget:"wrapper",initialSlide:0,speed:300,cssMode:!1,updateOnWindowResize:!0,resizeObserver:!0,nested:!1,createElements:!1,eventsPrefix:"swiper",enabled:!0,focusableElements:"input, select, option, textarea, button, video, label",width:null,height:null,preventInteractionOnTransition:!1,userAgent:null,url:null,edgeSwipeDetection:!1,edgeSwipeThreshold:20,autoHeight:!1,setWrapperSize:!1,virtualTranslate:!1,effect:"slide",breakpoints:void 0,breakpointsBase:"window",spaceBetween:0,slidesPerView:1,slidesPerGroup:1,slidesPerGroupSkip:0,slidesPerGroupAuto:!1,centeredSlides:!1,centeredSlidesBounds:!1,slidesOffsetBefore:0,slidesOffsetAfter:0,normalizeSlideIndex:!0,centerInsufficientSlides:!1,watchOverflow:!0,roundLengths:!1,touchRatio:1,touchAngle:45,simulateTouch:!0,shortSwipes:!0,longSwipes:!0,longSwipesRatio:.5,longSwipesMs:300,followFinger:!0,allowTouchMove:!0,threshold:5,touchMoveStopPropagation:!1,touchStartPreventDefault:!0,touchStartForcePreventDefault:!1,touchReleaseOnEdges:!1,uniqueNavElements:!0,resistance:!0,resistanceRatio:.85,watchSlidesProgress:!1,grabCursor:!1,preventClicks:!0,preventClicksPropagation:!0,slideToClickedSlide:!1,loop:!1,loopAddBlankSlides:!0,loopAdditionalSlides:0,loopPreventsSliding:!0,rewind:!1,allowSlidePrev:!0,allowSlideNext:!0,swipeHandler:null,noSwiping:!0,noSwipingClass:"swiper-no-swiping",noSwipingSelector:null,passiveListeners:!0,maxBackfaceHiddenSlides:10,containerModifierClass:"swiper-",slideClass:"swiper-slide",slideBlankClass:"swiper-slide-blank",slideActiveClass:"swiper-slide-active",slideVisibleClass:"swiper-slide-visible",slideFullyVisibleClass:"swiper-slide-fully-visible",slideNextClass:"swiper-slide-next",slidePrevClass:"swiper-slide-prev",wrapperClass:"swiper-wrapper",lazyPreloaderClass:"swiper-lazy-preloader",lazyPreloadPrevNext:0,runCallbacksOnInit:!0,_emitClasses:!1};function oc(t,e){return function(r){r===void 0&&(r={});const n=Object.keys(r)[0],s=r[n];if(typeof s!="object"||s===null){te(e,r);return}if(t[n]===!0&&(t[n]={enabled:!0}),n==="navigation"&&t[n]&&t[n].enabled&&!t[n].prevEl&&!t[n].nextEl&&(t[n].auto=!0),["pagination","scrollbar"].indexOf(n)>=0&&t[n]&&t[n].enabled&&!t[n].el&&(t[n].auto=!0),!(n in t&&"enabled"in s)){te(e,r);return}typeof t[n]=="object"&&!("enabled"in t[n])&&(t[n].enabled=!0),t[n]||(t[n]={enabled:!1}),te(e,r)}}const bi={eventsEmitter:nl,update:hl,translate:xl,transition:_l,slide:Dl,loop:kl,grabCursor:Bl,events:Jl,breakpoints:ec,checkOverflow:ac,classes:nc},yi={};class Q{constructor(){let e,i;for(var r=arguments.length,n=new Array(r),s=0;s<r;s++)n[s]=arguments[s];n.length===1&&n[0].constructor&&Object.prototype.toString.call(n[0]).slice(8,-1)==="Object"?i=n[0]:[e,i]=n,i||(i={}),i=te({},i),e&&!i.el&&(i.el=e);const a=J();if(i.el&&typeof i.el=="string"&&a.querySelectorAll(i.el).length>1){const d=[];return a.querySelectorAll(i.el).forEach(c=>{const f=te({},i,{el:c});d.push(new Q(f))}),d}const o=this;o.__swiper__=!0,o.support=gs(),o.device=vs({userAgent:i.userAgent}),o.browser=tl(),o.eventsListeners={},o.eventsAnyListeners=[],o.modules=[...o.__modules__],i.modules&&Array.isArray(i.modules)&&o.modules.push(...i.modules);const l={};o.modules.forEach(d=>{d({params:i,swiper:o,extendParams:oc(i,l),on:o.on.bind(o),once:o.once.bind(o),off:o.off.bind(o),emit:o.emit.bind(o)})});const u=te({},Nr,l);return o.params=te({},u,yi,i),o.originalParams=te({},o.params),o.passedParams=te({},i),o.params&&o.params.on&&Object.keys(o.params.on).forEach(d=>{o.on(d,o.params.on[d])}),o.params&&o.params.onAny&&o.onAny(o.params.onAny),Object.assign(o,{enabled:o.params.enabled,el:e,classNames:[],slides:[],slidesGrid:[],snapGrid:[],slidesSizesGrid:[],isHorizontal(){return o.params.direction==="horizontal"},isVertical(){return o.params.direction==="vertical"},activeIndex:0,realIndex:0,isBeginning:!0,isEnd:!1,translate:0,previousTranslate:0,progress:0,velocity:0,animating:!1,cssOverflowAdjustment(){return Math.trunc(this.translate/2**23)*2**23},allowSlideNext:o.params.allowSlideNext,allowSlidePrev:o.params.allowSlidePrev,touchEventsData:{isTouched:void 0,isMoved:void 0,allowTouchCallbacks:void 0,touchStartTime:void 0,isScrolling:void 0,currentTranslate:void 0,startTranslate:void 0,allowThresholdMove:void 0,focusableElements:o.params.focusableElements,lastClickTime:0,clickTimeout:void 0,velocities:[],allowMomentumBounce:void 0,startMoving:void 0,pointerId:null,touchId:null},allowClick:!0,allowTouchMove:o.params.allowTouchMove,touches:{startX:0,startY:0,currentX:0,currentY:0,diff:0},imagesToLoad:[],imagesLoaded:0}),o.emit("_swiper"),o.params.init&&o.init(),o}getDirectionLabel(e){return this.isHorizontal()?e:{width:"height","margin-top":"margin-left","margin-bottom ":"margin-right","margin-left":"margin-top","margin-right":"margin-bottom","padding-left":"padding-top","padding-right":"padding-bottom",marginRight:"marginBottom"}[e]}getSlideIndex(e){const{slidesEl:i,params:r}=this,n=K(i,`.${r.slideClass}, swiper-slide`),s=ut(n[0]);return ut(e)-s}getSlideIndexByData(e){return this.getSlideIndex(this.slides.filter(i=>i.getAttribute("data-swiper-slide-index")*1===e)[0])}recalcSlides(){const e=this,{slidesEl:i,params:r}=e;e.slides=K(i,`.${r.slideClass}, swiper-slide`)}enable(){const e=this;e.enabled||(e.enabled=!0,e.params.grabCursor&&e.setGrabCursor(),e.emit("enable"))}disable(){const e=this;e.enabled&&(e.enabled=!1,e.params.grabCursor&&e.unsetGrabCursor(),e.emit("disable"))}setProgress(e,i){const r=this;e=Math.min(Math.max(e,0),1);const n=r.minTranslate(),a=(r.maxTranslate()-n)*e+n;r.translateTo(a,typeof i>"u"?0:i),r.updateActiveIndex(),r.updateSlidesClasses()}emitContainerClasses(){const e=this;if(!e.params._emitClasses||!e.el)return;const i=e.el.className.split(" ").filter(r=>r.indexOf("swiper")===0||r.indexOf(e.params.containerModifierClass)===0);e.emit("_containerClasses",i.join(" "))}getSlideClasses(e){const i=this;return i.destroyed?"":e.className.split(" ").filter(r=>r.indexOf("swiper-slide")===0||r.indexOf(i.params.slideClass)===0).join(" ")}emitSlidesClasses(){const e=this;if(!e.params._emitClasses||!e.el)return;const i=[];e.slides.forEach(r=>{const n=e.getSlideClasses(r);i.push({slideEl:r,classNames:n}),e.emit("_slideClass",r,n)}),e.emit("_slideClasses",i)}slidesPerViewDynamic(e,i){e===void 0&&(e="current"),i===void 0&&(i=!1);const r=this,{params:n,slides:s,slidesGrid:a,slidesSizesGrid:o,size:l,activeIndex:u}=r;let d=1;if(typeof n.slidesPerView=="number")return n.slidesPerView;if(n.centeredSlides){let c=s[u]?Math.ceil(s[u].swiperSlideSize):0,f;for(let m=u+1;m<s.length;m+=1)s[m]&&!f&&(c+=Math.ceil(s[m].swiperSlideSize),d+=1,c>l&&(f=!0));for(let m=u-1;m>=0;m-=1)s[m]&&!f&&(c+=s[m].swiperSlideSize,d+=1,c>l&&(f=!0))}else if(e==="current")for(let c=u+1;c<s.length;c+=1)(i?a[c]+o[c]-a[u]<l:a[c]-a[u]<l)&&(d+=1);else for(let c=u-1;c>=0;c-=1)a[u]-a[c]<l&&(d+=1);return d}update(){const e=this;if(!e||e.destroyed)return;const{snapGrid:i,params:r}=e;r.breakpoints&&e.setBreakpoint(),[...e.el.querySelectorAll('[loading="lazy"]')].forEach(a=>{a.complete&&Ot(e,a)}),e.updateSize(),e.updateSlides(),e.updateProgress(),e.updateSlidesClasses();function n(){const a=e.rtlTranslate?e.translate*-1:e.translate,o=Math.min(Math.max(a,e.maxTranslate()),e.minTranslate());e.setTranslate(o),e.updateActiveIndex(),e.updateSlidesClasses()}let s;if(r.freeMode&&r.freeMode.enabled&&!r.cssMode)n(),r.autoHeight&&e.updateAutoHeight();else{if((r.slidesPerView==="auto"||r.slidesPerView>1)&&e.isEnd&&!r.centeredSlides){const a=e.virtual&&r.virtual.enabled?e.virtual.slides:e.slides;s=e.slideTo(a.length-1,0,!1,!0)}else s=e.slideTo(e.activeIndex,0,!1,!0);s||n()}r.watchOverflow&&i!==e.snapGrid&&e.checkOverflow(),e.emit("update")}changeDirection(e,i){i===void 0&&(i=!0);const r=this,n=r.params.direction;return e||(e=n==="horizontal"?"vertical":"horizontal"),e===n||e!=="horizontal"&&e!=="vertical"||(r.el.classList.remove(`${r.params.containerModifierClass}${n}`),r.el.classList.add(`${r.params.containerModifierClass}${e}`),r.emitContainerClasses(),r.params.direction=e,r.slides.forEach(s=>{e==="vertical"?s.style.width="":s.style.height=""}),r.emit("changeDirection"),i&&r.update()),r}changeLanguageDirection(e){const i=this;i.rtl&&e==="rtl"||!i.rtl&&e==="ltr"||(i.rtl=e==="rtl",i.rtlTranslate=i.params.direction==="horizontal"&&i.rtl,i.rtl?(i.el.classList.add(`${i.params.containerModifierClass}rtl`),i.el.dir="rtl"):(i.el.classList.remove(`${i.params.containerModifierClass}rtl`),i.el.dir="ltr"),i.update())}mount(e){const i=this;if(i.mounted)return!0;let r=e||i.params.el;if(typeof r=="string"&&(r=document.querySelector(r)),!r)return!1;r.swiper=i,r.parentNode&&r.parentNode.host&&r.parentNode.host.nodeName===i.params.swiperElementNodeName.toUpperCase()&&(i.isElement=!0);const n=()=>`.${(i.params.wrapperClass||"").trim().split(" ").join(".")}`;let a=r&&r.shadowRoot&&r.shadowRoot.querySelector?r.shadowRoot.querySelector(n()):K(r,n())[0];return!a&&i.params.createElements&&(a=ie("div",i.params.wrapperClass),r.append(a),K(r,`.${i.params.slideClass}`).forEach(o=>{a.append(o)})),Object.assign(i,{el:r,wrapperEl:a,slidesEl:i.isElement&&!r.parentNode.host.slideSlots?r.parentNode.host:a,hostEl:i.isElement?r.parentNode.host:r,mounted:!0,rtl:r.dir.toLowerCase()==="rtl"||be(r,"direction")==="rtl",rtlTranslate:i.params.direction==="horizontal"&&(r.dir.toLowerCase()==="rtl"||be(r,"direction")==="rtl"),wrongRTL:be(a,"display")==="-webkit-box"}),!0}init(e){const i=this;if(i.initialized||i.mount(e)===!1)return i;i.emit("beforeInit"),i.params.breakpoints&&i.setBreakpoint(),i.addClasses(),i.updateSize(),i.updateSlides(),i.params.watchOverflow&&i.checkOverflow(),i.params.grabCursor&&i.enabled&&i.setGrabCursor(),i.params.loop&&i.virtual&&i.params.virtual.enabled?i.slideTo(i.params.initialSlide+i.virtual.slidesBefore,0,i.params.runCallbacksOnInit,!1,!0):i.slideTo(i.params.initialSlide,0,i.params.runCallbacksOnInit,!1,!0),i.params.loop&&i.loopCreate(),i.attachEvents();const n=[...i.el.querySelectorAll('[loading="lazy"]')];return i.isElement&&n.push(...i.hostEl.querySelectorAll('[loading="lazy"]')),n.forEach(s=>{s.complete?Ot(i,s):s.addEventListener("load",a=>{Ot(i,a.target)})}),Bi(i),i.initialized=!0,Bi(i),i.emit("init"),i.emit("afterInit"),i}destroy(e,i){e===void 0&&(e=!0),i===void 0&&(i=!0);const r=this,{params:n,el:s,wrapperEl:a,slides:o}=r;return typeof r.params>"u"||r.destroyed||(r.emit("beforeDestroy"),r.initialized=!1,r.detachEvents(),n.loop&&r.loopDestroy(),i&&(r.removeClasses(),s&&typeof s!="string"&&s.removeAttribute("style"),a&&a.removeAttribute("style"),o&&o.length&&o.forEach(l=>{l.classList.remove(n.slideVisibleClass,n.slideFullyVisibleClass,n.slideActiveClass,n.slideNextClass,n.slidePrevClass),l.removeAttribute("style"),l.removeAttribute("data-swiper-slide-index")})),r.emit("destroy"),Object.keys(r.eventsListeners).forEach(l=>{r.off(l)}),e!==!1&&(r.el&&typeof r.el!="string"&&(r.el.swiper=null),qo(r)),r.destroyed=!0),null}static extendDefaults(e){te(yi,e)}static get extendedDefaults(){return yi}static get defaults(){return Nr}static installModule(e){Q.prototype.__modules__||(Q.prototype.__modules__=[]);const i=Q.prototype.__modules__;typeof e=="function"&&i.indexOf(e)<0&&i.push(e)}static use(e){return Array.isArray(e)?(e.forEach(i=>Q.installModule(i)),Q):(Q.installModule(e),Q)}}Object.keys(bi).forEach(t=>{Object.keys(bi[t]).forEach(e=>{Q.prototype[e]=bi[t][e]})});Q.use([il,rl]);function lc(t){let{swiper:e,extendParams:i,on:r,emit:n}=t;i({virtual:{enabled:!1,slides:[],cache:!0,renderSlide:null,renderExternal:null,renderExternalUpdate:!0,addSlidesBefore:0,addSlidesAfter:0}});let s;const a=J();e.virtual={cache:{},from:void 0,to:void 0,slides:[],offset:0,slidesGrid:[]};const o=a.createElement("div");function l(g,v){const h=e.params.virtual;if(h.cache&&e.virtual.cache[v])return e.virtual.cache[v];let p;return h.renderSlide?(p=h.renderSlide.call(e,g,v),typeof p=="string"&&(o.innerHTML=p,p=o.children[0])):e.isElement?p=ie("swiper-slide"):p=ie("div",e.params.slideClass),p.setAttribute("data-swiper-slide-index",v),h.renderSlide||(p.innerHTML=g),h.cache&&(e.virtual.cache[v]=p),p}function u(g,v){const{slidesPerView:h,slidesPerGroup:p,centeredSlides:b,loop:w,initialSlide:y}=e.params;if(v&&!w&&y>0)return;const{addSlidesBefore:E,addSlidesAfter:x}=e.params.virtual,{from:A,to:S,slides:P,slidesGrid:C,offset:O}=e.virtual;e.params.cssMode||e.updateActiveIndex();const T=e.activeIndex||0;let _;e.rtlTranslate?_="right":_=e.isHorizontal()?"left":"top";let M,D;b?(M=Math.floor(h/2)+p+x,D=Math.floor(h/2)+p+E):(M=h+(p-1)+x,D=(w?h:p)+E);let k=T-D,L=T+M;w||(k=Math.max(k,0),L=Math.min(L,P.length-1));let I=(e.slidesGrid[k]||0)-(e.slidesGrid[0]||0);w&&T>=D?(k-=D,b||(I+=e.slidesGrid[0])):w&&T<D&&(k=-D,b&&(I+=e.slidesGrid[0])),Object.assign(e.virtual,{from:k,to:L,offset:I,slidesGrid:e.slidesGrid,slidesBefore:D,slidesAfter:M});function R(){e.updateSlides(),e.updateProgress(),e.updateSlidesClasses(),n("virtualUpdate")}if(A===k&&S===L&&!g){e.slidesGrid!==C&&I!==O&&e.slides.forEach(N=>{N.style[_]=`${I-Math.abs(e.cssOverflowAdjustment())}px`}),e.updateProgress(),n("virtualUpdate");return}if(e.params.virtual.renderExternal){e.params.virtual.renderExternal.call(e,{offset:I,from:k,to:L,slides:function(){const G=[];for(let Z=k;Z<=L;Z+=1)G.push(P[Z]);return G}()}),e.params.virtual.renderExternalUpdate?R():n("virtualUpdate");return}const B=[],$=[],z=N=>{let G=N;return N<0?G=P.length+N:G>=P.length&&(G=G-P.length),G};if(g)e.slides.filter(N=>N.matches(`.${e.params.slideClass}, swiper-slide`)).forEach(N=>{N.remove()});else for(let N=A;N<=S;N+=1)if(N<k||N>L){const G=z(N);e.slides.filter(Z=>Z.matches(`.${e.params.slideClass}[data-swiper-slide-index="${G}"], swiper-slide[data-swiper-slide-index="${G}"]`)).forEach(Z=>{Z.remove()})}const F=w?-P.length:0,V=w?P.length*2:P.length;for(let N=F;N<V;N+=1)if(N>=k&&N<=L){const G=z(N);typeof S>"u"||g?$.push(G):(N>S&&$.push(G),N<A&&B.push(G))}if($.forEach(N=>{e.slidesEl.append(l(P[N],N))}),w)for(let N=B.length-1;N>=0;N-=1){const G=B[N];e.slidesEl.prepend(l(P[G],G))}else B.sort((N,G)=>G-N),B.forEach(N=>{e.slidesEl.prepend(l(P[N],N))});K(e.slidesEl,".swiper-slide, swiper-slide").forEach(N=>{N.style[_]=`${I-Math.abs(e.cssOverflowAdjustment())}px`}),R()}function d(g){if(typeof g=="object"&&"length"in g)for(let v=0;v<g.length;v+=1)g[v]&&e.virtual.slides.push(g[v]);else e.virtual.slides.push(g);u(!0)}function c(g){const v=e.activeIndex;let h=v+1,p=1;if(Array.isArray(g)){for(let b=0;b<g.length;b+=1)g[b]&&e.virtual.slides.unshift(g[b]);h=v+g.length,p=g.length}else e.virtual.slides.unshift(g);if(e.params.virtual.cache){const b=e.virtual.cache,w={};Object.keys(b).forEach(y=>{const E=b[y],x=E.getAttribute("data-swiper-slide-index");x&&E.setAttribute("data-swiper-slide-index",parseInt(x,10)+p),w[parseInt(y,10)+p]=E}),e.virtual.cache=w}u(!0),e.slideTo(h,0)}function f(g){if(typeof g>"u"||g===null)return;let v=e.activeIndex;if(Array.isArray(g))for(let h=g.length-1;h>=0;h-=1)e.params.virtual.cache&&(delete e.virtual.cache[g[h]],Object.keys(e.virtual.cache).forEach(p=>{p>g&&(e.virtual.cache[p-1]=e.virtual.cache[p],e.virtual.cache[p-1].setAttribute("data-swiper-slide-index",p-1),delete e.virtual.cache[p])})),e.virtual.slides.splice(g[h],1),g[h]<v&&(v-=1),v=Math.max(v,0);else e.params.virtual.cache&&(delete e.virtual.cache[g],Object.keys(e.virtual.cache).forEach(h=>{h>g&&(e.virtual.cache[h-1]=e.virtual.cache[h],e.virtual.cache[h-1].setAttribute("data-swiper-slide-index",h-1),delete e.virtual.cache[h])})),e.virtual.slides.splice(g,1),g<v&&(v-=1),v=Math.max(v,0);u(!0),e.slideTo(v,0)}function m(){e.virtual.slides=[],e.params.virtual.cache&&(e.virtual.cache={}),u(!0),e.slideTo(0,0)}r("beforeInit",()=>{if(!e.params.virtual.enabled)return;let g;if(typeof e.passedParams.virtual.slides>"u"){const v=[...e.slidesEl.children].filter(h=>h.matches(`.${e.params.slideClass}, swiper-slide`));v&&v.length&&(e.virtual.slides=[...v],g=!0,v.forEach((h,p)=>{h.setAttribute("data-swiper-slide-index",p),e.virtual.cache[p]=h,h.remove()}))}g||(e.virtual.slides=e.params.virtual.slides),e.classNames.push(`${e.params.containerModifierClass}virtual`),e.params.watchSlidesProgress=!0,e.originalParams.watchSlidesProgress=!0,u(!1,!0)}),r("setTranslate",()=>{e.params.virtual.enabled&&(e.params.cssMode&&!e._immediateVirtual?(clearTimeout(s),s=setTimeout(()=>{u()},100)):u())}),r("init update resize",()=>{e.params.virtual.enabled&&e.params.cssMode&&at(e.wrapperEl,"--swiper-virtual-size",`${e.virtualSize}px`)}),Object.assign(e.virtual,{appendSlide:d,prependSlide:c,removeSlide:f,removeAllSlides:m,update:u})}function cc(t){let{swiper:e,extendParams:i,on:r,emit:n}=t;const s=J(),a=W();e.keyboard={enabled:!1},i({keyboard:{enabled:!1,onlyInViewport:!0,pageUpDown:!0}});function o(d){if(!e.enabled)return;const{rtlTranslate:c}=e;let f=d;f.originalEvent&&(f=f.originalEvent);const m=f.keyCode||f.charCode,g=e.params.keyboard.pageUpDown,v=g&&m===33,h=g&&m===34,p=m===37,b=m===39,w=m===38,y=m===40;if(!e.allowSlideNext&&(e.isHorizontal()&&b||e.isVertical()&&y||h)||!e.allowSlidePrev&&(e.isHorizontal()&&p||e.isVertical()&&w||v))return!1;if(!(f.shiftKey||f.altKey||f.ctrlKey||f.metaKey)&&!(s.activeElement&&s.activeElement.nodeName&&(s.activeElement.nodeName.toLowerCase()==="input"||s.activeElement.nodeName.toLowerCase()==="textarea"))){if(e.params.keyboard.onlyInViewport&&(v||h||p||b||w||y)){let E=!1;if(De(e.el,`.${e.params.slideClass}, swiper-slide`).length>0&&De(e.el,`.${e.params.slideActiveClass}`).length===0)return;const x=e.el,A=x.clientWidth,S=x.clientHeight,P=a.innerWidth,C=a.innerHeight,O=Nt(x);c&&(O.left-=x.scrollLeft);const T=[[O.left,O.top],[O.left+A,O.top],[O.left,O.top+S],[O.left+A,O.top+S]];for(let _=0;_<T.length;_+=1){const M=T[_];if(M[0]>=0&&M[0]<=P&&M[1]>=0&&M[1]<=C){if(M[0]===0&&M[1]===0)continue;E=!0}}if(!E)return}e.isHorizontal()?((v||h||p||b)&&(f.preventDefault?f.preventDefault():f.returnValue=!1),((h||b)&&!c||(v||p)&&c)&&e.slideNext(),((v||p)&&!c||(h||b)&&c)&&e.slidePrev()):((v||h||w||y)&&(f.preventDefault?f.preventDefault():f.returnValue=!1),(h||y)&&e.slideNext(),(v||w)&&e.slidePrev()),n("keyPress",m)}}function l(){e.keyboard.enabled||(s.addEventListener("keydown",o),e.keyboard.enabled=!0)}function u(){e.keyboard.enabled&&(s.removeEventListener("keydown",o),e.keyboard.enabled=!1)}r("init",()=>{e.params.keyboard.enabled&&l()}),r("destroy",()=>{e.keyboard.enabled&&u()}),Object.assign(e.keyboard,{enable:l,disable:u})}function dc(t){let{swiper:e,extendParams:i,on:r,emit:n}=t;const s=W();i({mousewheel:{enabled:!1,releaseOnEdges:!1,invert:!1,forceToAxis:!1,sensitivity:1,eventsTarget:"container",thresholdDelta:null,thresholdTime:null,noMousewheelClass:"swiper-no-mousewheel"}}),e.mousewheel={enabled:!1};let a,o=ne(),l;const u=[];function d(w){let A=0,S=0,P=0,C=0;return"detail"in w&&(S=w.detail),"wheelDelta"in w&&(S=-w.wheelDelta/120),"wheelDeltaY"in w&&(S=-w.wheelDeltaY/120),"wheelDeltaX"in w&&(A=-w.wheelDeltaX/120),"axis"in w&&w.axis===w.HORIZONTAL_AXIS&&(A=S,S=0),P=A*10,C=S*10,"deltaY"in w&&(C=w.deltaY),"deltaX"in w&&(P=w.deltaX),w.shiftKey&&!P&&(P=C,C=0),(P||C)&&w.deltaMode&&(w.deltaMode===1?(P*=40,C*=40):(P*=800,C*=800)),P&&!A&&(A=P<1?-1:1),C&&!S&&(S=C<1?-1:1),{spinX:A,spinY:S,pixelX:P,pixelY:C}}function c(){e.enabled&&(e.mouseEntered=!0)}function f(){e.enabled&&(e.mouseEntered=!1)}function m(w){return e.params.mousewheel.thresholdDelta&&w.delta<e.params.mousewheel.thresholdDelta||e.params.mousewheel.thresholdTime&&ne()-o<e.params.mousewheel.thresholdTime?!1:w.delta>=6&&ne()-o<60?!0:(w.direction<0?(!e.isEnd||e.params.loop)&&!e.animating&&(e.slideNext(),n("scroll",w.raw)):(!e.isBeginning||e.params.loop)&&!e.animating&&(e.slidePrev(),n("scroll",w.raw)),o=new s.Date().getTime(),!1)}function g(w){const y=e.params.mousewheel;if(w.direction<0){if(e.isEnd&&!e.params.loop&&y.releaseOnEdges)return!0}else if(e.isBeginning&&!e.params.loop&&y.releaseOnEdges)return!0;return!1}function v(w){let y=w,E=!0;if(!e.enabled||w.target.closest(`.${e.params.mousewheel.noMousewheelClass}`))return;const x=e.params.mousewheel;e.params.cssMode&&y.preventDefault();let A=e.el;e.params.mousewheel.eventsTarget!=="container"&&(A=document.querySelector(e.params.mousewheel.eventsTarget));const S=A&&A.contains(y.target);if(!e.mouseEntered&&!S&&!x.releaseOnEdges)return!0;y.originalEvent&&(y=y.originalEvent);let P=0;const C=e.rtlTranslate?-1:1,O=d(y);if(x.forceToAxis)if(e.isHorizontal())if(Math.abs(O.pixelX)>Math.abs(O.pixelY))P=-O.pixelX*C;else return!0;else if(Math.abs(O.pixelY)>Math.abs(O.pixelX))P=-O.pixelY;else return!0;else P=Math.abs(O.pixelX)>Math.abs(O.pixelY)?-O.pixelX*C:-O.pixelY;if(P===0)return!0;x.invert&&(P=-P);let T=e.getTranslate()+P*x.sensitivity;if(T>=e.minTranslate()&&(T=e.minTranslate()),T<=e.maxTranslate()&&(T=e.maxTranslate()),E=e.params.loop?!0:!(T===e.minTranslate()||T===e.maxTranslate()),E&&e.params.nested&&y.stopPropagation(),!e.params.freeMode||!e.params.freeMode.enabled){const _={time:ne(),delta:Math.abs(P),direction:Math.sign(P),raw:w};u.length>=2&&u.shift();const M=u.length?u[u.length-1]:void 0;if(u.push(_),M?(_.direction!==M.direction||_.delta>M.delta||_.time>M.time+150)&&m(_):m(_),g(_))return!0}else{const _={time:ne(),delta:Math.abs(P),direction:Math.sign(P)},M=l&&_.time<l.time+500&&_.delta<=l.delta&&_.direction===l.direction;if(!M){l=void 0;let D=e.getTranslate()+P*x.sensitivity;const k=e.isBeginning,L=e.isEnd;if(D>=e.minTranslate()&&(D=e.minTranslate()),D<=e.maxTranslate()&&(D=e.maxTranslate()),e.setTransition(0),e.setTranslate(D),e.updateProgress(),e.updateActiveIndex(),e.updateSlidesClasses(),(!k&&e.isBeginning||!L&&e.isEnd)&&e.updateSlidesClasses(),e.params.loop&&e.loopFix({direction:_.direction<0?"next":"prev",byMousewheel:!0}),e.params.freeMode.sticky){clearTimeout(a),a=void 0,u.length>=15&&u.shift();const I=u.length?u[u.length-1]:void 0,R=u[0];if(u.push(_),I&&(_.delta>I.delta||_.direction!==I.direction))u.splice(0);else if(u.length>=15&&_.time-R.time<500&&R.delta-_.delta>=1&&_.delta<=6){const B=P>0?.8:.2;l=_,u.splice(0),a=ze(()=>{e.slideToClosest(e.params.speed,!0,void 0,B)},0)}a||(a=ze(()=>{l=_,u.splice(0),e.slideToClosest(e.params.speed,!0,void 0,.5)},500))}if(M||n("scroll",y),e.params.autoplay&&e.params.autoplayDisableOnInteraction&&e.autoplay.stop(),x.releaseOnEdges&&(D===e.minTranslate()||D===e.maxTranslate()))return!0}}return y.preventDefault?y.preventDefault():y.returnValue=!1,!1}function h(w){let y=e.el;e.params.mousewheel.eventsTarget!=="container"&&(y=document.querySelector(e.params.mousewheel.eventsTarget)),y[w]("mouseenter",c),y[w]("mouseleave",f),y[w]("wheel",v)}function p(){return e.params.cssMode?(e.wrapperEl.removeEventListener("wheel",v),!0):e.mousewheel.enabled?!1:(h("addEventListener"),e.mousewheel.enabled=!0,!0)}function b(){return e.params.cssMode?(e.wrapperEl.addEventListener(event,v),!0):e.mousewheel.enabled?(h("removeEventListener"),e.mousewheel.enabled=!1,!0):!1}r("init",()=>{!e.params.mousewheel.enabled&&e.params.cssMode&&b(),e.params.mousewheel.enabled&&p()}),r("destroy",()=>{e.params.cssMode&&p(),e.mousewheel.enabled&&b()}),Object.assign(e.mousewheel,{enable:p,disable:b})}function ur(t,e,i,r){return t.params.createElements&&Object.keys(r).forEach(n=>{if(!i[n]&&i.auto===!0){let s=K(t.el,`.${r[n]}`)[0];s||(s=ie("div",r[n]),s.className=r[n],t.el.append(s)),i[n]=s,e[n]=s}}),i}function uc(t){let{swiper:e,extendParams:i,on:r,emit:n}=t;i({navigation:{nextEl:null,prevEl:null,hideOnClick:!1,disabledClass:"swiper-button-disabled",hiddenClass:"swiper-button-hidden",lockClass:"swiper-button-lock",navigationDisabledClass:"swiper-navigation-disabled"}}),e.navigation={nextEl:null,prevEl:null};function s(g){let v;return g&&typeof g=="string"&&e.isElement&&(v=e.el.querySelector(g),v)?v:(g&&(typeof g=="string"&&(v=[...document.querySelectorAll(g)]),e.params.uniqueNavElements&&typeof g=="string"&&v&&v.length>1&&e.el.querySelectorAll(g).length===1?v=e.el.querySelector(g):v&&v.length===1&&(v=v[0])),g&&!v?g:v)}function a(g,v){const h=e.params.navigation;g=H(g),g.forEach(p=>{p&&(p.classList[v?"add":"remove"](...h.disabledClass.split(" ")),p.tagName==="BUTTON"&&(p.disabled=v),e.params.watchOverflow&&e.enabled&&p.classList[e.isLocked?"add":"remove"](h.lockClass))})}function o(){const{nextEl:g,prevEl:v}=e.navigation;if(e.params.loop){a(v,!1),a(g,!1);return}a(v,e.isBeginning&&!e.params.rewind),a(g,e.isEnd&&!e.params.rewind)}function l(g){g.preventDefault(),!(e.isBeginning&&!e.params.loop&&!e.params.rewind)&&(e.slidePrev(),n("navigationPrev"))}function u(g){g.preventDefault(),!(e.isEnd&&!e.params.loop&&!e.params.rewind)&&(e.slideNext(),n("navigationNext"))}function d(){const g=e.params.navigation;if(e.params.navigation=ur(e,e.originalParams.navigation,e.params.navigation,{nextEl:"swiper-button-next",prevEl:"swiper-button-prev"}),!(g.nextEl||g.prevEl))return;let v=s(g.nextEl),h=s(g.prevEl);Object.assign(e.navigation,{nextEl:v,prevEl:h}),v=H(v),h=H(h);const p=(b,w)=>{b&&b.addEventListener("click",w==="next"?u:l),!e.enabled&&b&&b.classList.add(...g.lockClass.split(" "))};v.forEach(b=>p(b,"next")),h.forEach(b=>p(b,"prev"))}function c(){let{nextEl:g,prevEl:v}=e.navigation;g=H(g),v=H(v);const h=(p,b)=>{p.removeEventListener("click",b==="next"?u:l),p.classList.remove(...e.params.navigation.disabledClass.split(" "))};g.forEach(p=>h(p,"next")),v.forEach(p=>h(p,"prev"))}r("init",()=>{e.params.navigation.enabled===!1?m():(d(),o())}),r("toEdge fromEdge lock unlock",()=>{o()}),r("destroy",()=>{c()}),r("enable disable",()=>{let{nextEl:g,prevEl:v}=e.navigation;if(g=H(g),v=H(v),e.enabled){o();return}[...g,...v].filter(h=>!!h).forEach(h=>h.classList.add(e.params.navigation.lockClass))}),r("click",(g,v)=>{let{nextEl:h,prevEl:p}=e.navigation;h=H(h),p=H(p);const b=v.target;let w=p.includes(b)||h.includes(b);if(e.isElement&&!w){const y=v.path||v.composedPath&&v.composedPath();y&&(w=y.find(E=>h.includes(E)||p.includes(E)))}if(e.params.navigation.hideOnClick&&!w){if(e.pagination&&e.params.pagination&&e.params.pagination.clickable&&(e.pagination.el===b||e.pagination.el.contains(b)))return;let y;h.length?y=h[0].classList.contains(e.params.navigation.hiddenClass):p.length&&(y=p[0].classList.contains(e.params.navigation.hiddenClass)),n(y===!0?"navigationShow":"navigationHide"),[...h,...p].filter(E=>!!E).forEach(E=>E.classList.toggle(e.params.navigation.hiddenClass))}});const f=()=>{e.el.classList.remove(...e.params.navigation.navigationDisabledClass.split(" ")),d(),o()},m=()=>{e.el.classList.add(...e.params.navigation.navigationDisabledClass.split(" ")),c()};Object.assign(e.navigation,{enable:f,disable:m,update:o,init:d,destroy:c})}function pe(t){return t===void 0&&(t=""),`.${t.trim().replace(/([\.:!+\/])/g,"\\$1").replace(/ /g,".")}`}function fc(t){let{swiper:e,extendParams:i,on:r,emit:n}=t;const s="swiper-pagination";i({pagination:{el:null,bulletElement:"span",clickable:!1,hideOnClick:!1,renderBullet:null,renderProgressbar:null,renderFraction:null,renderCustom:null,progressbarOpposite:!1,type:"bullets",dynamicBullets:!1,dynamicMainBullets:1,formatFractionCurrent:p=>p,formatFractionTotal:p=>p,bulletClass:`${s}-bullet`,bulletActiveClass:`${s}-bullet-active`,modifierClass:`${s}-`,currentClass:`${s}-current`,totalClass:`${s}-total`,hiddenClass:`${s}-hidden`,progressbarFillClass:`${s}-progressbar-fill`,progressbarOppositeClass:`${s}-progressbar-opposite`,clickableClass:`${s}-clickable`,lockClass:`${s}-lock`,horizontalClass:`${s}-horizontal`,verticalClass:`${s}-vertical`,paginationDisabledClass:`${s}-disabled`}}),e.pagination={el:null,bullets:[]};let a,o=0;function l(){return!e.params.pagination.el||!e.pagination.el||Array.isArray(e.pagination.el)&&e.pagination.el.length===0}function u(p,b){const{bulletActiveClass:w}=e.params.pagination;p&&(p=p[`${b==="prev"?"previous":"next"}ElementSibling`],p&&(p.classList.add(`${w}-${b}`),p=p[`${b==="prev"?"previous":"next"}ElementSibling`],p&&p.classList.add(`${w}-${b}-${b}`)))}function d(p){const b=p.target.closest(pe(e.params.pagination.bulletClass));if(!b)return;p.preventDefault();const w=ut(b)*e.params.slidesPerGroup;if(e.params.loop){if(e.realIndex===w)return;e.slideToLoop(w)}else e.slideTo(w)}function c(){const p=e.rtl,b=e.params.pagination;if(l())return;let w=e.pagination.el;w=H(w);let y,E;const x=e.virtual&&e.params.virtual.enabled?e.virtual.slides.length:e.slides.length,A=e.params.loop?Math.ceil(x/e.params.slidesPerGroup):e.snapGrid.length;if(e.params.loop?(E=e.previousRealIndex||0,y=e.params.slidesPerGroup>1?Math.floor(e.realIndex/e.params.slidesPerGroup):e.realIndex):typeof e.snapIndex<"u"?(y=e.snapIndex,E=e.previousSnapIndex):(E=e.previousIndex||0,y=e.activeIndex||0),b.type==="bullets"&&e.pagination.bullets&&e.pagination.bullets.length>0){const S=e.pagination.bullets;let P,C,O;if(b.dynamicBullets&&(a=Ni(S[0],e.isHorizontal()?"width":"height"),w.forEach(T=>{T.style[e.isHorizontal()?"width":"height"]=`${a*(b.dynamicMainBullets+4)}px`}),b.dynamicMainBullets>1&&E!==void 0&&(o+=y-(E||0),o>b.dynamicMainBullets-1?o=b.dynamicMainBullets-1:o<0&&(o=0)),P=Math.max(y-o,0),C=P+(Math.min(S.length,b.dynamicMainBullets)-1),O=(C+P)/2),S.forEach(T=>{const _=[...["","-next","-next-next","-prev","-prev-prev","-main"].map(M=>`${b.bulletActiveClass}${M}`)].map(M=>typeof M=="string"&&M.includes(" ")?M.split(" "):M).flat();T.classList.remove(..._)}),w.length>1)S.forEach(T=>{const _=ut(T);_===y?T.classList.add(...b.bulletActiveClass.split(" ")):e.isElement&&T.setAttribute("part","bullet"),b.dynamicBullets&&(_>=P&&_<=C&&T.classList.add(...`${b.bulletActiveClass}-main`.split(" ")),_===P&&u(T,"prev"),_===C&&u(T,"next"))});else{const T=S[y];if(T&&T.classList.add(...b.bulletActiveClass.split(" ")),e.isElement&&S.forEach((_,M)=>{_.setAttribute("part",M===y?"bullet-active":"bullet")}),b.dynamicBullets){const _=S[P],M=S[C];for(let D=P;D<=C;D+=1)S[D]&&S[D].classList.add(...`${b.bulletActiveClass}-main`.split(" "));u(_,"prev"),u(M,"next")}}if(b.dynamicBullets){const T=Math.min(S.length,b.dynamicMainBullets+4),_=(a*T-a)/2-O*a,M=p?"right":"left";S.forEach(D=>{D.style[e.isHorizontal()?M:"top"]=`${_}px`})}}w.forEach((S,P)=>{if(b.type==="fraction"&&(S.querySelectorAll(pe(b.currentClass)).forEach(C=>{C.textContent=b.formatFractionCurrent(y+1)}),S.querySelectorAll(pe(b.totalClass)).forEach(C=>{C.textContent=b.formatFractionTotal(A)})),b.type==="progressbar"){let C;b.progressbarOpposite?C=e.isHorizontal()?"vertical":"horizontal":C=e.isHorizontal()?"horizontal":"vertical";const O=(y+1)/A;let T=1,_=1;C==="horizontal"?T=O:_=O,S.querySelectorAll(pe(b.progressbarFillClass)).forEach(M=>{M.style.transform=`translate3d(0,0,0) scaleX(${T}) scaleY(${_})`,M.style.transitionDuration=`${e.params.speed}ms`})}b.type==="custom"&&b.renderCustom?(S.innerHTML=b.renderCustom(e,y+1,A),P===0&&n("paginationRender",S)):(P===0&&n("paginationRender",S),n("paginationUpdate",S)),e.params.watchOverflow&&e.enabled&&S.classList[e.isLocked?"add":"remove"](b.lockClass)})}function f(){const p=e.params.pagination;if(l())return;const b=e.virtual&&e.params.virtual.enabled?e.virtual.slides.length:e.grid&&e.params.grid.rows>1?e.slides.length/Math.ceil(e.params.grid.rows):e.slides.length;let w=e.pagination.el;w=H(w);let y="";if(p.type==="bullets"){let E=e.params.loop?Math.ceil(b/e.params.slidesPerGroup):e.snapGrid.length;e.params.freeMode&&e.params.freeMode.enabled&&E>b&&(E=b);for(let x=0;x<E;x+=1)p.renderBullet?y+=p.renderBullet.call(e,x,p.bulletClass):y+=`<${p.bulletElement} ${e.isElement?'part="bullet"':""} class="${p.bulletClass}"></${p.bulletElement}>`}p.type==="fraction"&&(p.renderFraction?y=p.renderFraction.call(e,p.currentClass,p.totalClass):y=`<span class="${p.currentClass}"></span> / <span class="${p.totalClass}"></span>`),p.type==="progressbar"&&(p.renderProgressbar?y=p.renderProgressbar.call(e,p.progressbarFillClass):y=`<span class="${p.progressbarFillClass}"></span>`),e.pagination.bullets=[],w.forEach(E=>{p.type!=="custom"&&(E.innerHTML=y||""),p.type==="bullets"&&e.pagination.bullets.push(...E.querySelectorAll(pe(p.bulletClass)))}),p.type!=="custom"&&n("paginationRender",w[0])}function m(){e.params.pagination=ur(e,e.originalParams.pagination,e.params.pagination,{el:"swiper-pagination"});const p=e.params.pagination;if(!p.el)return;let b;typeof p.el=="string"&&e.isElement&&(b=e.el.querySelector(p.el)),!b&&typeof p.el=="string"&&(b=[...document.querySelectorAll(p.el)]),b||(b=p.el),!(!b||b.length===0)&&(e.params.uniqueNavElements&&typeof p.el=="string"&&Array.isArray(b)&&b.length>1&&(b=[...e.el.querySelectorAll(p.el)],b.length>1&&(b=b.filter(w=>De(w,".swiper")[0]===e.el)[0])),Array.isArray(b)&&b.length===1&&(b=b[0]),Object.assign(e.pagination,{el:b}),b=H(b),b.forEach(w=>{p.type==="bullets"&&p.clickable&&w.classList.add(...(p.clickableClass||"").split(" ")),w.classList.add(p.modifierClass+p.type),w.classList.add(e.isHorizontal()?p.horizontalClass:p.verticalClass),p.type==="bullets"&&p.dynamicBullets&&(w.classList.add(`${p.modifierClass}${p.type}-dynamic`),o=0,p.dynamicMainBullets<1&&(p.dynamicMainBullets=1)),p.type==="progressbar"&&p.progressbarOpposite&&w.classList.add(p.progressbarOppositeClass),p.clickable&&w.addEventListener("click",d),e.enabled||w.classList.add(p.lockClass)}))}function g(){const p=e.params.pagination;if(l())return;let b=e.pagination.el;b&&(b=H(b),b.forEach(w=>{w.classList.remove(p.hiddenClass),w.classList.remove(p.modifierClass+p.type),w.classList.remove(e.isHorizontal()?p.horizontalClass:p.verticalClass),p.clickable&&(w.classList.remove(...(p.clickableClass||"").split(" ")),w.removeEventListener("click",d))})),e.pagination.bullets&&e.pagination.bullets.forEach(w=>w.classList.remove(...p.bulletActiveClass.split(" ")))}r("changeDirection",()=>{if(!e.pagination||!e.pagination.el)return;const p=e.params.pagination;let{el:b}=e.pagination;b=H(b),b.forEach(w=>{w.classList.remove(p.horizontalClass,p.verticalClass),w.classList.add(e.isHorizontal()?p.horizontalClass:p.verticalClass)})}),r("init",()=>{e.params.pagination.enabled===!1?h():(m(),f(),c())}),r("activeIndexChange",()=>{typeof e.snapIndex>"u"&&c()}),r("snapIndexChange",()=>{c()}),r("snapGridLengthChange",()=>{f(),c()}),r("destroy",()=>{g()}),r("enable disable",()=>{let{el:p}=e.pagination;p&&(p=H(p),p.forEach(b=>b.classList[e.enabled?"remove":"add"](e.params.pagination.lockClass)))}),r("lock unlock",()=>{c()}),r("click",(p,b)=>{const w=b.target,y=H(e.pagination.el);if(e.params.pagination.el&&e.params.pagination.hideOnClick&&y&&y.length>0&&!w.classList.contains(e.params.pagination.bulletClass)){if(e.navigation&&(e.navigation.nextEl&&w===e.navigation.nextEl||e.navigation.prevEl&&w===e.navigation.prevEl))return;const E=y[0].classList.contains(e.params.pagination.hiddenClass);n(E===!0?"paginationShow":"paginationHide"),y.forEach(x=>x.classList.toggle(e.params.pagination.hiddenClass))}});const v=()=>{e.el.classList.remove(e.params.pagination.paginationDisabledClass);let{el:p}=e.pagination;p&&(p=H(p),p.forEach(b=>b.classList.remove(e.params.pagination.paginationDisabledClass))),m(),f(),c()},h=()=>{e.el.classList.add(e.params.pagination.paginationDisabledClass);let{el:p}=e.pagination;p&&(p=H(p),p.forEach(b=>b.classList.add(e.params.pagination.paginationDisabledClass))),g()};Object.assign(e.pagination,{enable:v,disable:h,render:f,update:c,init:m,destroy:g})}function pc(t){let{swiper:e,extendParams:i,on:r,emit:n}=t;const s=J();let a=!1,o=null,l=null,u,d,c,f;i({scrollbar:{el:null,dragSize:"auto",hide:!1,draggable:!1,snapOnRelease:!0,lockClass:"swiper-scrollbar-lock",dragClass:"swiper-scrollbar-drag",scrollbarDisabledClass:"swiper-scrollbar-disabled",horizontalClass:"swiper-scrollbar-horizontal",verticalClass:"swiper-scrollbar-vertical"}}),e.scrollbar={el:null,dragEl:null};function m(){if(!e.params.scrollbar.el||!e.scrollbar.el)return;const{scrollbar:T,rtlTranslate:_}=e,{dragEl:M,el:D}=T,k=e.params.scrollbar,L=e.params.loop?e.progressLoop:e.progress;let I=d,R=(c-d)*L;_?(R=-R,R>0?(I=d-R,R=0):-R+d>c&&(I=c+R)):R<0?(I=d+R,R=0):R+d>c&&(I=c-R),e.isHorizontal()?(M.style.transform=`translate3d(${R}px, 0, 0)`,M.style.width=`${I}px`):(M.style.transform=`translate3d(0px, ${R}px, 0)`,M.style.height=`${I}px`),k.hide&&(clearTimeout(o),D.style.opacity=1,o=setTimeout(()=>{D.style.opacity=0,D.style.transitionDuration="400ms"},1e3))}function g(T){!e.params.scrollbar.el||!e.scrollbar.el||(e.scrollbar.dragEl.style.transitionDuration=`${T}ms`)}function v(){if(!e.params.scrollbar.el||!e.scrollbar.el)return;const{scrollbar:T}=e,{dragEl:_,el:M}=T;_.style.width="",_.style.height="",c=e.isHorizontal()?M.offsetWidth:M.offsetHeight,f=e.size/(e.virtualSize+e.params.slidesOffsetBefore-(e.params.centeredSlides?e.snapGrid[0]:0)),e.params.scrollbar.dragSize==="auto"?d=c*f:d=parseInt(e.params.scrollbar.dragSize,10),e.isHorizontal()?_.style.width=`${d}px`:_.style.height=`${d}px`,f>=1?M.style.display="none":M.style.display="",e.params.scrollbar.hide&&(M.style.opacity=0),e.params.watchOverflow&&e.enabled&&T.el.classList[e.isLocked?"add":"remove"](e.params.scrollbar.lockClass)}function h(T){return e.isHorizontal()?T.clientX:T.clientY}function p(T){const{scrollbar:_,rtlTranslate:M}=e,{el:D}=_;let k;k=(h(T)-Nt(D)[e.isHorizontal()?"left":"top"]-(u!==null?u:d/2))/(c-d),k=Math.max(Math.min(k,1),0),M&&(k=1-k);const L=e.minTranslate()+(e.maxTranslate()-e.minTranslate())*k;e.updateProgress(L),e.setTranslate(L),e.updateActiveIndex(),e.updateSlidesClasses()}function b(T){const _=e.params.scrollbar,{scrollbar:M,wrapperEl:D}=e,{el:k,dragEl:L}=M;a=!0,u=T.target===L?h(T)-T.target.getBoundingClientRect()[e.isHorizontal()?"left":"top"]:null,T.preventDefault(),T.stopPropagation(),D.style.transitionDuration="100ms",L.style.transitionDuration="100ms",p(T),clearTimeout(l),k.style.transitionDuration="0ms",_.hide&&(k.style.opacity=1),e.params.cssMode&&(e.wrapperEl.style["scroll-snap-type"]="none"),n("scrollbarDragStart",T)}function w(T){const{scrollbar:_,wrapperEl:M}=e,{el:D,dragEl:k}=_;a&&(T.preventDefault&&T.cancelable?T.preventDefault():T.returnValue=!1,p(T),M.style.transitionDuration="0ms",D.style.transitionDuration="0ms",k.style.transitionDuration="0ms",n("scrollbarDragMove",T))}function y(T){const _=e.params.scrollbar,{scrollbar:M,wrapperEl:D}=e,{el:k}=M;a&&(a=!1,e.params.cssMode&&(e.wrapperEl.style["scroll-snap-type"]="",D.style.transitionDuration=""),_.hide&&(clearTimeout(l),l=ze(()=>{k.style.opacity=0,k.style.transitionDuration="400ms"},1e3)),n("scrollbarDragEnd",T),_.snapOnRelease&&e.slideToClosest())}function E(T){const{scrollbar:_,params:M}=e,D=_.el;if(!D)return;const k=D,L=M.passiveListeners?{passive:!1,capture:!1}:!1,I=M.passiveListeners?{passive:!0,capture:!1}:!1;if(!k)return;const R=T==="on"?"addEventListener":"removeEventListener";k[R]("pointerdown",b,L),s[R]("pointermove",w,L),s[R]("pointerup",y,I)}function x(){!e.params.scrollbar.el||!e.scrollbar.el||E("on")}function A(){!e.params.scrollbar.el||!e.scrollbar.el||E("off")}function S(){const{scrollbar:T,el:_}=e;e.params.scrollbar=ur(e,e.originalParams.scrollbar,e.params.scrollbar,{el:"swiper-scrollbar"});const M=e.params.scrollbar;if(!M.el)return;let D;if(typeof M.el=="string"&&e.isElement&&(D=e.el.querySelector(M.el)),!D&&typeof M.el=="string"){if(D=s.querySelectorAll(M.el),!D.length)return}else D||(D=M.el);e.params.uniqueNavElements&&typeof M.el=="string"&&D.length>1&&_.querySelectorAll(M.el).length===1&&(D=_.querySelector(M.el)),D.length>0&&(D=D[0]),D.classList.add(e.isHorizontal()?M.horizontalClass:M.verticalClass);let k;D&&(k=D.querySelector(pe(e.params.scrollbar.dragClass)),k||(k=ie("div",e.params.scrollbar.dragClass),D.append(k))),Object.assign(T,{el:D,dragEl:k}),M.draggable&&x(),D&&D.classList[e.enabled?"remove":"add"](...we(e.params.scrollbar.lockClass))}function P(){const T=e.params.scrollbar,_=e.scrollbar.el;_&&_.classList.remove(...we(e.isHorizontal()?T.horizontalClass:T.verticalClass)),A()}r("changeDirection",()=>{if(!e.scrollbar||!e.scrollbar.el)return;const T=e.params.scrollbar;let{el:_}=e.scrollbar;_=H(_),_.forEach(M=>{M.classList.remove(T.horizontalClass,T.verticalClass),M.classList.add(e.isHorizontal()?T.horizontalClass:T.verticalClass)})}),r("init",()=>{e.params.scrollbar.enabled===!1?O():(S(),v(),m())}),r("update resize observerUpdate lock unlock changeDirection",()=>{v()}),r("setTranslate",()=>{m()}),r("setTransition",(T,_)=>{g(_)}),r("enable disable",()=>{const{el:T}=e.scrollbar;T&&T.classList[e.enabled?"remove":"add"](...we(e.params.scrollbar.lockClass))}),r("destroy",()=>{P()});const C=()=>{e.el.classList.remove(...we(e.params.scrollbar.scrollbarDisabledClass)),e.scrollbar.el&&e.scrollbar.el.classList.remove(...we(e.params.scrollbar.scrollbarDisabledClass)),S(),v(),m()},O=()=>{e.el.classList.add(...we(e.params.scrollbar.scrollbarDisabledClass)),e.scrollbar.el&&e.scrollbar.el.classList.add(...we(e.params.scrollbar.scrollbarDisabledClass)),P()};Object.assign(e.scrollbar,{enable:C,disable:O,updateSize:v,setTranslate:m,init:S,destroy:P})}function mc(t){let{swiper:e,extendParams:i,on:r}=t;i({parallax:{enabled:!1}});const n="[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y], [data-swiper-parallax-opacity], [data-swiper-parallax-scale]",s=(l,u)=>{const{rtl:d}=e,c=d?-1:1,f=l.getAttribute("data-swiper-parallax")||"0";let m=l.getAttribute("data-swiper-parallax-x"),g=l.getAttribute("data-swiper-parallax-y");const v=l.getAttribute("data-swiper-parallax-scale"),h=l.getAttribute("data-swiper-parallax-opacity"),p=l.getAttribute("data-swiper-parallax-rotate");if(m||g?(m=m||"0",g=g||"0"):e.isHorizontal()?(m=f,g="0"):(g=f,m="0"),m.indexOf("%")>=0?m=`${parseInt(m,10)*u*c}%`:m=`${m*u*c}px`,g.indexOf("%")>=0?g=`${parseInt(g,10)*u}%`:g=`${g*u}px`,typeof h<"u"&&h!==null){const w=h-(h-1)*(1-Math.abs(u));l.style.opacity=w}let b=`translate3d(${m}, ${g}, 0px)`;if(typeof v<"u"&&v!==null){const w=v-(v-1)*(1-Math.abs(u));b+=` scale(${w})`}if(p&&typeof p<"u"&&p!==null){const w=p*u*-1;b+=` rotate(${w}deg)`}l.style.transform=b},a=()=>{const{el:l,slides:u,progress:d,snapGrid:c,isElement:f}=e,m=K(l,n);e.isElement&&m.push(...K(e.hostEl,n)),m.forEach(g=>{s(g,d)}),u.forEach((g,v)=>{let h=g.progress;e.params.slidesPerGroup>1&&e.params.slidesPerView!=="auto"&&(h+=Math.ceil(v/2)-d*(c.length-1)),h=Math.min(Math.max(h,-1),1),g.querySelectorAll(`${n}, [data-swiper-parallax-rotate]`).forEach(p=>{s(p,h)})})},o=function(l){l===void 0&&(l=e.params.speed);const{el:u,hostEl:d}=e,c=[...u.querySelectorAll(n)];e.isElement&&c.push(...d.querySelectorAll(n)),c.forEach(f=>{let m=parseInt(f.getAttribute("data-swiper-parallax-duration"),10)||l;l===0&&(m=0),f.style.transitionDuration=`${m}ms`})};r("beforeInit",()=>{e.params.parallax.enabled&&(e.params.watchSlidesProgress=!0,e.originalParams.watchSlidesProgress=!0)}),r("init",()=>{e.params.parallax.enabled&&a()}),r("setTranslate",()=>{e.params.parallax.enabled&&a()}),r("setTransition",(l,u)=>{e.params.parallax.enabled&&o(u)})}function hc(t){let{swiper:e,extendParams:i,on:r,emit:n}=t;const s=W();i({zoom:{enabled:!1,limitToOriginalSize:!1,maxRatio:3,minRatio:1,toggle:!0,containerClass:"swiper-zoom-container",zoomedSlideClass:"swiper-slide-zoomed"}}),e.zoom={enabled:!1};let a=1,o=!1,l,u;const d=[],c={originX:0,originY:0,slideEl:void 0,slideWidth:void 0,slideHeight:void 0,imageEl:void 0,imageWrapEl:void 0,maxRatio:3},f={isTouched:void 0,isMoved:void 0,currentX:void 0,currentY:void 0,minX:void 0,minY:void 0,maxX:void 0,maxY:void 0,width:void 0,height:void 0,startX:void 0,startY:void 0,touchesStart:{},touchesCurrent:{}},m={x:void 0,y:void 0,prevPositionX:void 0,prevPositionY:void 0,prevTime:void 0};let g=1;Object.defineProperty(e.zoom,"scale",{get(){return g},set($){if(g!==$){const z=c.imageEl,F=c.slideEl;n("zoomChange",$,z,F)}g=$}});function v(){if(d.length<2)return 1;const $=d[0].pageX,z=d[0].pageY,F=d[1].pageX,V=d[1].pageY;return Math.sqrt((F-$)**2+(V-z)**2)}function h(){const $=e.params.zoom,z=c.imageWrapEl.getAttribute("data-swiper-zoom")||$.maxRatio;if($.limitToOriginalSize&&c.imageEl&&c.imageEl.naturalWidth){const F=c.imageEl.naturalWidth/c.imageEl.offsetWidth;return Math.min(F,z)}return z}function p(){if(d.length<2)return{x:null,y:null};const $=c.imageEl.getBoundingClientRect();return[(d[0].pageX+(d[1].pageX-d[0].pageX)/2-$.x-s.scrollX)/a,(d[0].pageY+(d[1].pageY-d[0].pageY)/2-$.y-s.scrollY)/a]}function b(){return e.isElement?"swiper-slide":`.${e.params.slideClass}`}function w($){const z=b();return!!($.target.matches(z)||e.slides.filter(F=>F.contains($.target)).length>0)}function y($){const z=`.${e.params.zoom.containerClass}`;return!!($.target.matches(z)||[...e.hostEl.querySelectorAll(z)].filter(F=>F.contains($.target)).length>0)}function E($){if($.pointerType==="mouse"&&d.splice(0,d.length),!w($))return;const z=e.params.zoom;if(l=!1,u=!1,d.push($),!(d.length<2)){if(l=!0,c.scaleStart=v(),!c.slideEl){c.slideEl=$.target.closest(`.${e.params.slideClass}, swiper-slide`),c.slideEl||(c.slideEl=e.slides[e.activeIndex]);let F=c.slideEl.querySelector(`.${z.containerClass}`);if(F&&(F=F.querySelectorAll("picture, img, svg, canvas, .swiper-zoom-target")[0]),c.imageEl=F,F?c.imageWrapEl=De(c.imageEl,`.${z.containerClass}`)[0]:c.imageWrapEl=void 0,!c.imageWrapEl){c.imageEl=void 0;return}c.maxRatio=h()}if(c.imageEl){const[F,V]=p();c.originX=F,c.originY=V,c.imageEl.style.transitionDuration="0ms"}o=!0}}function x($){if(!w($))return;const z=e.params.zoom,F=e.zoom,V=d.findIndex(N=>N.pointerId===$.pointerId);V>=0&&(d[V]=$),!(d.length<2)&&(u=!0,c.scaleMove=v(),c.imageEl&&(F.scale=c.scaleMove/c.scaleStart*a,F.scale>c.maxRatio&&(F.scale=c.maxRatio-1+(F.scale-c.maxRatio+1)**.5),F.scale<z.minRatio&&(F.scale=z.minRatio+1-(z.minRatio-F.scale+1)**.5),c.imageEl.style.transform=`translate3d(0,0,0) scale(${F.scale})`))}function A($){if(!w($)||$.pointerType==="mouse"&&$.type==="pointerout")return;const z=e.params.zoom,F=e.zoom,V=d.findIndex(N=>N.pointerId===$.pointerId);V>=0&&d.splice(V,1),!(!l||!u)&&(l=!1,u=!1,c.imageEl&&(F.scale=Math.max(Math.min(F.scale,c.maxRatio),z.minRatio),c.imageEl.style.transitionDuration=`${e.params.speed}ms`,c.imageEl.style.transform=`translate3d(0,0,0) scale(${F.scale})`,a=F.scale,o=!1,F.scale>1&&c.slideEl?c.slideEl.classList.add(`${z.zoomedSlideClass}`):F.scale<=1&&c.slideEl&&c.slideEl.classList.remove(`${z.zoomedSlideClass}`),F.scale===1&&(c.originX=0,c.originY=0,c.slideEl=void 0)))}let S;function P(){e.touchEventsData.preventTouchMoveFromPointerMove=!1}function C(){clearTimeout(S),e.touchEventsData.preventTouchMoveFromPointerMove=!0,S=setTimeout(()=>{P()})}function O($){const z=e.device;if(!c.imageEl||f.isTouched)return;z.android&&$.cancelable&&$.preventDefault(),f.isTouched=!0;const F=d.length>0?d[0]:$;f.touchesStart.x=F.pageX,f.touchesStart.y=F.pageY}function T($){if(!w($)||!y($))return;const z=e.zoom;if(!c.imageEl||!f.isTouched||!c.slideEl)return;f.isMoved||(f.width=c.imageEl.offsetWidth||c.imageEl.clientWidth,f.height=c.imageEl.offsetHeight||c.imageEl.clientHeight,f.startX=Fi(c.imageWrapEl,"x")||0,f.startY=Fi(c.imageWrapEl,"y")||0,c.slideWidth=c.slideEl.offsetWidth,c.slideHeight=c.slideEl.offsetHeight,c.imageWrapEl.style.transitionDuration="0ms");const F=f.width*z.scale,V=f.height*z.scale;if(f.minX=Math.min(c.slideWidth/2-F/2,0),f.maxX=-f.minX,f.minY=Math.min(c.slideHeight/2-V/2,0),f.maxY=-f.minY,f.touchesCurrent.x=d.length>0?d[0].pageX:$.pageX,f.touchesCurrent.y=d.length>0?d[0].pageY:$.pageY,Math.max(Math.abs(f.touchesCurrent.x-f.touchesStart.x),Math.abs(f.touchesCurrent.y-f.touchesStart.y))>5&&(e.allowClick=!1),!f.isMoved&&!o){if(e.isHorizontal()&&(Math.floor(f.minX)===Math.floor(f.startX)&&f.touchesCurrent.x<f.touchesStart.x||Math.floor(f.maxX)===Math.floor(f.startX)&&f.touchesCurrent.x>f.touchesStart.x)){f.isTouched=!1,P();return}if(!e.isHorizontal()&&(Math.floor(f.minY)===Math.floor(f.startY)&&f.touchesCurrent.y<f.touchesStart.y||Math.floor(f.maxY)===Math.floor(f.startY)&&f.touchesCurrent.y>f.touchesStart.y)){f.isTouched=!1,P();return}}$.cancelable&&$.preventDefault(),$.stopPropagation(),C(),f.isMoved=!0;const G=(z.scale-a)/(c.maxRatio-e.params.zoom.minRatio),{originX:Z,originY:He}=c;f.currentX=f.touchesCurrent.x-f.touchesStart.x+f.startX+G*(f.width-Z*2),f.currentY=f.touchesCurrent.y-f.touchesStart.y+f.startY+G*(f.height-He*2),f.currentX<f.minX&&(f.currentX=f.minX+1-(f.minX-f.currentX+1)**.8),f.currentX>f.maxX&&(f.currentX=f.maxX-1+(f.currentX-f.maxX+1)**.8),f.currentY<f.minY&&(f.currentY=f.minY+1-(f.minY-f.currentY+1)**.8),f.currentY>f.maxY&&(f.currentY=f.maxY-1+(f.currentY-f.maxY+1)**.8),m.prevPositionX||(m.prevPositionX=f.touchesCurrent.x),m.prevPositionY||(m.prevPositionY=f.touchesCurrent.y),m.prevTime||(m.prevTime=Date.now()),m.x=(f.touchesCurrent.x-m.prevPositionX)/(Date.now()-m.prevTime)/2,m.y=(f.touchesCurrent.y-m.prevPositionY)/(Date.now()-m.prevTime)/2,Math.abs(f.touchesCurrent.x-m.prevPositionX)<2&&(m.x=0),Math.abs(f.touchesCurrent.y-m.prevPositionY)<2&&(m.y=0),m.prevPositionX=f.touchesCurrent.x,m.prevPositionY=f.touchesCurrent.y,m.prevTime=Date.now(),c.imageWrapEl.style.transform=`translate3d(${f.currentX}px, ${f.currentY}px,0)`}function _(){const $=e.zoom;if(!c.imageEl)return;if(!f.isTouched||!f.isMoved){f.isTouched=!1,f.isMoved=!1;return}f.isTouched=!1,f.isMoved=!1;let z=300,F=300;const V=m.x*z,N=f.currentX+V,G=m.y*F,Z=f.currentY+G;m.x!==0&&(z=Math.abs((N-f.currentX)/m.x)),m.y!==0&&(F=Math.abs((Z-f.currentY)/m.y));const He=Math.max(z,F);f.currentX=N,f.currentY=Z;const bt=f.width*$.scale,fe=f.height*$.scale;f.minX=Math.min(c.slideWidth/2-bt/2,0),f.maxX=-f.minX,f.minY=Math.min(c.slideHeight/2-fe/2,0),f.maxY=-f.minY,f.currentX=Math.max(Math.min(f.currentX,f.maxX),f.minX),f.currentY=Math.max(Math.min(f.currentY,f.maxY),f.minY),c.imageWrapEl.style.transitionDuration=`${He}ms`,c.imageWrapEl.style.transform=`translate3d(${f.currentX}px, ${f.currentY}px,0)`}function M(){const $=e.zoom;c.slideEl&&e.activeIndex!==e.slides.indexOf(c.slideEl)&&(c.imageEl&&(c.imageEl.style.transform="translate3d(0,0,0) scale(1)"),c.imageWrapEl&&(c.imageWrapEl.style.transform="translate3d(0,0,0)"),c.slideEl.classList.remove(`${e.params.zoom.zoomedSlideClass}`),$.scale=1,a=1,c.slideEl=void 0,c.imageEl=void 0,c.imageWrapEl=void 0,c.originX=0,c.originY=0)}function D($){const z=e.zoom,F=e.params.zoom;if(!c.slideEl){$&&$.target&&(c.slideEl=$.target.closest(`.${e.params.slideClass}, swiper-slide`)),c.slideEl||(e.params.virtual&&e.params.virtual.enabled&&e.virtual?c.slideEl=K(e.slidesEl,`.${e.params.slideActiveClass}`)[0]:c.slideEl=e.slides[e.activeIndex]);let Qe=c.slideEl.querySelector(`.${F.containerClass}`);Qe&&(Qe=Qe.querySelectorAll("picture, img, svg, canvas, .swiper-zoom-target")[0]),c.imageEl=Qe,Qe?c.imageWrapEl=De(c.imageEl,`.${F.containerClass}`)[0]:c.imageWrapEl=void 0}if(!c.imageEl||!c.imageWrapEl)return;e.params.cssMode&&(e.wrapperEl.style.overflow="hidden",e.wrapperEl.style.touchAction="none"),c.slideEl.classList.add(`${F.zoomedSlideClass}`);let V,N,G,Z,He,bt,fe,Ce,hr,gr,vr,wr,yt,xt,si,ai,oi,li;typeof f.touchesStart.x>"u"&&$?(V=$.pageX,N=$.pageY):(V=f.touchesStart.x,N=f.touchesStart.y);const Ze=typeof $=="number"?$:null;a===1&&Ze&&(V=void 0,N=void 0);const br=h();z.scale=Ze||br,a=Ze||br,$&&!(a===1&&Ze)?(oi=c.slideEl.offsetWidth,li=c.slideEl.offsetHeight,G=Nt(c.slideEl).left+s.scrollX,Z=Nt(c.slideEl).top+s.scrollY,He=G+oi/2-V,bt=Z+li/2-N,hr=c.imageEl.offsetWidth||c.imageEl.clientWidth,gr=c.imageEl.offsetHeight||c.imageEl.clientHeight,vr=hr*z.scale,wr=gr*z.scale,yt=Math.min(oi/2-vr/2,0),xt=Math.min(li/2-wr/2,0),si=-yt,ai=-xt,fe=He*z.scale,Ce=bt*z.scale,fe<yt&&(fe=yt),fe>si&&(fe=si),Ce<xt&&(Ce=xt),Ce>ai&&(Ce=ai)):(fe=0,Ce=0),Ze&&z.scale===1&&(c.originX=0,c.originY=0),c.imageWrapEl.style.transitionDuration="300ms",c.imageWrapEl.style.transform=`translate3d(${fe}px, ${Ce}px,0)`,c.imageEl.style.transitionDuration="300ms",c.imageEl.style.transform=`translate3d(0,0,0) scale(${z.scale})`}function k(){const $=e.zoom,z=e.params.zoom;if(!c.slideEl){e.params.virtual&&e.params.virtual.enabled&&e.virtual?c.slideEl=K(e.slidesEl,`.${e.params.slideActiveClass}`)[0]:c.slideEl=e.slides[e.activeIndex];let F=c.slideEl.querySelector(`.${z.containerClass}`);F&&(F=F.querySelectorAll("picture, img, svg, canvas, .swiper-zoom-target")[0]),c.imageEl=F,F?c.imageWrapEl=De(c.imageEl,`.${z.containerClass}`)[0]:c.imageWrapEl=void 0}!c.imageEl||!c.imageWrapEl||(e.params.cssMode&&(e.wrapperEl.style.overflow="",e.wrapperEl.style.touchAction=""),$.scale=1,a=1,c.imageWrapEl.style.transitionDuration="300ms",c.imageWrapEl.style.transform="translate3d(0,0,0)",c.imageEl.style.transitionDuration="300ms",c.imageEl.style.transform="translate3d(0,0,0) scale(1)",c.slideEl.classList.remove(`${z.zoomedSlideClass}`),c.slideEl=void 0,c.originX=0,c.originY=0)}function L($){const z=e.zoom;z.scale&&z.scale!==1?k():D($)}function I(){const $=e.params.passiveListeners?{passive:!0,capture:!1}:!1,z=e.params.passiveListeners?{passive:!1,capture:!0}:!0;return{passiveListener:$,activeListenerWithCapture:z}}function R(){const $=e.zoom;if($.enabled)return;$.enabled=!0;const{passiveListener:z,activeListenerWithCapture:F}=I();e.wrapperEl.addEventListener("pointerdown",E,z),e.wrapperEl.addEventListener("pointermove",x,F),["pointerup","pointercancel","pointerout"].forEach(V=>{e.wrapperEl.addEventListener(V,A,z)}),e.wrapperEl.addEventListener("pointermove",T,F)}function B(){const $=e.zoom;if(!$.enabled)return;$.enabled=!1;const{passiveListener:z,activeListenerWithCapture:F}=I();e.wrapperEl.removeEventListener("pointerdown",E,z),e.wrapperEl.removeEventListener("pointermove",x,F),["pointerup","pointercancel","pointerout"].forEach(V=>{e.wrapperEl.removeEventListener(V,A,z)}),e.wrapperEl.removeEventListener("pointermove",T,F)}r("init",()=>{e.params.zoom.enabled&&R()}),r("destroy",()=>{B()}),r("touchStart",($,z)=>{e.zoom.enabled&&O(z)}),r("touchEnd",($,z)=>{e.zoom.enabled&&_()}),r("doubleTap",($,z)=>{!e.animating&&e.params.zoom.enabled&&e.zoom.enabled&&e.params.zoom.toggle&&L(z)}),r("transitionEnd",()=>{e.zoom.enabled&&e.params.zoom.enabled&&M()}),r("slideChange",()=>{e.zoom.enabled&&e.params.zoom.enabled&&e.params.cssMode&&M()}),Object.assign(e.zoom,{enable:R,disable:B,in:D,out:k,toggle:L})}function gc(t){let{swiper:e,extendParams:i,on:r}=t;i({controller:{control:void 0,inverse:!1,by:"slide"}}),e.controller={control:void 0};function n(u,d){const c=function(){let v,h,p;return(b,w)=>{for(h=-1,v=b.length;v-h>1;)p=v+h>>1,b[p]<=w?h=p:v=p;return v}}();this.x=u,this.y=d,this.lastIndex=u.length-1;let f,m;return this.interpolate=function(v){return v?(m=c(this.x,v),f=m-1,(v-this.x[f])*(this.y[m]-this.y[f])/(this.x[m]-this.x[f])+this.y[f]):0},this}function s(u){e.controller.spline=e.params.loop?new n(e.slidesGrid,u.slidesGrid):new n(e.snapGrid,u.snapGrid)}function a(u,d){const c=e.controller.control;let f,m;const g=e.constructor;function v(h){if(h.destroyed)return;const p=e.rtlTranslate?-e.translate:e.translate;e.params.controller.by==="slide"&&(s(h),m=-e.controller.spline.interpolate(-p)),(!m||e.params.controller.by==="container")&&(f=(h.maxTranslate()-h.minTranslate())/(e.maxTranslate()-e.minTranslate()),(Number.isNaN(f)||!Number.isFinite(f))&&(f=1),m=(p-e.minTranslate())*f+h.minTranslate()),e.params.controller.inverse&&(m=h.maxTranslate()-m),h.updateProgress(m),h.setTranslate(m,e),h.updateActiveIndex(),h.updateSlidesClasses()}if(Array.isArray(c))for(let h=0;h<c.length;h+=1)c[h]!==d&&c[h]instanceof g&&v(c[h]);else c instanceof g&&d!==c&&v(c)}function o(u,d){const c=e.constructor,f=e.controller.control;let m;function g(v){v.destroyed||(v.setTransition(u,e),u!==0&&(v.transitionStart(),v.params.autoHeight&&ze(()=>{v.updateAutoHeight()}),ct(v.wrapperEl,()=>{f&&v.transitionEnd()})))}if(Array.isArray(f))for(m=0;m<f.length;m+=1)f[m]!==d&&f[m]instanceof c&&g(f[m]);else f instanceof c&&d!==f&&g(f)}function l(){e.controller.control&&e.controller.spline&&(e.controller.spline=void 0,delete e.controller.spline)}r("beforeInit",()=>{if(typeof window<"u"&&(typeof e.params.controller.control=="string"||e.params.controller.control instanceof HTMLElement)){const u=document.querySelector(e.params.controller.control);if(u&&u.swiper)e.controller.control=u.swiper;else if(u){const d=c=>{e.controller.control=c.detail[0],e.update(),u.removeEventListener("init",d)};u.addEventListener("init",d)}return}e.controller.control=e.params.controller.control}),r("update",()=>{l()}),r("resize",()=>{l()}),r("observerUpdate",()=>{l()}),r("setTranslate",(u,d,c)=>{!e.controller.control||e.controller.control.destroyed||e.controller.setTranslate(d,c)}),r("setTransition",(u,d,c)=>{!e.controller.control||e.controller.control.destroyed||e.controller.setTransition(d,c)}),Object.assign(e.controller,{setTranslate:a,setTransition:o})}function vc(t){let{swiper:e,extendParams:i,on:r}=t;i({a11y:{enabled:!0,notificationClass:"swiper-notification",prevSlideMessage:"Previous slide",nextSlideMessage:"Next slide",firstSlideMessage:"This is the first slide",lastSlideMessage:"This is the last slide",paginationBulletMessage:"Go to slide {{index}}",slideLabelMessage:"{{index}} / {{slidesLength}}",containerMessage:null,containerRoleDescriptionMessage:null,itemRoleDescriptionMessage:null,slideRole:"group",id:null}}),e.a11y={clicked:!1};let n=null,s,a,o=new Date().getTime();function l(L){const I=n;I.length!==0&&(I.innerHTML="",I.innerHTML=L)}function u(L){const I=()=>Math.round(16*Math.random()).toString(16);return"x".repeat(L).replace(/x/g,I)}function d(L){L=H(L),L.forEach(I=>{I.setAttribute("tabIndex","0")})}function c(L){L=H(L),L.forEach(I=>{I.setAttribute("tabIndex","-1")})}function f(L,I){L=H(L),L.forEach(R=>{R.setAttribute("role",I)})}function m(L,I){L=H(L),L.forEach(R=>{R.setAttribute("aria-roledescription",I)})}function g(L,I){L=H(L),L.forEach(R=>{R.setAttribute("aria-controls",I)})}function v(L,I){L=H(L),L.forEach(R=>{R.setAttribute("aria-label",I)})}function h(L,I){L=H(L),L.forEach(R=>{R.setAttribute("id",I)})}function p(L,I){L=H(L),L.forEach(R=>{R.setAttribute("aria-live",I)})}function b(L){L=H(L),L.forEach(I=>{I.setAttribute("aria-disabled",!0)})}function w(L){L=H(L),L.forEach(I=>{I.setAttribute("aria-disabled",!1)})}function y(L){if(L.keyCode!==13&&L.keyCode!==32)return;const I=e.params.a11y,R=L.target;if(!(e.pagination&&e.pagination.el&&(R===e.pagination.el||e.pagination.el.contains(L.target))&&!L.target.matches(pe(e.params.pagination.bulletClass)))){if(e.navigation&&e.navigation.prevEl&&e.navigation.nextEl){const B=H(e.navigation.prevEl);H(e.navigation.nextEl).includes(R)&&(e.isEnd&&!e.params.loop||e.slideNext(),e.isEnd?l(I.lastSlideMessage):l(I.nextSlideMessage)),B.includes(R)&&(e.isBeginning&&!e.params.loop||e.slidePrev(),e.isBeginning?l(I.firstSlideMessage):l(I.prevSlideMessage))}e.pagination&&R.matches(pe(e.params.pagination.bulletClass))&&R.click()}}function E(){if(e.params.loop||e.params.rewind||!e.navigation)return;const{nextEl:L,prevEl:I}=e.navigation;I&&(e.isBeginning?(b(I),c(I)):(w(I),d(I))),L&&(e.isEnd?(b(L),c(L)):(w(L),d(L)))}function x(){return e.pagination&&e.pagination.bullets&&e.pagination.bullets.length}function A(){return x()&&e.params.pagination.clickable}function S(){const L=e.params.a11y;x()&&e.pagination.bullets.forEach(I=>{e.params.pagination.clickable&&(d(I),e.params.pagination.renderBullet||(f(I,"button"),v(I,L.paginationBulletMessage.replace(/\{\{index\}\}/,ut(I)+1)))),I.matches(pe(e.params.pagination.bulletActiveClass))?I.setAttribute("aria-current","true"):I.removeAttribute("aria-current")})}const P=(L,I,R)=>{d(L),L.tagName!=="BUTTON"&&(f(L,"button"),L.addEventListener("keydown",y)),v(L,R),g(L,I)},C=L=>{a&&a!==L.target&&!a.contains(L.target)&&(s=!0),e.a11y.clicked=!0},O=()=>{s=!1,requestAnimationFrame(()=>{requestAnimationFrame(()=>{e.destroyed||(e.a11y.clicked=!1)})})},T=L=>{o=new Date().getTime()},_=L=>{if(e.a11y.clicked||new Date().getTime()-o<100)return;const I=L.target.closest(`.${e.params.slideClass}, swiper-slide`);if(!I||!e.slides.includes(I))return;a=I;const R=e.slides.indexOf(I)===e.activeIndex,B=e.params.watchSlidesProgress&&e.visibleSlides&&e.visibleSlides.includes(I);R||B||L.sourceCapabilities&&L.sourceCapabilities.firesTouchEvents||(e.isHorizontal()?e.el.scrollLeft=0:e.el.scrollTop=0,requestAnimationFrame(()=>{s||(e.params.loop?e.slideToLoop(parseInt(I.getAttribute("data-swiper-slide-index")),0):e.slideTo(e.slides.indexOf(I),0),s=!1)}))},M=()=>{const L=e.params.a11y;L.itemRoleDescriptionMessage&&m(e.slides,L.itemRoleDescriptionMessage),L.slideRole&&f(e.slides,L.slideRole);const I=e.slides.length;L.slideLabelMessage&&e.slides.forEach((R,B)=>{const $=e.params.loop?parseInt(R.getAttribute("data-swiper-slide-index"),10):B,z=L.slideLabelMessage.replace(/\{\{index\}\}/,$+1).replace(/\{\{slidesLength\}\}/,I);v(R,z)})},D=()=>{const L=e.params.a11y;e.el.append(n);const I=e.el;L.containerRoleDescriptionMessage&&m(I,L.containerRoleDescriptionMessage),L.containerMessage&&v(I,L.containerMessage);const R=e.wrapperEl,B=L.id||R.getAttribute("id")||`swiper-wrapper-${u(16)}`,$=e.params.autoplay&&e.params.autoplay.enabled?"off":"polite";h(R,B),p(R,$),M();let{nextEl:z,prevEl:F}=e.navigation?e.navigation:{};z=H(z),F=H(F),z&&z.forEach(N=>P(N,B,L.nextSlideMessage)),F&&F.forEach(N=>P(N,B,L.prevSlideMessage)),A()&&H(e.pagination.el).forEach(G=>{G.addEventListener("keydown",y)}),J().addEventListener("visibilitychange",T),e.el.addEventListener("focus",_,!0),e.el.addEventListener("focus",_,!0),e.el.addEventListener("pointerdown",C,!0),e.el.addEventListener("pointerup",O,!0)};function k(){n&&n.remove();let{nextEl:L,prevEl:I}=e.navigation?e.navigation:{};L=H(L),I=H(I),L&&L.forEach(B=>B.removeEventListener("keydown",y)),I&&I.forEach(B=>B.removeEventListener("keydown",y)),A()&&H(e.pagination.el).forEach($=>{$.removeEventListener("keydown",y)}),J().removeEventListener("visibilitychange",T),e.el&&typeof e.el!="string"&&(e.el.removeEventListener("focus",_,!0),e.el.removeEventListener("pointerdown",C,!0),e.el.removeEventListener("pointerup",O,!0))}r("beforeInit",()=>{n=ie("span",e.params.a11y.notificationClass),n.setAttribute("aria-live","assertive"),n.setAttribute("aria-atomic","true")}),r("afterInit",()=>{e.params.a11y.enabled&&D()}),r("slidesLengthChange snapGridLengthChange slidesGridLengthChange",()=>{e.params.a11y.enabled&&M()}),r("fromEdge toEdge afterInit lock unlock",()=>{e.params.a11y.enabled&&E()}),r("paginationUpdate",()=>{e.params.a11y.enabled&&S()}),r("destroy",()=>{e.params.a11y.enabled&&k()})}function wc(t){let{swiper:e,extendParams:i,on:r}=t;i({history:{enabled:!1,root:"",replaceState:!1,key:"slides",keepQuery:!1}});let n=!1,s={};const a=m=>m.toString().replace(/\s+/g,"-").replace(/[^\w-]+/g,"").replace(/--+/g,"-").replace(/^-+/,"").replace(/-+$/,""),o=m=>{const g=W();let v;m?v=new URL(m):v=g.location;const h=v.pathname.slice(1).split("/").filter(y=>y!==""),p=h.length,b=h[p-2],w=h[p-1];return{key:b,value:w}},l=(m,g)=>{const v=W();if(!n||!e.params.history.enabled)return;let h;e.params.url?h=new URL(e.params.url):h=v.location;const p=e.virtual&&e.params.virtual.enabled?e.slidesEl.querySelector(`[data-swiper-slide-index="${g}"]`):e.slides[g];let b=a(p.getAttribute("data-history"));if(e.params.history.root.length>0){let y=e.params.history.root;y[y.length-1]==="/"&&(y=y.slice(0,y.length-1)),b=`${y}/${m?`${m}/`:""}${b}`}else h.pathname.includes(m)||(b=`${m?`${m}/`:""}${b}`);e.params.history.keepQuery&&(b+=h.search);const w=v.history.state;w&&w.value===b||(e.params.history.replaceState?v.history.replaceState({value:b},null,b):v.history.pushState({value:b},null,b))},u=(m,g,v)=>{if(g)for(let h=0,p=e.slides.length;h<p;h+=1){const b=e.slides[h];if(a(b.getAttribute("data-history"))===g){const y=e.getSlideIndex(b);e.slideTo(y,m,v)}}else e.slideTo(0,m,v)},d=()=>{s=o(e.params.url),u(e.params.speed,s.value,!1)},c=()=>{const m=W();if(e.params.history){if(!m.history||!m.history.pushState){e.params.history.enabled=!1,e.params.hashNavigation.enabled=!0;return}if(n=!0,s=o(e.params.url),!s.key&&!s.value){e.params.history.replaceState||m.addEventListener("popstate",d);return}u(0,s.value,e.params.runCallbacksOnInit),e.params.history.replaceState||m.addEventListener("popstate",d)}},f=()=>{const m=W();e.params.history.replaceState||m.removeEventListener("popstate",d)};r("init",()=>{e.params.history.enabled&&c()}),r("destroy",()=>{e.params.history.enabled&&f()}),r("transitionEnd _freeModeNoMomentumRelease",()=>{n&&l(e.params.history.key,e.activeIndex)}),r("slideChange",()=>{n&&e.params.cssMode&&l(e.params.history.key,e.activeIndex)})}function bc(t){let{swiper:e,extendParams:i,emit:r,on:n}=t,s=!1;const a=J(),o=W();i({hashNavigation:{enabled:!1,replaceState:!1,watchState:!1,getSlideIndex(f,m){if(e.virtual&&e.params.virtual.enabled){const g=e.slides.filter(h=>h.getAttribute("data-hash")===m)[0];return g?parseInt(g.getAttribute("data-swiper-slide-index"),10):0}return e.getSlideIndex(K(e.slidesEl,`.${e.params.slideClass}[data-hash="${m}"], swiper-slide[data-hash="${m}"]`)[0])}}});const l=()=>{r("hashChange");const f=a.location.hash.replace("#",""),m=e.virtual&&e.params.virtual.enabled?e.slidesEl.querySelector(`[data-swiper-slide-index="${e.activeIndex}"]`):e.slides[e.activeIndex],g=m?m.getAttribute("data-hash"):"";if(f!==g){const v=e.params.hashNavigation.getSlideIndex(e,f);if(typeof v>"u"||Number.isNaN(v))return;e.slideTo(v)}},u=()=>{if(!s||!e.params.hashNavigation.enabled)return;const f=e.virtual&&e.params.virtual.enabled?e.slidesEl.querySelector(`[data-swiper-slide-index="${e.activeIndex}"]`):e.slides[e.activeIndex],m=f?f.getAttribute("data-hash")||f.getAttribute("data-history"):"";e.params.hashNavigation.replaceState&&o.history&&o.history.replaceState?(o.history.replaceState(null,null,`#${m}`||""),r("hashSet")):(a.location.hash=m||"",r("hashSet"))},d=()=>{if(!e.params.hashNavigation.enabled||e.params.history&&e.params.history.enabled)return;s=!0;const f=a.location.hash.replace("#","");if(f){const g=e.params.hashNavigation.getSlideIndex(e,f);e.slideTo(g||0,0,e.params.runCallbacksOnInit,!0)}e.params.hashNavigation.watchState&&o.addEventListener("hashchange",l)},c=()=>{e.params.hashNavigation.watchState&&o.removeEventListener("hashchange",l)};n("init",()=>{e.params.hashNavigation.enabled&&d()}),n("destroy",()=>{e.params.hashNavigation.enabled&&c()}),n("transitionEnd _freeModeNoMomentumRelease",()=>{s&&u()}),n("slideChange",()=>{s&&e.params.cssMode&&u()})}function yc(t){let{swiper:e,extendParams:i,on:r,emit:n,params:s}=t;e.autoplay={running:!1,paused:!1,timeLeft:0},i({autoplay:{enabled:!1,delay:3e3,waitForTransition:!0,disableOnInteraction:!1,stopOnLastSlide:!1,reverseDirection:!1,pauseOnMouseEnter:!1}});let a,o,l=s&&s.autoplay?s.autoplay.delay:3e3,u=s&&s.autoplay?s.autoplay.delay:3e3,d,c=new Date().getTime(),f,m,g,v,h,p,b;function w(I){!e||e.destroyed||!e.wrapperEl||I.target===e.wrapperEl&&(e.wrapperEl.removeEventListener("transitionend",w),!(b||I.detail&&I.detail.bySwiperTouchMove)&&C())}const y=()=>{if(e.destroyed||!e.autoplay.running)return;e.autoplay.paused?f=!0:f&&(u=d,f=!1);const I=e.autoplay.paused?d:c+u-new Date().getTime();e.autoplay.timeLeft=I,n("autoplayTimeLeft",I,I/l),o=requestAnimationFrame(()=>{y()})},E=()=>{let I;return e.virtual&&e.params.virtual.enabled?I=e.slides.filter(B=>B.classList.contains("swiper-slide-active"))[0]:I=e.slides[e.activeIndex],I?parseInt(I.getAttribute("data-swiper-autoplay"),10):void 0},x=I=>{if(e.destroyed||!e.autoplay.running)return;cancelAnimationFrame(o),y();let R=typeof I>"u"?e.params.autoplay.delay:I;l=e.params.autoplay.delay,u=e.params.autoplay.delay;const B=E();!Number.isNaN(B)&&B>0&&typeof I>"u"&&(R=B,l=B,u=B),d=R;const $=e.params.speed,z=()=>{!e||e.destroyed||(e.params.autoplay.reverseDirection?!e.isBeginning||e.params.loop||e.params.rewind?(e.slidePrev($,!0,!0),n("autoplay")):e.params.autoplay.stopOnLastSlide||(e.slideTo(e.slides.length-1,$,!0,!0),n("autoplay")):!e.isEnd||e.params.loop||e.params.rewind?(e.slideNext($,!0,!0),n("autoplay")):e.params.autoplay.stopOnLastSlide||(e.slideTo(0,$,!0,!0),n("autoplay")),e.params.cssMode&&(c=new Date().getTime(),requestAnimationFrame(()=>{x()})))};return R>0?(clearTimeout(a),a=setTimeout(()=>{z()},R)):requestAnimationFrame(()=>{z()}),R},A=()=>{c=new Date().getTime(),e.autoplay.running=!0,x(),n("autoplayStart")},S=()=>{e.autoplay.running=!1,clearTimeout(a),cancelAnimationFrame(o),n("autoplayStop")},P=(I,R)=>{if(e.destroyed||!e.autoplay.running)return;clearTimeout(a),I||(p=!0);const B=()=>{n("autoplayPause"),e.params.autoplay.waitForTransition?e.wrapperEl.addEventListener("transitionend",w):C()};if(e.autoplay.paused=!0,R){h&&(d=e.params.autoplay.delay),h=!1,B();return}d=(d||e.params.autoplay.delay)-(new Date().getTime()-c),!(e.isEnd&&d<0&&!e.params.loop)&&(d<0&&(d=0),B())},C=()=>{e.isEnd&&d<0&&!e.params.loop||e.destroyed||!e.autoplay.running||(c=new Date().getTime(),p?(p=!1,x(d)):x(),e.autoplay.paused=!1,n("autoplayResume"))},O=()=>{if(e.destroyed||!e.autoplay.running)return;const I=J();I.visibilityState==="hidden"&&(p=!0,P(!0)),I.visibilityState==="visible"&&C()},T=I=>{I.pointerType==="mouse"&&(p=!0,b=!0,!(e.animating||e.autoplay.paused)&&P(!0))},_=I=>{I.pointerType==="mouse"&&(b=!1,e.autoplay.paused&&C())},M=()=>{e.params.autoplay.pauseOnMouseEnter&&(e.el.addEventListener("pointerenter",T),e.el.addEventListener("pointerleave",_))},D=()=>{e.el&&typeof e.el!="string"&&(e.el.removeEventListener("pointerenter",T),e.el.removeEventListener("pointerleave",_))},k=()=>{J().addEventListener("visibilitychange",O)},L=()=>{J().removeEventListener("visibilitychange",O)};r("init",()=>{e.params.autoplay.enabled&&(M(),k(),A())}),r("destroy",()=>{D(),L(),e.autoplay.running&&S()}),r("_freeModeStaticRelease",()=>{(g||p)&&C()}),r("_freeModeNoMomentumRelease",()=>{e.params.autoplay.disableOnInteraction?S():P(!0,!0)}),r("beforeTransitionStart",(I,R,B)=>{e.destroyed||!e.autoplay.running||(B||!e.params.autoplay.disableOnInteraction?P(!0,!0):S())}),r("sliderFirstMove",()=>{if(!(e.destroyed||!e.autoplay.running)){if(e.params.autoplay.disableOnInteraction){S();return}m=!0,g=!1,p=!1,v=setTimeout(()=>{p=!0,g=!0,P(!0)},200)}}),r("touchEnd",()=>{if(!(e.destroyed||!e.autoplay.running||!m)){if(clearTimeout(v),clearTimeout(a),e.params.autoplay.disableOnInteraction){g=!1,m=!1;return}g&&e.params.cssMode&&C(),g=!1,m=!1}}),r("slideChange",()=>{e.destroyed||!e.autoplay.running||(h=!0)}),Object.assign(e.autoplay,{start:A,stop:S,pause:P,resume:C})}function xc(t){let{swiper:e,extendParams:i,on:r}=t;i({thumbs:{swiper:null,multipleActiveThumbs:!0,autoScrollOffset:0,slideThumbActiveClass:"swiper-slide-thumb-active",thumbsContainerClass:"swiper-thumbs"}});let n=!1,s=!1;e.thumbs={swiper:null};function a(){const u=e.thumbs.swiper;if(!u||u.destroyed)return;const d=u.clickedIndex,c=u.clickedSlide;if(c&&c.classList.contains(e.params.thumbs.slideThumbActiveClass)||typeof d>"u"||d===null)return;let f;u.params.loop?f=parseInt(u.clickedSlide.getAttribute("data-swiper-slide-index"),10):f=d,e.params.loop?e.slideToLoop(f):e.slideTo(f)}function o(){const{thumbs:u}=e.params;if(n)return!1;n=!0;const d=e.constructor;if(u.swiper instanceof d)e.thumbs.swiper=u.swiper,Object.assign(e.thumbs.swiper.originalParams,{watchSlidesProgress:!0,slideToClickedSlide:!1}),Object.assign(e.thumbs.swiper.params,{watchSlidesProgress:!0,slideToClickedSlide:!1}),e.thumbs.swiper.update();else if(st(u.swiper)){const c=Object.assign({},u.swiper);Object.assign(c,{watchSlidesProgress:!0,slideToClickedSlide:!1}),e.thumbs.swiper=new d(c),s=!0}return e.thumbs.swiper.el.classList.add(e.params.thumbs.thumbsContainerClass),e.thumbs.swiper.on("tap",a),!0}function l(u){const d=e.thumbs.swiper;if(!d||d.destroyed)return;const c=d.params.slidesPerView==="auto"?d.slidesPerViewDynamic():d.params.slidesPerView;let f=1;const m=e.params.thumbs.slideThumbActiveClass;if(e.params.slidesPerView>1&&!e.params.centeredSlides&&(f=e.params.slidesPerView),e.params.thumbs.multipleActiveThumbs||(f=1),f=Math.floor(f),d.slides.forEach(h=>h.classList.remove(m)),d.params.loop||d.params.virtual&&d.params.virtual.enabled)for(let h=0;h<f;h+=1)K(d.slidesEl,`[data-swiper-slide-index="${e.realIndex+h}"]`).forEach(p=>{p.classList.add(m)});else for(let h=0;h<f;h+=1)d.slides[e.realIndex+h]&&d.slides[e.realIndex+h].classList.add(m);const g=e.params.thumbs.autoScrollOffset,v=g&&!d.params.loop;if(e.realIndex!==d.realIndex||v){const h=d.activeIndex;let p,b;if(d.params.loop){const w=d.slides.filter(y=>y.getAttribute("data-swiper-slide-index")===`${e.realIndex}`)[0];p=d.slides.indexOf(w),b=e.activeIndex>e.previousIndex?"next":"prev"}else p=e.realIndex,b=p>e.previousIndex?"next":"prev";v&&(p+=b==="next"?g:-1*g),d.visibleSlidesIndexes&&d.visibleSlidesIndexes.indexOf(p)<0&&(d.params.centeredSlides?p>h?p=p-Math.floor(c/2)+1:p=p+Math.floor(c/2)-1:p>h&&d.params.slidesPerGroup,d.slideTo(p,u?0:void 0))}}r("beforeInit",()=>{const{thumbs:u}=e.params;if(!(!u||!u.swiper))if(typeof u.swiper=="string"||u.swiper instanceof HTMLElement){const d=J(),c=()=>{const m=typeof u.swiper=="string"?d.querySelector(u.swiper):u.swiper;if(m&&m.swiper)u.swiper=m.swiper,o(),l(!0);else if(m){const g=v=>{u.swiper=v.detail[0],m.removeEventListener("init",g),o(),l(!0),u.swiper.update(),e.update()};m.addEventListener("init",g)}return m},f=()=>{if(e.destroyed)return;c()||requestAnimationFrame(f)};requestAnimationFrame(f)}else o(),l(!0)}),r("slideChange update resize observerUpdate",()=>{l()}),r("setTransition",(u,d)=>{const c=e.thumbs.swiper;!c||c.destroyed||c.setTransition(d)}),r("beforeDestroy",()=>{const u=e.thumbs.swiper;!u||u.destroyed||s&&u.destroy()}),Object.assign(e.thumbs,{init:o,update:l})}function Sc(t){let{swiper:e,extendParams:i,emit:r,once:n}=t;i({freeMode:{enabled:!1,momentum:!0,momentumRatio:1,momentumBounce:!0,momentumBounceRatio:1,momentumVelocityRatio:1,sticky:!1,minimumVelocity:.02}});function s(){if(e.params.cssMode)return;const l=e.getTranslate();e.setTranslate(l),e.setTransition(0),e.touchEventsData.velocities.length=0,e.freeMode.onTouchEnd({currentPos:e.rtl?e.translate:-e.translate})}function a(){if(e.params.cssMode)return;const{touchEventsData:l,touches:u}=e;l.velocities.length===0&&l.velocities.push({position:u[e.isHorizontal()?"startX":"startY"],time:l.touchStartTime}),l.velocities.push({position:u[e.isHorizontal()?"currentX":"currentY"],time:ne()})}function o(l){let{currentPos:u}=l;if(e.params.cssMode)return;const{params:d,wrapperEl:c,rtlTranslate:f,snapGrid:m,touchEventsData:g}=e,h=ne()-g.touchStartTime;if(u<-e.minTranslate()){e.slideTo(e.activeIndex);return}if(u>-e.maxTranslate()){e.slides.length<m.length?e.slideTo(m.length-1):e.slideTo(e.slides.length-1);return}if(d.freeMode.momentum){if(g.velocities.length>1){const S=g.velocities.pop(),P=g.velocities.pop(),C=S.position-P.position,O=S.time-P.time;e.velocity=C/O,e.velocity/=2,Math.abs(e.velocity)<d.freeMode.minimumVelocity&&(e.velocity=0),(O>150||ne()-S.time>300)&&(e.velocity=0)}else e.velocity=0;e.velocity*=d.freeMode.momentumVelocityRatio,g.velocities.length=0;let p=1e3*d.freeMode.momentumRatio;const b=e.velocity*p;let w=e.translate+b;f&&(w=-w);let y=!1,E;const x=Math.abs(e.velocity)*20*d.freeMode.momentumBounceRatio;let A;if(w<e.maxTranslate())d.freeMode.momentumBounce?(w+e.maxTranslate()<-x&&(w=e.maxTranslate()-x),E=e.maxTranslate(),y=!0,g.allowMomentumBounce=!0):w=e.maxTranslate(),d.loop&&d.centeredSlides&&(A=!0);else if(w>e.minTranslate())d.freeMode.momentumBounce?(w-e.minTranslate()>x&&(w=e.minTranslate()+x),E=e.minTranslate(),y=!0,g.allowMomentumBounce=!0):w=e.minTranslate(),d.loop&&d.centeredSlides&&(A=!0);else if(d.freeMode.sticky){let S;for(let P=0;P<m.length;P+=1)if(m[P]>-w){S=P;break}Math.abs(m[S]-w)<Math.abs(m[S-1]-w)||e.swipeDirection==="next"?w=m[S]:w=m[S-1],w=-w}if(A&&n("transitionEnd",()=>{e.loopFix()}),e.velocity!==0){if(f?p=Math.abs((-w-e.translate)/e.velocity):p=Math.abs((w-e.translate)/e.velocity),d.freeMode.sticky){const S=Math.abs((f?-w:w)-e.translate),P=e.slidesSizesGrid[e.activeIndex];S<P?p=d.speed:S<2*P?p=d.speed*1.5:p=d.speed*2.5}}else if(d.freeMode.sticky){e.slideToClosest();return}d.freeMode.momentumBounce&&y?(e.updateProgress(E),e.setTransition(p),e.setTranslate(w),e.transitionStart(!0,e.swipeDirection),e.animating=!0,ct(c,()=>{!e||e.destroyed||!g.allowMomentumBounce||(r("momentumBounce"),e.setTransition(d.speed),setTimeout(()=>{e.setTranslate(E),ct(c,()=>{!e||e.destroyed||e.transitionEnd()})},0))})):e.velocity?(r("_freeModeNoMomentumRelease"),e.updateProgress(w),e.setTransition(p),e.setTranslate(w),e.transitionStart(!0,e.swipeDirection),e.animating||(e.animating=!0,ct(c,()=>{!e||e.destroyed||e.transitionEnd()}))):e.updateProgress(w),e.updateActiveIndex(),e.updateSlidesClasses()}else if(d.freeMode.sticky){e.slideToClosest();return}else d.freeMode&&r("_freeModeNoMomentumRelease");(!d.freeMode.momentum||h>=d.longSwipesMs)&&(r("_freeModeStaticRelease"),e.updateProgress(),e.updateActiveIndex(),e.updateSlidesClasses())}Object.assign(e,{freeMode:{onTouchStart:s,onTouchMove:a,onTouchEnd:o}})}function Ec(t){let{swiper:e,extendParams:i,on:r}=t;i({grid:{rows:1,fill:"column"}});let n,s,a,o;const l=()=>{let v=e.params.spaceBetween;return typeof v=="string"&&v.indexOf("%")>=0?v=parseFloat(v.replace("%",""))/100*e.size:typeof v=="string"&&(v=parseFloat(v)),v},u=v=>{const{slidesPerView:h}=e.params,{rows:p,fill:b}=e.params.grid,w=e.virtual&&e.params.virtual.enabled?e.virtual.slides.length:v.length;a=Math.floor(w/p),Math.floor(w/p)===w/p?n=w:n=Math.ceil(w/p)*p,h!=="auto"&&b==="row"&&(n=Math.max(n,h*p)),s=n/p},d=()=>{e.slides&&e.slides.forEach(v=>{v.swiperSlideGridSet&&(v.style.height="",v.style[e.getDirectionLabel("margin-top")]="")})},c=(v,h,p)=>{const{slidesPerGroup:b}=e.params,w=l(),{rows:y,fill:E}=e.params.grid,x=e.virtual&&e.params.virtual.enabled?e.virtual.slides.length:p.length;let A,S,P;if(E==="row"&&b>1){const C=Math.floor(v/(b*y)),O=v-y*b*C,T=C===0?b:Math.min(Math.ceil((x-C*y*b)/y),b);P=Math.floor(O/T),S=O-P*T+C*b,A=S+P*n/y,h.style.order=A}else E==="column"?(S=Math.floor(v/y),P=v-S*y,(S>a||S===a&&P===y-1)&&(P+=1,P>=y&&(P=0,S+=1))):(P=Math.floor(v/s),S=v-P*s);h.row=P,h.column=S,h.style.height=`calc((100% - ${(y-1)*w}px) / ${y})`,h.style[e.getDirectionLabel("margin-top")]=P!==0?w&&`${w}px`:"",h.swiperSlideGridSet=!0},f=(v,h)=>{const{centeredSlides:p,roundLengths:b}=e.params,w=l(),{rows:y}=e.params.grid;if(e.virtualSize=(v+w)*n,e.virtualSize=Math.ceil(e.virtualSize/y)-w,e.params.cssMode||(e.wrapperEl.style[e.getDirectionLabel("width")]=`${e.virtualSize+w}px`),p){const E=[];for(let x=0;x<h.length;x+=1){let A=h[x];b&&(A=Math.floor(A)),h[x]<e.virtualSize+h[0]&&E.push(A)}h.splice(0,h.length),h.push(...E)}},m=()=>{o=e.params.grid&&e.params.grid.rows>1},g=()=>{const{params:v,el:h}=e,p=v.grid&&v.grid.rows>1;o&&!p?(h.classList.remove(`${v.containerModifierClass}grid`,`${v.containerModifierClass}grid-column`),a=1,e.emitContainerClasses()):!o&&p&&(h.classList.add(`${v.containerModifierClass}grid`),v.grid.fill==="column"&&h.classList.add(`${v.containerModifierClass}grid-column`),e.emitContainerClasses()),o=p};r("init",m),r("update",g),e.grid={initSlides:u,unsetSlides:d,updateSlide:c,updateWrapperSize:f}}function Tc(t){const e=this,{params:i,slidesEl:r}=e;i.loop&&e.loopDestroy();const n=s=>{if(typeof s=="string"){const a=document.createElement("div");a.innerHTML=s,r.append(a.children[0]),a.innerHTML=""}else r.append(s)};if(typeof t=="object"&&"length"in t)for(let s=0;s<t.length;s+=1)t[s]&&n(t[s]);else n(t);e.recalcSlides(),i.loop&&e.loopCreate(),(!i.observer||e.isElement)&&e.update()}function _c(t){const e=this,{params:i,activeIndex:r,slidesEl:n}=e;i.loop&&e.loopDestroy();let s=r+1;const a=o=>{if(typeof o=="string"){const l=document.createElement("div");l.innerHTML=o,n.prepend(l.children[0]),l.innerHTML=""}else n.prepend(o)};if(typeof t=="object"&&"length"in t){for(let o=0;o<t.length;o+=1)t[o]&&a(t[o]);s=r+t.length}else a(t);e.recalcSlides(),i.loop&&e.loopCreate(),(!i.observer||e.isElement)&&e.update(),e.slideTo(s,0,!1)}function Cc(t,e){const i=this,{params:r,activeIndex:n,slidesEl:s}=i;let a=n;r.loop&&(a-=i.loopedSlides,i.loopDestroy(),i.recalcSlides());const o=i.slides.length;if(t<=0){i.prependSlide(e);return}if(t>=o){i.appendSlide(e);return}let l=a>t?a+1:a;const u=[];for(let d=o-1;d>=t;d-=1){const c=i.slides[d];c.remove(),u.unshift(c)}if(typeof e=="object"&&"length"in e){for(let d=0;d<e.length;d+=1)e[d]&&s.append(e[d]);l=a>t?a+e.length:a}else s.append(e);for(let d=0;d<u.length;d+=1)s.append(u[d]);i.recalcSlides(),r.loop&&i.loopCreate(),(!r.observer||i.isElement)&&i.update(),r.loop?i.slideTo(l+i.loopedSlides,0,!1):i.slideTo(l,0,!1)}function Mc(t){const e=this,{params:i,activeIndex:r}=e;let n=r;i.loop&&(n-=e.loopedSlides,e.loopDestroy());let s=n,a;if(typeof t=="object"&&"length"in t){for(let o=0;o<t.length;o+=1)a=t[o],e.slides[a]&&e.slides[a].remove(),a<s&&(s-=1);s=Math.max(s,0)}else a=t,e.slides[a]&&e.slides[a].remove(),a<s&&(s-=1),s=Math.max(s,0);e.recalcSlides(),i.loop&&e.loopCreate(),(!i.observer||e.isElement)&&e.update(),i.loop?e.slideTo(s+e.loopedSlides,0,!1):e.slideTo(s,0,!1)}function Ac(){const t=this,e=[];for(let i=0;i<t.slides.length;i+=1)e.push(i);t.removeSlide(e)}function Pc(t){let{swiper:e}=t;Object.assign(e,{appendSlide:Tc.bind(e),prependSlide:_c.bind(e),addSlide:Cc.bind(e),removeSlide:Mc.bind(e),removeAllSlides:Ac.bind(e)})}function Je(t){const{effect:e,swiper:i,on:r,setTranslate:n,setTransition:s,overwriteParams:a,perspective:o,recreateShadows:l,getEffectParams:u}=t;r("beforeInit",()=>{if(i.params.effect!==e)return;i.classNames.push(`${i.params.containerModifierClass}${e}`),o&&o()&&i.classNames.push(`${i.params.containerModifierClass}3d`);const c=a?a():{};Object.assign(i.params,c),Object.assign(i.originalParams,c)}),r("setTranslate",()=>{i.params.effect===e&&n()}),r("setTransition",(c,f)=>{i.params.effect===e&&s(f)}),r("transitionEnd",()=>{if(i.params.effect===e&&l){if(!u||!u().slideShadows)return;i.slides.forEach(c=>{c.querySelectorAll(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").forEach(f=>f.remove())}),l()}});let d;r("virtualUpdate",()=>{i.params.effect===e&&(i.slides.length||(d=!0),requestAnimationFrame(()=>{d&&i.slides&&i.slides.length&&(n(),d=!1)}))})}function vt(t,e){const i=Be(e);return i!==e&&(i.style.backfaceVisibility="hidden",i.style["-webkit-backface-visibility"]="hidden"),i}function Qt(t){let{swiper:e,duration:i,transformElements:r,allSlides:n}=t;const{activeIndex:s}=e,a=o=>o.parentElement?o.parentElement:e.slides.filter(u=>u.shadowRoot&&u.shadowRoot===o.parentNode)[0];if(e.params.virtualTranslate&&i!==0){let o=!1,l;n?l=r:l=r.filter(u=>{const d=u.classList.contains("swiper-slide-transform")?a(u):u;return e.getSlideIndex(d)===s}),l.forEach(u=>{ct(u,()=>{if(o||!e||e.destroyed)return;o=!0,e.animating=!1;const d=new window.CustomEvent("transitionend",{bubbles:!0,cancelable:!0});e.wrapperEl.dispatchEvent(d)})})}}function Lc(t){let{swiper:e,extendParams:i,on:r}=t;i({fadeEffect:{crossFade:!1}}),Je({effect:"fade",swiper:e,on:r,setTranslate:()=>{const{slides:a}=e,o=e.params.fadeEffect;for(let l=0;l<a.length;l+=1){const u=e.slides[l];let c=-u.swiperSlideOffset;e.params.virtualTranslate||(c-=e.translate);let f=0;e.isHorizontal()||(f=c,c=0);const m=e.params.fadeEffect.crossFade?Math.max(1-Math.abs(u.progress),0):1+Math.min(Math.max(u.progress,-1),0),g=vt(o,u);g.style.opacity=m,g.style.transform=`translate3d(${c}px, ${f}px, 0px)`}},setTransition:a=>{const o=e.slides.map(l=>Be(l));o.forEach(l=>{l.style.transitionDuration=`${a}ms`}),Qt({swiper:e,duration:a,transformElements:o,allSlides:!0})},overwriteParams:()=>({slidesPerView:1,slidesPerGroup:1,watchSlidesProgress:!0,spaceBetween:0,virtualTranslate:!e.params.cssMode})})}function Ic(t){let{swiper:e,extendParams:i,on:r}=t;i({cubeEffect:{slideShadows:!0,shadow:!0,shadowOffset:20,shadowScale:.94}});const n=(l,u,d)=>{let c=d?l.querySelector(".swiper-slide-shadow-left"):l.querySelector(".swiper-slide-shadow-top"),f=d?l.querySelector(".swiper-slide-shadow-right"):l.querySelector(".swiper-slide-shadow-bottom");c||(c=ie("div",`swiper-slide-shadow-cube swiper-slide-shadow-${d?"left":"top"}`.split(" ")),l.append(c)),f||(f=ie("div",`swiper-slide-shadow-cube swiper-slide-shadow-${d?"right":"bottom"}`.split(" ")),l.append(f)),c&&(c.style.opacity=Math.max(-u,0)),f&&(f.style.opacity=Math.max(u,0))};Je({effect:"cube",swiper:e,on:r,setTranslate:()=>{const{el:l,wrapperEl:u,slides:d,width:c,height:f,rtlTranslate:m,size:g,browser:v}=e,h=e.params.cubeEffect,p=e.isHorizontal(),b=e.virtual&&e.params.virtual.enabled;let w=0,y;h.shadow&&(p?(y=e.wrapperEl.querySelector(".swiper-cube-shadow"),y||(y=ie("div","swiper-cube-shadow"),e.wrapperEl.append(y)),y.style.height=`${c}px`):(y=l.querySelector(".swiper-cube-shadow"),y||(y=ie("div","swiper-cube-shadow"),l.append(y))));for(let x=0;x<d.length;x+=1){const A=d[x];let S=x;b&&(S=parseInt(A.getAttribute("data-swiper-slide-index"),10));let P=S*90,C=Math.floor(P/360);m&&(P=-P,C=Math.floor(-P/360));const O=Math.max(Math.min(A.progress,1),-1);let T=0,_=0,M=0;S%4===0?(T=-C*4*g,M=0):(S-1)%4===0?(T=0,M=-C*4*g):(S-2)%4===0?(T=g+C*4*g,M=g):(S-3)%4===0&&(T=-g,M=3*g+g*4*C),m&&(T=-T),p||(_=T,T=0);const D=`rotateX(${p?0:-P}deg) rotateY(${p?P:0}deg) translate3d(${T}px, ${_}px, ${M}px)`;O<=1&&O>-1&&(w=S*90+O*90,m&&(w=-S*90-O*90),e.browser&&e.browser.need3dFix&&Math.abs(w)/90%2===1&&(w+=.001)),A.style.transform=D,h.slideShadows&&n(A,O,p)}if(u.style.transformOrigin=`50% 50% -${g/2}px`,u.style["-webkit-transform-origin"]=`50% 50% -${g/2}px`,h.shadow)if(p)y.style.transform=`translate3d(0px, ${c/2+h.shadowOffset}px, ${-c/2}px) rotateX(89.99deg) rotateZ(0deg) scale(${h.shadowScale})`;else{const x=Math.abs(w)-Math.floor(Math.abs(w)/90)*90,A=1.5-(Math.sin(x*2*Math.PI/360)/2+Math.cos(x*2*Math.PI/360)/2),S=h.shadowScale,P=h.shadowScale/A,C=h.shadowOffset;y.style.transform=`scale3d(${S}, 1, ${P}) translate3d(0px, ${f/2+C}px, ${-f/2/P}px) rotateX(-89.99deg)`}const E=(v.isSafari||v.isWebView)&&v.needPerspectiveFix?-g/2:0;u.style.transform=`translate3d(0px,0,${E}px) rotateX(${e.isHorizontal()?0:w}deg) rotateY(${e.isHorizontal()?-w:0}deg)`,u.style.setProperty("--swiper-cube-translate-z",`${E}px`)},setTransition:l=>{const{el:u,slides:d}=e;if(d.forEach(c=>{c.style.transitionDuration=`${l}ms`,c.querySelectorAll(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").forEach(f=>{f.style.transitionDuration=`${l}ms`})}),e.params.cubeEffect.shadow&&!e.isHorizontal()){const c=u.querySelector(".swiper-cube-shadow");c&&(c.style.transitionDuration=`${l}ms`)}},recreateShadows:()=>{const l=e.isHorizontal();e.slides.forEach(u=>{const d=Math.max(Math.min(u.progress,1),-1);n(u,d,l)})},getEffectParams:()=>e.params.cubeEffect,perspective:()=>!0,overwriteParams:()=>({slidesPerView:1,slidesPerGroup:1,watchSlidesProgress:!0,resistanceRatio:0,spaceBetween:0,centeredSlides:!1,virtualTranslate:!0})})}function Xe(t,e,i){const r=`swiper-slide-shadow${i?`-${i}`:""}${t?` swiper-slide-shadow-${t}`:""}`,n=Be(e);let s=n.querySelector(`.${r.split(" ").join(".")}`);return s||(s=ie("div",r.split(" ")),n.append(s)),s}function Oc(t){let{swiper:e,extendParams:i,on:r}=t;i({flipEffect:{slideShadows:!0,limitRotation:!0}});const n=(l,u)=>{let d=e.isHorizontal()?l.querySelector(".swiper-slide-shadow-left"):l.querySelector(".swiper-slide-shadow-top"),c=e.isHorizontal()?l.querySelector(".swiper-slide-shadow-right"):l.querySelector(".swiper-slide-shadow-bottom");d||(d=Xe("flip",l,e.isHorizontal()?"left":"top")),c||(c=Xe("flip",l,e.isHorizontal()?"right":"bottom")),d&&(d.style.opacity=Math.max(-u,0)),c&&(c.style.opacity=Math.max(u,0))};Je({effect:"flip",swiper:e,on:r,setTranslate:()=>{const{slides:l,rtlTranslate:u}=e,d=e.params.flipEffect;for(let c=0;c<l.length;c+=1){const f=l[c];let m=f.progress;e.params.flipEffect.limitRotation&&(m=Math.max(Math.min(f.progress,1),-1));const g=f.swiperSlideOffset;let h=-180*m,p=0,b=e.params.cssMode?-g-e.translate:-g,w=0;e.isHorizontal()?u&&(h=-h):(w=b,b=0,p=-h,h=0),e.browser&&e.browser.need3dFix&&(Math.abs(h)/90%2===1&&(h+=.001),Math.abs(p)/90%2===1&&(p+=.001)),f.style.zIndex=-Math.abs(Math.round(m))+l.length,d.slideShadows&&n(f,m);const y=`translate3d(${b}px, ${w}px, 0px) rotateX(${p}deg) rotateY(${h}deg)`,E=vt(d,f);E.style.transform=y}},setTransition:l=>{const u=e.slides.map(d=>Be(d));u.forEach(d=>{d.style.transitionDuration=`${l}ms`,d.querySelectorAll(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").forEach(c=>{c.style.transitionDuration=`${l}ms`})}),Qt({swiper:e,duration:l,transformElements:u})},recreateShadows:()=>{e.params.flipEffect,e.slides.forEach(l=>{let u=l.progress;e.params.flipEffect.limitRotation&&(u=Math.max(Math.min(l.progress,1),-1)),n(l,u)})},getEffectParams:()=>e.params.flipEffect,perspective:()=>!0,overwriteParams:()=>({slidesPerView:1,slidesPerGroup:1,watchSlidesProgress:!0,spaceBetween:0,virtualTranslate:!e.params.cssMode})})}function Dc(t){let{swiper:e,extendParams:i,on:r}=t;i({coverflowEffect:{rotate:50,stretch:0,depth:100,scale:1,modifier:1,slideShadows:!0}}),Je({effect:"coverflow",swiper:e,on:r,setTranslate:()=>{const{width:a,height:o,slides:l,slidesSizesGrid:u}=e,d=e.params.coverflowEffect,c=e.isHorizontal(),f=e.translate,m=c?-f+a/2:-f+o/2,g=c?d.rotate:-d.rotate,v=d.depth;for(let h=0,p=l.length;h<p;h+=1){const b=l[h],w=u[h],y=b.swiperSlideOffset,E=(m-y-w/2)/w,x=typeof d.modifier=="function"?d.modifier(E):E*d.modifier;let A=c?g*x:0,S=c?0:g*x,P=-v*Math.abs(x),C=d.stretch;typeof C=="string"&&C.indexOf("%")!==-1&&(C=parseFloat(d.stretch)/100*w);let O=c?0:C*x,T=c?C*x:0,_=1-(1-d.scale)*Math.abs(x);Math.abs(T)<.001&&(T=0),Math.abs(O)<.001&&(O=0),Math.abs(P)<.001&&(P=0),Math.abs(A)<.001&&(A=0),Math.abs(S)<.001&&(S=0),Math.abs(_)<.001&&(_=0),e.browser&&e.browser.need3dFix&&(Math.abs(A)/90%2===1&&(A+=.001),Math.abs(S)/90%2===1&&(S+=.001));const M=`translate3d(${T}px,${O}px,${P}px)  rotateX(${S}deg) rotateY(${A}deg) scale(${_})`,D=vt(d,b);if(D.style.transform=M,b.style.zIndex=-Math.abs(Math.round(x))+1,d.slideShadows){let k=c?b.querySelector(".swiper-slide-shadow-left"):b.querySelector(".swiper-slide-shadow-top"),L=c?b.querySelector(".swiper-slide-shadow-right"):b.querySelector(".swiper-slide-shadow-bottom");k||(k=Xe("coverflow",b,c?"left":"top")),L||(L=Xe("coverflow",b,c?"right":"bottom")),k&&(k.style.opacity=x>0?x:0),L&&(L.style.opacity=-x>0?-x:0)}}},setTransition:a=>{e.slides.map(l=>Be(l)).forEach(l=>{l.style.transitionDuration=`${a}ms`,l.querySelectorAll(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").forEach(u=>{u.style.transitionDuration=`${a}ms`})})},perspective:()=>!0,overwriteParams:()=>({watchSlidesProgress:!0})})}function $c(t){let{swiper:e,extendParams:i,on:r}=t;i({creativeEffect:{limitProgress:1,shadowPerProgress:!1,progressMultiplier:1,perspective:!0,prev:{translate:[0,0,0],rotate:[0,0,0],opacity:1,scale:1},next:{translate:[0,0,0],rotate:[0,0,0],opacity:1,scale:1}}});const n=o=>typeof o=="string"?o:`${o}px`;Je({effect:"creative",swiper:e,on:r,setTranslate:()=>{const{slides:o,wrapperEl:l,slidesSizesGrid:u}=e,d=e.params.creativeEffect,{progressMultiplier:c}=d,f=e.params.centeredSlides;if(f){const m=u[0]/2-e.params.slidesOffsetBefore||0;l.style.transform=`translateX(calc(50% - ${m}px))`}for(let m=0;m<o.length;m+=1){const g=o[m],v=g.progress,h=Math.min(Math.max(g.progress,-d.limitProgress),d.limitProgress);let p=h;f||(p=Math.min(Math.max(g.originalProgress,-d.limitProgress),d.limitProgress));const b=g.swiperSlideOffset,w=[e.params.cssMode?-b-e.translate:-b,0,0],y=[0,0,0];let E=!1;e.isHorizontal()||(w[1]=w[0],w[0]=0);let x={translate:[0,0,0],rotate:[0,0,0],scale:1,opacity:1};h<0?(x=d.next,E=!0):h>0&&(x=d.prev,E=!0),w.forEach((_,M)=>{w[M]=`calc(${_}px + (${n(x.translate[M])} * ${Math.abs(h*c)}))`}),y.forEach((_,M)=>{let D=x.rotate[M]*Math.abs(h*c);e.browser&&e.browser.need3dFix&&Math.abs(D)/90%2===1&&(D+=.001),y[M]=D}),g.style.zIndex=-Math.abs(Math.round(v))+o.length;const A=w.join(", "),S=`rotateX(${y[0]}deg) rotateY(${y[1]}deg) rotateZ(${y[2]}deg)`,P=p<0?`scale(${1+(1-x.scale)*p*c})`:`scale(${1-(1-x.scale)*p*c})`,C=p<0?1+(1-x.opacity)*p*c:1-(1-x.opacity)*p*c,O=`translate3d(${A}) ${S} ${P}`;if(E&&x.shadow||!E){let _=g.querySelector(".swiper-slide-shadow");if(!_&&x.shadow&&(_=Xe("creative",g)),_){const M=d.shadowPerProgress?h*(1/d.limitProgress):h;_.style.opacity=Math.min(Math.max(Math.abs(M),0),1)}}const T=vt(d,g);T.style.transform=O,T.style.opacity=C,x.origin&&(T.style.transformOrigin=x.origin)}},setTransition:o=>{const l=e.slides.map(u=>Be(u));l.forEach(u=>{u.style.transitionDuration=`${o}ms`,u.querySelectorAll(".swiper-slide-shadow").forEach(d=>{d.style.transitionDuration=`${o}ms`})}),Qt({swiper:e,duration:o,transformElements:l,allSlides:!0})},perspective:()=>e.params.creativeEffect.perspective,overwriteParams:()=>({watchSlidesProgress:!0,virtualTranslate:!e.params.cssMode})})}function zc(t){let{swiper:e,extendParams:i,on:r}=t;i({cardsEffect:{slideShadows:!0,rotate:!0,perSlideRotate:2,perSlideOffset:8}}),Je({effect:"cards",swiper:e,on:r,setTranslate:()=>{const{slides:a,activeIndex:o,rtlTranslate:l}=e,u=e.params.cardsEffect,{startTranslate:d,isTouched:c}=e.touchEventsData,f=l?-e.translate:e.translate;for(let m=0;m<a.length;m+=1){const g=a[m],v=g.progress,h=Math.min(Math.max(v,-4),4);let p=g.swiperSlideOffset;e.params.centeredSlides&&!e.params.cssMode&&(e.wrapperEl.style.transform=`translateX(${e.minTranslate()}px)`),e.params.centeredSlides&&e.params.cssMode&&(p-=a[0].swiperSlideOffset);let b=e.params.cssMode?-p-e.translate:-p,w=0;const y=-100*Math.abs(h);let E=1,x=-u.perSlideRotate*h,A=u.perSlideOffset-Math.abs(h)*.75;const S=e.virtual&&e.params.virtual.enabled?e.virtual.from+m:m,P=(S===o||S===o-1)&&h>0&&h<1&&(c||e.params.cssMode)&&f<d,C=(S===o||S===o+1)&&h<0&&h>-1&&(c||e.params.cssMode)&&f>d;if(P||C){const M=(1-Math.abs((Math.abs(h)-.5)/.5))**.5;x+=-28*h*M,E+=-.5*M,A+=96*M,w=`${-25*M*Math.abs(h)}%`}if(h<0?b=`calc(${b}px ${l?"-":"+"} (${A*Math.abs(h)}%))`:h>0?b=`calc(${b}px ${l?"-":"+"} (-${A*Math.abs(h)}%))`:b=`${b}px`,!e.isHorizontal()){const M=w;w=b,b=M}const O=h<0?`${1+(1-E)*h}`:`${1-(1-E)*h}`,T=`
        translate3d(${b}, ${w}, ${y}px)
        rotateZ(${u.rotate?l?-x:x:0}deg)
        scale(${O})
      `;if(u.slideShadows){let M=g.querySelector(".swiper-slide-shadow");M||(M=Xe("cards",g)),M&&(M.style.opacity=Math.min(Math.max((Math.abs(h)-.5)/.5,0),1))}g.style.zIndex=-Math.abs(Math.round(v))+a.length;const _=vt(u,g);_.style.transform=T}},setTransition:a=>{const o=e.slides.map(l=>Be(l));o.forEach(l=>{l.style.transitionDuration=`${a}ms`,l.querySelectorAll(".swiper-slide-shadow").forEach(u=>{u.style.transitionDuration=`${a}ms`})}),Qt({swiper:e,duration:a,transformElements:o})},perspective:()=>!0,overwriteParams:()=>({watchSlidesProgress:!0,virtualTranslate:!e.params.cssMode})})}const Rc=[lc,cc,dc,uc,fc,pc,mc,hc,gc,vc,wc,bc,yc,xc,Sc,Ec,Pc,Lc,Ic,Oc,Dc,$c,zc];Q.use(Rc);var ys=["input","select","textarea","a[href]","button","[tabindex]:not(slot)","audio[controls]","video[controls]",'[contenteditable]:not([contenteditable="false"])',"details>summary:first-of-type","details"],Bt=ys.join(","),xs=typeof Element>"u",Re=xs?function(){}:Element.prototype.matches||Element.prototype.msMatchesSelector||Element.prototype.webkitMatchesSelector,Hi=!xs&&Element.prototype.getRootNode?function(t){return t.getRootNode()}:function(t){return t.ownerDocument},Ss=function(e,i,r){var n=Array.prototype.slice.apply(e.querySelectorAll(Bt));return i&&Re.call(e,Bt)&&n.unshift(e),n=n.filter(r),n},Es=function t(e,i,r){for(var n=[],s=Array.from(e);s.length;){var a=s.shift();if(a.tagName==="SLOT"){var o=a.assignedElements(),l=o.length?o:a.children,u=t(l,!0,r);r.flatten?n.push.apply(n,u):n.push({scope:a,candidates:u})}else{var d=Re.call(a,Bt);d&&r.filter(a)&&(i||!e.includes(a))&&n.push(a);var c=a.shadowRoot||typeof r.getShadowRoot=="function"&&r.getShadowRoot(a),f=!r.shadowRootFilter||r.shadowRootFilter(a);if(c&&f){var m=t(c===!0?a.children:c.children,!0,r);r.flatten?n.push.apply(n,m):n.push({scope:a,candidates:m})}else s.unshift.apply(s,a.children)}}return n},Ts=function(e,i){return e.tabIndex<0&&(i||/^(AUDIO|VIDEO|DETAILS)$/.test(e.tagName)||e.isContentEditable)&&isNaN(parseInt(e.getAttribute("tabindex"),10))?0:e.tabIndex},kc=function(e,i){return e.tabIndex===i.tabIndex?e.documentOrder-i.documentOrder:e.tabIndex-i.tabIndex},_s=function(e){return e.tagName==="INPUT"},Fc=function(e){return _s(e)&&e.type==="hidden"},Nc=function(e){var i=e.tagName==="DETAILS"&&Array.prototype.slice.apply(e.children).some(function(r){return r.tagName==="SUMMARY"});return i},Bc=function(e,i){for(var r=0;r<e.length;r++)if(e[r].checked&&e[r].form===i)return e[r]},Hc=function(e){if(!e.name)return!0;var i=e.form||Hi(e),r=function(o){return i.querySelectorAll('input[type="radio"][name="'+o+'"]')},n;if(typeof window<"u"&&typeof window.CSS<"u"&&typeof window.CSS.escape=="function")n=r(window.CSS.escape(e.name));else try{n=r(e.name)}catch(a){return console.error("Looks like you have a radio button with a name attribute containing invalid CSS selector characters and need the CSS.escape polyfill: %s",a.message),!1}var s=Bc(n,e.form);return!s||s===e},Gc=function(e){return _s(e)&&e.type==="radio"},Vc=function(e){return Gc(e)&&!Hc(e)},Br=function(e){var i=e.getBoundingClientRect(),r=i.width,n=i.height;return r===0&&n===0},jc=function(e,i){var r=i.displayCheck,n=i.getShadowRoot;if(getComputedStyle(e).visibility==="hidden")return!0;var s=Re.call(e,"details>summary:first-of-type"),a=s?e.parentElement:e;if(Re.call(a,"details:not([open]) *"))return!0;var o=Hi(e).host,l=(o==null?void 0:o.ownerDocument.contains(o))||e.ownerDocument.contains(e);if(!r||r==="full"){if(typeof n=="function"){for(var u=e;e;){var d=e.parentElement,c=Hi(e);if(d&&!d.shadowRoot&&n(d)===!0)return Br(e);e.assignedSlot?e=e.assignedSlot:!d&&c!==e.ownerDocument?e=c.host:e=d}e=u}if(l)return!e.getClientRects().length}else if(r==="non-zero-area")return Br(e);return!1},Wc=function(e){if(/^(INPUT|BUTTON|SELECT|TEXTAREA)$/.test(e.tagName))for(var i=e.parentElement;i;){if(i.tagName==="FIELDSET"&&i.disabled){for(var r=0;r<i.children.length;r++){var n=i.children.item(r);if(n.tagName==="LEGEND")return Re.call(i,"fieldset[disabled] *")?!0:!n.contains(e)}return!0}i=i.parentElement}return!1},Ht=function(e,i){return!(i.disabled||Fc(i)||jc(i,e)||Nc(i)||Wc(i))},Gi=function(e,i){return!(Vc(i)||Ts(i)<0||!Ht(e,i))},Xc=function(e){var i=parseInt(e.getAttribute("tabindex"),10);return!!(isNaN(i)||i>=0)},qc=function t(e){var i=[],r=[];return e.forEach(function(n,s){var a=!!n.scope,o=a?n.scope:n,l=Ts(o,a),u=a?t(n.candidates):o;l===0?a?i.push.apply(i,u):i.push(o):r.push({documentOrder:s,tabIndex:l,item:n,isScope:a,content:u})}),r.sort(kc).reduce(function(n,s){return s.isScope?n.push.apply(n,s.content):n.push(s.content),n},[]).concat(i)},Yc=function(e,i){i=i||{};var r;return i.getShadowRoot?r=Es([e],i.includeContainer,{filter:Gi.bind(null,i),flatten:!1,getShadowRoot:i.getShadowRoot,shadowRootFilter:Xc}):r=Ss(e,i.includeContainer,Gi.bind(null,i)),qc(r)},Cs=function(e,i){i=i||{};var r;return i.getShadowRoot?r=Es([e],i.includeContainer,{filter:Ht.bind(null,i),flatten:!0,getShadowRoot:i.getShadowRoot}):r=Ss(e,i.includeContainer,Ht.bind(null,i)),r},Mt=function(e,i){if(i=i||{},!e)throw new Error("No node provided");return Re.call(e,Bt)===!1?!1:Gi(i,e)},Uc=ys.concat("iframe").join(","),Dt=function(e,i){if(i=i||{},!e)throw new Error("No node provided");return Re.call(e,Uc)===!1?!1:Ht(i,e)};function Hr(t,e){var i=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter(function(n){return Object.getOwnPropertyDescriptor(t,n).enumerable})),i.push.apply(i,r)}return i}function Gr(t){for(var e=1;e<arguments.length;e++){var i=arguments[e]!=null?arguments[e]:{};e%2?Hr(Object(i),!0).forEach(function(r){Kc(t,r,i[r])}):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(i)):Hr(Object(i)).forEach(function(r){Object.defineProperty(t,r,Object.getOwnPropertyDescriptor(i,r))})}return t}function Kc(t,e,i){return e in t?Object.defineProperty(t,e,{value:i,enumerable:!0,configurable:!0,writable:!0}):t[e]=i,t}var Vr=function(){var t=[];return{activateTrap:function(i){if(t.length>0){var r=t[t.length-1];r!==i&&r.pause()}var n=t.indexOf(i);n===-1||t.splice(n,1),t.push(i)},deactivateTrap:function(i){var r=t.indexOf(i);r!==-1&&t.splice(r,1),t.length>0&&t[t.length-1].unpause()}}}(),Jc=function(e){return e.tagName&&e.tagName.toLowerCase()==="input"&&typeof e.select=="function"},Zc=function(e){return e.key==="Escape"||e.key==="Esc"||e.keyCode===27},Qc=function(e){return e.key==="Tab"||e.keyCode===9},jr=function(e){return setTimeout(e,0)},Wr=function(e,i){var r=-1;return e.every(function(n,s){return i(n)?(r=s,!1):!0}),r},rt=function(e){for(var i=arguments.length,r=new Array(i>1?i-1:0),n=1;n<i;n++)r[n-1]=arguments[n];return typeof e=="function"?e.apply(void 0,r):e},At=function(e){return e.target.shadowRoot&&typeof e.composedPath=="function"?e.composedPath()[0]:e.target},ed=function(e,i){var r=(i==null?void 0:i.document)||document,n=Gr({returnFocusOnDeactivate:!0,escapeDeactivates:!0,delayInitialFocus:!0},i),s={containers:[],containerGroups:[],tabbableGroups:[],nodeFocusedBeforeActivation:null,mostRecentlyFocusedNode:null,active:!1,paused:!1,delayInitialFocusTimer:void 0},a,o=function(x,A,S){return x&&x[A]!==void 0?x[A]:n[S||A]},l=function(x){return s.containerGroups.findIndex(function(A){var S=A.container,P=A.tabbableNodes;return S.contains(x)||P.find(function(C){return C===x})})},u=function(x){var A=n[x];if(typeof A=="function"){for(var S=arguments.length,P=new Array(S>1?S-1:0),C=1;C<S;C++)P[C-1]=arguments[C];A=A.apply(void 0,P)}if(A===!0&&(A=void 0),!A){if(A===void 0||A===!1)return A;throw new Error("`".concat(x,"` was specified but was not a node, or did not return a node"))}var O=A;if(typeof A=="string"&&(O=r.querySelector(A),!O))throw new Error("`".concat(x,"` as selector refers to no known node"));return O},d=function(){var x=u("initialFocus");if(x===!1)return!1;if(x===void 0)if(l(r.activeElement)>=0)x=r.activeElement;else{var A=s.tabbableGroups[0],S=A&&A.firstTabbableNode;x=S||u("fallbackFocus")}if(!x)throw new Error("Your focus-trap needs to have at least one focusable element");return x},c=function(){if(s.containerGroups=s.containers.map(function(x){var A=Yc(x,n.tabbableOptions),S=Cs(x,n.tabbableOptions);return{container:x,tabbableNodes:A,focusableNodes:S,firstTabbableNode:A.length>0?A[0]:null,lastTabbableNode:A.length>0?A[A.length-1]:null,nextTabbableNode:function(C){var O=arguments.length>1&&arguments[1]!==void 0?arguments[1]:!0,T=S.findIndex(function(_){return _===C});if(!(T<0))return O?S.slice(T+1).find(function(_){return Mt(_,n.tabbableOptions)}):S.slice(0,T).reverse().find(function(_){return Mt(_,n.tabbableOptions)})}}}),s.tabbableGroups=s.containerGroups.filter(function(x){return x.tabbableNodes.length>0}),s.tabbableGroups.length<=0&&!u("fallbackFocus"))throw new Error("Your focus-trap must have at least one container with at least one tabbable node in it at all times")},f=function E(x){if(x!==!1&&x!==r.activeElement){if(!x||!x.focus){E(d());return}x.focus({preventScroll:!!n.preventScroll}),s.mostRecentlyFocusedNode=x,Jc(x)&&x.select()}},m=function(x){var A=u("setReturnFocus",x);return A||(A===!1?!1:x)},g=function(x){var A=At(x);if(!(l(A)>=0)){if(rt(n.clickOutsideDeactivates,x)){a.deactivate({returnFocus:n.returnFocusOnDeactivate&&!Dt(A,n.tabbableOptions)});return}rt(n.allowOutsideClick,x)||x.preventDefault()}},v=function(x){var A=At(x),S=l(A)>=0;S||A instanceof Document?S&&(s.mostRecentlyFocusedNode=A):(x.stopImmediatePropagation(),f(s.mostRecentlyFocusedNode||d()))},h=function(x){var A=At(x);c();var S=null;if(s.tabbableGroups.length>0){var P=l(A),C=P>=0?s.containerGroups[P]:void 0;if(P<0)x.shiftKey?S=s.tabbableGroups[s.tabbableGroups.length-1].lastTabbableNode:S=s.tabbableGroups[0].firstTabbableNode;else if(x.shiftKey){var O=Wr(s.tabbableGroups,function(L){var I=L.firstTabbableNode;return A===I});if(O<0&&(C.container===A||Dt(A,n.tabbableOptions)&&!Mt(A,n.tabbableOptions)&&!C.nextTabbableNode(A,!1))&&(O=P),O>=0){var T=O===0?s.tabbableGroups.length-1:O-1,_=s.tabbableGroups[T];S=_.lastTabbableNode}}else{var M=Wr(s.tabbableGroups,function(L){var I=L.lastTabbableNode;return A===I});if(M<0&&(C.container===A||Dt(A,n.tabbableOptions)&&!Mt(A,n.tabbableOptions)&&!C.nextTabbableNode(A))&&(M=P),M>=0){var D=M===s.tabbableGroups.length-1?0:M+1,k=s.tabbableGroups[D];S=k.firstTabbableNode}}}else S=u("fallbackFocus");S&&(x.preventDefault(),f(S))},p=function(x){if(Zc(x)&&rt(n.escapeDeactivates,x)!==!1){x.preventDefault(),a.deactivate();return}if(Qc(x)){h(x);return}},b=function(x){var A=At(x);l(A)>=0||rt(n.clickOutsideDeactivates,x)||rt(n.allowOutsideClick,x)||(x.preventDefault(),x.stopImmediatePropagation())},w=function(){if(s.active)return Vr.activateTrap(a),s.delayInitialFocusTimer=n.delayInitialFocus?jr(function(){f(d())}):f(d()),r.addEventListener("focusin",v,!0),r.addEventListener("mousedown",g,{capture:!0,passive:!1}),r.addEventListener("touchstart",g,{capture:!0,passive:!1}),r.addEventListener("click",b,{capture:!0,passive:!1}),r.addEventListener("keydown",p,{capture:!0,passive:!1}),a},y=function(){if(s.active)return r.removeEventListener("focusin",v,!0),r.removeEventListener("mousedown",g,!0),r.removeEventListener("touchstart",g,!0),r.removeEventListener("click",b,!0),r.removeEventListener("keydown",p,!0),a};return a={get active(){return s.active},get paused(){return s.paused},activate:function(x){if(s.active)return this;var A=o(x,"onActivate"),S=o(x,"onPostActivate"),P=o(x,"checkCanFocusTrap");P||c(),s.active=!0,s.paused=!1,s.nodeFocusedBeforeActivation=r.activeElement,A&&A();var C=function(){P&&c(),w(),S&&S()};return P?(P(s.containers.concat()).then(C,C),this):(C(),this)},deactivate:function(x){if(!s.active)return this;var A=Gr({onDeactivate:n.onDeactivate,onPostDeactivate:n.onPostDeactivate,checkCanReturnFocus:n.checkCanReturnFocus},x);clearTimeout(s.delayInitialFocusTimer),s.delayInitialFocusTimer=void 0,y(),s.active=!1,s.paused=!1,Vr.deactivateTrap(a);var S=o(A,"onDeactivate"),P=o(A,"onPostDeactivate"),C=o(A,"checkCanReturnFocus"),O=o(A,"returnFocus","returnFocusOnDeactivate");S&&S();var T=function(){jr(function(){O&&f(m(s.nodeFocusedBeforeActivation)),P&&P()})};return O&&C?(C(m(s.nodeFocusedBeforeActivation)).then(T,T),this):(T(),this)},pause:function(){return s.paused||!s.active?this:(s.paused=!0,y(),this)},unpause:function(){return!s.paused||!s.active?this:(s.paused=!1,c(),w(),this)},updateContainerElements:function(x){var A=[].concat(x).filter(Boolean);return s.containers=A.map(function(S){return typeof S=="string"?r.querySelector(S):S}),s.active&&c(),this}},a.updateContainerElements(e),a};function td(t){let e,i;window.addEventListener("focusin",()=>{e=i,i=document.activeElement}),t.magic("focus",r=>{let n=r;return{__noscroll:!1,__wrapAround:!1,within(s){return n=s,this},withoutScrolling(){return this.__noscroll=!0,this},noscroll(){return this.__noscroll=!0,this},withWrapAround(){return this.__wrapAround=!0,this},wrap(){return this.withWrapAround()},focusable(s){return Dt(s)},previouslyFocused(){return e},lastFocused(){return e},focused(){return i},focusables(){return Array.isArray(n)?n:Cs(n,{displayCheck:"none"})},all(){return this.focusables()},isFirst(s){let a=this.all();return a[0]&&a[0].isSameNode(s)},isLast(s){let a=this.all();return a.length&&a.slice(-1)[0].isSameNode(s)},getFirst(){return this.all()[0]},getLast(){return this.all().slice(-1)[0]},getNext(){let s=this.all(),a=document.activeElement;if(s.indexOf(a)!==-1)return this.__wrapAround&&s.indexOf(a)===s.length-1?s[0]:s[s.indexOf(a)+1]},getPrevious(){let s=this.all(),a=document.activeElement;if(s.indexOf(a)!==-1)return this.__wrapAround&&s.indexOf(a)===0?s.slice(-1)[0]:s[s.indexOf(a)-1]},first(){this.focus(this.getFirst())},last(){this.focus(this.getLast())},next(){this.focus(this.getNext())},previous(){this.focus(this.getPrevious())},prev(){return this.previous()},focus(s){s&&setTimeout(()=>{s.hasAttribute("tabindex")||s.setAttribute("tabindex","0"),s.focus({preventScroll:this.__noscroll})})}}}),t.directive("trap",t.skipDuringClone((r,{expression:n,modifiers:s},{effect:a,evaluateLater:o,cleanup:l})=>{let u=o(n),d=!1,c={escapeDeactivates:!1,allowOutsideClick:!0,fallbackFocus:()=>r};if(s.includes("noautofocus"))c.initialFocus=!1;else{let h=r.querySelector("[autofocus]");h&&(c.initialFocus=h)}let f=ed(r,c),m=()=>{},g=()=>{};const v=()=>{m(),m=()=>{},g(),g=()=>{},f.deactivate({returnFocus:!s.includes("noreturn")})};a(()=>u(h=>{d!==h&&(h&&!d&&(s.includes("noscroll")&&(g=id()),s.includes("inert")&&(m=Xr(r)),setTimeout(()=>{f.activate()},15)),!h&&d&&v(),d=!!h)})),l(v)},(r,{expression:n,modifiers:s},{evaluate:a})=>{s.includes("inert")&&a(n)&&Xr(r)}))}function Xr(t){let e=[];return Ms(t,i=>{let r=i.hasAttribute("aria-hidden");i.setAttribute("aria-hidden","true"),e.push(()=>r||i.removeAttribute("aria-hidden"))}),()=>{for(;e.length;)e.pop()()}}function Ms(t,e){t.isSameNode(document.body)||!t.parentNode||Array.from(t.parentNode.children).forEach(i=>{i.isSameNode(t)?Ms(t.parentNode,e):e(i)})}function id(){let t=document.documentElement.style.overflow,e=document.documentElement.style.paddingRight,i=window.innerWidth-document.documentElement.clientWidth;return document.documentElement.style.overflow="hidden",document.documentElement.style.paddingRight=`${i}px`,()=>{document.documentElement.style.overflow=t,document.documentElement.style.paddingRight=e}}var rd=td;/*! Bundled license information:

tabbable/dist/index.esm.js:
  (*!
  * tabbable 5.3.3
  * @license MIT, https://github.com/focus-trap/tabbable/blob/master/LICENSE
  *)

focus-trap/dist/focus-trap.esm.js:
  (*!
  * focus-trap 6.9.4
  * @license MIT, https://github.com/focus-trap/focus-trap/blob/master/LICENSE
  *)
*/function nd(t){t.directive("collapse",e),e.inline=(i,{modifiers:r})=>{r.includes("min")&&(i._x_doShow=()=>{},i._x_doHide=()=>{})};function e(i,{modifiers:r}){let n=qr(r,"duration",250)/1e3,s=qr(r,"min",0),a=!r.includes("min");i._x_isShown||(i.style.height=`${s}px`),!i._x_isShown&&a&&(i.hidden=!0),i._x_isShown||(i.style.overflow="hidden");let o=(u,d)=>{let c=t.setStyles(u,d);return d.height?()=>{}:c},l={transitionProperty:"height",transitionDuration:`${n}s`,transitionTimingFunction:"cubic-bezier(0.4, 0.0, 0.2, 1)"};i._x_transition={in(u=()=>{},d=()=>{}){a&&(i.hidden=!1),a&&(i.style.display=null);let c=i.getBoundingClientRect().height;i.style.height="auto";let f=i.getBoundingClientRect().height;c===f&&(c=s),t.transition(i,t.setStyles,{during:l,start:{height:c+"px"},end:{height:f+"px"}},()=>i._x_isShown=!0,()=>{Math.abs(i.getBoundingClientRect().height-f)<1&&(i.style.overflow=null)})},out(u=()=>{},d=()=>{}){let c=i.getBoundingClientRect().height;t.transition(i,o,{during:l,start:{height:c+"px"},end:{height:s+"px"}},()=>i.style.overflow="hidden",()=>{i._x_isShown=!1,i.style.height==`${s}px`&&a&&(i.style.display="none",i.hidden=!0)})}}}}function qr(t,e,i){if(t.indexOf(e)===-1)return i;const r=t[t.indexOf(e)+1];if(!r)return i;if(e==="duration"){let n=r.match(/([0-9]+)ms/);if(n)return n[1]}if(e==="min"){let n=r.match(/([0-9]+)px/);if(n)return n[1]}return r}var sd=nd,Gt=Math.min,$e=Math.max,Vt=Math.round,Pt=Math.floor,Ee=t=>({x:t,y:t}),ad={left:"right",right:"left",bottom:"top",top:"bottom"},od={start:"end",end:"start"};function Yr(t,e,i){return $e(t,Gt(e,i))}function ei(t,e){return typeof t=="function"?t(e):t}function ke(t){return t.split("-")[0]}function ti(t){return t.split("-")[1]}function As(t){return t==="x"?"y":"x"}function Ps(t){return t==="y"?"height":"width"}function ii(t){return["top","bottom"].includes(ke(t))?"y":"x"}function Ls(t){return As(ii(t))}function ld(t,e,i){i===void 0&&(i=!1);const r=ti(t),n=Ls(t),s=Ps(n);let a=n==="x"?r===(i?"end":"start")?"right":"left":r==="start"?"bottom":"top";return e.reference[s]>e.floating[s]&&(a=jt(a)),[a,jt(a)]}function cd(t){const e=jt(t);return[Vi(t),e,Vi(e)]}function Vi(t){return t.replace(/start|end/g,e=>od[e])}function dd(t,e,i){const r=["left","right"],n=["right","left"],s=["top","bottom"],a=["bottom","top"];switch(t){case"top":case"bottom":return i?e?n:r:e?r:n;case"left":case"right":return e?s:a;default:return[]}}function ud(t,e,i,r){const n=ti(t);let s=dd(ke(t),i==="start",r);return n&&(s=s.map(a=>a+"-"+n),e&&(s=s.concat(s.map(Vi)))),s}function jt(t){return t.replace(/left|right|bottom|top/g,e=>ad[e])}function fd(t){return{top:0,right:0,bottom:0,left:0,...t}}function pd(t){return typeof t!="number"?fd(t):{top:t,right:t,bottom:t,left:t}}function Wt(t){return{...t,top:t.y,left:t.x,right:t.x+t.width,bottom:t.y+t.height}}function Ur(t,e,i){let{reference:r,floating:n}=t;const s=ii(e),a=Ls(e),o=Ps(a),l=ke(e),u=s==="y",d=r.x+r.width/2-n.width/2,c=r.y+r.height/2-n.height/2,f=r[o]/2-n[o]/2;let m;switch(l){case"top":m={x:d,y:r.y-n.height};break;case"bottom":m={x:d,y:r.y+r.height};break;case"right":m={x:r.x+r.width,y:c};break;case"left":m={x:r.x-n.width,y:c};break;default:m={x:r.x,y:r.y}}switch(ti(e)){case"start":m[a]-=f*(i&&u?-1:1);break;case"end":m[a]+=f*(i&&u?-1:1);break}return m}var md=async(t,e,i)=>{const{placement:r="bottom",strategy:n="absolute",middleware:s=[],platform:a}=i,o=s.filter(Boolean),l=await(a.isRTL==null?void 0:a.isRTL(e));let u=await a.getElementRects({reference:t,floating:e,strategy:n}),{x:d,y:c}=Ur(u,r,l),f=r,m={},g=0;for(let v=0;v<o.length;v++){const{name:h,fn:p}=o[v],{x:b,y:w,data:y,reset:E}=await p({x:d,y:c,initialPlacement:r,placement:f,strategy:n,middlewareData:m,rects:u,platform:a,elements:{reference:t,floating:e}});if(d=b??d,c=w??c,m={...m,[h]:{...m[h],...y}},E&&g<=50){g++,typeof E=="object"&&(E.placement&&(f=E.placement),E.rects&&(u=E.rects===!0?await a.getElementRects({reference:t,floating:e,strategy:n}):E.rects),{x:d,y:c}=Ur(u,f,l)),v=-1;continue}}return{x:d,y:c,placement:f,strategy:n,middlewareData:m}};async function Is(t,e){var i;e===void 0&&(e={});const{x:r,y:n,platform:s,rects:a,elements:o,strategy:l}=t,{boundary:u="clippingAncestors",rootBoundary:d="viewport",elementContext:c="floating",altBoundary:f=!1,padding:m=0}=ei(e,t),g=pd(m),h=o[f?c==="floating"?"reference":"floating":c],p=Wt(await s.getClippingRect({element:(i=await(s.isElement==null?void 0:s.isElement(h)))==null||i?h:h.contextElement||await(s.getDocumentElement==null?void 0:s.getDocumentElement(o.floating)),boundary:u,rootBoundary:d,strategy:l})),b=c==="floating"?{...a.floating,x:r,y:n}:a.reference,w=await(s.getOffsetParent==null?void 0:s.getOffsetParent(o.floating)),y=await(s.isElement==null?void 0:s.isElement(w))?await(s.getScale==null?void 0:s.getScale(w))||{x:1,y:1}:{x:1,y:1},E=Wt(s.convertOffsetParentRelativeRectToViewportRelativeRect?await s.convertOffsetParentRelativeRectToViewportRelativeRect({rect:b,offsetParent:w,strategy:l}):b);return{top:(p.top-E.top+g.top)/y.y,bottom:(E.bottom-p.bottom+g.bottom)/y.y,left:(p.left-E.left+g.left)/y.x,right:(E.right-p.right+g.right)/y.x}}var hd=function(t){return t===void 0&&(t={}),{name:"flip",options:t,async fn(e){var i,r;const{placement:n,middlewareData:s,rects:a,initialPlacement:o,platform:l,elements:u}=e,{mainAxis:d=!0,crossAxis:c=!0,fallbackPlacements:f,fallbackStrategy:m="bestFit",fallbackAxisSideDirection:g="none",flipAlignment:v=!0,...h}=ei(t,e);if((i=s.arrow)!=null&&i.alignmentOffset)return{};const p=ke(n),b=ke(o)===o,w=await(l.isRTL==null?void 0:l.isRTL(u.floating)),y=f||(b||!v?[jt(o)]:cd(o));!f&&g!=="none"&&y.push(...ud(o,v,g,w));const E=[o,...y],x=await Is(e,h),A=[];let S=((r=s.flip)==null?void 0:r.overflows)||[];if(d&&A.push(x[p]),c){const T=ld(n,a,w);A.push(x[T[0]],x[T[1]])}if(S=[...S,{placement:n,overflows:A}],!A.every(T=>T<=0)){var P,C;const T=(((P=s.flip)==null?void 0:P.index)||0)+1,_=E[T];if(_)return{data:{index:T,overflows:S},reset:{placement:_}};let M=(C=S.filter(D=>D.overflows[0]<=0).sort((D,k)=>D.overflows[1]-k.overflows[1])[0])==null?void 0:C.placement;if(!M)switch(m){case"bestFit":{var O;const D=(O=S.map(k=>[k.placement,k.overflows.filter(L=>L>0).reduce((L,I)=>L+I,0)]).sort((k,L)=>k[1]-L[1])[0])==null?void 0:O[0];D&&(M=D);break}case"initialPlacement":M=o;break}if(n!==M)return{reset:{placement:M}}}return{}}}};async function gd(t,e){const{placement:i,platform:r,elements:n}=t,s=await(r.isRTL==null?void 0:r.isRTL(n.floating)),a=ke(i),o=ti(i),l=ii(i)==="y",u=["left","top"].includes(a)?-1:1,d=s&&l?-1:1,c=ei(e,t);let{mainAxis:f,crossAxis:m,alignmentAxis:g}=typeof c=="number"?{mainAxis:c,crossAxis:0,alignmentAxis:null}:{mainAxis:0,crossAxis:0,alignmentAxis:null,...c};return o&&typeof g=="number"&&(m=o==="end"?g*-1:g),l?{x:m*d,y:f*u}:{x:f*u,y:m*d}}var vd=function(t){return t===void 0&&(t=0),{name:"offset",options:t,async fn(e){const{x:i,y:r}=e,n=await gd(e,t);return{x:i+n.x,y:r+n.y,data:n}}}},wd=function(t){return t===void 0&&(t={}),{name:"shift",options:t,async fn(e){const{x:i,y:r,placement:n}=e,{mainAxis:s=!0,crossAxis:a=!1,limiter:o={fn:h=>{let{x:p,y:b}=h;return{x:p,y:b}}},...l}=ei(t,e),u={x:i,y:r},d=await Is(e,l),c=ii(ke(n)),f=As(c);let m=u[f],g=u[c];if(s){const h=f==="y"?"top":"left",p=f==="y"?"bottom":"right",b=m+d[h],w=m-d[p];m=Yr(b,m,w)}if(a){const h=c==="y"?"top":"left",p=c==="y"?"bottom":"right",b=g+d[h],w=g-d[p];g=Yr(b,g,w)}const v=o.fn({...e,[f]:m,[c]:g});return{...v,data:{x:v.x-i,y:v.y-r}}}}};function Te(t){return Os(t)?(t.nodeName||"").toLowerCase():"#document"}function re(t){var e;return(t==null||(e=t.ownerDocument)==null?void 0:e.defaultView)||window}function ge(t){var e;return(e=(Os(t)?t.ownerDocument:t.document)||window.document)==null?void 0:e.documentElement}function Os(t){return t instanceof Node||t instanceof re(t).Node}function he(t){return t instanceof Element||t instanceof re(t).Element}function ue(t){return t instanceof HTMLElement||t instanceof re(t).HTMLElement}function Kr(t){return typeof ShadowRoot>"u"?!1:t instanceof ShadowRoot||t instanceof re(t).ShadowRoot}function wt(t){const{overflow:e,overflowX:i,overflowY:r,display:n}=ae(t);return/auto|scroll|overlay|hidden|clip/.test(e+r+i)&&!["inline","contents"].includes(n)}function bd(t){return["table","td","th"].includes(Te(t))}function fr(t){const e=pr(),i=ae(t);return i.transform!=="none"||i.perspective!=="none"||(i.containerType?i.containerType!=="normal":!1)||!e&&(i.backdropFilter?i.backdropFilter!=="none":!1)||!e&&(i.filter?i.filter!=="none":!1)||["transform","perspective","filter"].some(r=>(i.willChange||"").includes(r))||["paint","layout","strict","content"].some(r=>(i.contain||"").includes(r))}function yd(t){let e=qe(t);for(;ue(e)&&!ri(e);){if(fr(e))return e;e=qe(e)}return null}function pr(){return typeof CSS>"u"||!CSS.supports?!1:CSS.supports("-webkit-backdrop-filter","none")}function ri(t){return["html","body","#document"].includes(Te(t))}function ae(t){return re(t).getComputedStyle(t)}function ni(t){return he(t)?{scrollLeft:t.scrollLeft,scrollTop:t.scrollTop}:{scrollLeft:t.pageXOffset,scrollTop:t.pageYOffset}}function qe(t){if(Te(t)==="html")return t;const e=t.assignedSlot||t.parentNode||Kr(t)&&t.host||ge(t);return Kr(e)?e.host:e}function Ds(t){const e=qe(t);return ri(e)?t.ownerDocument?t.ownerDocument.body:t.body:ue(e)&&wt(e)?e:Ds(e)}function ft(t,e,i){var r;e===void 0&&(e=[]),i===void 0&&(i=!0);const n=Ds(t),s=n===((r=t.ownerDocument)==null?void 0:r.body),a=re(n);return s?e.concat(a,a.visualViewport||[],wt(n)?n:[],a.frameElement&&i?ft(a.frameElement):[]):e.concat(n,ft(n,[],i))}function $s(t){const e=ae(t);let i=parseFloat(e.width)||0,r=parseFloat(e.height)||0;const n=ue(t),s=n?t.offsetWidth:i,a=n?t.offsetHeight:r,o=Vt(i)!==s||Vt(r)!==a;return o&&(i=s,r=a),{width:i,height:r,$:o}}function mr(t){return he(t)?t:t.contextElement}function Ve(t){const e=mr(t);if(!ue(e))return Ee(1);const i=e.getBoundingClientRect(),{width:r,height:n,$:s}=$s(e);let a=(s?Vt(i.width):i.width)/r,o=(s?Vt(i.height):i.height)/n;return(!a||!Number.isFinite(a))&&(a=1),(!o||!Number.isFinite(o))&&(o=1),{x:a,y:o}}var xd=Ee(0);function zs(t){const e=re(t);return!pr()||!e.visualViewport?xd:{x:e.visualViewport.offsetLeft,y:e.visualViewport.offsetTop}}function Sd(t,e,i){return e===void 0&&(e=!1),!i||e&&i!==re(t)?!1:e}function Fe(t,e,i,r){e===void 0&&(e=!1),i===void 0&&(i=!1);const n=t.getBoundingClientRect(),s=mr(t);let a=Ee(1);e&&(r?he(r)&&(a=Ve(r)):a=Ve(t));const o=Sd(s,i,r)?zs(s):Ee(0);let l=(n.left+o.x)/a.x,u=(n.top+o.y)/a.y,d=n.width/a.x,c=n.height/a.y;if(s){const f=re(s),m=r&&he(r)?re(r):r;let g=f.frameElement;for(;g&&r&&m!==f;){const v=Ve(g),h=g.getBoundingClientRect(),p=ae(g),b=h.left+(g.clientLeft+parseFloat(p.paddingLeft))*v.x,w=h.top+(g.clientTop+parseFloat(p.paddingTop))*v.y;l*=v.x,u*=v.y,d*=v.x,c*=v.y,l+=b,u+=w,g=re(g).frameElement}}return Wt({width:d,height:c,x:l,y:u})}function Ed(t){let{rect:e,offsetParent:i,strategy:r}=t;const n=ue(i),s=ge(i);if(i===s)return e;let a={scrollLeft:0,scrollTop:0},o=Ee(1);const l=Ee(0);if((n||!n&&r!=="fixed")&&((Te(i)!=="body"||wt(s))&&(a=ni(i)),ue(i))){const u=Fe(i);o=Ve(i),l.x=u.x+i.clientLeft,l.y=u.y+i.clientTop}return{width:e.width*o.x,height:e.height*o.y,x:e.x*o.x-a.scrollLeft*o.x+l.x,y:e.y*o.y-a.scrollTop*o.y+l.y}}function Td(t){return Array.from(t.getClientRects())}function Rs(t){return Fe(ge(t)).left+ni(t).scrollLeft}function _d(t){const e=ge(t),i=ni(t),r=t.ownerDocument.body,n=$e(e.scrollWidth,e.clientWidth,r.scrollWidth,r.clientWidth),s=$e(e.scrollHeight,e.clientHeight,r.scrollHeight,r.clientHeight);let a=-i.scrollLeft+Rs(t);const o=-i.scrollTop;return ae(r).direction==="rtl"&&(a+=$e(e.clientWidth,r.clientWidth)-n),{width:n,height:s,x:a,y:o}}function Cd(t,e){const i=re(t),r=ge(t),n=i.visualViewport;let s=r.clientWidth,a=r.clientHeight,o=0,l=0;if(n){s=n.width,a=n.height;const u=pr();(!u||u&&e==="fixed")&&(o=n.offsetLeft,l=n.offsetTop)}return{width:s,height:a,x:o,y:l}}function Md(t,e){const i=Fe(t,!0,e==="fixed"),r=i.top+t.clientTop,n=i.left+t.clientLeft,s=ue(t)?Ve(t):Ee(1),a=t.clientWidth*s.x,o=t.clientHeight*s.y,l=n*s.x,u=r*s.y;return{width:a,height:o,x:l,y:u}}function Jr(t,e,i){let r;if(e==="viewport")r=Cd(t,i);else if(e==="document")r=_d(ge(t));else if(he(e))r=Md(e,i);else{const n=zs(t);r={...e,x:e.x-n.x,y:e.y-n.y}}return Wt(r)}function ks(t,e){const i=qe(t);return i===e||!he(i)||ri(i)?!1:ae(i).position==="fixed"||ks(i,e)}function Ad(t,e){const i=e.get(t);if(i)return i;let r=ft(t,[],!1).filter(o=>he(o)&&Te(o)!=="body"),n=null;const s=ae(t).position==="fixed";let a=s?qe(t):t;for(;he(a)&&!ri(a);){const o=ae(a),l=fr(a);!l&&o.position==="fixed"&&(n=null),(s?!l&&!n:!l&&o.position==="static"&&!!n&&["absolute","fixed"].includes(n.position)||wt(a)&&!l&&ks(t,a))?r=r.filter(d=>d!==a):n=o,a=qe(a)}return e.set(t,r),r}function Pd(t){let{element:e,boundary:i,rootBoundary:r,strategy:n}=t;const a=[...i==="clippingAncestors"?Ad(e,this._c):[].concat(i),r],o=a[0],l=a.reduce((u,d)=>{const c=Jr(e,d,n);return u.top=$e(c.top,u.top),u.right=Gt(c.right,u.right),u.bottom=Gt(c.bottom,u.bottom),u.left=$e(c.left,u.left),u},Jr(e,o,n));return{width:l.right-l.left,height:l.bottom-l.top,x:l.left,y:l.top}}function Ld(t){return $s(t)}function Id(t,e,i){const r=ue(e),n=ge(e),s=i==="fixed",a=Fe(t,!0,s,e);let o={scrollLeft:0,scrollTop:0};const l=Ee(0);if(r||!r&&!s)if((Te(e)!=="body"||wt(n))&&(o=ni(e)),r){const u=Fe(e,!0,s,e);l.x=u.x+e.clientLeft,l.y=u.y+e.clientTop}else n&&(l.x=Rs(n));return{x:a.left+o.scrollLeft-l.x,y:a.top+o.scrollTop-l.y,width:a.width,height:a.height}}function Zr(t,e){return!ue(t)||ae(t).position==="fixed"?null:e?e(t):t.offsetParent}function Fs(t,e){const i=re(t);if(!ue(t))return i;let r=Zr(t,e);for(;r&&bd(r)&&ae(r).position==="static";)r=Zr(r,e);return r&&(Te(r)==="html"||Te(r)==="body"&&ae(r).position==="static"&&!fr(r))?i:r||yd(t)||i}var Od=async function(t){let{reference:e,floating:i,strategy:r}=t;const n=this.getOffsetParent||Fs,s=this.getDimensions;return{reference:Id(e,await n(i),r),floating:{x:0,y:0,...await s(i)}}};function Dd(t){return ae(t).direction==="rtl"}var $d={convertOffsetParentRelativeRectToViewportRelativeRect:Ed,getDocumentElement:ge,getClippingRect:Pd,getOffsetParent:Fs,getElementRects:Od,getClientRects:Td,getDimensions:Ld,getScale:Ve,isElement:he,isRTL:Dd};function zd(t,e){let i=null,r;const n=ge(t);function s(){clearTimeout(r),i&&i.disconnect(),i=null}function a(o,l){o===void 0&&(o=!1),l===void 0&&(l=1),s();const{left:u,top:d,width:c,height:f}=t.getBoundingClientRect();if(o||e(),!c||!f)return;const m=Pt(d),g=Pt(n.clientWidth-(u+c)),v=Pt(n.clientHeight-(d+f)),h=Pt(u),b={rootMargin:-m+"px "+-g+"px "+-v+"px "+-h+"px",threshold:$e(0,Gt(1,l))||1};let w=!0;function y(E){const x=E[0].intersectionRatio;if(x!==l){if(!w)return a();x?a(!1,x):r=setTimeout(()=>{a(!1,1e-7)},100)}w=!1}try{i=new IntersectionObserver(y,{...b,root:n.ownerDocument})}catch{i=new IntersectionObserver(y,b)}i.observe(t)}return a(!0),s}function Rd(t,e,i,r){r===void 0&&(r={});const{ancestorScroll:n=!0,ancestorResize:s=!0,elementResize:a=typeof ResizeObserver=="function",layoutShift:o=typeof IntersectionObserver=="function",animationFrame:l=!1}=r,u=mr(t),d=n||s?[...u?ft(u):[],...ft(e)]:[];d.forEach(p=>{n&&p.addEventListener("scroll",i,{passive:!0}),s&&p.addEventListener("resize",i)});const c=u&&o?zd(u,i):null;let f=-1,m=null;a&&(m=new ResizeObserver(p=>{let[b]=p;b&&b.target===u&&m&&(m.unobserve(e),cancelAnimationFrame(f),f=requestAnimationFrame(()=>{m&&m.observe(e)})),i()}),u&&!l&&m.observe(u),m.observe(e));let g,v=l?Fe(t):null;l&&h();function h(){const p=Fe(t);v&&(p.x!==v.x||p.y!==v.y||p.width!==v.width||p.height!==v.height)&&i(),v=p,g=requestAnimationFrame(h)}return i(),()=>{d.forEach(p=>{n&&p.removeEventListener("scroll",i),s&&p.removeEventListener("resize",i)}),c&&c(),m&&m.disconnect(),m=null,l&&cancelAnimationFrame(g)}}var kd=(t,e,i)=>{const r=new Map,n={platform:$d,...i},s={...n.platform,_c:r};return md(t,e,{...n,platform:s})};function Fd(t){t.magic("anchor",e=>{if(!e._x_anchor)throw"Alpine: No x-anchor directive found on element using $anchor...";return e._x_anchor}),t.interceptClone((e,i)=>{e&&e._x_anchor&&!i._x_anchor&&(i._x_anchor=e._x_anchor)}),t.directive("anchor",t.skipDuringClone((e,{expression:i,modifiers:r,value:n},{cleanup:s,evaluate:a})=>{let{placement:o,offsetValue:l,unstyled:u}=en(r);e._x_anchor=t.reactive({x:0,y:0});let d=a(i);if(!d)throw"Alpine: no element provided to x-anchor...";let c=()=>{let m;kd(d,e,{placement:o,middleware:[hd(),wd({padding:5}),vd(l)]}).then(({x:g,y:v})=>{u||Qr(e,g,v),JSON.stringify({x:g,y:v})!==m&&(e._x_anchor.x=g,e._x_anchor.y=v),m=JSON.stringify({x:g,y:v})})},f=Rd(d,e,()=>c());s(()=>f())},(e,{expression:i,modifiers:r,value:n},{cleanup:s,evaluate:a})=>{let{placement:o,offsetValue:l,unstyled:u}=en(r);e._x_anchor&&(u||Qr(e,e._x_anchor.x,e._x_anchor.y))}))}function Qr(t,e,i){Object.assign(t.style,{left:e+"px",top:i+"px",position:"absolute"})}function en(t){let i=["top","top-start","top-end","right","right-start","right-end","bottom","bottom-start","bottom-end","left","left-start","left-end"].find(s=>t.includes(s)),r=0;if(t.includes("offset")){let s=t.findIndex(a=>a==="offset");r=t[s+1]!==void 0?Number(t[s+1]):r}let n=t.includes("no-style");return{placement:i,offsetValue:r,unstyled:n}}var Nd=Fd;de.data("product_gallery",()=>({swiperReference:null,init(){this.initSlider();let t=this;window.productGalleryGoToSlide=e=>t.goToSlide(e)},initSlider(){swiperThumbs=new Q(this.$refs.swiperThumbs,{slidesPerView:4,spaceBetween:10}),this.swiperReference=new Q(this.$refs.swiperContainer,{slidesPerView:1,spaceBetween:10,pagination:{el:this.$refs.pagination,clickable:!0},navigation:{nextEl:this.$refs.next_arrow,prevEl:this.$refs.prev_arrow},thumbs:{swiper:swiperThumbs}})},goToSlide(t){let e=parseInt(t)-1;this.swiperReference.slideTo(e)}}));function Bd(t){return t&&t.__esModule&&Object.prototype.hasOwnProperty.call(t,"default")?t.default:t}var Hd=/^(?:submit|button|image|reset|file)$/i,Gd=/^(?:input|select|textarea|keygen)/i,Ns=/(\[[^\[\]]*\])/g;function Vd(t,e){typeof e!="object"?e={hash:!!e}:e.hash===void 0&&(e.hash=!0);for(var i=e.hash?{}:"",r=e.serializer||(e.hash?Wd:Xd),n=t&&t.elements?t.elements:[],s=Object.create(null),a=0;a<n.length;++a){var o=n[a];if(!(!e.disabled&&o.disabled||!o.name)&&!(!Gd.test(o.nodeName)||Hd.test(o.type))){var l=o.name,u=o.value;if((o.type==="checkbox"||o.type==="radio")&&!o.checked&&(u=void 0),e.empty){if(o.type==="checkbox"&&!o.checked&&(u=""),o.type==="radio"&&(!s[o.name]&&!o.checked?s[o.name]=!1:o.checked&&(s[o.name]=!0)),u==null&&o.type=="radio")continue}else if(!u)continue;if(o.type==="select-multiple"){u=[];for(var d=o.options,c=!1,f=0;f<d.length;++f){var m=d[f],g=e.empty&&!m.value,v=m.value||g;m.selected&&v&&(c=!0,e.hash&&l.slice(l.length-2)!=="[]"?i=r(i,l+"[]",m.value):i=r(i,l,m.value))}!c&&e.empty&&(i=r(i,l,""));continue}i=r(i,l,u)}}if(e.empty)for(var l in s)s[l]||(i=r(i,l,""));return i}function jd(t){var e=[],i=/^([^\[\]]*)/,r=new RegExp(Ns),n=i.exec(t);for(n[1]&&e.push(n[1]);(n=r.exec(t))!==null;)e.push(n[1]);return e}function Ge(t,e,i){if(e.length===0)return t=i,t;var r=e.shift(),n=r.match(/^\[(.+?)\]$/);if(r==="[]")return t=t||[],Array.isArray(t)?t.push(Ge(null,e,i)):(t._values=t._values||[],t._values.push(Ge(null,e,i))),t;if(!n)t[r]=Ge(t[r],e,i);else{var s=n[1],a=+s;isNaN(a)?(t=t||{},t[s]=Ge(t[s],e,i)):(t=t||[],t[a]=Ge(t[a],e,i))}return t}function Wd(t,e,i){var r=e.match(Ns);if(r){var n=jd(e);Ge(t,n,i)}else{var s=t[e];s?(Array.isArray(s)||(t[e]=[s]),t[e].push(i)):t[e]=i}return t}function Xd(t,e,i){return i=i.replace(/(\r)?\n/g,`\r
`),i=encodeURIComponent(i),i=i.replace(/%20/g,"+"),t+(t?"&":"")+encodeURIComponent(e)+"="+i}var qd=Vd;const Yd=Bd(qd),U={addToCartButton:".js-add-to-cart",cartDrawer:"#cart-drawer",cartDrawerItems:"#cart-drawer-items",cartDrawerFooter:"#cart-drawer-footer",cartDrawerOverlay:".cart-drawer-overlay",cartDrawerTrigger:".js-cart-drawer-trigger",cartDrawerClose:".js-cart-drawer-close",cartDrawerCartJson:"#ajax-cart-drawer-json",cartCount:".cart-count",lineItem:".cart-line-item",lineItemUpdate:".js-cart-line-item-update",lineItemQuantity:".js-cart-line-item-input-quantity",moneyFormat:Shopify.currency.default_money_format};class X{static removeItemAnimation(e){e.classList.add("is-invisible")}static openCartDrawer(){document.documentElement.style.overflow="hidden",de.store("cart").drawerIsOpen=!0,this.openCartOverlay()}static closeCartDrawer(){document.documentElement.style.overflow="auto",de.store("cart").drawerIsOpen=!1,this.closeCartOverlay()}static openCartOverlay(){document.querySelector(U.cartDrawerOverlay).classList.add("is-open")}static closeCartOverlay(){document.querySelector(U.cartDrawerOverlay).classList.remove("is-open")}static updateCartItemCount(e){e.item_count==0?document.body.classList.add("cart-is-empty"):document.body.classList.remove("cart-is-empty"),document.querySelectorAll(U.cartCount).forEach(i=>{i.innerHTML=e.item_count})}static setLoadingButton(e,i=!0){i?(e.disabled=!0,e.classList.add("processing-spinner")):(e.disabled=!1,e.classList.remove("processing-spinner"))}static updateSections(e){e.sections&&X.getSectionsToRender().forEach(i=>{const r=new DOMParser().parseFromString(e.sections[i.section],"text/html");i.selectors.forEach(n=>{document.querySelector(n).innerHTML=r.querySelector(n).innerHTML})})}static getSectionsToRender(){let e=[{section:document.getElementById("cart-drawer").dataset.sectionId,selectors:[U.cartDrawerItems,U.cartDrawerFooter]}];return window.location.pathname.includes(Shopify.routes.cart_url)&&e.push({section:document.getElementById("main-cart").dataset.sectionId,selectors:["#main-cart"]}),e}}de.store("cart",{cart:Shopify.cart||{},cartIsUpdating:!1,drawerIsOpen:!1,init(){this.initClickListeners(),this.initEventListeners(),de.effect(()=>{X.updateCartItemCount(this.cart)})},async addJS(t){return this.cartIsUpdating=!0,fetch(Shopify.routes.root+"cart/add.js",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)}).then(async e=>{if(e.status!=200){const r=(await e.json()).message||"An error has occurred! Please try again.";throw alert(r),new Error}return e.json()}).catch(e=>{throw new Error(e)}).finally(()=>{this.cartIsUpdating=!1})},async changeJS(t){return this.cartIsUpdating=!0,fetch(Shopify.routes.root+"cart/change.js",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)}).then(async e=>{if(e.status!=200){const r=(await e.json()).message||"An error has occurred! Please try again.";throw alert(r),new Error}return e.json()}).catch(e=>{throw new Error(e)}).finally(()=>{this.cartIsUpdating=!1})},async addToCart(t){if(this.cartIsUpdating)return;let e=t.closest("form"),n={items:[Yd(e,{hash:!0})],sections:X.getSectionsToRender().map(a=>a.section),sections_url:window.location.pathname+"?request_type=ajax"};X.setLoadingButton(t);let s=await this.addJS(n).finally(()=>{X.setLoadingButton(t,!1)});X.updateSections(s),X.openCartDrawer(),this.updateCartJson(s)},async updateCart(t){if(this.cartIsUpdating)return;const e=t.dataset.type,i=t.dataset.line,r=t.closest(U.lineItem).querySelector(U.lineItemQuantity),n=Number(r.step||1);let s=Number(r.value||0);switch(e){case"plus":s+=n;break;case"minus":s-=n;break;case"remove":s=0;break}s===0&&X.removeItemAnimation(t.closest(U.lineItem));let a={line:i,quantity:s,sections:X.getSectionsToRender().map(l=>l.section),sections_url:window.location.pathname+"?request_type=ajax"};X.setLoadingButton(t);let o=await this.changeJS(a).finally(()=>{X.setLoadingButton(t,!1)});X.updateSections(o),this.updateCartJson(o)},async getDrawerUpdated(){const t=X.getSectionsToRender().map(n=>n.section).join(",");let e=Shopify.routes.root+"?request_type=ajax&sections="+t;const r={sections:await fetch(e).then(n=>n.json()).catch(n=>{throw new Error(n)})};X.updateSections(r),X.openCartDrawer(),this.updateCartJson(r)},async updateCartJson(t){const e=X.getSectionsToRender()[0].section,i=new DOMParser().parseFromString(t.sections[e],"text/html");this.cart=JSON.parse(i.querySelector(U.cartDrawerCartJson).textContent)},initClickListeners(){document.addEventListener("click",t=>{const e=t.target;e.closest(U.addToCartButton)&&(t.preventDefault(),this.addToCart(e.closest(U.addToCartButton))),e.closest(U.lineItemUpdate)&&this.updateCart(e.closest(U.lineItemUpdate)),e.closest(U.cartDrawerTrigger)&&(t.preventDefault(),X.openCartDrawer()),(e.closest(U.cartDrawerOverlay)||e.closest(U.cartDrawerClose))&&X.closeCartDrawer()})},initEventListeners(){window.addEventListener("keydown",function(t){t.key==="Escape"&&document.querySelector(U.cartDrawer).classList.contains("is-open")&&X.closeCartDrawer()})}});window.Alpine=de;window.Swiper=Q;de.plugin(rd);de.plugin(sd);de.plugin(Nd);de.start();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
