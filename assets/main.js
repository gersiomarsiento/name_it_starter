var xi=!1,Si=!1,Pe=[],Ei=-1;function Fs(t){Ns(t)}function Ns(t){Pe.includes(t)||Pe.push(t),Bs()}function en(t){let e=Pe.indexOf(t);e!==-1&&e>Ei&&Pe.splice(e,1)}function Bs(){!Si&&!xi&&(xi=!0,queueMicrotask(Hs))}function Hs(){xi=!1,Si=!0;for(let t=0;t<Pe.length;t++)Pe[t](),Ei=t;Pe.length=0,Ei=-1,Si=!1}var Ye,Ne,Ue,tn,Ti=!0;function Gs(t){Ti=!1,t(),Ti=!0}function Vs(t){Ye=t.reactive,Ue=t.release,Ne=e=>t.effect(e,{scheduler:i=>{Ti?Fs(i):i()}}),tn=t.raw}function yr(t){Ne=t}function js(t){let e=()=>{};return[r=>{let s=Ne(r);return t._x_effects||(t._x_effects=new Set,t._x_runEffects=()=>{t._x_effects.forEach(n=>n())}),t._x_effects.add(s),e=()=>{s!==void 0&&(t._x_effects.delete(s),Ue(s))},s},()=>{e()}]}function rn(t,e){let i=!0,r,s=Ne(()=>{let n=t();JSON.stringify(n),i?r=n:queueMicrotask(()=>{e(n,r),r=n}),i=!1});return()=>Ue(s)}var nn=[],sn=[],an=[];function Ws(t){an.push(t)}function ji(t,e){typeof e=="function"?(t._x_cleanups||(t._x_cleanups=[]),t._x_cleanups.push(e)):(e=t,sn.push(e))}function on(t){nn.push(t)}function ln(t,e,i){t._x_attributeCleanups||(t._x_attributeCleanups={}),t._x_attributeCleanups[e]||(t._x_attributeCleanups[e]=[]),t._x_attributeCleanups[e].push(i)}function cn(t,e){t._x_attributeCleanups&&Object.entries(t._x_attributeCleanups).forEach(([i,r])=>{(e===void 0||e.includes(i))&&(r.forEach(s=>s()),delete t._x_attributeCleanups[i])})}function qs(t){if(t._x_cleanups)for(;t._x_cleanups.length;)t._x_cleanups.pop()()}var Wi=new MutationObserver(Ui),qi=!1;function Xi(){Wi.observe(document,{subtree:!0,childList:!0,attributes:!0,attributeOldValue:!0}),qi=!0}function dn(){Xs(),Wi.disconnect(),qi=!1}var et=[];function Xs(){let t=Wi.takeRecords();et.push(()=>t.length>0&&Ui(t));let e=et.length;queueMicrotask(()=>{if(et.length===e)for(;et.length>0;)et.shift()()})}function Y(t){if(!qi)return t();dn();let e=t();return Xi(),e}var Yi=!1,$t=[];function Ys(){Yi=!0}function Us(){Yi=!1,Ui($t),$t=[]}function Ui(t){if(Yi){$t=$t.concat(t);return}let e=new Set,i=new Set,r=new Map,s=new Map;for(let n=0;n<t.length;n++)if(!t[n].target._x_ignoreMutationObserver&&(t[n].type==="childList"&&(t[n].addedNodes.forEach(a=>a.nodeType===1&&e.add(a)),t[n].removedNodes.forEach(a=>a.nodeType===1&&i.add(a))),t[n].type==="attributes")){let a=t[n].target,o=t[n].attributeName,l=t[n].oldValue,u=()=>{r.has(a)||r.set(a,[]),r.get(a).push({name:o,value:a.getAttribute(o)})},d=()=>{s.has(a)||s.set(a,[]),s.get(a).push(o)};a.hasAttribute(o)&&l===null?u():a.hasAttribute(o)?(d(),u()):d()}s.forEach((n,a)=>{cn(a,n)}),r.forEach((n,a)=>{nn.forEach(o=>o(a,n))});for(let n of i)e.has(n)||sn.forEach(a=>a(n));e.forEach(n=>{n._x_ignoreSelf=!0,n._x_ignore=!0});for(let n of e)i.has(n)||n.isConnected&&(delete n._x_ignoreSelf,delete n._x_ignore,an.forEach(a=>a(n)),n._x_ignore=!0,n._x_ignoreSelf=!0);e.forEach(n=>{delete n._x_ignoreSelf,delete n._x_ignore}),e=null,i=null,r=null,s=null}function un(t){return mt(je(t))}function pt(t,e,i){return t._x_dataStack=[e,...je(i||t)],()=>{t._x_dataStack=t._x_dataStack.filter(r=>r!==e)}}function je(t){return t._x_dataStack?t._x_dataStack:typeof ShadowRoot=="function"&&t instanceof ShadowRoot?je(t.host):t.parentNode?je(t.parentNode):[]}function mt(t){return new Proxy({objects:t},Ks)}var Ks={ownKeys({objects:t}){return Array.from(new Set(t.flatMap(e=>Object.keys(e))))},has({objects:t},e){return e==Symbol.unscopables?!1:t.some(i=>Object.prototype.hasOwnProperty.call(i,e)||Reflect.has(i,e))},get({objects:t},e,i){return e=="toJSON"?Js:Reflect.get(t.find(r=>Reflect.has(r,e))||{},e,i)},set({objects:t},e,i,r){const s=t.find(a=>Object.prototype.hasOwnProperty.call(a,e))||t[t.length-1],n=Object.getOwnPropertyDescriptor(s,e);return n!=null&&n.set&&(n!=null&&n.get)?Reflect.set(s,e,i,r):Reflect.set(s,e,i)}};function Js(){return Reflect.ownKeys(this).reduce((e,i)=>(e[i]=Reflect.get(this,i),e),{})}function fn(t){let e=r=>typeof r=="object"&&!Array.isArray(r)&&r!==null,i=(r,s="")=>{Object.entries(Object.getOwnPropertyDescriptors(r)).forEach(([n,{value:a,enumerable:o}])=>{if(o===!1||a===void 0||typeof a=="object"&&a!==null&&a.__v_skip)return;let l=s===""?n:`${s}.${n}`;typeof a=="object"&&a!==null&&a._x_interceptor?r[n]=a.initialize(t,l,n):e(a)&&a!==r&&!(a instanceof Element)&&i(a,l)})};return i(t)}function pn(t,e=()=>{}){let i={initialValue:void 0,_x_interceptor:!0,initialize(r,s,n){return t(this.initialValue,()=>Zs(r,s),a=>_i(r,s,a),s,n)}};return e(i),r=>{if(typeof r=="object"&&r!==null&&r._x_interceptor){let s=i.initialize.bind(i);i.initialize=(n,a,o)=>{let l=r.initialize(n,a,o);return i.initialValue=l,s(n,a,o)}}else i.initialValue=r;return i}}function Zs(t,e){return e.split(".").reduce((i,r)=>i[r],t)}function _i(t,e,i){if(typeof e=="string"&&(e=e.split(".")),e.length===1)t[e[0]]=i;else{if(e.length===0)throw error;return t[e[0]]||(t[e[0]]={}),_i(t[e[0]],e.slice(1),i)}}var mn={};function le(t,e){mn[t]=e}function Ci(t,e){return Object.entries(mn).forEach(([i,r])=>{let s=null;function n(){if(s)return s;{let[a,o]=yn(e);return s={interceptor:pn,...a},ji(e,o),s}}Object.defineProperty(t,`$${i}`,{get(){return r(e,n())},enumerable:!1})}),t}function Qs(t,e,i,...r){try{return i(...r)}catch(s){dt(s,t,e)}}function dt(t,e,i=void 0){t=Object.assign(t??{message:"No error message given."},{el:e,expression:i}),console.warn(`Alpine Expression Error: ${t.message}

${i?'Expression: "'+i+`"

`:""}`,e),setTimeout(()=>{throw t},0)}var Lt=!0;function hn(t){let e=Lt;Lt=!1;let i=t();return Lt=e,i}function Le(t,e,i={}){let r;return Z(t,e)(s=>r=s,i),r}function Z(...t){return gn(...t)}var gn=vn;function ea(t){gn=t}function vn(t,e){let i={};Ci(i,t);let r=[i,...je(t)],s=typeof e=="function"?ta(r,e):ra(r,e,t);return Qs.bind(null,t,e,s)}function ta(t,e){return(i=()=>{},{scope:r={},params:s=[]}={})=>{let n=e.apply(mt([r,...t]),s);zt(i,n)}}var ci={};function ia(t,e){if(ci[t])return ci[t];let i=Object.getPrototypeOf(async function(){}).constructor,r=/^[\n\s]*if.*\(.*\)/.test(t.trim())||/^(let|const)\s/.test(t.trim())?`(async()=>{ ${t} })()`:t,n=(()=>{try{let a=new i(["__self","scope"],`with (scope) { __self.result = ${r} }; __self.finished = true; return __self.result;`);return Object.defineProperty(a,"name",{value:`[Alpine] ${t}`}),a}catch(a){return dt(a,e,t),Promise.resolve()}})();return ci[t]=n,n}function ra(t,e,i){let r=ia(e,i);return(s=()=>{},{scope:n={},params:a=[]}={})=>{r.result=void 0,r.finished=!1;let o=mt([n,...t]);if(typeof r=="function"){let l=r(r,o).catch(u=>dt(u,i,e));r.finished?(zt(s,r.result,o,a,i),r.result=void 0):l.then(u=>{zt(s,u,o,a,i)}).catch(u=>dt(u,i,e)).finally(()=>r.result=void 0)}}}function zt(t,e,i,r,s){if(Lt&&typeof e=="function"){let n=e.apply(i,r);n instanceof Promise?n.then(a=>zt(t,a,i,r)).catch(a=>dt(a,s,e)):t(n)}else typeof e=="object"&&e instanceof Promise?e.then(n=>t(n)):t(e)}var Ki="x-";function Ke(t=""){return Ki+t}function na(t){Ki=t}var Rt={};function X(t,e){return Rt[t]=e,{before(i){if(!Rt[i]){console.warn(String.raw`Cannot find directive \`${i}\`. \`${t}\` will use the default order of execution`);return}const r=Ae.indexOf(i);Ae.splice(r>=0?r:Ae.indexOf("DEFAULT"),0,t)}}}function sa(t){return Object.keys(Rt).includes(t)}function Ji(t,e,i){if(e=Array.from(e),t._x_virtualDirectives){let n=Object.entries(t._x_virtualDirectives).map(([o,l])=>({name:o,value:l})),a=wn(n);n=n.map(o=>a.find(l=>l.name===o.name)?{name:`x-bind:${o.name}`,value:`"${o.value}"`}:o),e=e.concat(n)}let r={};return e.map(En((n,a)=>r[n]=a)).filter(_n).map(la(r,i)).sort(ca).map(n=>oa(t,n))}function wn(t){return Array.from(t).map(En()).filter(e=>!_n(e))}var Mi=!1,nt=new Map,bn=Symbol();function aa(t){Mi=!0;let e=Symbol();bn=e,nt.set(e,[]);let i=()=>{for(;nt.get(e).length;)nt.get(e).shift()();nt.delete(e)},r=()=>{Mi=!1,i()};t(i),r()}function yn(t){let e=[],i=o=>e.push(o),[r,s]=js(t);return e.push(s),[{Alpine:gt,effect:r,cleanup:i,evaluateLater:Z.bind(Z,t),evaluate:Le.bind(Le,t)},()=>e.forEach(o=>o())]}function oa(t,e){let i=()=>{},r=Rt[e.type]||i,[s,n]=yn(t);ln(t,e.original,n);let a=()=>{t._x_ignore||t._x_ignoreSelf||(r.inline&&r.inline(t,e,s),r=r.bind(r,t,e,s),Mi?nt.get(bn).push(r):r())};return a.runCleanups=n,a}var xn=(t,e)=>({name:i,value:r})=>(i.startsWith(t)&&(i=i.replace(t,e)),{name:i,value:r}),Sn=t=>t;function En(t=()=>{}){return({name:e,value:i})=>{let{name:r,value:s}=Tn.reduce((n,a)=>a(n),{name:e,value:i});return r!==e&&t(r,e),{name:r,value:s}}}var Tn=[];function Zi(t){Tn.push(t)}function _n({name:t}){return Cn().test(t)}var Cn=()=>new RegExp(`^${Ki}([^:^.]+)\\b`);function la(t,e){return({name:i,value:r})=>{let s=i.match(Cn()),n=i.match(/:([a-zA-Z0-9\-_:]+)/),a=i.match(/\.[^.\]]+(?=[^\]]*$)/g)||[],o=e||t[i]||i;return{type:s?s[1]:null,value:n?n[1]:null,modifiers:a.map(l=>l.replace(".","")),expression:r,original:o}}}var Ai="DEFAULT",Ae=["ignore","ref","data","id","anchor","bind","init","for","model","modelable","transition","show","if",Ai,"teleport"];function ca(t,e){let i=Ae.indexOf(t.type)===-1?Ai:t.type,r=Ae.indexOf(e.type)===-1?Ai:e.type;return Ae.indexOf(i)-Ae.indexOf(r)}function ot(t,e,i={}){t.dispatchEvent(new CustomEvent(e,{detail:i,bubbles:!0,composed:!0,cancelable:!0}))}function ye(t,e){if(typeof ShadowRoot=="function"&&t instanceof ShadowRoot){Array.from(t.children).forEach(s=>ye(s,e));return}let i=!1;if(e(t,()=>i=!0),i)return;let r=t.firstElementChild;for(;r;)ye(r,e),r=r.nextElementSibling}function se(t,...e){console.warn(`Alpine Warning: ${t}`,...e)}var xr=!1;function da(){xr&&se("Alpine has already been initialized on this page. Calling Alpine.start() more than once can cause problems."),xr=!0,document.body||se("Unable to initialize. Trying to load Alpine before `<body>` is available. Did you forget to add `defer` in Alpine's `<script>` tag?"),ot(document,"alpine:init"),ot(document,"alpine:initializing"),Xi(),Ws(e=>me(e,ye)),ji(e=>Dn(e)),on((e,i)=>{Ji(e,i).forEach(r=>r())});let t=e=>!qt(e.parentElement,!0);Array.from(document.querySelectorAll(Pn().join(","))).filter(t).forEach(e=>{me(e)}),ot(document,"alpine:initialized"),setTimeout(()=>{pa()})}var Qi=[],Mn=[];function An(){return Qi.map(t=>t())}function Pn(){return Qi.concat(Mn).map(t=>t())}function Ln(t){Qi.push(t)}function In(t){Mn.push(t)}function qt(t,e=!1){return ht(t,i=>{if((e?Pn():An()).some(s=>i.matches(s)))return!0})}function ht(t,e){if(t){if(e(t))return t;if(t._x_teleportBack&&(t=t._x_teleportBack),!!t.parentElement)return ht(t.parentElement,e)}}function ua(t){return An().some(e=>t.matches(e))}var On=[];function fa(t){On.push(t)}function me(t,e=ye,i=()=>{}){aa(()=>{e(t,(r,s)=>{i(r,s),On.forEach(n=>n(r,s)),Ji(r,r.attributes).forEach(n=>n()),r._x_ignore&&s()})})}function Dn(t,e=ye){e(t,i=>{cn(i),qs(i)})}function pa(){[["ui","dialog",["[x-dialog], [x-popover]"]],["anchor","anchor",["[x-anchor]"]],["sort","sort",["[x-sort]"]]].forEach(([e,i,r])=>{sa(i)||r.some(s=>{if(document.querySelector(s))return se(`found "${s}", but missing ${e} plugin`),!0})})}var Pi=[],er=!1;function tr(t=()=>{}){return queueMicrotask(()=>{er||setTimeout(()=>{Li()})}),new Promise(e=>{Pi.push(()=>{t(),e()})})}function Li(){for(er=!1;Pi.length;)Pi.shift()()}function ma(){er=!0}function ir(t,e){return Array.isArray(e)?Sr(t,e.join(" ")):typeof e=="object"&&e!==null?ha(t,e):typeof e=="function"?ir(t,e()):Sr(t,e)}function Sr(t,e){let i=s=>s.split(" ").filter(n=>!t.classList.contains(n)).filter(Boolean),r=s=>(t.classList.add(...s),()=>{t.classList.remove(...s)});return e=e===!0?e="":e||"",r(i(e))}function ha(t,e){let i=o=>o.split(" ").filter(Boolean),r=Object.entries(e).flatMap(([o,l])=>l?i(o):!1).filter(Boolean),s=Object.entries(e).flatMap(([o,l])=>l?!1:i(o)).filter(Boolean),n=[],a=[];return s.forEach(o=>{t.classList.contains(o)&&(t.classList.remove(o),a.push(o))}),r.forEach(o=>{t.classList.contains(o)||(t.classList.add(o),n.push(o))}),()=>{a.forEach(o=>t.classList.add(o)),n.forEach(o=>t.classList.remove(o))}}function Xt(t,e){return typeof e=="object"&&e!==null?ga(t,e):va(t,e)}function ga(t,e){let i={};return Object.entries(e).forEach(([r,s])=>{i[r]=t.style[r],r.startsWith("--")||(r=wa(r)),t.style.setProperty(r,s)}),setTimeout(()=>{t.style.length===0&&t.removeAttribute("style")}),()=>{Xt(t,i)}}function va(t,e){let i=t.getAttribute("style",e);return t.setAttribute("style",e),()=>{t.setAttribute("style",i||"")}}function wa(t){return t.replace(/([a-z])([A-Z])/g,"$1-$2").toLowerCase()}function Ii(t,e=()=>{}){let i=!1;return function(){i?e.apply(this,arguments):(i=!0,t.apply(this,arguments))}}X("transition",(t,{value:e,modifiers:i,expression:r},{evaluate:s})=>{typeof r=="function"&&(r=s(r)),r!==!1&&(!r||typeof r=="boolean"?ya(t,i,e):ba(t,r,e))});function ba(t,e,i){$n(t,ir,""),{enter:s=>{t._x_transition.enter.during=s},"enter-start":s=>{t._x_transition.enter.start=s},"enter-end":s=>{t._x_transition.enter.end=s},leave:s=>{t._x_transition.leave.during=s},"leave-start":s=>{t._x_transition.leave.start=s},"leave-end":s=>{t._x_transition.leave.end=s}}[i](e)}function ya(t,e,i){$n(t,Xt);let r=!e.includes("in")&&!e.includes("out")&&!i,s=r||e.includes("in")||["enter"].includes(i),n=r||e.includes("out")||["leave"].includes(i);e.includes("in")&&!r&&(e=e.filter((p,b)=>b<e.indexOf("out"))),e.includes("out")&&!r&&(e=e.filter((p,b)=>b>e.indexOf("out")));let a=!e.includes("opacity")&&!e.includes("scale"),o=a||e.includes("opacity"),l=a||e.includes("scale"),u=o?0:1,d=l?tt(e,"scale",95)/100:1,c=tt(e,"delay",0)/1e3,f=tt(e,"origin","center"),m="opacity, transform",g=tt(e,"duration",150)/1e3,w=tt(e,"duration",75)/1e3,h="cubic-bezier(0.4, 0.0, 0.2, 1)";s&&(t._x_transition.enter.during={transformOrigin:f,transitionDelay:`${c}s`,transitionProperty:m,transitionDuration:`${g}s`,transitionTimingFunction:h},t._x_transition.enter.start={opacity:u,transform:`scale(${d})`},t._x_transition.enter.end={opacity:1,transform:"scale(1)"}),n&&(t._x_transition.leave.during={transformOrigin:f,transitionDelay:`${c}s`,transitionProperty:m,transitionDuration:`${w}s`,transitionTimingFunction:h},t._x_transition.leave.start={opacity:1,transform:"scale(1)"},t._x_transition.leave.end={opacity:u,transform:`scale(${d})`})}function $n(t,e,i={}){t._x_transition||(t._x_transition={enter:{during:i,start:i,end:i},leave:{during:i,start:i,end:i},in(r=()=>{},s=()=>{}){Oi(t,e,{during:this.enter.during,start:this.enter.start,end:this.enter.end},r,s)},out(r=()=>{},s=()=>{}){Oi(t,e,{during:this.leave.during,start:this.leave.start,end:this.leave.end},r,s)}})}window.Element.prototype._x_toggleAndCascadeWithTransitions=function(t,e,i,r){const s=document.visibilityState==="visible"?requestAnimationFrame:setTimeout;let n=()=>s(i);if(e){t._x_transition&&(t._x_transition.enter||t._x_transition.leave)?t._x_transition.enter&&(Object.entries(t._x_transition.enter.during).length||Object.entries(t._x_transition.enter.start).length||Object.entries(t._x_transition.enter.end).length)?t._x_transition.in(i):n():t._x_transition?t._x_transition.in(i):n();return}t._x_hidePromise=t._x_transition?new Promise((a,o)=>{t._x_transition.out(()=>{},()=>a(r)),t._x_transitioning&&t._x_transitioning.beforeCancel(()=>o({isFromCancelledTransition:!0}))}):Promise.resolve(r),queueMicrotask(()=>{let a=zn(t);a?(a._x_hideChildren||(a._x_hideChildren=[]),a._x_hideChildren.push(t)):s(()=>{let o=l=>{let u=Promise.all([l._x_hidePromise,...(l._x_hideChildren||[]).map(o)]).then(([d])=>d());return delete l._x_hidePromise,delete l._x_hideChildren,u};o(t).catch(l=>{if(!l.isFromCancelledTransition)throw l})})})};function zn(t){let e=t.parentNode;if(e)return e._x_hidePromise?e:zn(e)}function Oi(t,e,{during:i,start:r,end:s}={},n=()=>{},a=()=>{}){if(t._x_transitioning&&t._x_transitioning.cancel(),Object.keys(i).length===0&&Object.keys(r).length===0&&Object.keys(s).length===0){n(),a();return}let o,l,u;xa(t,{start(){o=e(t,r)},during(){l=e(t,i)},before:n,end(){o(),u=e(t,s)},after:a,cleanup(){l(),u()}})}function xa(t,e){let i,r,s,n=Ii(()=>{Y(()=>{i=!0,r||e.before(),s||(e.end(),Li()),e.after(),t.isConnected&&e.cleanup(),delete t._x_transitioning})});t._x_transitioning={beforeCancels:[],beforeCancel(a){this.beforeCancels.push(a)},cancel:Ii(function(){for(;this.beforeCancels.length;)this.beforeCancels.shift()();n()}),finish:n},Y(()=>{e.start(),e.during()}),ma(),requestAnimationFrame(()=>{if(i)return;let a=Number(getComputedStyle(t).transitionDuration.replace(/,.*/,"").replace("s",""))*1e3,o=Number(getComputedStyle(t).transitionDelay.replace(/,.*/,"").replace("s",""))*1e3;a===0&&(a=Number(getComputedStyle(t).animationDuration.replace("s",""))*1e3),Y(()=>{e.before()}),r=!0,requestAnimationFrame(()=>{i||(Y(()=>{e.end()}),Li(),setTimeout(t._x_transitioning.finish,a+o),s=!0)})})}function tt(t,e,i){if(t.indexOf(e)===-1)return i;const r=t[t.indexOf(e)+1];if(!r||e==="scale"&&isNaN(r))return i;if(e==="duration"||e==="delay"){let s=r.match(/([0-9]+)ms/);if(s)return s[1]}return e==="origin"&&["top","right","left","center","bottom"].includes(t[t.indexOf(e)+2])?[r,t[t.indexOf(e)+2]].join(" "):r}var xe=!1;function _e(t,e=()=>{}){return(...i)=>xe?e(...i):t(...i)}function Sa(t){return(...e)=>xe&&t(...e)}var Rn=[];function Yt(t){Rn.push(t)}function Ea(t,e){Rn.forEach(i=>i(t,e)),xe=!0,kn(()=>{me(e,(i,r)=>{r(i,()=>{})})}),xe=!1}var Di=!1;function Ta(t,e){e._x_dataStack||(e._x_dataStack=t._x_dataStack),xe=!0,Di=!0,kn(()=>{_a(e)}),xe=!1,Di=!1}function _a(t){let e=!1;me(t,(r,s)=>{ye(r,(n,a)=>{if(e&&ua(n))return a();e=!0,s(n,a)})})}function kn(t){let e=Ne;yr((i,r)=>{let s=e(i);return Ue(s),()=>{}}),t(),yr(e)}function Fn(t,e,i,r=[]){switch(t._x_bindings||(t._x_bindings=Ye({})),t._x_bindings[e]=i,e=r.includes("camel")?Da(e):e,e){case"value":Ca(t,i);break;case"style":Aa(t,i);break;case"class":Ma(t,i);break;case"selected":case"checked":Pa(t,e,i);break;default:Nn(t,e,i);break}}function Ca(t,e){if(t.type==="radio")t.attributes.value===void 0&&(t.value=e),window.fromModel&&(typeof e=="boolean"?t.checked=It(t.value)===e:t.checked=Er(t.value,e));else if(t.type==="checkbox")Number.isInteger(e)?t.value=e:!Array.isArray(e)&&typeof e!="boolean"&&![null,void 0].includes(e)?t.value=String(e):Array.isArray(e)?t.checked=e.some(i=>Er(i,t.value)):t.checked=!!e;else if(t.tagName==="SELECT")Oa(t,e);else{if(t.value===e)return;t.value=e===void 0?"":e}}function Ma(t,e){t._x_undoAddedClasses&&t._x_undoAddedClasses(),t._x_undoAddedClasses=ir(t,e)}function Aa(t,e){t._x_undoAddedStyles&&t._x_undoAddedStyles(),t._x_undoAddedStyles=Xt(t,e)}function Pa(t,e,i){Nn(t,e,i),Ia(t,e,i)}function Nn(t,e,i){[null,void 0,!1].includes(i)&&$a(e)?t.removeAttribute(e):(Bn(e)&&(i=e),La(t,e,i))}function La(t,e,i){t.getAttribute(e)!=i&&t.setAttribute(e,i)}function Ia(t,e,i){t[e]!==i&&(t[e]=i)}function Oa(t,e){const i=[].concat(e).map(r=>r+"");Array.from(t.options).forEach(r=>{r.selected=i.includes(r.value)})}function Da(t){return t.toLowerCase().replace(/-(\w)/g,(e,i)=>i.toUpperCase())}function Er(t,e){return t==e}function It(t){return[1,"1","true","on","yes",!0].includes(t)?!0:[0,"0","false","off","no",!1].includes(t)?!1:t?!!t:null}function Bn(t){return["disabled","checked","required","readonly","open","selected","autofocus","itemscope","multiple","novalidate","allowfullscreen","allowpaymentrequest","formnovalidate","autoplay","controls","loop","muted","playsinline","default","ismap","reversed","async","defer","nomodule"].includes(t)}function $a(t){return!["aria-pressed","aria-checked","aria-expanded","aria-selected"].includes(t)}function za(t,e,i){return t._x_bindings&&t._x_bindings[e]!==void 0?t._x_bindings[e]:Hn(t,e,i)}function Ra(t,e,i,r=!0){if(t._x_bindings&&t._x_bindings[e]!==void 0)return t._x_bindings[e];if(t._x_inlineBindings&&t._x_inlineBindings[e]!==void 0){let s=t._x_inlineBindings[e];return s.extract=r,hn(()=>Le(t,s.expression))}return Hn(t,e,i)}function Hn(t,e,i){let r=t.getAttribute(e);return r===null?typeof i=="function"?i():i:r===""?!0:Bn(e)?!![e,"true"].includes(r):r}function Gn(t,e){var i;return function(){var r=this,s=arguments,n=function(){i=null,t.apply(r,s)};clearTimeout(i),i=setTimeout(n,e)}}function Vn(t,e){let i;return function(){let r=this,s=arguments;i||(t.apply(r,s),i=!0,setTimeout(()=>i=!1,e))}}function jn({get:t,set:e},{get:i,set:r}){let s=!0,n,a=Ne(()=>{let o=t(),l=i();if(s)r(di(o)),s=!1;else{let u=JSON.stringify(o),d=JSON.stringify(l);u!==n?r(di(o)):u!==d&&e(di(l))}n=JSON.stringify(t()),JSON.stringify(i())});return()=>{Ue(a)}}function di(t){return typeof t=="object"?JSON.parse(JSON.stringify(t)):t}function ka(t){(Array.isArray(t)?t:[t]).forEach(i=>i(gt))}var Me={},Tr=!1;function Fa(t,e){if(Tr||(Me=Ye(Me),Tr=!0),e===void 0)return Me[t];Me[t]=e,typeof e=="object"&&e!==null&&e.hasOwnProperty("init")&&typeof e.init=="function"&&Me[t].init(),fn(Me[t])}function Na(){return Me}var Wn={};function Ba(t,e){let i=typeof e!="function"?()=>e:e;return t instanceof Element?qn(t,i()):(Wn[t]=i,()=>{})}function Ha(t){return Object.entries(Wn).forEach(([e,i])=>{Object.defineProperty(t,e,{get(){return(...r)=>i(...r)}})}),t}function qn(t,e,i){let r=[];for(;r.length;)r.pop()();let s=Object.entries(e).map(([a,o])=>({name:a,value:o})),n=wn(s);return s=s.map(a=>n.find(o=>o.name===a.name)?{name:`x-bind:${a.name}`,value:`"${a.value}"`}:a),Ji(t,s,i).map(a=>{r.push(a.runCleanups),a()}),()=>{for(;r.length;)r.pop()()}}var Xn={};function Ga(t,e){Xn[t]=e}function Va(t,e){return Object.entries(Xn).forEach(([i,r])=>{Object.defineProperty(t,i,{get(){return(...s)=>r.bind(e)(...s)},enumerable:!1})}),t}var ja={get reactive(){return Ye},get release(){return Ue},get effect(){return Ne},get raw(){return tn},version:"3.13.10",flushAndStopDeferringMutations:Us,dontAutoEvaluateFunctions:hn,disableEffectScheduling:Gs,startObservingMutations:Xi,stopObservingMutations:dn,setReactivityEngine:Vs,onAttributeRemoved:ln,onAttributesAdded:on,closestDataStack:je,skipDuringClone:_e,onlyDuringClone:Sa,addRootSelector:Ln,addInitSelector:In,interceptClone:Yt,addScopeToNode:pt,deferMutations:Ys,mapAttributes:Zi,evaluateLater:Z,interceptInit:fa,setEvaluator:ea,mergeProxies:mt,extractProp:Ra,findClosest:ht,onElRemoved:ji,closestRoot:qt,destroyTree:Dn,interceptor:pn,transition:Oi,setStyles:Xt,mutateDom:Y,directive:X,entangle:jn,throttle:Vn,debounce:Gn,evaluate:Le,initTree:me,nextTick:tr,prefixed:Ke,prefix:na,plugin:ka,magic:le,store:Fa,start:da,clone:Ta,cloneNode:Ea,bound:za,$data:un,watch:rn,walk:ye,data:Ga,bind:Ba},gt=ja;function Wa(t,e){const i=Object.create(null),r=t.split(",");for(let s=0;s<r.length;s++)i[r[s]]=!0;return s=>!!i[s]}var qa=Object.freeze({}),Xa=Object.prototype.hasOwnProperty,Ut=(t,e)=>Xa.call(t,e),Ie=Array.isArray,lt=t=>Yn(t)==="[object Map]",Ya=t=>typeof t=="string",rr=t=>typeof t=="symbol",Kt=t=>t!==null&&typeof t=="object",Ua=Object.prototype.toString,Yn=t=>Ua.call(t),Un=t=>Yn(t).slice(8,-1),nr=t=>Ya(t)&&t!=="NaN"&&t[0]!=="-"&&""+parseInt(t,10)===t,Ka=t=>{const e=Object.create(null);return i=>e[i]||(e[i]=t(i))},Ja=Ka(t=>t.charAt(0).toUpperCase()+t.slice(1)),Kn=(t,e)=>t!==e&&(t===t||e===e),$i=new WeakMap,it=[],ce,Oe=Symbol("iterate"),zi=Symbol("Map key iterate");function Za(t){return t&&t._isEffect===!0}function Qa(t,e=qa){Za(t)&&(t=t.raw);const i=io(t,e);return e.lazy||i(),i}function eo(t){t.active&&(Jn(t),t.options.onStop&&t.options.onStop(),t.active=!1)}var to=0;function io(t,e){const i=function(){if(!i.active)return t();if(!it.includes(i)){Jn(i);try{return no(),it.push(i),ce=i,t()}finally{it.pop(),Zn(),ce=it[it.length-1]}}};return i.id=to++,i.allowRecurse=!!e.allowRecurse,i._isEffect=!0,i.active=!0,i.raw=t,i.deps=[],i.options=e,i}function Jn(t){const{deps:e}=t;if(e.length){for(let i=0;i<e.length;i++)e[i].delete(t);e.length=0}}var We=!0,sr=[];function ro(){sr.push(We),We=!1}function no(){sr.push(We),We=!0}function Zn(){const t=sr.pop();We=t===void 0?!0:t}function oe(t,e,i){if(!We||ce===void 0)return;let r=$i.get(t);r||$i.set(t,r=new Map);let s=r.get(i);s||r.set(i,s=new Set),s.has(ce)||(s.add(ce),ce.deps.push(s),ce.options.onTrack&&ce.options.onTrack({effect:ce,target:t,type:e,key:i}))}function Se(t,e,i,r,s,n){const a=$i.get(t);if(!a)return;const o=new Set,l=d=>{d&&d.forEach(c=>{(c!==ce||c.allowRecurse)&&o.add(c)})};if(e==="clear")a.forEach(l);else if(i==="length"&&Ie(t))a.forEach((d,c)=>{(c==="length"||c>=r)&&l(d)});else switch(i!==void 0&&l(a.get(i)),e){case"add":Ie(t)?nr(i)&&l(a.get("length")):(l(a.get(Oe)),lt(t)&&l(a.get(zi)));break;case"delete":Ie(t)||(l(a.get(Oe)),lt(t)&&l(a.get(zi)));break;case"set":lt(t)&&l(a.get(Oe));break}const u=d=>{d.options.onTrigger&&d.options.onTrigger({effect:d,target:t,key:i,type:e,newValue:r,oldValue:s,oldTarget:n}),d.options.scheduler?d.options.scheduler(d):d()};o.forEach(u)}var so=Wa("__proto__,__v_isRef,__isVue"),Qn=new Set(Object.getOwnPropertyNames(Symbol).map(t=>Symbol[t]).filter(rr)),ao=es(),oo=es(!0),_r=lo();function lo(){const t={};return["includes","indexOf","lastIndexOf"].forEach(e=>{t[e]=function(...i){const r=W(this);for(let n=0,a=this.length;n<a;n++)oe(r,"get",n+"");const s=r[e](...i);return s===-1||s===!1?r[e](...i.map(W)):s}}),["push","pop","shift","unshift","splice"].forEach(e=>{t[e]=function(...i){ro();const r=W(this)[e].apply(this,i);return Zn(),r}}),t}function es(t=!1,e=!1){return function(r,s,n){if(s==="__v_isReactive")return!t;if(s==="__v_isReadonly")return t;if(s==="__v_raw"&&n===(t?e?Eo:ns:e?So:rs).get(r))return r;const a=Ie(r);if(!t&&a&&Ut(_r,s))return Reflect.get(_r,s,n);const o=Reflect.get(r,s,n);return(rr(s)?Qn.has(s):so(s))||(t||oe(r,"get",s),e)?o:Ri(o)?!a||!nr(s)?o.value:o:Kt(o)?t?ss(o):cr(o):o}}var co=uo();function uo(t=!1){return function(i,r,s,n){let a=i[r];if(!t&&(s=W(s),a=W(a),!Ie(i)&&Ri(a)&&!Ri(s)))return a.value=s,!0;const o=Ie(i)&&nr(r)?Number(r)<i.length:Ut(i,r),l=Reflect.set(i,r,s,n);return i===W(n)&&(o?Kn(s,a)&&Se(i,"set",r,s,a):Se(i,"add",r,s)),l}}function fo(t,e){const i=Ut(t,e),r=t[e],s=Reflect.deleteProperty(t,e);return s&&i&&Se(t,"delete",e,void 0,r),s}function po(t,e){const i=Reflect.has(t,e);return(!rr(e)||!Qn.has(e))&&oe(t,"has",e),i}function mo(t){return oe(t,"iterate",Ie(t)?"length":Oe),Reflect.ownKeys(t)}var ho={get:ao,set:co,deleteProperty:fo,has:po,ownKeys:mo},go={get:oo,set(t,e){return console.warn(`Set operation on key "${String(e)}" failed: target is readonly.`,t),!0},deleteProperty(t,e){return console.warn(`Delete operation on key "${String(e)}" failed: target is readonly.`,t),!0}},ar=t=>Kt(t)?cr(t):t,or=t=>Kt(t)?ss(t):t,lr=t=>t,Jt=t=>Reflect.getPrototypeOf(t);function St(t,e,i=!1,r=!1){t=t.__v_raw;const s=W(t),n=W(e);e!==n&&!i&&oe(s,"get",e),!i&&oe(s,"get",n);const{has:a}=Jt(s),o=r?lr:i?or:ar;if(a.call(s,e))return o(t.get(e));if(a.call(s,n))return o(t.get(n));t!==s&&t.get(e)}function Et(t,e=!1){const i=this.__v_raw,r=W(i),s=W(t);return t!==s&&!e&&oe(r,"has",t),!e&&oe(r,"has",s),t===s?i.has(t):i.has(t)||i.has(s)}function Tt(t,e=!1){return t=t.__v_raw,!e&&oe(W(t),"iterate",Oe),Reflect.get(t,"size",t)}function Cr(t){t=W(t);const e=W(this);return Jt(e).has.call(e,t)||(e.add(t),Se(e,"add",t,t)),this}function Mr(t,e){e=W(e);const i=W(this),{has:r,get:s}=Jt(i);let n=r.call(i,t);n?is(i,r,t):(t=W(t),n=r.call(i,t));const a=s.call(i,t);return i.set(t,e),n?Kn(e,a)&&Se(i,"set",t,e,a):Se(i,"add",t,e),this}function Ar(t){const e=W(this),{has:i,get:r}=Jt(e);let s=i.call(e,t);s?is(e,i,t):(t=W(t),s=i.call(e,t));const n=r?r.call(e,t):void 0,a=e.delete(t);return s&&Se(e,"delete",t,void 0,n),a}function Pr(){const t=W(this),e=t.size!==0,i=lt(t)?new Map(t):new Set(t),r=t.clear();return e&&Se(t,"clear",void 0,void 0,i),r}function _t(t,e){return function(r,s){const n=this,a=n.__v_raw,o=W(a),l=e?lr:t?or:ar;return!t&&oe(o,"iterate",Oe),a.forEach((u,d)=>r.call(s,l(u),l(d),n))}}function Ct(t,e,i){return function(...r){const s=this.__v_raw,n=W(s),a=lt(n),o=t==="entries"||t===Symbol.iterator&&a,l=t==="keys"&&a,u=s[t](...r),d=i?lr:e?or:ar;return!e&&oe(n,"iterate",l?zi:Oe),{next(){const{value:c,done:f}=u.next();return f?{value:c,done:f}:{value:o?[d(c[0]),d(c[1])]:d(c),done:f}},[Symbol.iterator](){return this}}}}function ve(t){return function(...e){{const i=e[0]?`on key "${e[0]}" `:"";console.warn(`${Ja(t)} operation ${i}failed: target is readonly.`,W(this))}return t==="delete"?!1:this}}function vo(){const t={get(n){return St(this,n)},get size(){return Tt(this)},has:Et,add:Cr,set:Mr,delete:Ar,clear:Pr,forEach:_t(!1,!1)},e={get(n){return St(this,n,!1,!0)},get size(){return Tt(this)},has:Et,add:Cr,set:Mr,delete:Ar,clear:Pr,forEach:_t(!1,!0)},i={get(n){return St(this,n,!0)},get size(){return Tt(this,!0)},has(n){return Et.call(this,n,!0)},add:ve("add"),set:ve("set"),delete:ve("delete"),clear:ve("clear"),forEach:_t(!0,!1)},r={get(n){return St(this,n,!0,!0)},get size(){return Tt(this,!0)},has(n){return Et.call(this,n,!0)},add:ve("add"),set:ve("set"),delete:ve("delete"),clear:ve("clear"),forEach:_t(!0,!0)};return["keys","values","entries",Symbol.iterator].forEach(n=>{t[n]=Ct(n,!1,!1),i[n]=Ct(n,!0,!1),e[n]=Ct(n,!1,!0),r[n]=Ct(n,!0,!0)}),[t,i,e,r]}var[wo,bo,Xd,Yd]=vo();function ts(t,e){const i=t?bo:wo;return(r,s,n)=>s==="__v_isReactive"?!t:s==="__v_isReadonly"?t:s==="__v_raw"?r:Reflect.get(Ut(i,s)&&s in r?i:r,s,n)}var yo={get:ts(!1)},xo={get:ts(!0)};function is(t,e,i){const r=W(i);if(r!==i&&e.call(t,r)){const s=Un(t);console.warn(`Reactive ${s} contains both the raw and reactive versions of the same object${s==="Map"?" as keys":""}, which can lead to inconsistencies. Avoid differentiating between the raw and reactive versions of an object and only use the reactive version if possible.`)}}var rs=new WeakMap,So=new WeakMap,ns=new WeakMap,Eo=new WeakMap;function To(t){switch(t){case"Object":case"Array":return 1;case"Map":case"Set":case"WeakMap":case"WeakSet":return 2;default:return 0}}function _o(t){return t.__v_skip||!Object.isExtensible(t)?0:To(Un(t))}function cr(t){return t&&t.__v_isReadonly?t:as(t,!1,ho,yo,rs)}function ss(t){return as(t,!0,go,xo,ns)}function as(t,e,i,r,s){if(!Kt(t))return console.warn(`value cannot be made reactive: ${String(t)}`),t;if(t.__v_raw&&!(e&&t.__v_isReactive))return t;const n=s.get(t);if(n)return n;const a=_o(t);if(a===0)return t;const o=new Proxy(t,a===2?r:i);return s.set(t,o),o}function W(t){return t&&W(t.__v_raw)||t}function Ri(t){return!!(t&&t.__v_isRef===!0)}le("nextTick",()=>tr);le("dispatch",t=>ot.bind(ot,t));le("watch",(t,{evaluateLater:e,cleanup:i})=>(r,s)=>{let n=e(r),o=rn(()=>{let l;return n(u=>l=u),l},s);i(o)});le("store",Na);le("data",t=>un(t));le("root",t=>qt(t));le("refs",t=>(t._x_refs_proxy||(t._x_refs_proxy=mt(Co(t))),t._x_refs_proxy));function Co(t){let e=[];return ht(t,i=>{i._x_refs&&e.push(i._x_refs)}),e}var ui={};function os(t){return ui[t]||(ui[t]=0),++ui[t]}function Mo(t,e){return ht(t,i=>{if(i._x_ids&&i._x_ids[e])return!0})}function Ao(t,e){t._x_ids||(t._x_ids={}),t._x_ids[e]||(t._x_ids[e]=os(e))}le("id",(t,{cleanup:e})=>(i,r=null)=>{let s=`${i}${r?`-${r}`:""}`;return Po(t,s,e,()=>{let n=Mo(t,i),a=n?n._x_ids[i]:os(i);return r?`${i}-${a}-${r}`:`${i}-${a}`})});Yt((t,e)=>{t._x_id&&(e._x_id=t._x_id)});function Po(t,e,i,r){if(t._x_id||(t._x_id={}),t._x_id[e])return t._x_id[e];let s=r();return t._x_id[e]=s,i(()=>{delete t._x_id[e]}),s}le("el",t=>t);ls("Focus","focus","focus");ls("Persist","persist","persist");function ls(t,e,i){le(e,r=>se(`You can't use [$${e}] without first installing the "${t}" plugin here: https://alpinejs.dev/plugins/${i}`,r))}X("modelable",(t,{expression:e},{effect:i,evaluateLater:r,cleanup:s})=>{let n=r(e),a=()=>{let d;return n(c=>d=c),d},o=r(`${e} = __placeholder`),l=d=>o(()=>{},{scope:{__placeholder:d}}),u=a();l(u),queueMicrotask(()=>{if(!t._x_model)return;t._x_removeModelListeners.default();let d=t._x_model.get,c=t._x_model.set,f=jn({get(){return d()},set(m){c(m)}},{get(){return a()},set(m){l(m)}});s(f)})});X("teleport",(t,{modifiers:e,expression:i},{cleanup:r})=>{t.tagName.toLowerCase()!=="template"&&se("x-teleport can only be used on a <template> tag",t);let s=Lr(i),n=t.content.cloneNode(!0).firstElementChild;t._x_teleport=n,n._x_teleportBack=t,t.setAttribute("data-teleport-template",!0),n.setAttribute("data-teleport-target",!0),t._x_forwardEvents&&t._x_forwardEvents.forEach(o=>{n.addEventListener(o,l=>{l.stopPropagation(),t.dispatchEvent(new l.constructor(l.type,l))})}),pt(n,{},t);let a=(o,l,u)=>{u.includes("prepend")?l.parentNode.insertBefore(o,l):u.includes("append")?l.parentNode.insertBefore(o,l.nextSibling):l.appendChild(o)};Y(()=>{a(n,s,e),_e(()=>{me(n),n._x_ignore=!0})()}),t._x_teleportPutBack=()=>{let o=Lr(i);Y(()=>{a(t._x_teleport,o,e)})},r(()=>n.remove())});var Lo=document.createElement("div");function Lr(t){let e=_e(()=>document.querySelector(t),()=>Lo)();return e||se(`Cannot find x-teleport element for selector: "${t}"`),e}var cs=()=>{};cs.inline=(t,{modifiers:e},{cleanup:i})=>{e.includes("self")?t._x_ignoreSelf=!0:t._x_ignore=!0,i(()=>{e.includes("self")?delete t._x_ignoreSelf:delete t._x_ignore})};X("ignore",cs);X("effect",_e((t,{expression:e},{effect:i})=>{i(Z(t,e))}));function ki(t,e,i,r){let s=t,n=l=>r(l),a={},o=(l,u)=>d=>u(l,d);if(i.includes("dot")&&(e=Io(e)),i.includes("camel")&&(e=Oo(e)),i.includes("passive")&&(a.passive=!0),i.includes("capture")&&(a.capture=!0),i.includes("window")&&(s=window),i.includes("document")&&(s=document),i.includes("debounce")){let l=i[i.indexOf("debounce")+1]||"invalid-wait",u=kt(l.split("ms")[0])?Number(l.split("ms")[0]):250;n=Gn(n,u)}if(i.includes("throttle")){let l=i[i.indexOf("throttle")+1]||"invalid-wait",u=kt(l.split("ms")[0])?Number(l.split("ms")[0]):250;n=Vn(n,u)}return i.includes("prevent")&&(n=o(n,(l,u)=>{u.preventDefault(),l(u)})),i.includes("stop")&&(n=o(n,(l,u)=>{u.stopPropagation(),l(u)})),i.includes("once")&&(n=o(n,(l,u)=>{l(u),s.removeEventListener(e,n,a)})),(i.includes("away")||i.includes("outside"))&&(s=document,n=o(n,(l,u)=>{t.contains(u.target)||u.target.isConnected!==!1&&(t.offsetWidth<1&&t.offsetHeight<1||t._x_isShown!==!1&&l(u))})),i.includes("self")&&(n=o(n,(l,u)=>{u.target===t&&l(u)})),n=o(n,(l,u)=>{$o(e)&&zo(u,i)||l(u)}),s.addEventListener(e,n,a),()=>{s.removeEventListener(e,n,a)}}function Io(t){return t.replace(/-/g,".")}function Oo(t){return t.toLowerCase().replace(/-(\w)/g,(e,i)=>i.toUpperCase())}function kt(t){return!Array.isArray(t)&&!isNaN(t)}function Do(t){return[" ","_"].includes(t)?t:t.replace(/([a-z])([A-Z])/g,"$1-$2").replace(/[_\s]/,"-").toLowerCase()}function $o(t){return["keydown","keyup"].includes(t)}function zo(t,e){let i=e.filter(n=>!["window","document","prevent","stop","once","capture"].includes(n));if(i.includes("debounce")){let n=i.indexOf("debounce");i.splice(n,kt((i[n+1]||"invalid-wait").split("ms")[0])?2:1)}if(i.includes("throttle")){let n=i.indexOf("throttle");i.splice(n,kt((i[n+1]||"invalid-wait").split("ms")[0])?2:1)}if(i.length===0||i.length===1&&Ir(t.key).includes(i[0]))return!1;const s=["ctrl","shift","alt","meta","cmd","super"].filter(n=>i.includes(n));return i=i.filter(n=>!s.includes(n)),!(s.length>0&&s.filter(a=>((a==="cmd"||a==="super")&&(a="meta"),t[`${a}Key`])).length===s.length&&Ir(t.key).includes(i[0]))}function Ir(t){if(!t)return[];t=Do(t);let e={ctrl:"control",slash:"/",space:" ",spacebar:" ",cmd:"meta",esc:"escape",up:"arrow-up",down:"arrow-down",left:"arrow-left",right:"arrow-right",period:".",comma:",",equal:"=",minus:"-",underscore:"_"};return e[t]=t,Object.keys(e).map(i=>{if(e[i]===t)return i}).filter(i=>i)}X("model",(t,{modifiers:e,expression:i},{effect:r,cleanup:s})=>{let n=t;e.includes("parent")&&(n=t.parentNode);let a=Z(n,i),o;typeof i=="string"?o=Z(n,`${i} = __placeholder`):typeof i=="function"&&typeof i()=="string"?o=Z(n,`${i()} = __placeholder`):o=()=>{};let l=()=>{let f;return a(m=>f=m),Or(f)?f.get():f},u=f=>{let m;a(g=>m=g),Or(m)?m.set(f):o(()=>{},{scope:{__placeholder:f}})};typeof i=="string"&&t.type==="radio"&&Y(()=>{t.hasAttribute("name")||t.setAttribute("name",i)});var d=t.tagName.toLowerCase()==="select"||["checkbox","radio"].includes(t.type)||e.includes("lazy")?"change":"input";let c=xe?()=>{}:ki(t,d,e,f=>{u(fi(t,e,f,l()))});if(e.includes("fill")&&([void 0,null,""].includes(l())||t.type==="checkbox"&&Array.isArray(l())||t.tagName.toLowerCase()==="select"&&t.multiple)&&u(fi(t,e,{target:t},l())),t._x_removeModelListeners||(t._x_removeModelListeners={}),t._x_removeModelListeners.default=c,s(()=>t._x_removeModelListeners.default()),t.form){let f=ki(t.form,"reset",[],m=>{tr(()=>t._x_model&&t._x_model.set(fi(t,e,{target:t},l())))});s(()=>f())}t._x_model={get(){return l()},set(f){u(f)}},t._x_forceModelUpdate=f=>{f===void 0&&typeof i=="string"&&i.match(/\./)&&(f=""),window.fromModel=!0,Y(()=>Fn(t,"value",f)),delete window.fromModel},r(()=>{let f=l();e.includes("unintrusive")&&document.activeElement.isSameNode(t)||t._x_forceModelUpdate(f)})});function fi(t,e,i,r){return Y(()=>{if(i instanceof CustomEvent&&i.detail!==void 0)return i.detail!==null&&i.detail!==void 0?i.detail:i.target.value;if(t.type==="checkbox")if(Array.isArray(r)){let s=null;return e.includes("number")?s=pi(i.target.value):e.includes("boolean")?s=It(i.target.value):s=i.target.value,i.target.checked?r.includes(s)?r:r.concat([s]):r.filter(n=>!Ro(n,s))}else return i.target.checked;else{if(t.tagName.toLowerCase()==="select"&&t.multiple)return e.includes("number")?Array.from(i.target.selectedOptions).map(s=>{let n=s.value||s.text;return pi(n)}):e.includes("boolean")?Array.from(i.target.selectedOptions).map(s=>{let n=s.value||s.text;return It(n)}):Array.from(i.target.selectedOptions).map(s=>s.value||s.text);{let s;return t.type==="radio"?i.target.checked?s=i.target.value:s=r:s=i.target.value,e.includes("number")?pi(s):e.includes("boolean")?It(s):e.includes("trim")?s.trim():s}}})}function pi(t){let e=t?parseFloat(t):null;return ko(e)?e:t}function Ro(t,e){return t==e}function ko(t){return!Array.isArray(t)&&!isNaN(t)}function Or(t){return t!==null&&typeof t=="object"&&typeof t.get=="function"&&typeof t.set=="function"}X("cloak",t=>queueMicrotask(()=>Y(()=>t.removeAttribute(Ke("cloak")))));In(()=>`[${Ke("init")}]`);X("init",_e((t,{expression:e},{evaluate:i})=>typeof e=="string"?!!e.trim()&&i(e,{},!1):i(e,{},!1)));X("text",(t,{expression:e},{effect:i,evaluateLater:r})=>{let s=r(e);i(()=>{s(n=>{Y(()=>{t.textContent=n})})})});X("html",(t,{expression:e},{effect:i,evaluateLater:r})=>{let s=r(e);i(()=>{s(n=>{Y(()=>{t.innerHTML=n,t._x_ignoreSelf=!0,me(t),delete t._x_ignoreSelf})})})});Zi(xn(":",Sn(Ke("bind:"))));var ds=(t,{value:e,modifiers:i,expression:r,original:s},{effect:n,cleanup:a})=>{if(!e){let l={};Ha(l),Z(t,r)(d=>{qn(t,d,s)},{scope:l});return}if(e==="key")return Fo(t,r);if(t._x_inlineBindings&&t._x_inlineBindings[e]&&t._x_inlineBindings[e].extract)return;let o=Z(t,r);n(()=>o(l=>{l===void 0&&typeof r=="string"&&r.match(/\./)&&(l=""),Y(()=>Fn(t,e,l,i))})),a(()=>{t._x_undoAddedClasses&&t._x_undoAddedClasses(),t._x_undoAddedStyles&&t._x_undoAddedStyles()})};ds.inline=(t,{value:e,modifiers:i,expression:r})=>{e&&(t._x_inlineBindings||(t._x_inlineBindings={}),t._x_inlineBindings[e]={expression:r,extract:!1})};X("bind",ds);function Fo(t,e){t._x_keyExpression=e}Ln(()=>`[${Ke("data")}]`);X("data",(t,{expression:e},{cleanup:i})=>{if(No(t))return;e=e===""?"{}":e;let r={};Ci(r,t);let s={};Va(s,r);let n=Le(t,e,{scope:s});(n===void 0||n===!0)&&(n={}),Ci(n,t);let a=Ye(n);fn(a);let o=pt(t,a);a.init&&Le(t,a.init),i(()=>{a.destroy&&Le(t,a.destroy),o()})});Yt((t,e)=>{t._x_dataStack&&(e._x_dataStack=t._x_dataStack,e.setAttribute("data-has-alpine-state",!0))});function No(t){return xe?Di?!0:t.hasAttribute("data-has-alpine-state"):!1}X("show",(t,{modifiers:e,expression:i},{effect:r})=>{let s=Z(t,i);t._x_doHide||(t._x_doHide=()=>{Y(()=>{t.style.setProperty("display","none",e.includes("important")?"important":void 0)})}),t._x_doShow||(t._x_doShow=()=>{Y(()=>{t.style.length===1&&t.style.display==="none"?t.removeAttribute("style"):t.style.removeProperty("display")})});let n=()=>{t._x_doHide(),t._x_isShown=!1},a=()=>{t._x_doShow(),t._x_isShown=!0},o=()=>setTimeout(a),l=Ii(c=>c?a():n(),c=>{typeof t._x_toggleAndCascadeWithTransitions=="function"?t._x_toggleAndCascadeWithTransitions(t,c,a,n):c?o():n()}),u,d=!0;r(()=>s(c=>{!d&&c===u||(e.includes("immediate")&&(c?o():n()),l(c),u=c,d=!1)}))});X("for",(t,{expression:e},{effect:i,cleanup:r})=>{let s=Ho(e),n=Z(t,s.items),a=Z(t,t._x_keyExpression||"index");t._x_prevKeys=[],t._x_lookup={},i(()=>Bo(t,s,n,a)),r(()=>{Object.values(t._x_lookup).forEach(o=>o.remove()),delete t._x_prevKeys,delete t._x_lookup})});function Bo(t,e,i,r){let s=a=>typeof a=="object"&&!Array.isArray(a),n=t;i(a=>{Go(a)&&a>=0&&(a=Array.from(Array(a).keys(),h=>h+1)),a===void 0&&(a=[]);let o=t._x_lookup,l=t._x_prevKeys,u=[],d=[];if(s(a))a=Object.entries(a).map(([h,p])=>{let b=Dr(e,p,h,a);r(v=>{d.includes(v)&&se("Duplicate key on x-for",t),d.push(v)},{scope:{index:h,...b}}),u.push(b)});else for(let h=0;h<a.length;h++){let p=Dr(e,a[h],h,a);r(b=>{d.includes(b)&&se("Duplicate key on x-for",t),d.push(b)},{scope:{index:h,...p}}),u.push(p)}let c=[],f=[],m=[],g=[];for(let h=0;h<l.length;h++){let p=l[h];d.indexOf(p)===-1&&m.push(p)}l=l.filter(h=>!m.includes(h));let w="template";for(let h=0;h<d.length;h++){let p=d[h],b=l.indexOf(p);if(b===-1)l.splice(h,0,p),c.push([w,h]);else if(b!==h){let v=l.splice(h,1)[0],y=l.splice(b-1,1)[0];l.splice(h,0,y),l.splice(b,0,v),f.push([v,y])}else g.push(p);w=p}for(let h=0;h<m.length;h++){let p=m[h];o[p]._x_effects&&o[p]._x_effects.forEach(en),o[p].remove(),o[p]=null,delete o[p]}for(let h=0;h<f.length;h++){let[p,b]=f[h],v=o[p],y=o[b],T=document.createElement("div");Y(()=>{y||se('x-for ":key" is undefined or invalid',n,b,o),y.after(T),v.after(y),y._x_currentIfEl&&y.after(y._x_currentIfEl),T.before(v),v._x_currentIfEl&&v.after(v._x_currentIfEl),T.remove()}),y._x_refreshXForScope(u[d.indexOf(b)])}for(let h=0;h<c.length;h++){let[p,b]=c[h],v=p==="template"?n:o[p];v._x_currentIfEl&&(v=v._x_currentIfEl);let y=u[b],T=d[b],x=document.importNode(n.content,!0).firstElementChild,M=Ye(y);pt(x,M,n),x._x_refreshXForScope=S=>{Object.entries(S).forEach(([A,C])=>{M[A]=C})},Y(()=>{v.after(x),_e(()=>me(x))()}),typeof T=="object"&&se("x-for key cannot be an object, it must be a string or an integer",n),o[T]=x}for(let h=0;h<g.length;h++)o[g[h]]._x_refreshXForScope(u[d.indexOf(g[h])]);n._x_prevKeys=d})}function Ho(t){let e=/,([^,\}\]]*)(?:,([^,\}\]]*))?$/,i=/^\s*\(|\)\s*$/g,r=/([\s\S]*?)\s+(?:in|of)\s+([\s\S]*)/,s=t.match(r);if(!s)return;let n={};n.items=s[2].trim();let a=s[1].replace(i,"").trim(),o=a.match(e);return o?(n.item=a.replace(e,"").trim(),n.index=o[1].trim(),o[2]&&(n.collection=o[2].trim())):n.item=a,n}function Dr(t,e,i,r){let s={};return/^\[.*\]$/.test(t.item)&&Array.isArray(e)?t.item.replace("[","").replace("]","").split(",").map(a=>a.trim()).forEach((a,o)=>{s[a]=e[o]}):/^\{.*\}$/.test(t.item)&&!Array.isArray(e)&&typeof e=="object"?t.item.replace("{","").replace("}","").split(",").map(a=>a.trim()).forEach(a=>{s[a]=e[a]}):s[t.item]=e,t.index&&(s[t.index]=i),t.collection&&(s[t.collection]=r),s}function Go(t){return!Array.isArray(t)&&!isNaN(t)}function us(){}us.inline=(t,{expression:e},{cleanup:i})=>{let r=qt(t);r._x_refs||(r._x_refs={}),r._x_refs[e]=t,i(()=>delete r._x_refs[e])};X("ref",us);X("if",(t,{expression:e},{effect:i,cleanup:r})=>{t.tagName.toLowerCase()!=="template"&&se("x-if can only be used on a <template> tag",t);let s=Z(t,e),n=()=>{if(t._x_currentIfEl)return t._x_currentIfEl;let o=t.content.cloneNode(!0).firstElementChild;return pt(o,{},t),Y(()=>{t.after(o),_e(()=>me(o))()}),t._x_currentIfEl=o,t._x_undoIf=()=>{ye(o,l=>{l._x_effects&&l._x_effects.forEach(en)}),o.remove(),delete t._x_currentIfEl},o},a=()=>{t._x_undoIf&&(t._x_undoIf(),delete t._x_undoIf)};i(()=>s(o=>{o?n():a()})),r(()=>t._x_undoIf&&t._x_undoIf())});X("id",(t,{expression:e},{evaluate:i})=>{i(e).forEach(s=>Ao(t,s))});Yt((t,e)=>{t._x_ids&&(e._x_ids=t._x_ids)});Zi(xn("@",Sn(Ke("on:"))));X("on",_e((t,{value:e,modifiers:i,expression:r},{cleanup:s})=>{let n=r?Z(t,r):()=>{};t.tagName.toLowerCase()==="template"&&(t._x_forwardEvents||(t._x_forwardEvents=[]),t._x_forwardEvents.includes(e)||t._x_forwardEvents.push(e));let a=ki(t,e,i,o=>{n(()=>{},{scope:{$event:o},params:[o]})});s(()=>a())}));Zt("Collapse","collapse","collapse");Zt("Intersect","intersect","intersect");Zt("Focus","trap","focus");Zt("Mask","mask","mask");function Zt(t,e,i){X(e,r=>se(`You can't use [x-${e}] without first installing the "${t}" plugin here: https://alpinejs.dev/plugins/${i}`,r))}gt.setEvaluator(vn);gt.setReactivityEngine({reactive:cr,effect:Qa,release:eo,raw:W});var Vo=gt,de=Vo;function $r(t){return t!==null&&typeof t=="object"&&"constructor"in t&&t.constructor===Object}function dr(t,e){t===void 0&&(t={}),e===void 0&&(e={}),Object.keys(e).forEach(i=>{typeof t[i]>"u"?t[i]=e[i]:$r(e[i])&&$r(t[i])&&Object.keys(e[i]).length>0&&dr(t[i],e[i])})}const fs={body:{},addEventListener(){},removeEventListener(){},activeElement:{blur(){},nodeName:""},querySelector(){return null},querySelectorAll(){return[]},getElementById(){return null},createEvent(){return{initEvent(){}}},createElement(){return{children:[],childNodes:[],style:{},setAttribute(){},getElementsByTagName(){return[]}}},createElementNS(){return{}},importNode(){return null},location:{hash:"",host:"",hostname:"",href:"",origin:"",pathname:"",protocol:"",search:""}};function K(){const t=typeof document<"u"?document:{};return dr(t,fs),t}const jo={document:fs,navigator:{userAgent:""},location:{hash:"",host:"",hostname:"",href:"",origin:"",pathname:"",protocol:"",search:""},history:{replaceState(){},pushState(){},go(){},back(){}},CustomEvent:function(){return this},addEventListener(){},removeEventListener(){},getComputedStyle(){return{getPropertyValue(){return""}}},Image(){},Date(){},screen:{},setTimeout(){},clearTimeout(){},matchMedia(){return{}},requestAnimationFrame(t){return typeof setTimeout>"u"?(t(),null):setTimeout(t,0)},cancelAnimationFrame(t){typeof setTimeout>"u"||clearTimeout(t)}};function q(){const t=typeof window<"u"?window:{};return dr(t,jo),t}function we(t){return t===void 0&&(t=""),t.trim().split(" ").filter(e=>!!e.trim())}function Wo(t){const e=t;Object.keys(e).forEach(i=>{try{e[i]=null}catch{}try{delete e[i]}catch{}})}function ze(t,e){return e===void 0&&(e=0),setTimeout(t,e)}function ne(){return Date.now()}function qo(t){const e=q();let i;return e.getComputedStyle&&(i=e.getComputedStyle(t,null)),!i&&t.currentStyle&&(i=t.currentStyle),i||(i=t.style),i}function Fi(t,e){e===void 0&&(e="x");const i=q();let r,s,n;const a=qo(t);return i.WebKitCSSMatrix?(s=a.transform||a.webkitTransform,s.split(",").length>6&&(s=s.split(", ").map(o=>o.replace(",",".")).join(", ")),n=new i.WebKitCSSMatrix(s==="none"?"":s)):(n=a.MozTransform||a.OTransform||a.MsTransform||a.msTransform||a.transform||a.getPropertyValue("transform").replace("translate(","matrix(1, 0, 0, 1,"),r=n.toString().split(",")),e==="x"&&(i.WebKitCSSMatrix?s=n.m41:r.length===16?s=parseFloat(r[12]):s=parseFloat(r[4])),e==="y"&&(i.WebKitCSSMatrix?s=n.m42:r.length===16?s=parseFloat(r[13]):s=parseFloat(r[5])),s||0}function st(t){return typeof t=="object"&&t!==null&&t.constructor&&Object.prototype.toString.call(t).slice(8,-1)==="Object"}function Xo(t){return typeof window<"u"&&typeof window.HTMLElement<"u"?t instanceof HTMLElement:t&&(t.nodeType===1||t.nodeType===11)}function te(){const t=Object(arguments.length<=0?void 0:arguments[0]),e=["__proto__","constructor","prototype"];for(let i=1;i<arguments.length;i+=1){const r=i<0||arguments.length<=i?void 0:arguments[i];if(r!=null&&!Xo(r)){const s=Object.keys(Object(r)).filter(n=>e.indexOf(n)<0);for(let n=0,a=s.length;n<a;n+=1){const o=s[n],l=Object.getOwnPropertyDescriptor(r,o);l!==void 0&&l.enumerable&&(st(t[o])&&st(r[o])?r[o].__swiper__?t[o]=r[o]:te(t[o],r[o]):!st(t[o])&&st(r[o])?(t[o]={},r[o].__swiper__?t[o]=r[o]:te(t[o],r[o])):t[o]=r[o])}}}return t}function at(t,e,i){t.style.setProperty(e,i)}function ps(t){let{swiper:e,targetPosition:i,side:r}=t;const s=q(),n=-e.translate;let a=null,o;const l=e.params.speed;e.wrapperEl.style.scrollSnapType="none",s.cancelAnimationFrame(e.cssModeFrameID);const u=i>n?"next":"prev",d=(f,m)=>u==="next"&&f>=m||u==="prev"&&f<=m,c=()=>{o=new Date().getTime(),a===null&&(a=o);const f=Math.max(Math.min((o-a)/l,1),0),m=.5-Math.cos(f*Math.PI)/2;let g=n+m*(i-n);if(d(g,i)&&(g=i),e.wrapperEl.scrollTo({[r]:g}),d(g,i)){e.wrapperEl.style.overflow="hidden",e.wrapperEl.style.scrollSnapType="",setTimeout(()=>{e.wrapperEl.style.overflow="",e.wrapperEl.scrollTo({[r]:g})}),s.cancelAnimationFrame(e.cssModeFrameID);return}e.cssModeFrameID=s.requestAnimationFrame(c)};c()}function Be(t){return t.querySelector(".swiper-slide-transform")||t.shadowRoot&&t.shadowRoot.querySelector(".swiper-slide-transform")||t}function U(t,e){return e===void 0&&(e=""),[...t.children].filter(i=>i.matches(e))}function Ft(t){try{console.warn(t);return}catch{}}function ie(t,e){e===void 0&&(e=[]);const i=document.createElement(t);return i.classList.add(...Array.isArray(e)?e:we(e)),i}function Nt(t){const e=q(),i=K(),r=t.getBoundingClientRect(),s=i.body,n=t.clientTop||s.clientTop||0,a=t.clientLeft||s.clientLeft||0,o=t===e?e.scrollY:t.scrollTop,l=t===e?e.scrollX:t.scrollLeft;return{top:r.top+o-n,left:r.left+l-a}}function Yo(t,e){const i=[];for(;t.previousElementSibling;){const r=t.previousElementSibling;e?r.matches(e)&&i.push(r):i.push(r),t=r}return i}function Uo(t,e){const i=[];for(;t.nextElementSibling;){const r=t.nextElementSibling;e?r.matches(e)&&i.push(r):i.push(r),t=r}return i}function be(t,e){return q().getComputedStyle(t,null).getPropertyValue(e)}function ut(t){let e=t,i;if(e){for(i=0;(e=e.previousSibling)!==null;)e.nodeType===1&&(i+=1);return i}}function De(t,e){const i=[];let r=t.parentElement;for(;r;)e?r.matches(e)&&i.push(r):i.push(r),r=r.parentElement;return i}function ct(t,e){function i(r){r.target===t&&(e.call(t,r),t.removeEventListener("transitionend",i))}e&&t.addEventListener("transitionend",i)}function Ni(t,e,i){const r=q();return t[e==="width"?"offsetWidth":"offsetHeight"]+parseFloat(r.getComputedStyle(t,null).getPropertyValue(e==="width"?"margin-right":"margin-top"))+parseFloat(r.getComputedStyle(t,null).getPropertyValue(e==="width"?"margin-left":"margin-bottom"))}function H(t){return(Array.isArray(t)?t:[t]).filter(e=>!!e)}let mi;function Ko(){const t=q(),e=K();return{smoothScroll:e.documentElement&&e.documentElement.style&&"scrollBehavior"in e.documentElement.style,touch:!!("ontouchstart"in t||t.DocumentTouch&&e instanceof t.DocumentTouch)}}function ms(){return mi||(mi=Ko()),mi}let hi;function Jo(t){let{userAgent:e}=t===void 0?{}:t;const i=ms(),r=q(),s=r.navigator.platform,n=e||r.navigator.userAgent,a={ios:!1,android:!1},o=r.screen.width,l=r.screen.height,u=n.match(/(Android);?[\s\/]+([\d.]+)?/);let d=n.match(/(iPad).*OS\s([\d_]+)/);const c=n.match(/(iPod)(.*OS\s([\d_]+))?/),f=!d&&n.match(/(iPhone\sOS|iOS)\s([\d_]+)/),m=s==="Win32";let g=s==="MacIntel";const w=["1024x1366","1366x1024","834x1194","1194x834","834x1112","1112x834","768x1024","1024x768","820x1180","1180x820","810x1080","1080x810"];return!d&&g&&i.touch&&w.indexOf(`${o}x${l}`)>=0&&(d=n.match(/(Version)\/([\d.]+)/),d||(d=[0,1,"13_0_0"]),g=!1),u&&!m&&(a.os="android",a.android=!0),(d||f||c)&&(a.os="ios",a.ios=!0),a}function hs(t){return t===void 0&&(t={}),hi||(hi=Jo(t)),hi}let gi;function Zo(){const t=q(),e=hs();let i=!1;function r(){const o=t.navigator.userAgent.toLowerCase();return o.indexOf("safari")>=0&&o.indexOf("chrome")<0&&o.indexOf("android")<0}if(r()){const o=String(t.navigator.userAgent);if(o.includes("Version/")){const[l,u]=o.split("Version/")[1].split(" ")[0].split(".").map(d=>Number(d));i=l<16||l===16&&u<2}}const s=/(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/i.test(t.navigator.userAgent),n=r(),a=n||s&&e.ios;return{isSafari:i||n,needPerspectiveFix:i,need3dFix:a,isWebView:s}}function Qo(){return gi||(gi=Zo()),gi}function el(t){let{swiper:e,on:i,emit:r}=t;const s=q();let n=null,a=null;const o=()=>{!e||e.destroyed||!e.initialized||(r("beforeResize"),r("resize"))},l=()=>{!e||e.destroyed||!e.initialized||(n=new ResizeObserver(c=>{a=s.requestAnimationFrame(()=>{const{width:f,height:m}=e;let g=f,w=m;c.forEach(h=>{let{contentBoxSize:p,contentRect:b,target:v}=h;v&&v!==e.el||(g=b?b.width:(p[0]||p).inlineSize,w=b?b.height:(p[0]||p).blockSize)}),(g!==f||w!==m)&&o()})}),n.observe(e.el))},u=()=>{a&&s.cancelAnimationFrame(a),n&&n.unobserve&&e.el&&(n.unobserve(e.el),n=null)},d=()=>{!e||e.destroyed||!e.initialized||r("orientationchange")};i("init",()=>{if(e.params.resizeObserver&&typeof s.ResizeObserver<"u"){l();return}s.addEventListener("resize",o),s.addEventListener("orientationchange",d)}),i("destroy",()=>{u(),s.removeEventListener("resize",o),s.removeEventListener("orientationchange",d)})}function tl(t){let{swiper:e,extendParams:i,on:r,emit:s}=t;const n=[],a=q(),o=function(d,c){c===void 0&&(c={});const f=a.MutationObserver||a.WebkitMutationObserver,m=new f(g=>{if(e.__preventObserver__)return;if(g.length===1){s("observerUpdate",g[0]);return}const w=function(){s("observerUpdate",g[0])};a.requestAnimationFrame?a.requestAnimationFrame(w):a.setTimeout(w,0)});m.observe(d,{attributes:typeof c.attributes>"u"?!0:c.attributes,childList:typeof c.childList>"u"?!0:c.childList,characterData:typeof c.characterData>"u"?!0:c.characterData}),n.push(m)},l=()=>{if(e.params.observer){if(e.params.observeParents){const d=De(e.hostEl);for(let c=0;c<d.length;c+=1)o(d[c])}o(e.hostEl,{childList:e.params.observeSlideChildren}),o(e.wrapperEl,{attributes:!1})}},u=()=>{n.forEach(d=>{d.disconnect()}),n.splice(0,n.length)};i({observer:!1,observeParents:!1,observeSlideChildren:!1}),r("init",l),r("destroy",u)}var il={on(t,e,i){const r=this;if(!r.eventsListeners||r.destroyed||typeof e!="function")return r;const s=i?"unshift":"push";return t.split(" ").forEach(n=>{r.eventsListeners[n]||(r.eventsListeners[n]=[]),r.eventsListeners[n][s](e)}),r},once(t,e,i){const r=this;if(!r.eventsListeners||r.destroyed||typeof e!="function")return r;function s(){r.off(t,s),s.__emitterProxy&&delete s.__emitterProxy;for(var n=arguments.length,a=new Array(n),o=0;o<n;o++)a[o]=arguments[o];e.apply(r,a)}return s.__emitterProxy=e,r.on(t,s,i)},onAny(t,e){const i=this;if(!i.eventsListeners||i.destroyed||typeof t!="function")return i;const r=e?"unshift":"push";return i.eventsAnyListeners.indexOf(t)<0&&i.eventsAnyListeners[r](t),i},offAny(t){const e=this;if(!e.eventsListeners||e.destroyed||!e.eventsAnyListeners)return e;const i=e.eventsAnyListeners.indexOf(t);return i>=0&&e.eventsAnyListeners.splice(i,1),e},off(t,e){const i=this;return!i.eventsListeners||i.destroyed||!i.eventsListeners||t.split(" ").forEach(r=>{typeof e>"u"?i.eventsListeners[r]=[]:i.eventsListeners[r]&&i.eventsListeners[r].forEach((s,n)=>{(s===e||s.__emitterProxy&&s.__emitterProxy===e)&&i.eventsListeners[r].splice(n,1)})}),i},emit(){const t=this;if(!t.eventsListeners||t.destroyed||!t.eventsListeners)return t;let e,i,r;for(var s=arguments.length,n=new Array(s),a=0;a<s;a++)n[a]=arguments[a];return typeof n[0]=="string"||Array.isArray(n[0])?(e=n[0],i=n.slice(1,n.length),r=t):(e=n[0].events,i=n[0].data,r=n[0].context||t),i.unshift(r),(Array.isArray(e)?e:e.split(" ")).forEach(l=>{t.eventsAnyListeners&&t.eventsAnyListeners.length&&t.eventsAnyListeners.forEach(u=>{u.apply(r,[l,...i])}),t.eventsListeners&&t.eventsListeners[l]&&t.eventsListeners[l].forEach(u=>{u.apply(r,i)})}),t}};function rl(){const t=this;let e,i;const r=t.el;typeof t.params.width<"u"&&t.params.width!==null?e=t.params.width:e=r.clientWidth,typeof t.params.height<"u"&&t.params.height!==null?i=t.params.height:i=r.clientHeight,!(e===0&&t.isHorizontal()||i===0&&t.isVertical())&&(e=e-parseInt(be(r,"padding-left")||0,10)-parseInt(be(r,"padding-right")||0,10),i=i-parseInt(be(r,"padding-top")||0,10)-parseInt(be(r,"padding-bottom")||0,10),Number.isNaN(e)&&(e=0),Number.isNaN(i)&&(i=0),Object.assign(t,{width:e,height:i,size:t.isHorizontal()?e:i}))}function nl(){const t=this;function e(C,O){return parseFloat(C.getPropertyValue(t.getDirectionLabel(O))||0)}const i=t.params,{wrapperEl:r,slidesEl:s,size:n,rtlTranslate:a,wrongRTL:o}=t,l=t.virtual&&i.virtual.enabled,u=l?t.virtual.slides.length:t.slides.length,d=U(s,`.${t.params.slideClass}, swiper-slide`),c=l?t.virtual.slides.length:d.length;let f=[];const m=[],g=[];let w=i.slidesOffsetBefore;typeof w=="function"&&(w=i.slidesOffsetBefore.call(t));let h=i.slidesOffsetAfter;typeof h=="function"&&(h=i.slidesOffsetAfter.call(t));const p=t.snapGrid.length,b=t.slidesGrid.length;let v=i.spaceBetween,y=-w,T=0,x=0;if(typeof n>"u")return;typeof v=="string"&&v.indexOf("%")>=0?v=parseFloat(v.replace("%",""))/100*n:typeof v=="string"&&(v=parseFloat(v)),t.virtualSize=-v,d.forEach(C=>{a?C.style.marginLeft="":C.style.marginRight="",C.style.marginBottom="",C.style.marginTop=""}),i.centeredSlides&&i.cssMode&&(at(r,"--swiper-centered-offset-before",""),at(r,"--swiper-centered-offset-after",""));const M=i.grid&&i.grid.rows>1&&t.grid;M?t.grid.initSlides(d):t.grid&&t.grid.unsetSlides();let S;const A=i.slidesPerView==="auto"&&i.breakpoints&&Object.keys(i.breakpoints).filter(C=>typeof i.breakpoints[C].slidesPerView<"u").length>0;for(let C=0;C<c;C+=1){S=0;let O;if(d[C]&&(O=d[C]),M&&t.grid.updateSlide(C,O,d),!(d[C]&&be(O,"display")==="none")){if(i.slidesPerView==="auto"){A&&(d[C].style[t.getDirectionLabel("width")]="");const E=getComputedStyle(O),_=O.style.transform,P=O.style.webkitTransform;if(_&&(O.style.transform="none"),P&&(O.style.webkitTransform="none"),i.roundLengths)S=t.isHorizontal()?Ni(O,"width"):Ni(O,"height");else{const D=e(E,"width"),k=e(E,"padding-left"),L=e(E,"padding-right"),I=e(E,"margin-left"),R=e(E,"margin-right"),B=E.getPropertyValue("box-sizing");if(B&&B==="border-box")S=D+I+R;else{const{clientWidth:$,offsetWidth:z}=O;S=D+k+L+I+R+(z-$)}}_&&(O.style.transform=_),P&&(O.style.webkitTransform=P),i.roundLengths&&(S=Math.floor(S))}else S=(n-(i.slidesPerView-1)*v)/i.slidesPerView,i.roundLengths&&(S=Math.floor(S)),d[C]&&(d[C].style[t.getDirectionLabel("width")]=`${S}px`);d[C]&&(d[C].swiperSlideSize=S),g.push(S),i.centeredSlides?(y=y+S/2+T/2+v,T===0&&C!==0&&(y=y-n/2-v),C===0&&(y=y-n/2-v),Math.abs(y)<1/1e3&&(y=0),i.roundLengths&&(y=Math.floor(y)),x%i.slidesPerGroup===0&&f.push(y),m.push(y)):(i.roundLengths&&(y=Math.floor(y)),(x-Math.min(t.params.slidesPerGroupSkip,x))%t.params.slidesPerGroup===0&&f.push(y),m.push(y),y=y+S+v),t.virtualSize+=S+v,T=S,x+=1}}if(t.virtualSize=Math.max(t.virtualSize,n)+h,a&&o&&(i.effect==="slide"||i.effect==="coverflow")&&(r.style.width=`${t.virtualSize+v}px`),i.setWrapperSize&&(r.style[t.getDirectionLabel("width")]=`${t.virtualSize+v}px`),M&&t.grid.updateWrapperSize(S,f),!i.centeredSlides){const C=[];for(let O=0;O<f.length;O+=1){let E=f[O];i.roundLengths&&(E=Math.floor(E)),f[O]<=t.virtualSize-n&&C.push(E)}f=C,Math.floor(t.virtualSize-n)-Math.floor(f[f.length-1])>1&&f.push(t.virtualSize-n)}if(l&&i.loop){const C=g[0]+v;if(i.slidesPerGroup>1){const O=Math.ceil((t.virtual.slidesBefore+t.virtual.slidesAfter)/i.slidesPerGroup),E=C*i.slidesPerGroup;for(let _=0;_<O;_+=1)f.push(f[f.length-1]+E)}for(let O=0;O<t.virtual.slidesBefore+t.virtual.slidesAfter;O+=1)i.slidesPerGroup===1&&f.push(f[f.length-1]+C),m.push(m[m.length-1]+C),t.virtualSize+=C}if(f.length===0&&(f=[0]),v!==0){const C=t.isHorizontal()&&a?"marginLeft":t.getDirectionLabel("marginRight");d.filter((O,E)=>!i.cssMode||i.loop?!0:E!==d.length-1).forEach(O=>{O.style[C]=`${v}px`})}if(i.centeredSlides&&i.centeredSlidesBounds){let C=0;g.forEach(E=>{C+=E+(v||0)}),C-=v;const O=C-n;f=f.map(E=>E<=0?-w:E>O?O+h:E)}if(i.centerInsufficientSlides){let C=0;if(g.forEach(O=>{C+=O+(v||0)}),C-=v,C<n){const O=(n-C)/2;f.forEach((E,_)=>{f[_]=E-O}),m.forEach((E,_)=>{m[_]=E+O})}}if(Object.assign(t,{slides:d,snapGrid:f,slidesGrid:m,slidesSizesGrid:g}),i.centeredSlides&&i.cssMode&&!i.centeredSlidesBounds){at(r,"--swiper-centered-offset-before",`${-f[0]}px`),at(r,"--swiper-centered-offset-after",`${t.size/2-g[g.length-1]/2}px`);const C=-t.snapGrid[0],O=-t.slidesGrid[0];t.snapGrid=t.snapGrid.map(E=>E+C),t.slidesGrid=t.slidesGrid.map(E=>E+O)}if(c!==u&&t.emit("slidesLengthChange"),f.length!==p&&(t.params.watchOverflow&&t.checkOverflow(),t.emit("snapGridLengthChange")),m.length!==b&&t.emit("slidesGridLengthChange"),i.watchSlidesProgress&&t.updateSlidesOffset(),t.emit("slidesUpdated"),!l&&!i.cssMode&&(i.effect==="slide"||i.effect==="fade")){const C=`${i.containerModifierClass}backface-hidden`,O=t.el.classList.contains(C);c<=i.maxBackfaceHiddenSlides?O||t.el.classList.add(C):O&&t.el.classList.remove(C)}}function sl(t){const e=this,i=[],r=e.virtual&&e.params.virtual.enabled;let s=0,n;typeof t=="number"?e.setTransition(t):t===!0&&e.setTransition(e.params.speed);const a=o=>r?e.slides[e.getSlideIndexByData(o)]:e.slides[o];if(e.params.slidesPerView!=="auto"&&e.params.slidesPerView>1)if(e.params.centeredSlides)(e.visibleSlides||[]).forEach(o=>{i.push(o)});else for(n=0;n<Math.ceil(e.params.slidesPerView);n+=1){const o=e.activeIndex+n;if(o>e.slides.length&&!r)break;i.push(a(o))}else i.push(a(e.activeIndex));for(n=0;n<i.length;n+=1)if(typeof i[n]<"u"){const o=i[n].offsetHeight;s=o>s?o:s}(s||s===0)&&(e.wrapperEl.style.height=`${s}px`)}function al(){const t=this,e=t.slides,i=t.isElement?t.isHorizontal()?t.wrapperEl.offsetLeft:t.wrapperEl.offsetTop:0;for(let r=0;r<e.length;r+=1)e[r].swiperSlideOffset=(t.isHorizontal()?e[r].offsetLeft:e[r].offsetTop)-i-t.cssOverflowAdjustment()}function ol(t){t===void 0&&(t=this&&this.translate||0);const e=this,i=e.params,{slides:r,rtlTranslate:s,snapGrid:n}=e;if(r.length===0)return;typeof r[0].swiperSlideOffset>"u"&&e.updateSlidesOffset();let a=-t;s&&(a=t),r.forEach(l=>{l.classList.remove(i.slideVisibleClass,i.slideFullyVisibleClass)}),e.visibleSlidesIndexes=[],e.visibleSlides=[];let o=i.spaceBetween;typeof o=="string"&&o.indexOf("%")>=0?o=parseFloat(o.replace("%",""))/100*e.size:typeof o=="string"&&(o=parseFloat(o));for(let l=0;l<r.length;l+=1){const u=r[l];let d=u.swiperSlideOffset;i.cssMode&&i.centeredSlides&&(d-=r[0].swiperSlideOffset);const c=(a+(i.centeredSlides?e.minTranslate():0)-d)/(u.swiperSlideSize+o),f=(a-n[0]+(i.centeredSlides?e.minTranslate():0)-d)/(u.swiperSlideSize+o),m=-(a-d),g=m+e.slidesSizesGrid[l],w=m>=0&&m<=e.size-e.slidesSizesGrid[l];(m>=0&&m<e.size-1||g>1&&g<=e.size||m<=0&&g>=e.size)&&(e.visibleSlides.push(u),e.visibleSlidesIndexes.push(l),r[l].classList.add(i.slideVisibleClass)),w&&r[l].classList.add(i.slideFullyVisibleClass),u.progress=s?-c:c,u.originalProgress=s?-f:f}}function ll(t){const e=this;if(typeof t>"u"){const d=e.rtlTranslate?-1:1;t=e&&e.translate&&e.translate*d||0}const i=e.params,r=e.maxTranslate()-e.minTranslate();let{progress:s,isBeginning:n,isEnd:a,progressLoop:o}=e;const l=n,u=a;if(r===0)s=0,n=!0,a=!0;else{s=(t-e.minTranslate())/r;const d=Math.abs(t-e.minTranslate())<1,c=Math.abs(t-e.maxTranslate())<1;n=d||s<=0,a=c||s>=1,d&&(s=0),c&&(s=1)}if(i.loop){const d=e.getSlideIndexByData(0),c=e.getSlideIndexByData(e.slides.length-1),f=e.slidesGrid[d],m=e.slidesGrid[c],g=e.slidesGrid[e.slidesGrid.length-1],w=Math.abs(t);w>=f?o=(w-f)/g:o=(w+g-m)/g,o>1&&(o-=1)}Object.assign(e,{progress:s,progressLoop:o,isBeginning:n,isEnd:a}),(i.watchSlidesProgress||i.centeredSlides&&i.autoHeight)&&e.updateSlidesProgress(t),n&&!l&&e.emit("reachBeginning toEdge"),a&&!u&&e.emit("reachEnd toEdge"),(l&&!n||u&&!a)&&e.emit("fromEdge"),e.emit("progress",s)}const vi=(t,e,i)=>{e&&!t.classList.contains(i)?t.classList.add(i):!e&&t.classList.contains(i)&&t.classList.remove(i)};function cl(){const t=this,{slides:e,params:i,slidesEl:r,activeIndex:s}=t,n=t.virtual&&i.virtual.enabled,a=t.grid&&i.grid&&i.grid.rows>1,o=c=>U(r,`.${i.slideClass}${c}, swiper-slide${c}`)[0];let l,u,d;if(n)if(i.loop){let c=s-t.virtual.slidesBefore;c<0&&(c=t.virtual.slides.length+c),c>=t.virtual.slides.length&&(c-=t.virtual.slides.length),l=o(`[data-swiper-slide-index="${c}"]`)}else l=o(`[data-swiper-slide-index="${s}"]`);else a?(l=e.filter(c=>c.column===s)[0],d=e.filter(c=>c.column===s+1)[0],u=e.filter(c=>c.column===s-1)[0]):l=e[s];l&&(a||(d=Uo(l,`.${i.slideClass}, swiper-slide`)[0],i.loop&&!d&&(d=e[0]),u=Yo(l,`.${i.slideClass}, swiper-slide`)[0],i.loop&&!u===0&&(u=e[e.length-1]))),e.forEach(c=>{vi(c,c===l,i.slideActiveClass),vi(c,c===d,i.slideNextClass),vi(c,c===u,i.slidePrevClass)}),t.emitSlidesClasses()}const Ot=(t,e)=>{if(!t||t.destroyed||!t.params)return;const i=()=>t.isElement?"swiper-slide":`.${t.params.slideClass}`,r=e.closest(i());if(r){let s=r.querySelector(`.${t.params.lazyPreloaderClass}`);!s&&t.isElement&&(r.shadowRoot?s=r.shadowRoot.querySelector(`.${t.params.lazyPreloaderClass}`):requestAnimationFrame(()=>{r.shadowRoot&&(s=r.shadowRoot.querySelector(`.${t.params.lazyPreloaderClass}`),s&&s.remove())})),s&&s.remove()}},wi=(t,e)=>{if(!t.slides[e])return;const i=t.slides[e].querySelector('[loading="lazy"]');i&&i.removeAttribute("loading")},Bi=t=>{if(!t||t.destroyed||!t.params)return;let e=t.params.lazyPreloadPrevNext;const i=t.slides.length;if(!i||!e||e<0)return;e=Math.min(e,i);const r=t.params.slidesPerView==="auto"?t.slidesPerViewDynamic():Math.ceil(t.params.slidesPerView),s=t.activeIndex;if(t.params.grid&&t.params.grid.rows>1){const a=s,o=[a-e];o.push(...Array.from({length:e}).map((l,u)=>a+r+u)),t.slides.forEach((l,u)=>{o.includes(l.column)&&wi(t,u)});return}const n=s+r-1;if(t.params.rewind||t.params.loop)for(let a=s-e;a<=n+e;a+=1){const o=(a%i+i)%i;(o<s||o>n)&&wi(t,o)}else for(let a=Math.max(s-e,0);a<=Math.min(n+e,i-1);a+=1)a!==s&&(a>n||a<s)&&wi(t,a)};function dl(t){const{slidesGrid:e,params:i}=t,r=t.rtlTranslate?t.translate:-t.translate;let s;for(let n=0;n<e.length;n+=1)typeof e[n+1]<"u"?r>=e[n]&&r<e[n+1]-(e[n+1]-e[n])/2?s=n:r>=e[n]&&r<e[n+1]&&(s=n+1):r>=e[n]&&(s=n);return i.normalizeSlideIndex&&(s<0||typeof s>"u")&&(s=0),s}function ul(t){const e=this,i=e.rtlTranslate?e.translate:-e.translate,{snapGrid:r,params:s,activeIndex:n,realIndex:a,snapIndex:o}=e;let l=t,u;const d=m=>{let g=m-e.virtual.slidesBefore;return g<0&&(g=e.virtual.slides.length+g),g>=e.virtual.slides.length&&(g-=e.virtual.slides.length),g};if(typeof l>"u"&&(l=dl(e)),r.indexOf(i)>=0)u=r.indexOf(i);else{const m=Math.min(s.slidesPerGroupSkip,l);u=m+Math.floor((l-m)/s.slidesPerGroup)}if(u>=r.length&&(u=r.length-1),l===n&&!e.params.loop){u!==o&&(e.snapIndex=u,e.emit("snapIndexChange"));return}if(l===n&&e.params.loop&&e.virtual&&e.params.virtual.enabled){e.realIndex=d(l);return}const c=e.grid&&s.grid&&s.grid.rows>1;let f;if(e.virtual&&s.virtual.enabled&&s.loop)f=d(l);else if(c){const m=e.slides.filter(w=>w.column===l)[0];let g=parseInt(m.getAttribute("data-swiper-slide-index"),10);Number.isNaN(g)&&(g=Math.max(e.slides.indexOf(m),0)),f=Math.floor(g/s.grid.rows)}else if(e.slides[l]){const m=e.slides[l].getAttribute("data-swiper-slide-index");m?f=parseInt(m,10):f=l}else f=l;Object.assign(e,{previousSnapIndex:o,snapIndex:u,previousRealIndex:a,realIndex:f,previousIndex:n,activeIndex:l}),e.initialized&&Bi(e),e.emit("activeIndexChange"),e.emit("snapIndexChange"),(e.initialized||e.params.runCallbacksOnInit)&&(a!==f&&e.emit("realIndexChange"),e.emit("slideChange"))}function fl(t,e){const i=this,r=i.params;let s=t.closest(`.${r.slideClass}, swiper-slide`);!s&&i.isElement&&e&&e.length>1&&e.includes(t)&&[...e.slice(e.indexOf(t)+1,e.length)].forEach(o=>{!s&&o.matches&&o.matches(`.${r.slideClass}, swiper-slide`)&&(s=o)});let n=!1,a;if(s){for(let o=0;o<i.slides.length;o+=1)if(i.slides[o]===s){n=!0,a=o;break}}if(s&&n)i.clickedSlide=s,i.virtual&&i.params.virtual.enabled?i.clickedIndex=parseInt(s.getAttribute("data-swiper-slide-index"),10):i.clickedIndex=a;else{i.clickedSlide=void 0,i.clickedIndex=void 0;return}r.slideToClickedSlide&&i.clickedIndex!==void 0&&i.clickedIndex!==i.activeIndex&&i.slideToClickedSlide()}var pl={updateSize:rl,updateSlides:nl,updateAutoHeight:sl,updateSlidesOffset:al,updateSlidesProgress:ol,updateProgress:ll,updateSlidesClasses:cl,updateActiveIndex:ul,updateClickedSlide:fl};function ml(t){t===void 0&&(t=this.isHorizontal()?"x":"y");const e=this,{params:i,rtlTranslate:r,translate:s,wrapperEl:n}=e;if(i.virtualTranslate)return r?-s:s;if(i.cssMode)return s;let a=Fi(n,t);return a+=e.cssOverflowAdjustment(),r&&(a=-a),a||0}function hl(t,e){const i=this,{rtlTranslate:r,params:s,wrapperEl:n,progress:a}=i;let o=0,l=0;const u=0;i.isHorizontal()?o=r?-t:t:l=t,s.roundLengths&&(o=Math.floor(o),l=Math.floor(l)),i.previousTranslate=i.translate,i.translate=i.isHorizontal()?o:l,s.cssMode?n[i.isHorizontal()?"scrollLeft":"scrollTop"]=i.isHorizontal()?-o:-l:s.virtualTranslate||(i.isHorizontal()?o-=i.cssOverflowAdjustment():l-=i.cssOverflowAdjustment(),n.style.transform=`translate3d(${o}px, ${l}px, ${u}px)`);let d;const c=i.maxTranslate()-i.minTranslate();c===0?d=0:d=(t-i.minTranslate())/c,d!==a&&i.updateProgress(t),i.emit("setTranslate",i.translate,e)}function gl(){return-this.snapGrid[0]}function vl(){return-this.snapGrid[this.snapGrid.length-1]}function wl(t,e,i,r,s){t===void 0&&(t=0),e===void 0&&(e=this.params.speed),i===void 0&&(i=!0),r===void 0&&(r=!0);const n=this,{params:a,wrapperEl:o}=n;if(n.animating&&a.preventInteractionOnTransition)return!1;const l=n.minTranslate(),u=n.maxTranslate();let d;if(r&&t>l?d=l:r&&t<u?d=u:d=t,n.updateProgress(d),a.cssMode){const c=n.isHorizontal();if(e===0)o[c?"scrollLeft":"scrollTop"]=-d;else{if(!n.support.smoothScroll)return ps({swiper:n,targetPosition:-d,side:c?"left":"top"}),!0;o.scrollTo({[c?"left":"top"]:-d,behavior:"smooth"})}return!0}return e===0?(n.setTransition(0),n.setTranslate(d),i&&(n.emit("beforeTransitionStart",e,s),n.emit("transitionEnd"))):(n.setTransition(e),n.setTranslate(d),i&&(n.emit("beforeTransitionStart",e,s),n.emit("transitionStart")),n.animating||(n.animating=!0,n.onTranslateToWrapperTransitionEnd||(n.onTranslateToWrapperTransitionEnd=function(f){!n||n.destroyed||f.target===this&&(n.wrapperEl.removeEventListener("transitionend",n.onTranslateToWrapperTransitionEnd),n.onTranslateToWrapperTransitionEnd=null,delete n.onTranslateToWrapperTransitionEnd,n.animating=!1,i&&n.emit("transitionEnd"))}),n.wrapperEl.addEventListener("transitionend",n.onTranslateToWrapperTransitionEnd))),!0}var bl={getTranslate:ml,setTranslate:hl,minTranslate:gl,maxTranslate:vl,translateTo:wl};function yl(t,e){const i=this;i.params.cssMode||(i.wrapperEl.style.transitionDuration=`${t}ms`,i.wrapperEl.style.transitionDelay=t===0?"0ms":""),i.emit("setTransition",t,e)}function gs(t){let{swiper:e,runCallbacks:i,direction:r,step:s}=t;const{activeIndex:n,previousIndex:a}=e;let o=r;if(o||(n>a?o="next":n<a?o="prev":o="reset"),e.emit(`transition${s}`),i&&n!==a){if(o==="reset"){e.emit(`slideResetTransition${s}`);return}e.emit(`slideChangeTransition${s}`),o==="next"?e.emit(`slideNextTransition${s}`):e.emit(`slidePrevTransition${s}`)}}function xl(t,e){t===void 0&&(t=!0);const i=this,{params:r}=i;r.cssMode||(r.autoHeight&&i.updateAutoHeight(),gs({swiper:i,runCallbacks:t,direction:e,step:"Start"}))}function Sl(t,e){t===void 0&&(t=!0);const i=this,{params:r}=i;i.animating=!1,!r.cssMode&&(i.setTransition(0),gs({swiper:i,runCallbacks:t,direction:e,step:"End"}))}var El={setTransition:yl,transitionStart:xl,transitionEnd:Sl};function Tl(t,e,i,r,s){t===void 0&&(t=0),i===void 0&&(i=!0),typeof t=="string"&&(t=parseInt(t,10));const n=this;let a=t;a<0&&(a=0);const{params:o,snapGrid:l,slidesGrid:u,previousIndex:d,activeIndex:c,rtlTranslate:f,wrapperEl:m,enabled:g}=n;if(!g&&!r&&!s||n.destroyed||n.animating&&o.preventInteractionOnTransition)return!1;typeof e>"u"&&(e=n.params.speed);const w=Math.min(n.params.slidesPerGroupSkip,a);let h=w+Math.floor((a-w)/n.params.slidesPerGroup);h>=l.length&&(h=l.length-1);const p=-l[h];if(o.normalizeSlideIndex)for(let v=0;v<u.length;v+=1){const y=-Math.floor(p*100),T=Math.floor(u[v]*100),x=Math.floor(u[v+1]*100);typeof u[v+1]<"u"?y>=T&&y<x-(x-T)/2?a=v:y>=T&&y<x&&(a=v+1):y>=T&&(a=v)}if(n.initialized&&a!==c&&(!n.allowSlideNext&&(f?p>n.translate&&p>n.minTranslate():p<n.translate&&p<n.minTranslate())||!n.allowSlidePrev&&p>n.translate&&p>n.maxTranslate()&&(c||0)!==a))return!1;a!==(d||0)&&i&&n.emit("beforeSlideChangeStart"),n.updateProgress(p);let b;if(a>c?b="next":a<c?b="prev":b="reset",f&&-p===n.translate||!f&&p===n.translate)return n.updateActiveIndex(a),o.autoHeight&&n.updateAutoHeight(),n.updateSlidesClasses(),o.effect!=="slide"&&n.setTranslate(p),b!=="reset"&&(n.transitionStart(i,b),n.transitionEnd(i,b)),!1;if(o.cssMode){const v=n.isHorizontal(),y=f?p:-p;if(e===0){const T=n.virtual&&n.params.virtual.enabled;T&&(n.wrapperEl.style.scrollSnapType="none",n._immediateVirtual=!0),T&&!n._cssModeVirtualInitialSet&&n.params.initialSlide>0?(n._cssModeVirtualInitialSet=!0,requestAnimationFrame(()=>{m[v?"scrollLeft":"scrollTop"]=y})):m[v?"scrollLeft":"scrollTop"]=y,T&&requestAnimationFrame(()=>{n.wrapperEl.style.scrollSnapType="",n._immediateVirtual=!1})}else{if(!n.support.smoothScroll)return ps({swiper:n,targetPosition:y,side:v?"left":"top"}),!0;m.scrollTo({[v?"left":"top"]:y,behavior:"smooth"})}return!0}return n.setTransition(e),n.setTranslate(p),n.updateActiveIndex(a),n.updateSlidesClasses(),n.emit("beforeTransitionStart",e,r),n.transitionStart(i,b),e===0?n.transitionEnd(i,b):n.animating||(n.animating=!0,n.onSlideToWrapperTransitionEnd||(n.onSlideToWrapperTransitionEnd=function(y){!n||n.destroyed||y.target===this&&(n.wrapperEl.removeEventListener("transitionend",n.onSlideToWrapperTransitionEnd),n.onSlideToWrapperTransitionEnd=null,delete n.onSlideToWrapperTransitionEnd,n.transitionEnd(i,b))}),n.wrapperEl.addEventListener("transitionend",n.onSlideToWrapperTransitionEnd)),!0}function _l(t,e,i,r){t===void 0&&(t=0),i===void 0&&(i=!0),typeof t=="string"&&(t=parseInt(t,10));const s=this;if(s.destroyed)return;typeof e>"u"&&(e=s.params.speed);const n=s.grid&&s.params.grid&&s.params.grid.rows>1;let a=t;if(s.params.loop)if(s.virtual&&s.params.virtual.enabled)a=a+s.virtual.slidesBefore;else{let o;if(n){const f=a*s.params.grid.rows;o=s.slides.filter(m=>m.getAttribute("data-swiper-slide-index")*1===f)[0].column}else o=s.getSlideIndexByData(a);const l=n?Math.ceil(s.slides.length/s.params.grid.rows):s.slides.length,{centeredSlides:u}=s.params;let d=s.params.slidesPerView;d==="auto"?d=s.slidesPerViewDynamic():(d=Math.ceil(parseFloat(s.params.slidesPerView,10)),u&&d%2===0&&(d=d+1));let c=l-o<d;if(u&&(c=c||o<Math.ceil(d/2)),r&&u&&s.params.slidesPerView!=="auto"&&!n&&(c=!1),c){const f=u?o<s.activeIndex?"prev":"next":o-s.activeIndex-1<s.params.slidesPerView?"next":"prev";s.loopFix({direction:f,slideTo:!0,activeSlideIndex:f==="next"?o+1:o-l+1,slideRealIndex:f==="next"?s.realIndex:void 0})}if(n){const f=a*s.params.grid.rows;a=s.slides.filter(m=>m.getAttribute("data-swiper-slide-index")*1===f)[0].column}else a=s.getSlideIndexByData(a)}return requestAnimationFrame(()=>{s.slideTo(a,e,i,r)}),s}function Cl(t,e,i){e===void 0&&(e=!0);const r=this,{enabled:s,params:n,animating:a}=r;if(!s||r.destroyed)return r;typeof t>"u"&&(t=r.params.speed);let o=n.slidesPerGroup;n.slidesPerView==="auto"&&n.slidesPerGroup===1&&n.slidesPerGroupAuto&&(o=Math.max(r.slidesPerViewDynamic("current",!0),1));const l=r.activeIndex<n.slidesPerGroupSkip?1:o,u=r.virtual&&n.virtual.enabled;if(n.loop){if(a&&!u&&n.loopPreventsSliding)return!1;if(r.loopFix({direction:"next"}),r._clientLeft=r.wrapperEl.clientLeft,r.activeIndex===r.slides.length-1&&n.cssMode)return requestAnimationFrame(()=>{r.slideTo(r.activeIndex+l,t,e,i)}),!0}return n.rewind&&r.isEnd?r.slideTo(0,t,e,i):r.slideTo(r.activeIndex+l,t,e,i)}function Ml(t,e,i){e===void 0&&(e=!0);const r=this,{params:s,snapGrid:n,slidesGrid:a,rtlTranslate:o,enabled:l,animating:u}=r;if(!l||r.destroyed)return r;typeof t>"u"&&(t=r.params.speed);const d=r.virtual&&s.virtual.enabled;if(s.loop){if(u&&!d&&s.loopPreventsSliding)return!1;r.loopFix({direction:"prev"}),r._clientLeft=r.wrapperEl.clientLeft}const c=o?r.translate:-r.translate;function f(p){return p<0?-Math.floor(Math.abs(p)):Math.floor(p)}const m=f(c),g=n.map(p=>f(p));let w=n[g.indexOf(m)-1];if(typeof w>"u"&&s.cssMode){let p;n.forEach((b,v)=>{m>=b&&(p=v)}),typeof p<"u"&&(w=n[p>0?p-1:p])}let h=0;if(typeof w<"u"&&(h=a.indexOf(w),h<0&&(h=r.activeIndex-1),s.slidesPerView==="auto"&&s.slidesPerGroup===1&&s.slidesPerGroupAuto&&(h=h-r.slidesPerViewDynamic("previous",!0)+1,h=Math.max(h,0))),s.rewind&&r.isBeginning){const p=r.params.virtual&&r.params.virtual.enabled&&r.virtual?r.virtual.slides.length-1:r.slides.length-1;return r.slideTo(p,t,e,i)}else if(s.loop&&r.activeIndex===0&&s.cssMode)return requestAnimationFrame(()=>{r.slideTo(h,t,e,i)}),!0;return r.slideTo(h,t,e,i)}function Al(t,e,i){e===void 0&&(e=!0);const r=this;if(!r.destroyed)return typeof t>"u"&&(t=r.params.speed),r.slideTo(r.activeIndex,t,e,i)}function Pl(t,e,i,r){e===void 0&&(e=!0),r===void 0&&(r=.5);const s=this;if(s.destroyed)return;typeof t>"u"&&(t=s.params.speed);let n=s.activeIndex;const a=Math.min(s.params.slidesPerGroupSkip,n),o=a+Math.floor((n-a)/s.params.slidesPerGroup),l=s.rtlTranslate?s.translate:-s.translate;if(l>=s.snapGrid[o]){const u=s.snapGrid[o],d=s.snapGrid[o+1];l-u>(d-u)*r&&(n+=s.params.slidesPerGroup)}else{const u=s.snapGrid[o-1],d=s.snapGrid[o];l-u<=(d-u)*r&&(n-=s.params.slidesPerGroup)}return n=Math.max(n,0),n=Math.min(n,s.slidesGrid.length-1),s.slideTo(n,t,e,i)}function Ll(){const t=this;if(t.destroyed)return;const{params:e,slidesEl:i}=t,r=e.slidesPerView==="auto"?t.slidesPerViewDynamic():e.slidesPerView;let s=t.clickedIndex,n;const a=t.isElement?"swiper-slide":`.${e.slideClass}`;if(e.loop){if(t.animating)return;n=parseInt(t.clickedSlide.getAttribute("data-swiper-slide-index"),10),e.centeredSlides?s<t.loopedSlides-r/2||s>t.slides.length-t.loopedSlides+r/2?(t.loopFix(),s=t.getSlideIndex(U(i,`${a}[data-swiper-slide-index="${n}"]`)[0]),ze(()=>{t.slideTo(s)})):t.slideTo(s):s>t.slides.length-r?(t.loopFix(),s=t.getSlideIndex(U(i,`${a}[data-swiper-slide-index="${n}"]`)[0]),ze(()=>{t.slideTo(s)})):t.slideTo(s)}else t.slideTo(s)}var Il={slideTo:Tl,slideToLoop:_l,slideNext:Cl,slidePrev:Ml,slideReset:Al,slideToClosest:Pl,slideToClickedSlide:Ll};function Ol(t){const e=this,{params:i,slidesEl:r}=e;if(!i.loop||e.virtual&&e.params.virtual.enabled)return;const s=()=>{U(r,`.${i.slideClass}, swiper-slide`).forEach((c,f)=>{c.setAttribute("data-swiper-slide-index",f)})},n=e.grid&&i.grid&&i.grid.rows>1,a=i.slidesPerGroup*(n?i.grid.rows:1),o=e.slides.length%a!==0,l=n&&e.slides.length%i.grid.rows!==0,u=d=>{for(let c=0;c<d;c+=1){const f=e.isElement?ie("swiper-slide",[i.slideBlankClass]):ie("div",[i.slideClass,i.slideBlankClass]);e.slidesEl.append(f)}};if(o){if(i.loopAddBlankSlides){const d=a-e.slides.length%a;u(d),e.recalcSlides(),e.updateSlides()}else Ft("Swiper Loop Warning: The number of slides is not even to slidesPerGroup, loop mode may not function properly. You need to add more slides (or make duplicates, or empty slides)");s()}else if(l){if(i.loopAddBlankSlides){const d=i.grid.rows-e.slides.length%i.grid.rows;u(d),e.recalcSlides(),e.updateSlides()}else Ft("Swiper Loop Warning: The number of slides is not even to grid.rows, loop mode may not function properly. You need to add more slides (or make duplicates, or empty slides)");s()}else s();e.loopFix({slideRealIndex:t,direction:i.centeredSlides?void 0:"next"})}function Dl(t){let{slideRealIndex:e,slideTo:i=!0,direction:r,setTranslate:s,activeSlideIndex:n,byController:a,byMousewheel:o}=t===void 0?{}:t;const l=this;if(!l.params.loop)return;l.emit("beforeLoopFix");const{slides:u,allowSlidePrev:d,allowSlideNext:c,slidesEl:f,params:m}=l,{centeredSlides:g}=m;if(l.allowSlidePrev=!0,l.allowSlideNext=!0,l.virtual&&m.virtual.enabled){i&&(!m.centeredSlides&&l.snapIndex===0?l.slideTo(l.virtual.slides.length,0,!1,!0):m.centeredSlides&&l.snapIndex<m.slidesPerView?l.slideTo(l.virtual.slides.length+l.snapIndex,0,!1,!0):l.snapIndex===l.snapGrid.length-1&&l.slideTo(l.virtual.slidesBefore,0,!1,!0)),l.allowSlidePrev=d,l.allowSlideNext=c,l.emit("loopFix");return}let w=m.slidesPerView;w==="auto"?w=l.slidesPerViewDynamic():(w=Math.ceil(parseFloat(m.slidesPerView,10)),g&&w%2===0&&(w=w+1));const h=m.slidesPerGroupAuto?w:m.slidesPerGroup;let p=h;p%h!==0&&(p+=h-p%h),p+=m.loopAdditionalSlides,l.loopedSlides=p;const b=l.grid&&m.grid&&m.grid.rows>1;u.length<w+p?Ft("Swiper Loop Warning: The number of slides is not enough for loop mode, it will be disabled and not function properly. You need to add more slides (or make duplicates) or lower the values of slidesPerView and slidesPerGroup parameters"):b&&m.grid.fill==="row"&&Ft("Swiper Loop Warning: Loop mode is not compatible with grid.fill = `row`");const v=[],y=[];let T=l.activeIndex;typeof n>"u"?n=l.getSlideIndex(u.filter(_=>_.classList.contains(m.slideActiveClass))[0]):T=n;const x=r==="next"||!r,M=r==="prev"||!r;let S=0,A=0;const C=b?Math.ceil(u.length/m.grid.rows):u.length,E=(b?u[n].column:n)+(g&&typeof s>"u"?-w/2+.5:0);if(E<p){S=Math.max(p-E,h);for(let _=0;_<p-E;_+=1){const P=_-Math.floor(_/C)*C;if(b){const D=C-P-1;for(let k=u.length-1;k>=0;k-=1)u[k].column===D&&v.push(k)}else v.push(C-P-1)}}else if(E+w>C-p){A=Math.max(E-(C-p*2),h);for(let _=0;_<A;_+=1){const P=_-Math.floor(_/C)*C;b?u.forEach((D,k)=>{D.column===P&&y.push(k)}):y.push(P)}}if(l.__preventObserver__=!0,requestAnimationFrame(()=>{l.__preventObserver__=!1}),M&&v.forEach(_=>{u[_].swiperLoopMoveDOM=!0,f.prepend(u[_]),u[_].swiperLoopMoveDOM=!1}),x&&y.forEach(_=>{u[_].swiperLoopMoveDOM=!0,f.append(u[_]),u[_].swiperLoopMoveDOM=!1}),l.recalcSlides(),m.slidesPerView==="auto"?l.updateSlides():b&&(v.length>0&&M||y.length>0&&x)&&l.slides.forEach((_,P)=>{l.grid.updateSlide(P,_,l.slides)}),m.watchSlidesProgress&&l.updateSlidesOffset(),i){if(v.length>0&&M){if(typeof e>"u"){const _=l.slidesGrid[T],D=l.slidesGrid[T+S]-_;o?l.setTranslate(l.translate-D):(l.slideTo(T+Math.ceil(S),0,!1,!0),s&&(l.touchEventsData.startTranslate=l.touchEventsData.startTranslate-D,l.touchEventsData.currentTranslate=l.touchEventsData.currentTranslate-D))}else if(s){const _=b?v.length/m.grid.rows:v.length;l.slideTo(l.activeIndex+_,0,!1,!0),l.touchEventsData.currentTranslate=l.translate}}else if(y.length>0&&x)if(typeof e>"u"){const _=l.slidesGrid[T],D=l.slidesGrid[T-A]-_;o?l.setTranslate(l.translate-D):(l.slideTo(T-A,0,!1,!0),s&&(l.touchEventsData.startTranslate=l.touchEventsData.startTranslate-D,l.touchEventsData.currentTranslate=l.touchEventsData.currentTranslate-D))}else{const _=b?y.length/m.grid.rows:y.length;l.slideTo(l.activeIndex-_,0,!1,!0)}}if(l.allowSlidePrev=d,l.allowSlideNext=c,l.controller&&l.controller.control&&!a){const _={slideRealIndex:e,direction:r,setTranslate:s,activeSlideIndex:n,byController:!0};Array.isArray(l.controller.control)?l.controller.control.forEach(P=>{!P.destroyed&&P.params.loop&&P.loopFix({..._,slideTo:P.params.slidesPerView===m.slidesPerView?i:!1})}):l.controller.control instanceof l.constructor&&l.controller.control.params.loop&&l.controller.control.loopFix({..._,slideTo:l.controller.control.params.slidesPerView===m.slidesPerView?i:!1})}l.emit("loopFix")}function $l(){const t=this,{params:e,slidesEl:i}=t;if(!e.loop||t.virtual&&t.params.virtual.enabled)return;t.recalcSlides();const r=[];t.slides.forEach(s=>{const n=typeof s.swiperSlideIndex>"u"?s.getAttribute("data-swiper-slide-index")*1:s.swiperSlideIndex;r[n]=s}),t.slides.forEach(s=>{s.removeAttribute("data-swiper-slide-index")}),r.forEach(s=>{i.append(s)}),t.recalcSlides(),t.slideTo(t.realIndex,0)}var zl={loopCreate:Ol,loopFix:Dl,loopDestroy:$l};function Rl(t){const e=this;if(!e.params.simulateTouch||e.params.watchOverflow&&e.isLocked||e.params.cssMode)return;const i=e.params.touchEventsTarget==="container"?e.el:e.wrapperEl;e.isElement&&(e.__preventObserver__=!0),i.style.cursor="move",i.style.cursor=t?"grabbing":"grab",e.isElement&&requestAnimationFrame(()=>{e.__preventObserver__=!1})}function kl(){const t=this;t.params.watchOverflow&&t.isLocked||t.params.cssMode||(t.isElement&&(t.__preventObserver__=!0),t[t.params.touchEventsTarget==="container"?"el":"wrapperEl"].style.cursor="",t.isElement&&requestAnimationFrame(()=>{t.__preventObserver__=!1}))}var Fl={setGrabCursor:Rl,unsetGrabCursor:kl};function Nl(t,e){e===void 0&&(e=this);function i(r){if(!r||r===K()||r===q())return null;r.assignedSlot&&(r=r.assignedSlot);const s=r.closest(t);return!s&&!r.getRootNode?null:s||i(r.getRootNode().host)}return i(e)}function zr(t,e,i){const r=q(),{params:s}=t,n=s.edgeSwipeDetection,a=s.edgeSwipeThreshold;return n&&(i<=a||i>=r.innerWidth-a)?n==="prevent"?(e.preventDefault(),!0):!1:!0}function Bl(t){const e=this,i=K();let r=t;r.originalEvent&&(r=r.originalEvent);const s=e.touchEventsData;if(r.type==="pointerdown"){if(s.pointerId!==null&&s.pointerId!==r.pointerId)return;s.pointerId=r.pointerId}else r.type==="touchstart"&&r.targetTouches.length===1&&(s.touchId=r.targetTouches[0].identifier);if(r.type==="touchstart"){zr(e,r,r.targetTouches[0].pageX);return}const{params:n,touches:a,enabled:o}=e;if(!o||!n.simulateTouch&&r.pointerType==="mouse"||e.animating&&n.preventInteractionOnTransition)return;!e.animating&&n.cssMode&&n.loop&&e.loopFix();let l=r.target;if(n.touchEventsTarget==="wrapper"&&!e.wrapperEl.contains(l)||"which"in r&&r.which===3||"button"in r&&r.button>0||s.isTouched&&s.isMoved)return;const u=!!n.noSwipingClass&&n.noSwipingClass!=="",d=r.composedPath?r.composedPath():r.path;u&&r.target&&r.target.shadowRoot&&d&&(l=d[0]);const c=n.noSwipingSelector?n.noSwipingSelector:`.${n.noSwipingClass}`,f=!!(r.target&&r.target.shadowRoot);if(n.noSwiping&&(f?Nl(c,l):l.closest(c))){e.allowClick=!0;return}if(n.swipeHandler&&!l.closest(n.swipeHandler))return;a.currentX=r.pageX,a.currentY=r.pageY;const m=a.currentX,g=a.currentY;if(!zr(e,r,m))return;Object.assign(s,{isTouched:!0,isMoved:!1,allowTouchCallbacks:!0,isScrolling:void 0,startMoving:void 0}),a.startX=m,a.startY=g,s.touchStartTime=ne(),e.allowClick=!0,e.updateSize(),e.swipeDirection=void 0,n.threshold>0&&(s.allowThresholdMove=!1);let w=!0;l.matches(s.focusableElements)&&(w=!1,l.nodeName==="SELECT"&&(s.isTouched=!1)),i.activeElement&&i.activeElement.matches(s.focusableElements)&&i.activeElement!==l&&i.activeElement.blur();const h=w&&e.allowTouchMove&&n.touchStartPreventDefault;(n.touchStartForcePreventDefault||h)&&!l.isContentEditable&&r.preventDefault(),n.freeMode&&n.freeMode.enabled&&e.freeMode&&e.animating&&!n.cssMode&&e.freeMode.onTouchStart(),e.emit("touchStart",r)}function Hl(t){const e=K(),i=this,r=i.touchEventsData,{params:s,touches:n,rtlTranslate:a,enabled:o}=i;if(!o||!s.simulateTouch&&t.pointerType==="mouse")return;let l=t;if(l.originalEvent&&(l=l.originalEvent),l.type==="pointermove"&&(r.touchId!==null||l.pointerId!==r.pointerId))return;let u;if(l.type==="touchmove"){if(u=[...l.changedTouches].filter(x=>x.identifier===r.touchId)[0],!u||u.identifier!==r.touchId)return}else u=l;if(!r.isTouched){r.startMoving&&r.isScrolling&&i.emit("touchMoveOpposite",l);return}const d=u.pageX,c=u.pageY;if(l.preventedByNestedSwiper){n.startX=d,n.startY=c;return}if(!i.allowTouchMove){l.target.matches(r.focusableElements)||(i.allowClick=!1),r.isTouched&&(Object.assign(n,{startX:d,startY:c,currentX:d,currentY:c}),r.touchStartTime=ne());return}if(s.touchReleaseOnEdges&&!s.loop){if(i.isVertical()){if(c<n.startY&&i.translate<=i.maxTranslate()||c>n.startY&&i.translate>=i.minTranslate()){r.isTouched=!1,r.isMoved=!1;return}}else if(d<n.startX&&i.translate<=i.maxTranslate()||d>n.startX&&i.translate>=i.minTranslate())return}if(e.activeElement&&l.target===e.activeElement&&l.target.matches(r.focusableElements)){r.isMoved=!0,i.allowClick=!1;return}r.allowTouchCallbacks&&i.emit("touchMove",l),n.previousX=n.currentX,n.previousY=n.currentY,n.currentX=d,n.currentY=c;const f=n.currentX-n.startX,m=n.currentY-n.startY;if(i.params.threshold&&Math.sqrt(f**2+m**2)<i.params.threshold)return;if(typeof r.isScrolling>"u"){let x;i.isHorizontal()&&n.currentY===n.startY||i.isVertical()&&n.currentX===n.startX?r.isScrolling=!1:f*f+m*m>=25&&(x=Math.atan2(Math.abs(m),Math.abs(f))*180/Math.PI,r.isScrolling=i.isHorizontal()?x>s.touchAngle:90-x>s.touchAngle)}if(r.isScrolling&&i.emit("touchMoveOpposite",l),typeof r.startMoving>"u"&&(n.currentX!==n.startX||n.currentY!==n.startY)&&(r.startMoving=!0),r.isScrolling||l.type==="touchmove"&&r.preventTouchMoveFromPointerMove){r.isTouched=!1;return}if(!r.startMoving)return;i.allowClick=!1,!s.cssMode&&l.cancelable&&l.preventDefault(),s.touchMoveStopPropagation&&!s.nested&&l.stopPropagation();let g=i.isHorizontal()?f:m,w=i.isHorizontal()?n.currentX-n.previousX:n.currentY-n.previousY;s.oneWayMovement&&(g=Math.abs(g)*(a?1:-1),w=Math.abs(w)*(a?1:-1)),n.diff=g,g*=s.touchRatio,a&&(g=-g,w=-w);const h=i.touchesDirection;i.swipeDirection=g>0?"prev":"next",i.touchesDirection=w>0?"prev":"next";const p=i.params.loop&&!s.cssMode,b=i.touchesDirection==="next"&&i.allowSlideNext||i.touchesDirection==="prev"&&i.allowSlidePrev;if(!r.isMoved){if(p&&b&&i.loopFix({direction:i.swipeDirection}),r.startTranslate=i.getTranslate(),i.setTransition(0),i.animating){const x=new window.CustomEvent("transitionend",{bubbles:!0,cancelable:!0});i.wrapperEl.dispatchEvent(x)}r.allowMomentumBounce=!1,s.grabCursor&&(i.allowSlideNext===!0||i.allowSlidePrev===!0)&&i.setGrabCursor(!0),i.emit("sliderFirstMove",l)}let v;if(new Date().getTime(),r.isMoved&&r.allowThresholdMove&&h!==i.touchesDirection&&p&&b&&Math.abs(g)>=1){Object.assign(n,{startX:d,startY:c,currentX:d,currentY:c,startTranslate:r.currentTranslate}),r.loopSwapReset=!0,r.startTranslate=r.currentTranslate;return}i.emit("sliderMove",l),r.isMoved=!0,r.currentTranslate=g+r.startTranslate;let y=!0,T=s.resistanceRatio;if(s.touchReleaseOnEdges&&(T=0),g>0?(p&&b&&!v&&r.allowThresholdMove&&r.currentTranslate>(s.centeredSlides?i.minTranslate()-i.slidesSizesGrid[i.activeIndex+1]:i.minTranslate())&&i.loopFix({direction:"prev",setTranslate:!0,activeSlideIndex:0}),r.currentTranslate>i.minTranslate()&&(y=!1,s.resistance&&(r.currentTranslate=i.minTranslate()-1+(-i.minTranslate()+r.startTranslate+g)**T))):g<0&&(p&&b&&!v&&r.allowThresholdMove&&r.currentTranslate<(s.centeredSlides?i.maxTranslate()+i.slidesSizesGrid[i.slidesSizesGrid.length-1]:i.maxTranslate())&&i.loopFix({direction:"next",setTranslate:!0,activeSlideIndex:i.slides.length-(s.slidesPerView==="auto"?i.slidesPerViewDynamic():Math.ceil(parseFloat(s.slidesPerView,10)))}),r.currentTranslate<i.maxTranslate()&&(y=!1,s.resistance&&(r.currentTranslate=i.maxTranslate()+1-(i.maxTranslate()-r.startTranslate-g)**T))),y&&(l.preventedByNestedSwiper=!0),!i.allowSlideNext&&i.swipeDirection==="next"&&r.currentTranslate<r.startTranslate&&(r.currentTranslate=r.startTranslate),!i.allowSlidePrev&&i.swipeDirection==="prev"&&r.currentTranslate>r.startTranslate&&(r.currentTranslate=r.startTranslate),!i.allowSlidePrev&&!i.allowSlideNext&&(r.currentTranslate=r.startTranslate),s.threshold>0)if(Math.abs(g)>s.threshold||r.allowThresholdMove){if(!r.allowThresholdMove){r.allowThresholdMove=!0,n.startX=n.currentX,n.startY=n.currentY,r.currentTranslate=r.startTranslate,n.diff=i.isHorizontal()?n.currentX-n.startX:n.currentY-n.startY;return}}else{r.currentTranslate=r.startTranslate;return}!s.followFinger||s.cssMode||((s.freeMode&&s.freeMode.enabled&&i.freeMode||s.watchSlidesProgress)&&(i.updateActiveIndex(),i.updateSlidesClasses()),s.freeMode&&s.freeMode.enabled&&i.freeMode&&i.freeMode.onTouchMove(),i.updateProgress(r.currentTranslate),i.setTranslate(r.currentTranslate))}function Gl(t){const e=this,i=e.touchEventsData;let r=t;r.originalEvent&&(r=r.originalEvent);let s;if(r.type==="touchend"||r.type==="touchcancel"){if(s=[...r.changedTouches].filter(T=>T.identifier===i.touchId)[0],!s||s.identifier!==i.touchId)return}else{if(i.touchId!==null||r.pointerId!==i.pointerId)return;s=r}if(["pointercancel","pointerout","pointerleave","contextmenu"].includes(r.type)&&!(["pointercancel","contextmenu"].includes(r.type)&&(e.browser.isSafari||e.browser.isWebView)))return;i.pointerId=null,i.touchId=null;const{params:a,touches:o,rtlTranslate:l,slidesGrid:u,enabled:d}=e;if(!d||!a.simulateTouch&&r.pointerType==="mouse")return;if(i.allowTouchCallbacks&&e.emit("touchEnd",r),i.allowTouchCallbacks=!1,!i.isTouched){i.isMoved&&a.grabCursor&&e.setGrabCursor(!1),i.isMoved=!1,i.startMoving=!1;return}a.grabCursor&&i.isMoved&&i.isTouched&&(e.allowSlideNext===!0||e.allowSlidePrev===!0)&&e.setGrabCursor(!1);const c=ne(),f=c-i.touchStartTime;if(e.allowClick){const T=r.path||r.composedPath&&r.composedPath();e.updateClickedSlide(T&&T[0]||r.target,T),e.emit("tap click",r),f<300&&c-i.lastClickTime<300&&e.emit("doubleTap doubleClick",r)}if(i.lastClickTime=ne(),ze(()=>{e.destroyed||(e.allowClick=!0)}),!i.isTouched||!i.isMoved||!e.swipeDirection||o.diff===0&&!i.loopSwapReset||i.currentTranslate===i.startTranslate&&!i.loopSwapReset){i.isTouched=!1,i.isMoved=!1,i.startMoving=!1;return}i.isTouched=!1,i.isMoved=!1,i.startMoving=!1;let m;if(a.followFinger?m=l?e.translate:-e.translate:m=-i.currentTranslate,a.cssMode)return;if(a.freeMode&&a.freeMode.enabled){e.freeMode.onTouchEnd({currentPos:m});return}const g=m>=-e.maxTranslate()&&!e.params.loop;let w=0,h=e.slidesSizesGrid[0];for(let T=0;T<u.length;T+=T<a.slidesPerGroupSkip?1:a.slidesPerGroup){const x=T<a.slidesPerGroupSkip-1?1:a.slidesPerGroup;typeof u[T+x]<"u"?(g||m>=u[T]&&m<u[T+x])&&(w=T,h=u[T+x]-u[T]):(g||m>=u[T])&&(w=T,h=u[u.length-1]-u[u.length-2])}let p=null,b=null;a.rewind&&(e.isBeginning?b=a.virtual&&a.virtual.enabled&&e.virtual?e.virtual.slides.length-1:e.slides.length-1:e.isEnd&&(p=0));const v=(m-u[w])/h,y=w<a.slidesPerGroupSkip-1?1:a.slidesPerGroup;if(f>a.longSwipesMs){if(!a.longSwipes){e.slideTo(e.activeIndex);return}e.swipeDirection==="next"&&(v>=a.longSwipesRatio?e.slideTo(a.rewind&&e.isEnd?p:w+y):e.slideTo(w)),e.swipeDirection==="prev"&&(v>1-a.longSwipesRatio?e.slideTo(w+y):b!==null&&v<0&&Math.abs(v)>a.longSwipesRatio?e.slideTo(b):e.slideTo(w))}else{if(!a.shortSwipes){e.slideTo(e.activeIndex);return}e.navigation&&(r.target===e.navigation.nextEl||r.target===e.navigation.prevEl)?r.target===e.navigation.nextEl?e.slideTo(w+y):e.slideTo(w):(e.swipeDirection==="next"&&e.slideTo(p!==null?p:w+y),e.swipeDirection==="prev"&&e.slideTo(b!==null?b:w))}}function Rr(){const t=this,{params:e,el:i}=t;if(i&&i.offsetWidth===0)return;e.breakpoints&&t.setBreakpoint();const{allowSlideNext:r,allowSlidePrev:s,snapGrid:n}=t,a=t.virtual&&t.params.virtual.enabled;t.allowSlideNext=!0,t.allowSlidePrev=!0,t.updateSize(),t.updateSlides(),t.updateSlidesClasses();const o=a&&e.loop;(e.slidesPerView==="auto"||e.slidesPerView>1)&&t.isEnd&&!t.isBeginning&&!t.params.centeredSlides&&!o?t.slideTo(t.slides.length-1,0,!1,!0):t.params.loop&&!a?t.slideToLoop(t.realIndex,0,!1,!0):t.slideTo(t.activeIndex,0,!1,!0),t.autoplay&&t.autoplay.running&&t.autoplay.paused&&(clearTimeout(t.autoplay.resizeTimeout),t.autoplay.resizeTimeout=setTimeout(()=>{t.autoplay&&t.autoplay.running&&t.autoplay.paused&&t.autoplay.resume()},500)),t.allowSlidePrev=s,t.allowSlideNext=r,t.params.watchOverflow&&n!==t.snapGrid&&t.checkOverflow()}function Vl(t){const e=this;e.enabled&&(e.allowClick||(e.params.preventClicks&&t.preventDefault(),e.params.preventClicksPropagation&&e.animating&&(t.stopPropagation(),t.stopImmediatePropagation())))}function jl(){const t=this,{wrapperEl:e,rtlTranslate:i,enabled:r}=t;if(!r)return;t.previousTranslate=t.translate,t.isHorizontal()?t.translate=-e.scrollLeft:t.translate=-e.scrollTop,t.translate===0&&(t.translate=0),t.updateActiveIndex(),t.updateSlidesClasses();let s;const n=t.maxTranslate()-t.minTranslate();n===0?s=0:s=(t.translate-t.minTranslate())/n,s!==t.progress&&t.updateProgress(i?-t.translate:t.translate),t.emit("setTranslate",t.translate,!1)}function Wl(t){const e=this;Ot(e,t.target),!(e.params.cssMode||e.params.slidesPerView!=="auto"&&!e.params.autoHeight)&&e.update()}function ql(){const t=this;t.documentTouchHandlerProceeded||(t.documentTouchHandlerProceeded=!0,t.params.touchReleaseOnEdges&&(t.el.style.touchAction="auto"))}const vs=(t,e)=>{const i=K(),{params:r,el:s,wrapperEl:n,device:a}=t,o=!!r.nested,l=e==="on"?"addEventListener":"removeEventListener",u=e;i[l]("touchstart",t.onDocumentTouchStart,{passive:!1,capture:o}),s[l]("touchstart",t.onTouchStart,{passive:!1}),s[l]("pointerdown",t.onTouchStart,{passive:!1}),i[l]("touchmove",t.onTouchMove,{passive:!1,capture:o}),i[l]("pointermove",t.onTouchMove,{passive:!1,capture:o}),i[l]("touchend",t.onTouchEnd,{passive:!0}),i[l]("pointerup",t.onTouchEnd,{passive:!0}),i[l]("pointercancel",t.onTouchEnd,{passive:!0}),i[l]("touchcancel",t.onTouchEnd,{passive:!0}),i[l]("pointerout",t.onTouchEnd,{passive:!0}),i[l]("pointerleave",t.onTouchEnd,{passive:!0}),i[l]("contextmenu",t.onTouchEnd,{passive:!0}),(r.preventClicks||r.preventClicksPropagation)&&s[l]("click",t.onClick,!0),r.cssMode&&n[l]("scroll",t.onScroll),r.updateOnWindowResize?t[u](a.ios||a.android?"resize orientationchange observerUpdate":"resize observerUpdate",Rr,!0):t[u]("observerUpdate",Rr,!0),s[l]("load",t.onLoad,{capture:!0})};function Xl(){const t=this,{params:e}=t;t.onTouchStart=Bl.bind(t),t.onTouchMove=Hl.bind(t),t.onTouchEnd=Gl.bind(t),t.onDocumentTouchStart=ql.bind(t),e.cssMode&&(t.onScroll=jl.bind(t)),t.onClick=Vl.bind(t),t.onLoad=Wl.bind(t),vs(t,"on")}function Yl(){vs(this,"off")}var Ul={attachEvents:Xl,detachEvents:Yl};const kr=(t,e)=>t.grid&&e.grid&&e.grid.rows>1;function Kl(){const t=this,{realIndex:e,initialized:i,params:r,el:s}=t,n=r.breakpoints;if(!n||n&&Object.keys(n).length===0)return;const a=t.getBreakpoint(n,t.params.breakpointsBase,t.el);if(!a||t.currentBreakpoint===a)return;const l=(a in n?n[a]:void 0)||t.originalParams,u=kr(t,r),d=kr(t,l),c=t.params.grabCursor,f=l.grabCursor,m=r.enabled;u&&!d?(s.classList.remove(`${r.containerModifierClass}grid`,`${r.containerModifierClass}grid-column`),t.emitContainerClasses()):!u&&d&&(s.classList.add(`${r.containerModifierClass}grid`),(l.grid.fill&&l.grid.fill==="column"||!l.grid.fill&&r.grid.fill==="column")&&s.classList.add(`${r.containerModifierClass}grid-column`),t.emitContainerClasses()),c&&!f?t.unsetGrabCursor():!c&&f&&t.setGrabCursor(),["navigation","pagination","scrollbar"].forEach(v=>{if(typeof l[v]>"u")return;const y=r[v]&&r[v].enabled,T=l[v]&&l[v].enabled;y&&!T&&t[v].disable(),!y&&T&&t[v].enable()});const g=l.direction&&l.direction!==r.direction,w=r.loop&&(l.slidesPerView!==r.slidesPerView||g),h=r.loop;g&&i&&t.changeDirection(),te(t.params,l);const p=t.params.enabled,b=t.params.loop;Object.assign(t,{allowTouchMove:t.params.allowTouchMove,allowSlideNext:t.params.allowSlideNext,allowSlidePrev:t.params.allowSlidePrev}),m&&!p?t.disable():!m&&p&&t.enable(),t.currentBreakpoint=a,t.emit("_beforeBreakpoint",l),i&&(w?(t.loopDestroy(),t.loopCreate(e),t.updateSlides()):!h&&b?(t.loopCreate(e),t.updateSlides()):h&&!b&&t.loopDestroy()),t.emit("breakpoint",l)}function Jl(t,e,i){if(e===void 0&&(e="window"),!t||e==="container"&&!i)return;let r=!1;const s=q(),n=e==="window"?s.innerHeight:i.clientHeight,a=Object.keys(t).map(o=>{if(typeof o=="string"&&o.indexOf("@")===0){const l=parseFloat(o.substr(1));return{value:n*l,point:o}}return{value:o,point:o}});a.sort((o,l)=>parseInt(o.value,10)-parseInt(l.value,10));for(let o=0;o<a.length;o+=1){const{point:l,value:u}=a[o];e==="window"?s.matchMedia(`(min-width: ${u}px)`).matches&&(r=l):u<=i.clientWidth&&(r=l)}return r||"max"}var Zl={setBreakpoint:Kl,getBreakpoint:Jl};function Ql(t,e){const i=[];return t.forEach(r=>{typeof r=="object"?Object.keys(r).forEach(s=>{r[s]&&i.push(e+s)}):typeof r=="string"&&i.push(e+r)}),i}function ec(){const t=this,{classNames:e,params:i,rtl:r,el:s,device:n}=t,a=Ql(["initialized",i.direction,{"free-mode":t.params.freeMode&&i.freeMode.enabled},{autoheight:i.autoHeight},{rtl:r},{grid:i.grid&&i.grid.rows>1},{"grid-column":i.grid&&i.grid.rows>1&&i.grid.fill==="column"},{android:n.android},{ios:n.ios},{"css-mode":i.cssMode},{centered:i.cssMode&&i.centeredSlides},{"watch-progress":i.watchSlidesProgress}],i.containerModifierClass);e.push(...a),s.classList.add(...e),t.emitContainerClasses()}function tc(){const t=this,{el:e,classNames:i}=t;e.classList.remove(...i),t.emitContainerClasses()}var ic={addClasses:ec,removeClasses:tc};function rc(){const t=this,{isLocked:e,params:i}=t,{slidesOffsetBefore:r}=i;if(r){const s=t.slides.length-1,n=t.slidesGrid[s]+t.slidesSizesGrid[s]+r*2;t.isLocked=t.size>n}else t.isLocked=t.snapGrid.length===1;i.allowSlideNext===!0&&(t.allowSlideNext=!t.isLocked),i.allowSlidePrev===!0&&(t.allowSlidePrev=!t.isLocked),e&&e!==t.isLocked&&(t.isEnd=!1),e!==t.isLocked&&t.emit(t.isLocked?"lock":"unlock")}var nc={checkOverflow:rc},Fr={init:!0,direction:"horizontal",oneWayMovement:!1,swiperElementNodeName:"SWIPER-CONTAINER",touchEventsTarget:"wrapper",initialSlide:0,speed:300,cssMode:!1,updateOnWindowResize:!0,resizeObserver:!0,nested:!1,createElements:!1,eventsPrefix:"swiper",enabled:!0,focusableElements:"input, select, option, textarea, button, video, label",width:null,height:null,preventInteractionOnTransition:!1,userAgent:null,url:null,edgeSwipeDetection:!1,edgeSwipeThreshold:20,autoHeight:!1,setWrapperSize:!1,virtualTranslate:!1,effect:"slide",breakpoints:void 0,breakpointsBase:"window",spaceBetween:0,slidesPerView:1,slidesPerGroup:1,slidesPerGroupSkip:0,slidesPerGroupAuto:!1,centeredSlides:!1,centeredSlidesBounds:!1,slidesOffsetBefore:0,slidesOffsetAfter:0,normalizeSlideIndex:!0,centerInsufficientSlides:!1,watchOverflow:!0,roundLengths:!1,touchRatio:1,touchAngle:45,simulateTouch:!0,shortSwipes:!0,longSwipes:!0,longSwipesRatio:.5,longSwipesMs:300,followFinger:!0,allowTouchMove:!0,threshold:5,touchMoveStopPropagation:!1,touchStartPreventDefault:!0,touchStartForcePreventDefault:!1,touchReleaseOnEdges:!1,uniqueNavElements:!0,resistance:!0,resistanceRatio:.85,watchSlidesProgress:!1,grabCursor:!1,preventClicks:!0,preventClicksPropagation:!0,slideToClickedSlide:!1,loop:!1,loopAddBlankSlides:!0,loopAdditionalSlides:0,loopPreventsSliding:!0,rewind:!1,allowSlidePrev:!0,allowSlideNext:!0,swipeHandler:null,noSwiping:!0,noSwipingClass:"swiper-no-swiping",noSwipingSelector:null,passiveListeners:!0,maxBackfaceHiddenSlides:10,containerModifierClass:"swiper-",slideClass:"swiper-slide",slideBlankClass:"swiper-slide-blank",slideActiveClass:"swiper-slide-active",slideVisibleClass:"swiper-slide-visible",slideFullyVisibleClass:"swiper-slide-fully-visible",slideNextClass:"swiper-slide-next",slidePrevClass:"swiper-slide-prev",wrapperClass:"swiper-wrapper",lazyPreloaderClass:"swiper-lazy-preloader",lazyPreloadPrevNext:0,runCallbacksOnInit:!0,_emitClasses:!1};function sc(t,e){return function(r){r===void 0&&(r={});const s=Object.keys(r)[0],n=r[s];if(typeof n!="object"||n===null){te(e,r);return}if(t[s]===!0&&(t[s]={enabled:!0}),s==="navigation"&&t[s]&&t[s].enabled&&!t[s].prevEl&&!t[s].nextEl&&(t[s].auto=!0),["pagination","scrollbar"].indexOf(s)>=0&&t[s]&&t[s].enabled&&!t[s].el&&(t[s].auto=!0),!(s in t&&"enabled"in n)){te(e,r);return}typeof t[s]=="object"&&!("enabled"in t[s])&&(t[s].enabled=!0),t[s]||(t[s]={enabled:!1}),te(e,r)}}const bi={eventsEmitter:il,update:pl,translate:bl,transition:El,slide:Il,loop:zl,grabCursor:Fl,events:Ul,breakpoints:Zl,checkOverflow:nc,classes:ic},yi={};class ee{constructor(){let e,i;for(var r=arguments.length,s=new Array(r),n=0;n<r;n++)s[n]=arguments[n];s.length===1&&s[0].constructor&&Object.prototype.toString.call(s[0]).slice(8,-1)==="Object"?i=s[0]:[e,i]=s,i||(i={}),i=te({},i),e&&!i.el&&(i.el=e);const a=K();if(i.el&&typeof i.el=="string"&&a.querySelectorAll(i.el).length>1){const d=[];return a.querySelectorAll(i.el).forEach(c=>{const f=te({},i,{el:c});d.push(new ee(f))}),d}const o=this;o.__swiper__=!0,o.support=ms(),o.device=hs({userAgent:i.userAgent}),o.browser=Qo(),o.eventsListeners={},o.eventsAnyListeners=[],o.modules=[...o.__modules__],i.modules&&Array.isArray(i.modules)&&o.modules.push(...i.modules);const l={};o.modules.forEach(d=>{d({params:i,swiper:o,extendParams:sc(i,l),on:o.on.bind(o),once:o.once.bind(o),off:o.off.bind(o),emit:o.emit.bind(o)})});const u=te({},Fr,l);return o.params=te({},u,yi,i),o.originalParams=te({},o.params),o.passedParams=te({},i),o.params&&o.params.on&&Object.keys(o.params.on).forEach(d=>{o.on(d,o.params.on[d])}),o.params&&o.params.onAny&&o.onAny(o.params.onAny),Object.assign(o,{enabled:o.params.enabled,el:e,classNames:[],slides:[],slidesGrid:[],snapGrid:[],slidesSizesGrid:[],isHorizontal(){return o.params.direction==="horizontal"},isVertical(){return o.params.direction==="vertical"},activeIndex:0,realIndex:0,isBeginning:!0,isEnd:!1,translate:0,previousTranslate:0,progress:0,velocity:0,animating:!1,cssOverflowAdjustment(){return Math.trunc(this.translate/2**23)*2**23},allowSlideNext:o.params.allowSlideNext,allowSlidePrev:o.params.allowSlidePrev,touchEventsData:{isTouched:void 0,isMoved:void 0,allowTouchCallbacks:void 0,touchStartTime:void 0,isScrolling:void 0,currentTranslate:void 0,startTranslate:void 0,allowThresholdMove:void 0,focusableElements:o.params.focusableElements,lastClickTime:0,clickTimeout:void 0,velocities:[],allowMomentumBounce:void 0,startMoving:void 0,pointerId:null,touchId:null},allowClick:!0,allowTouchMove:o.params.allowTouchMove,touches:{startX:0,startY:0,currentX:0,currentY:0,diff:0},imagesToLoad:[],imagesLoaded:0}),o.emit("_swiper"),o.params.init&&o.init(),o}getDirectionLabel(e){return this.isHorizontal()?e:{width:"height","margin-top":"margin-left","margin-bottom ":"margin-right","margin-left":"margin-top","margin-right":"margin-bottom","padding-left":"padding-top","padding-right":"padding-bottom",marginRight:"marginBottom"}[e]}getSlideIndex(e){const{slidesEl:i,params:r}=this,s=U(i,`.${r.slideClass}, swiper-slide`),n=ut(s[0]);return ut(e)-n}getSlideIndexByData(e){return this.getSlideIndex(this.slides.filter(i=>i.getAttribute("data-swiper-slide-index")*1===e)[0])}recalcSlides(){const e=this,{slidesEl:i,params:r}=e;e.slides=U(i,`.${r.slideClass}, swiper-slide`)}enable(){const e=this;e.enabled||(e.enabled=!0,e.params.grabCursor&&e.setGrabCursor(),e.emit("enable"))}disable(){const e=this;e.enabled&&(e.enabled=!1,e.params.grabCursor&&e.unsetGrabCursor(),e.emit("disable"))}setProgress(e,i){const r=this;e=Math.min(Math.max(e,0),1);const s=r.minTranslate(),a=(r.maxTranslate()-s)*e+s;r.translateTo(a,typeof i>"u"?0:i),r.updateActiveIndex(),r.updateSlidesClasses()}emitContainerClasses(){const e=this;if(!e.params._emitClasses||!e.el)return;const i=e.el.className.split(" ").filter(r=>r.indexOf("swiper")===0||r.indexOf(e.params.containerModifierClass)===0);e.emit("_containerClasses",i.join(" "))}getSlideClasses(e){const i=this;return i.destroyed?"":e.className.split(" ").filter(r=>r.indexOf("swiper-slide")===0||r.indexOf(i.params.slideClass)===0).join(" ")}emitSlidesClasses(){const e=this;if(!e.params._emitClasses||!e.el)return;const i=[];e.slides.forEach(r=>{const s=e.getSlideClasses(r);i.push({slideEl:r,classNames:s}),e.emit("_slideClass",r,s)}),e.emit("_slideClasses",i)}slidesPerViewDynamic(e,i){e===void 0&&(e="current"),i===void 0&&(i=!1);const r=this,{params:s,slides:n,slidesGrid:a,slidesSizesGrid:o,size:l,activeIndex:u}=r;let d=1;if(typeof s.slidesPerView=="number")return s.slidesPerView;if(s.centeredSlides){let c=n[u]?Math.ceil(n[u].swiperSlideSize):0,f;for(let m=u+1;m<n.length;m+=1)n[m]&&!f&&(c+=Math.ceil(n[m].swiperSlideSize),d+=1,c>l&&(f=!0));for(let m=u-1;m>=0;m-=1)n[m]&&!f&&(c+=n[m].swiperSlideSize,d+=1,c>l&&(f=!0))}else if(e==="current")for(let c=u+1;c<n.length;c+=1)(i?a[c]+o[c]-a[u]<l:a[c]-a[u]<l)&&(d+=1);else for(let c=u-1;c>=0;c-=1)a[u]-a[c]<l&&(d+=1);return d}update(){const e=this;if(!e||e.destroyed)return;const{snapGrid:i,params:r}=e;r.breakpoints&&e.setBreakpoint(),[...e.el.querySelectorAll('[loading="lazy"]')].forEach(a=>{a.complete&&Ot(e,a)}),e.updateSize(),e.updateSlides(),e.updateProgress(),e.updateSlidesClasses();function s(){const a=e.rtlTranslate?e.translate*-1:e.translate,o=Math.min(Math.max(a,e.maxTranslate()),e.minTranslate());e.setTranslate(o),e.updateActiveIndex(),e.updateSlidesClasses()}let n;if(r.freeMode&&r.freeMode.enabled&&!r.cssMode)s(),r.autoHeight&&e.updateAutoHeight();else{if((r.slidesPerView==="auto"||r.slidesPerView>1)&&e.isEnd&&!r.centeredSlides){const a=e.virtual&&r.virtual.enabled?e.virtual.slides:e.slides;n=e.slideTo(a.length-1,0,!1,!0)}else n=e.slideTo(e.activeIndex,0,!1,!0);n||s()}r.watchOverflow&&i!==e.snapGrid&&e.checkOverflow(),e.emit("update")}changeDirection(e,i){i===void 0&&(i=!0);const r=this,s=r.params.direction;return e||(e=s==="horizontal"?"vertical":"horizontal"),e===s||e!=="horizontal"&&e!=="vertical"||(r.el.classList.remove(`${r.params.containerModifierClass}${s}`),r.el.classList.add(`${r.params.containerModifierClass}${e}`),r.emitContainerClasses(),r.params.direction=e,r.slides.forEach(n=>{e==="vertical"?n.style.width="":n.style.height=""}),r.emit("changeDirection"),i&&r.update()),r}changeLanguageDirection(e){const i=this;i.rtl&&e==="rtl"||!i.rtl&&e==="ltr"||(i.rtl=e==="rtl",i.rtlTranslate=i.params.direction==="horizontal"&&i.rtl,i.rtl?(i.el.classList.add(`${i.params.containerModifierClass}rtl`),i.el.dir="rtl"):(i.el.classList.remove(`${i.params.containerModifierClass}rtl`),i.el.dir="ltr"),i.update())}mount(e){const i=this;if(i.mounted)return!0;let r=e||i.params.el;if(typeof r=="string"&&(r=document.querySelector(r)),!r)return!1;r.swiper=i,r.parentNode&&r.parentNode.host&&r.parentNode.host.nodeName===i.params.swiperElementNodeName.toUpperCase()&&(i.isElement=!0);const s=()=>`.${(i.params.wrapperClass||"").trim().split(" ").join(".")}`;let a=r&&r.shadowRoot&&r.shadowRoot.querySelector?r.shadowRoot.querySelector(s()):U(r,s())[0];return!a&&i.params.createElements&&(a=ie("div",i.params.wrapperClass),r.append(a),U(r,`.${i.params.slideClass}`).forEach(o=>{a.append(o)})),Object.assign(i,{el:r,wrapperEl:a,slidesEl:i.isElement&&!r.parentNode.host.slideSlots?r.parentNode.host:a,hostEl:i.isElement?r.parentNode.host:r,mounted:!0,rtl:r.dir.toLowerCase()==="rtl"||be(r,"direction")==="rtl",rtlTranslate:i.params.direction==="horizontal"&&(r.dir.toLowerCase()==="rtl"||be(r,"direction")==="rtl"),wrongRTL:be(a,"display")==="-webkit-box"}),!0}init(e){const i=this;if(i.initialized||i.mount(e)===!1)return i;i.emit("beforeInit"),i.params.breakpoints&&i.setBreakpoint(),i.addClasses(),i.updateSize(),i.updateSlides(),i.params.watchOverflow&&i.checkOverflow(),i.params.grabCursor&&i.enabled&&i.setGrabCursor(),i.params.loop&&i.virtual&&i.params.virtual.enabled?i.slideTo(i.params.initialSlide+i.virtual.slidesBefore,0,i.params.runCallbacksOnInit,!1,!0):i.slideTo(i.params.initialSlide,0,i.params.runCallbacksOnInit,!1,!0),i.params.loop&&i.loopCreate(),i.attachEvents();const s=[...i.el.querySelectorAll('[loading="lazy"]')];return i.isElement&&s.push(...i.hostEl.querySelectorAll('[loading="lazy"]')),s.forEach(n=>{n.complete?Ot(i,n):n.addEventListener("load",a=>{Ot(i,a.target)})}),Bi(i),i.initialized=!0,Bi(i),i.emit("init"),i.emit("afterInit"),i}destroy(e,i){e===void 0&&(e=!0),i===void 0&&(i=!0);const r=this,{params:s,el:n,wrapperEl:a,slides:o}=r;return typeof r.params>"u"||r.destroyed||(r.emit("beforeDestroy"),r.initialized=!1,r.detachEvents(),s.loop&&r.loopDestroy(),i&&(r.removeClasses(),n.removeAttribute("style"),a.removeAttribute("style"),o&&o.length&&o.forEach(l=>{l.classList.remove(s.slideVisibleClass,s.slideFullyVisibleClass,s.slideActiveClass,s.slideNextClass,s.slidePrevClass),l.removeAttribute("style"),l.removeAttribute("data-swiper-slide-index")})),r.emit("destroy"),Object.keys(r.eventsListeners).forEach(l=>{r.off(l)}),e!==!1&&(r.el.swiper=null,Wo(r)),r.destroyed=!0),null}static extendDefaults(e){te(yi,e)}static get extendedDefaults(){return yi}static get defaults(){return Fr}static installModule(e){ee.prototype.__modules__||(ee.prototype.__modules__=[]);const i=ee.prototype.__modules__;typeof e=="function"&&i.indexOf(e)<0&&i.push(e)}static use(e){return Array.isArray(e)?(e.forEach(i=>ee.installModule(i)),ee):(ee.installModule(e),ee)}}Object.keys(bi).forEach(t=>{Object.keys(bi[t]).forEach(e=>{ee.prototype[e]=bi[t][e]})});ee.use([el,tl]);function ac(t){let{swiper:e,extendParams:i,on:r,emit:s}=t;i({virtual:{enabled:!1,slides:[],cache:!0,renderSlide:null,renderExternal:null,renderExternalUpdate:!0,addSlidesBefore:0,addSlidesAfter:0}});let n;const a=K();e.virtual={cache:{},from:void 0,to:void 0,slides:[],offset:0,slidesGrid:[]};const o=a.createElement("div");function l(g,w){const h=e.params.virtual;if(h.cache&&e.virtual.cache[w])return e.virtual.cache[w];let p;return h.renderSlide?(p=h.renderSlide.call(e,g,w),typeof p=="string"&&(o.innerHTML=p,p=o.children[0])):e.isElement?p=ie("swiper-slide"):p=ie("div",e.params.slideClass),p.setAttribute("data-swiper-slide-index",w),h.renderSlide||(p.innerHTML=g),h.cache&&(e.virtual.cache[w]=p),p}function u(g,w){const{slidesPerView:h,slidesPerGroup:p,centeredSlides:b,loop:v,initialSlide:y}=e.params;if(w&&!v&&y>0)return;const{addSlidesBefore:T,addSlidesAfter:x}=e.params.virtual,{from:M,to:S,slides:A,slidesGrid:C,offset:O}=e.virtual;e.params.cssMode||e.updateActiveIndex();const E=e.activeIndex||0;let _;e.rtlTranslate?_="right":_=e.isHorizontal()?"left":"top";let P,D;b?(P=Math.floor(h/2)+p+x,D=Math.floor(h/2)+p+T):(P=h+(p-1)+x,D=(v?h:p)+T);let k=E-D,L=E+P;v||(k=Math.max(k,0),L=Math.min(L,A.length-1));let I=(e.slidesGrid[k]||0)-(e.slidesGrid[0]||0);v&&E>=D?(k-=D,b||(I+=e.slidesGrid[0])):v&&E<D&&(k=-D,b&&(I+=e.slidesGrid[0])),Object.assign(e.virtual,{from:k,to:L,offset:I,slidesGrid:e.slidesGrid,slidesBefore:D,slidesAfter:P});function R(){e.updateSlides(),e.updateProgress(),e.updateSlidesClasses(),s("virtualUpdate")}if(M===k&&S===L&&!g){e.slidesGrid!==C&&I!==O&&e.slides.forEach(N=>{N.style[_]=`${I-Math.abs(e.cssOverflowAdjustment())}px`}),e.updateProgress(),s("virtualUpdate");return}if(e.params.virtual.renderExternal){e.params.virtual.renderExternal.call(e,{offset:I,from:k,to:L,slides:function(){const V=[];for(let J=k;J<=L;J+=1)V.push(A[J]);return V}()}),e.params.virtual.renderExternalUpdate?R():s("virtualUpdate");return}const B=[],$=[],z=N=>{let V=N;return N<0?V=A.length+N:V>=A.length&&(V=V-A.length),V};if(g)e.slides.filter(N=>N.matches(`.${e.params.slideClass}, swiper-slide`)).forEach(N=>{N.remove()});else for(let N=M;N<=S;N+=1)if(N<k||N>L){const V=z(N);e.slides.filter(J=>J.matches(`.${e.params.slideClass}[data-swiper-slide-index="${V}"], swiper-slide[data-swiper-slide-index="${V}"]`)).forEach(J=>{J.remove()})}const F=v?-A.length:0,j=v?A.length*2:A.length;for(let N=F;N<j;N+=1)if(N>=k&&N<=L){const V=z(N);typeof S>"u"||g?$.push(V):(N>S&&$.push(V),N<M&&B.push(V))}if($.forEach(N=>{e.slidesEl.append(l(A[N],N))}),v)for(let N=B.length-1;N>=0;N-=1){const V=B[N];e.slidesEl.prepend(l(A[V],V))}else B.sort((N,V)=>V-N),B.forEach(N=>{e.slidesEl.prepend(l(A[N],N))});U(e.slidesEl,".swiper-slide, swiper-slide").forEach(N=>{N.style[_]=`${I-Math.abs(e.cssOverflowAdjustment())}px`}),R()}function d(g){if(typeof g=="object"&&"length"in g)for(let w=0;w<g.length;w+=1)g[w]&&e.virtual.slides.push(g[w]);else e.virtual.slides.push(g);u(!0)}function c(g){const w=e.activeIndex;let h=w+1,p=1;if(Array.isArray(g)){for(let b=0;b<g.length;b+=1)g[b]&&e.virtual.slides.unshift(g[b]);h=w+g.length,p=g.length}else e.virtual.slides.unshift(g);if(e.params.virtual.cache){const b=e.virtual.cache,v={};Object.keys(b).forEach(y=>{const T=b[y],x=T.getAttribute("data-swiper-slide-index");x&&T.setAttribute("data-swiper-slide-index",parseInt(x,10)+p),v[parseInt(y,10)+p]=T}),e.virtual.cache=v}u(!0),e.slideTo(h,0)}function f(g){if(typeof g>"u"||g===null)return;let w=e.activeIndex;if(Array.isArray(g))for(let h=g.length-1;h>=0;h-=1)e.params.virtual.cache&&(delete e.virtual.cache[g[h]],Object.keys(e.virtual.cache).forEach(p=>{p>g&&(e.virtual.cache[p-1]=e.virtual.cache[p],e.virtual.cache[p-1].setAttribute("data-swiper-slide-index",p-1),delete e.virtual.cache[p])})),e.virtual.slides.splice(g[h],1),g[h]<w&&(w-=1),w=Math.max(w,0);else e.params.virtual.cache&&(delete e.virtual.cache[g],Object.keys(e.virtual.cache).forEach(h=>{h>g&&(e.virtual.cache[h-1]=e.virtual.cache[h],e.virtual.cache[h-1].setAttribute("data-swiper-slide-index",h-1),delete e.virtual.cache[h])})),e.virtual.slides.splice(g,1),g<w&&(w-=1),w=Math.max(w,0);u(!0),e.slideTo(w,0)}function m(){e.virtual.slides=[],e.params.virtual.cache&&(e.virtual.cache={}),u(!0),e.slideTo(0,0)}r("beforeInit",()=>{if(!e.params.virtual.enabled)return;let g;if(typeof e.passedParams.virtual.slides>"u"){const w=[...e.slidesEl.children].filter(h=>h.matches(`.${e.params.slideClass}, swiper-slide`));w&&w.length&&(e.virtual.slides=[...w],g=!0,w.forEach((h,p)=>{h.setAttribute("data-swiper-slide-index",p),e.virtual.cache[p]=h,h.remove()}))}g||(e.virtual.slides=e.params.virtual.slides),e.classNames.push(`${e.params.containerModifierClass}virtual`),e.params.watchSlidesProgress=!0,e.originalParams.watchSlidesProgress=!0,u(!1,!0)}),r("setTranslate",()=>{e.params.virtual.enabled&&(e.params.cssMode&&!e._immediateVirtual?(clearTimeout(n),n=setTimeout(()=>{u()},100)):u())}),r("init update resize",()=>{e.params.virtual.enabled&&e.params.cssMode&&at(e.wrapperEl,"--swiper-virtual-size",`${e.virtualSize}px`)}),Object.assign(e.virtual,{appendSlide:d,prependSlide:c,removeSlide:f,removeAllSlides:m,update:u})}function oc(t){let{swiper:e,extendParams:i,on:r,emit:s}=t;const n=K(),a=q();e.keyboard={enabled:!1},i({keyboard:{enabled:!1,onlyInViewport:!0,pageUpDown:!0}});function o(d){if(!e.enabled)return;const{rtlTranslate:c}=e;let f=d;f.originalEvent&&(f=f.originalEvent);const m=f.keyCode||f.charCode,g=e.params.keyboard.pageUpDown,w=g&&m===33,h=g&&m===34,p=m===37,b=m===39,v=m===38,y=m===40;if(!e.allowSlideNext&&(e.isHorizontal()&&b||e.isVertical()&&y||h)||!e.allowSlidePrev&&(e.isHorizontal()&&p||e.isVertical()&&v||w))return!1;if(!(f.shiftKey||f.altKey||f.ctrlKey||f.metaKey)&&!(n.activeElement&&n.activeElement.nodeName&&(n.activeElement.nodeName.toLowerCase()==="input"||n.activeElement.nodeName.toLowerCase()==="textarea"))){if(e.params.keyboard.onlyInViewport&&(w||h||p||b||v||y)){let T=!1;if(De(e.el,`.${e.params.slideClass}, swiper-slide`).length>0&&De(e.el,`.${e.params.slideActiveClass}`).length===0)return;const x=e.el,M=x.clientWidth,S=x.clientHeight,A=a.innerWidth,C=a.innerHeight,O=Nt(x);c&&(O.left-=x.scrollLeft);const E=[[O.left,O.top],[O.left+M,O.top],[O.left,O.top+S],[O.left+M,O.top+S]];for(let _=0;_<E.length;_+=1){const P=E[_];if(P[0]>=0&&P[0]<=A&&P[1]>=0&&P[1]<=C){if(P[0]===0&&P[1]===0)continue;T=!0}}if(!T)return}e.isHorizontal()?((w||h||p||b)&&(f.preventDefault?f.preventDefault():f.returnValue=!1),((h||b)&&!c||(w||p)&&c)&&e.slideNext(),((w||p)&&!c||(h||b)&&c)&&e.slidePrev()):((w||h||v||y)&&(f.preventDefault?f.preventDefault():f.returnValue=!1),(h||y)&&e.slideNext(),(w||v)&&e.slidePrev()),s("keyPress",m)}}function l(){e.keyboard.enabled||(n.addEventListener("keydown",o),e.keyboard.enabled=!0)}function u(){e.keyboard.enabled&&(n.removeEventListener("keydown",o),e.keyboard.enabled=!1)}r("init",()=>{e.params.keyboard.enabled&&l()}),r("destroy",()=>{e.keyboard.enabled&&u()}),Object.assign(e.keyboard,{enable:l,disable:u})}function lc(t){let{swiper:e,extendParams:i,on:r,emit:s}=t;const n=q();i({mousewheel:{enabled:!1,releaseOnEdges:!1,invert:!1,forceToAxis:!1,sensitivity:1,eventsTarget:"container",thresholdDelta:null,thresholdTime:null,noMousewheelClass:"swiper-no-mousewheel"}}),e.mousewheel={enabled:!1};let a,o=ne(),l;const u=[];function d(v){let M=0,S=0,A=0,C=0;return"detail"in v&&(S=v.detail),"wheelDelta"in v&&(S=-v.wheelDelta/120),"wheelDeltaY"in v&&(S=-v.wheelDeltaY/120),"wheelDeltaX"in v&&(M=-v.wheelDeltaX/120),"axis"in v&&v.axis===v.HORIZONTAL_AXIS&&(M=S,S=0),A=M*10,C=S*10,"deltaY"in v&&(C=v.deltaY),"deltaX"in v&&(A=v.deltaX),v.shiftKey&&!A&&(A=C,C=0),(A||C)&&v.deltaMode&&(v.deltaMode===1?(A*=40,C*=40):(A*=800,C*=800)),A&&!M&&(M=A<1?-1:1),C&&!S&&(S=C<1?-1:1),{spinX:M,spinY:S,pixelX:A,pixelY:C}}function c(){e.enabled&&(e.mouseEntered=!0)}function f(){e.enabled&&(e.mouseEntered=!1)}function m(v){return e.params.mousewheel.thresholdDelta&&v.delta<e.params.mousewheel.thresholdDelta||e.params.mousewheel.thresholdTime&&ne()-o<e.params.mousewheel.thresholdTime?!1:v.delta>=6&&ne()-o<60?!0:(v.direction<0?(!e.isEnd||e.params.loop)&&!e.animating&&(e.slideNext(),s("scroll",v.raw)):(!e.isBeginning||e.params.loop)&&!e.animating&&(e.slidePrev(),s("scroll",v.raw)),o=new n.Date().getTime(),!1)}function g(v){const y=e.params.mousewheel;if(v.direction<0){if(e.isEnd&&!e.params.loop&&y.releaseOnEdges)return!0}else if(e.isBeginning&&!e.params.loop&&y.releaseOnEdges)return!0;return!1}function w(v){let y=v,T=!0;if(!e.enabled||v.target.closest(`.${e.params.mousewheel.noMousewheelClass}`))return;const x=e.params.mousewheel;e.params.cssMode&&y.preventDefault();let M=e.el;e.params.mousewheel.eventsTarget!=="container"&&(M=document.querySelector(e.params.mousewheel.eventsTarget));const S=M&&M.contains(y.target);if(!e.mouseEntered&&!S&&!x.releaseOnEdges)return!0;y.originalEvent&&(y=y.originalEvent);let A=0;const C=e.rtlTranslate?-1:1,O=d(y);if(x.forceToAxis)if(e.isHorizontal())if(Math.abs(O.pixelX)>Math.abs(O.pixelY))A=-O.pixelX*C;else return!0;else if(Math.abs(O.pixelY)>Math.abs(O.pixelX))A=-O.pixelY;else return!0;else A=Math.abs(O.pixelX)>Math.abs(O.pixelY)?-O.pixelX*C:-O.pixelY;if(A===0)return!0;x.invert&&(A=-A);let E=e.getTranslate()+A*x.sensitivity;if(E>=e.minTranslate()&&(E=e.minTranslate()),E<=e.maxTranslate()&&(E=e.maxTranslate()),T=e.params.loop?!0:!(E===e.minTranslate()||E===e.maxTranslate()),T&&e.params.nested&&y.stopPropagation(),!e.params.freeMode||!e.params.freeMode.enabled){const _={time:ne(),delta:Math.abs(A),direction:Math.sign(A),raw:v};u.length>=2&&u.shift();const P=u.length?u[u.length-1]:void 0;if(u.push(_),P?(_.direction!==P.direction||_.delta>P.delta||_.time>P.time+150)&&m(_):m(_),g(_))return!0}else{const _={time:ne(),delta:Math.abs(A),direction:Math.sign(A)},P=l&&_.time<l.time+500&&_.delta<=l.delta&&_.direction===l.direction;if(!P){l=void 0;let D=e.getTranslate()+A*x.sensitivity;const k=e.isBeginning,L=e.isEnd;if(D>=e.minTranslate()&&(D=e.minTranslate()),D<=e.maxTranslate()&&(D=e.maxTranslate()),e.setTransition(0),e.setTranslate(D),e.updateProgress(),e.updateActiveIndex(),e.updateSlidesClasses(),(!k&&e.isBeginning||!L&&e.isEnd)&&e.updateSlidesClasses(),e.params.loop&&e.loopFix({direction:_.direction<0?"next":"prev",byMousewheel:!0}),e.params.freeMode.sticky){clearTimeout(a),a=void 0,u.length>=15&&u.shift();const I=u.length?u[u.length-1]:void 0,R=u[0];if(u.push(_),I&&(_.delta>I.delta||_.direction!==I.direction))u.splice(0);else if(u.length>=15&&_.time-R.time<500&&R.delta-_.delta>=1&&_.delta<=6){const B=A>0?.8:.2;l=_,u.splice(0),a=ze(()=>{e.slideToClosest(e.params.speed,!0,void 0,B)},0)}a||(a=ze(()=>{l=_,u.splice(0),e.slideToClosest(e.params.speed,!0,void 0,.5)},500))}if(P||s("scroll",y),e.params.autoplay&&e.params.autoplayDisableOnInteraction&&e.autoplay.stop(),x.releaseOnEdges&&(D===e.minTranslate()||D===e.maxTranslate()))return!0}}return y.preventDefault?y.preventDefault():y.returnValue=!1,!1}function h(v){let y=e.el;e.params.mousewheel.eventsTarget!=="container"&&(y=document.querySelector(e.params.mousewheel.eventsTarget)),y[v]("mouseenter",c),y[v]("mouseleave",f),y[v]("wheel",w)}function p(){return e.params.cssMode?(e.wrapperEl.removeEventListener("wheel",w),!0):e.mousewheel.enabled?!1:(h("addEventListener"),e.mousewheel.enabled=!0,!0)}function b(){return e.params.cssMode?(e.wrapperEl.addEventListener(event,w),!0):e.mousewheel.enabled?(h("removeEventListener"),e.mousewheel.enabled=!1,!0):!1}r("init",()=>{!e.params.mousewheel.enabled&&e.params.cssMode&&b(),e.params.mousewheel.enabled&&p()}),r("destroy",()=>{e.params.cssMode&&p(),e.mousewheel.enabled&&b()}),Object.assign(e.mousewheel,{enable:p,disable:b})}function ur(t,e,i,r){return t.params.createElements&&Object.keys(r).forEach(s=>{if(!i[s]&&i.auto===!0){let n=U(t.el,`.${r[s]}`)[0];n||(n=ie("div",r[s]),n.className=r[s],t.el.append(n)),i[s]=n,e[s]=n}}),i}function cc(t){let{swiper:e,extendParams:i,on:r,emit:s}=t;i({navigation:{nextEl:null,prevEl:null,hideOnClick:!1,disabledClass:"swiper-button-disabled",hiddenClass:"swiper-button-hidden",lockClass:"swiper-button-lock",navigationDisabledClass:"swiper-navigation-disabled"}}),e.navigation={nextEl:null,prevEl:null};function n(g){let w;return g&&typeof g=="string"&&e.isElement&&(w=e.el.querySelector(g),w)?w:(g&&(typeof g=="string"&&(w=[...document.querySelectorAll(g)]),e.params.uniqueNavElements&&typeof g=="string"&&w&&w.length>1&&e.el.querySelectorAll(g).length===1?w=e.el.querySelector(g):w&&w.length===1&&(w=w[0])),g&&!w?g:w)}function a(g,w){const h=e.params.navigation;g=H(g),g.forEach(p=>{p&&(p.classList[w?"add":"remove"](...h.disabledClass.split(" ")),p.tagName==="BUTTON"&&(p.disabled=w),e.params.watchOverflow&&e.enabled&&p.classList[e.isLocked?"add":"remove"](h.lockClass))})}function o(){const{nextEl:g,prevEl:w}=e.navigation;if(e.params.loop){a(w,!1),a(g,!1);return}a(w,e.isBeginning&&!e.params.rewind),a(g,e.isEnd&&!e.params.rewind)}function l(g){g.preventDefault(),!(e.isBeginning&&!e.params.loop&&!e.params.rewind)&&(e.slidePrev(),s("navigationPrev"))}function u(g){g.preventDefault(),!(e.isEnd&&!e.params.loop&&!e.params.rewind)&&(e.slideNext(),s("navigationNext"))}function d(){const g=e.params.navigation;if(e.params.navigation=ur(e,e.originalParams.navigation,e.params.navigation,{nextEl:"swiper-button-next",prevEl:"swiper-button-prev"}),!(g.nextEl||g.prevEl))return;let w=n(g.nextEl),h=n(g.prevEl);Object.assign(e.navigation,{nextEl:w,prevEl:h}),w=H(w),h=H(h);const p=(b,v)=>{b&&b.addEventListener("click",v==="next"?u:l),!e.enabled&&b&&b.classList.add(...g.lockClass.split(" "))};w.forEach(b=>p(b,"next")),h.forEach(b=>p(b,"prev"))}function c(){let{nextEl:g,prevEl:w}=e.navigation;g=H(g),w=H(w);const h=(p,b)=>{p.removeEventListener("click",b==="next"?u:l),p.classList.remove(...e.params.navigation.disabledClass.split(" "))};g.forEach(p=>h(p,"next")),w.forEach(p=>h(p,"prev"))}r("init",()=>{e.params.navigation.enabled===!1?m():(d(),o())}),r("toEdge fromEdge lock unlock",()=>{o()}),r("destroy",()=>{c()}),r("enable disable",()=>{let{nextEl:g,prevEl:w}=e.navigation;if(g=H(g),w=H(w),e.enabled){o();return}[...g,...w].filter(h=>!!h).forEach(h=>h.classList.add(e.params.navigation.lockClass))}),r("click",(g,w)=>{let{nextEl:h,prevEl:p}=e.navigation;h=H(h),p=H(p);const b=w.target;if(e.params.navigation.hideOnClick&&!p.includes(b)&&!h.includes(b)){if(e.pagination&&e.params.pagination&&e.params.pagination.clickable&&(e.pagination.el===b||e.pagination.el.contains(b)))return;let v;h.length?v=h[0].classList.contains(e.params.navigation.hiddenClass):p.length&&(v=p[0].classList.contains(e.params.navigation.hiddenClass)),s(v===!0?"navigationShow":"navigationHide"),[...h,...p].filter(y=>!!y).forEach(y=>y.classList.toggle(e.params.navigation.hiddenClass))}});const f=()=>{e.el.classList.remove(...e.params.navigation.navigationDisabledClass.split(" ")),d(),o()},m=()=>{e.el.classList.add(...e.params.navigation.navigationDisabledClass.split(" ")),c()};Object.assign(e.navigation,{enable:f,disable:m,update:o,init:d,destroy:c})}function pe(t){return t===void 0&&(t=""),`.${t.trim().replace(/([\.:!+\/])/g,"\\$1").replace(/ /g,".")}`}function dc(t){let{swiper:e,extendParams:i,on:r,emit:s}=t;const n="swiper-pagination";i({pagination:{el:null,bulletElement:"span",clickable:!1,hideOnClick:!1,renderBullet:null,renderProgressbar:null,renderFraction:null,renderCustom:null,progressbarOpposite:!1,type:"bullets",dynamicBullets:!1,dynamicMainBullets:1,formatFractionCurrent:p=>p,formatFractionTotal:p=>p,bulletClass:`${n}-bullet`,bulletActiveClass:`${n}-bullet-active`,modifierClass:`${n}-`,currentClass:`${n}-current`,totalClass:`${n}-total`,hiddenClass:`${n}-hidden`,progressbarFillClass:`${n}-progressbar-fill`,progressbarOppositeClass:`${n}-progressbar-opposite`,clickableClass:`${n}-clickable`,lockClass:`${n}-lock`,horizontalClass:`${n}-horizontal`,verticalClass:`${n}-vertical`,paginationDisabledClass:`${n}-disabled`}}),e.pagination={el:null,bullets:[]};let a,o=0;function l(){return!e.params.pagination.el||!e.pagination.el||Array.isArray(e.pagination.el)&&e.pagination.el.length===0}function u(p,b){const{bulletActiveClass:v}=e.params.pagination;p&&(p=p[`${b==="prev"?"previous":"next"}ElementSibling`],p&&(p.classList.add(`${v}-${b}`),p=p[`${b==="prev"?"previous":"next"}ElementSibling`],p&&p.classList.add(`${v}-${b}-${b}`)))}function d(p){const b=p.target.closest(pe(e.params.pagination.bulletClass));if(!b)return;p.preventDefault();const v=ut(b)*e.params.slidesPerGroup;if(e.params.loop){if(e.realIndex===v)return;e.slideToLoop(v)}else e.slideTo(v)}function c(){const p=e.rtl,b=e.params.pagination;if(l())return;let v=e.pagination.el;v=H(v);let y,T;const x=e.virtual&&e.params.virtual.enabled?e.virtual.slides.length:e.slides.length,M=e.params.loop?Math.ceil(x/e.params.slidesPerGroup):e.snapGrid.length;if(e.params.loop?(T=e.previousRealIndex||0,y=e.params.slidesPerGroup>1?Math.floor(e.realIndex/e.params.slidesPerGroup):e.realIndex):typeof e.snapIndex<"u"?(y=e.snapIndex,T=e.previousSnapIndex):(T=e.previousIndex||0,y=e.activeIndex||0),b.type==="bullets"&&e.pagination.bullets&&e.pagination.bullets.length>0){const S=e.pagination.bullets;let A,C,O;if(b.dynamicBullets&&(a=Ni(S[0],e.isHorizontal()?"width":"height"),v.forEach(E=>{E.style[e.isHorizontal()?"width":"height"]=`${a*(b.dynamicMainBullets+4)}px`}),b.dynamicMainBullets>1&&T!==void 0&&(o+=y-(T||0),o>b.dynamicMainBullets-1?o=b.dynamicMainBullets-1:o<0&&(o=0)),A=Math.max(y-o,0),C=A+(Math.min(S.length,b.dynamicMainBullets)-1),O=(C+A)/2),S.forEach(E=>{const _=[...["","-next","-next-next","-prev","-prev-prev","-main"].map(P=>`${b.bulletActiveClass}${P}`)].map(P=>typeof P=="string"&&P.includes(" ")?P.split(" "):P).flat();E.classList.remove(..._)}),v.length>1)S.forEach(E=>{const _=ut(E);_===y?E.classList.add(...b.bulletActiveClass.split(" ")):e.isElement&&E.setAttribute("part","bullet"),b.dynamicBullets&&(_>=A&&_<=C&&E.classList.add(...`${b.bulletActiveClass}-main`.split(" ")),_===A&&u(E,"prev"),_===C&&u(E,"next"))});else{const E=S[y];if(E&&E.classList.add(...b.bulletActiveClass.split(" ")),e.isElement&&S.forEach((_,P)=>{_.setAttribute("part",P===y?"bullet-active":"bullet")}),b.dynamicBullets){const _=S[A],P=S[C];for(let D=A;D<=C;D+=1)S[D]&&S[D].classList.add(...`${b.bulletActiveClass}-main`.split(" "));u(_,"prev"),u(P,"next")}}if(b.dynamicBullets){const E=Math.min(S.length,b.dynamicMainBullets+4),_=(a*E-a)/2-O*a,P=p?"right":"left";S.forEach(D=>{D.style[e.isHorizontal()?P:"top"]=`${_}px`})}}v.forEach((S,A)=>{if(b.type==="fraction"&&(S.querySelectorAll(pe(b.currentClass)).forEach(C=>{C.textContent=b.formatFractionCurrent(y+1)}),S.querySelectorAll(pe(b.totalClass)).forEach(C=>{C.textContent=b.formatFractionTotal(M)})),b.type==="progressbar"){let C;b.progressbarOpposite?C=e.isHorizontal()?"vertical":"horizontal":C=e.isHorizontal()?"horizontal":"vertical";const O=(y+1)/M;let E=1,_=1;C==="horizontal"?E=O:_=O,S.querySelectorAll(pe(b.progressbarFillClass)).forEach(P=>{P.style.transform=`translate3d(0,0,0) scaleX(${E}) scaleY(${_})`,P.style.transitionDuration=`${e.params.speed}ms`})}b.type==="custom"&&b.renderCustom?(S.innerHTML=b.renderCustom(e,y+1,M),A===0&&s("paginationRender",S)):(A===0&&s("paginationRender",S),s("paginationUpdate",S)),e.params.watchOverflow&&e.enabled&&S.classList[e.isLocked?"add":"remove"](b.lockClass)})}function f(){const p=e.params.pagination;if(l())return;const b=e.virtual&&e.params.virtual.enabled?e.virtual.slides.length:e.grid&&e.params.grid.rows>1?e.slides.length/Math.ceil(e.params.grid.rows):e.slides.length;let v=e.pagination.el;v=H(v);let y="";if(p.type==="bullets"){let T=e.params.loop?Math.ceil(b/e.params.slidesPerGroup):e.snapGrid.length;e.params.freeMode&&e.params.freeMode.enabled&&T>b&&(T=b);for(let x=0;x<T;x+=1)p.renderBullet?y+=p.renderBullet.call(e,x,p.bulletClass):y+=`<${p.bulletElement} ${e.isElement?'part="bullet"':""} class="${p.bulletClass}"></${p.bulletElement}>`}p.type==="fraction"&&(p.renderFraction?y=p.renderFraction.call(e,p.currentClass,p.totalClass):y=`<span class="${p.currentClass}"></span> / <span class="${p.totalClass}"></span>`),p.type==="progressbar"&&(p.renderProgressbar?y=p.renderProgressbar.call(e,p.progressbarFillClass):y=`<span class="${p.progressbarFillClass}"></span>`),e.pagination.bullets=[],v.forEach(T=>{p.type!=="custom"&&(T.innerHTML=y||""),p.type==="bullets"&&e.pagination.bullets.push(...T.querySelectorAll(pe(p.bulletClass)))}),p.type!=="custom"&&s("paginationRender",v[0])}function m(){e.params.pagination=ur(e,e.originalParams.pagination,e.params.pagination,{el:"swiper-pagination"});const p=e.params.pagination;if(!p.el)return;let b;typeof p.el=="string"&&e.isElement&&(b=e.el.querySelector(p.el)),!b&&typeof p.el=="string"&&(b=[...document.querySelectorAll(p.el)]),b||(b=p.el),!(!b||b.length===0)&&(e.params.uniqueNavElements&&typeof p.el=="string"&&Array.isArray(b)&&b.length>1&&(b=[...e.el.querySelectorAll(p.el)],b.length>1&&(b=b.filter(v=>De(v,".swiper")[0]===e.el)[0])),Array.isArray(b)&&b.length===1&&(b=b[0]),Object.assign(e.pagination,{el:b}),b=H(b),b.forEach(v=>{p.type==="bullets"&&p.clickable&&v.classList.add(...(p.clickableClass||"").split(" ")),v.classList.add(p.modifierClass+p.type),v.classList.add(e.isHorizontal()?p.horizontalClass:p.verticalClass),p.type==="bullets"&&p.dynamicBullets&&(v.classList.add(`${p.modifierClass}${p.type}-dynamic`),o=0,p.dynamicMainBullets<1&&(p.dynamicMainBullets=1)),p.type==="progressbar"&&p.progressbarOpposite&&v.classList.add(p.progressbarOppositeClass),p.clickable&&v.addEventListener("click",d),e.enabled||v.classList.add(p.lockClass)}))}function g(){const p=e.params.pagination;if(l())return;let b=e.pagination.el;b&&(b=H(b),b.forEach(v=>{v.classList.remove(p.hiddenClass),v.classList.remove(p.modifierClass+p.type),v.classList.remove(e.isHorizontal()?p.horizontalClass:p.verticalClass),p.clickable&&(v.classList.remove(...(p.clickableClass||"").split(" ")),v.removeEventListener("click",d))})),e.pagination.bullets&&e.pagination.bullets.forEach(v=>v.classList.remove(...p.bulletActiveClass.split(" ")))}r("changeDirection",()=>{if(!e.pagination||!e.pagination.el)return;const p=e.params.pagination;let{el:b}=e.pagination;b=H(b),b.forEach(v=>{v.classList.remove(p.horizontalClass,p.verticalClass),v.classList.add(e.isHorizontal()?p.horizontalClass:p.verticalClass)})}),r("init",()=>{e.params.pagination.enabled===!1?h():(m(),f(),c())}),r("activeIndexChange",()=>{typeof e.snapIndex>"u"&&c()}),r("snapIndexChange",()=>{c()}),r("snapGridLengthChange",()=>{f(),c()}),r("destroy",()=>{g()}),r("enable disable",()=>{let{el:p}=e.pagination;p&&(p=H(p),p.forEach(b=>b.classList[e.enabled?"remove":"add"](e.params.pagination.lockClass)))}),r("lock unlock",()=>{c()}),r("click",(p,b)=>{const v=b.target,y=H(e.pagination.el);if(e.params.pagination.el&&e.params.pagination.hideOnClick&&y&&y.length>0&&!v.classList.contains(e.params.pagination.bulletClass)){if(e.navigation&&(e.navigation.nextEl&&v===e.navigation.nextEl||e.navigation.prevEl&&v===e.navigation.prevEl))return;const T=y[0].classList.contains(e.params.pagination.hiddenClass);s(T===!0?"paginationShow":"paginationHide"),y.forEach(x=>x.classList.toggle(e.params.pagination.hiddenClass))}});const w=()=>{e.el.classList.remove(e.params.pagination.paginationDisabledClass);let{el:p}=e.pagination;p&&(p=H(p),p.forEach(b=>b.classList.remove(e.params.pagination.paginationDisabledClass))),m(),f(),c()},h=()=>{e.el.classList.add(e.params.pagination.paginationDisabledClass);let{el:p}=e.pagination;p&&(p=H(p),p.forEach(b=>b.classList.add(e.params.pagination.paginationDisabledClass))),g()};Object.assign(e.pagination,{enable:w,disable:h,render:f,update:c,init:m,destroy:g})}function uc(t){let{swiper:e,extendParams:i,on:r,emit:s}=t;const n=K();let a=!1,o=null,l=null,u,d,c,f;i({scrollbar:{el:null,dragSize:"auto",hide:!1,draggable:!1,snapOnRelease:!0,lockClass:"swiper-scrollbar-lock",dragClass:"swiper-scrollbar-drag",scrollbarDisabledClass:"swiper-scrollbar-disabled",horizontalClass:"swiper-scrollbar-horizontal",verticalClass:"swiper-scrollbar-vertical"}}),e.scrollbar={el:null,dragEl:null};function m(){if(!e.params.scrollbar.el||!e.scrollbar.el)return;const{scrollbar:E,rtlTranslate:_}=e,{dragEl:P,el:D}=E,k=e.params.scrollbar,L=e.params.loop?e.progressLoop:e.progress;let I=d,R=(c-d)*L;_?(R=-R,R>0?(I=d-R,R=0):-R+d>c&&(I=c+R)):R<0?(I=d+R,R=0):R+d>c&&(I=c-R),e.isHorizontal()?(P.style.transform=`translate3d(${R}px, 0, 0)`,P.style.width=`${I}px`):(P.style.transform=`translate3d(0px, ${R}px, 0)`,P.style.height=`${I}px`),k.hide&&(clearTimeout(o),D.style.opacity=1,o=setTimeout(()=>{D.style.opacity=0,D.style.transitionDuration="400ms"},1e3))}function g(E){!e.params.scrollbar.el||!e.scrollbar.el||(e.scrollbar.dragEl.style.transitionDuration=`${E}ms`)}function w(){if(!e.params.scrollbar.el||!e.scrollbar.el)return;const{scrollbar:E}=e,{dragEl:_,el:P}=E;_.style.width="",_.style.height="",c=e.isHorizontal()?P.offsetWidth:P.offsetHeight,f=e.size/(e.virtualSize+e.params.slidesOffsetBefore-(e.params.centeredSlides?e.snapGrid[0]:0)),e.params.scrollbar.dragSize==="auto"?d=c*f:d=parseInt(e.params.scrollbar.dragSize,10),e.isHorizontal()?_.style.width=`${d}px`:_.style.height=`${d}px`,f>=1?P.style.display="none":P.style.display="",e.params.scrollbar.hide&&(P.style.opacity=0),e.params.watchOverflow&&e.enabled&&E.el.classList[e.isLocked?"add":"remove"](e.params.scrollbar.lockClass)}function h(E){return e.isHorizontal()?E.clientX:E.clientY}function p(E){const{scrollbar:_,rtlTranslate:P}=e,{el:D}=_;let k;k=(h(E)-Nt(D)[e.isHorizontal()?"left":"top"]-(u!==null?u:d/2))/(c-d),k=Math.max(Math.min(k,1),0),P&&(k=1-k);const L=e.minTranslate()+(e.maxTranslate()-e.minTranslate())*k;e.updateProgress(L),e.setTranslate(L),e.updateActiveIndex(),e.updateSlidesClasses()}function b(E){const _=e.params.scrollbar,{scrollbar:P,wrapperEl:D}=e,{el:k,dragEl:L}=P;a=!0,u=E.target===L?h(E)-E.target.getBoundingClientRect()[e.isHorizontal()?"left":"top"]:null,E.preventDefault(),E.stopPropagation(),D.style.transitionDuration="100ms",L.style.transitionDuration="100ms",p(E),clearTimeout(l),k.style.transitionDuration="0ms",_.hide&&(k.style.opacity=1),e.params.cssMode&&(e.wrapperEl.style["scroll-snap-type"]="none"),s("scrollbarDragStart",E)}function v(E){const{scrollbar:_,wrapperEl:P}=e,{el:D,dragEl:k}=_;a&&(E.preventDefault&&E.cancelable?E.preventDefault():E.returnValue=!1,p(E),P.style.transitionDuration="0ms",D.style.transitionDuration="0ms",k.style.transitionDuration="0ms",s("scrollbarDragMove",E))}function y(E){const _=e.params.scrollbar,{scrollbar:P,wrapperEl:D}=e,{el:k}=P;a&&(a=!1,e.params.cssMode&&(e.wrapperEl.style["scroll-snap-type"]="",D.style.transitionDuration=""),_.hide&&(clearTimeout(l),l=ze(()=>{k.style.opacity=0,k.style.transitionDuration="400ms"},1e3)),s("scrollbarDragEnd",E),_.snapOnRelease&&e.slideToClosest())}function T(E){const{scrollbar:_,params:P}=e,D=_.el;if(!D)return;const k=D,L=P.passiveListeners?{passive:!1,capture:!1}:!1,I=P.passiveListeners?{passive:!0,capture:!1}:!1;if(!k)return;const R=E==="on"?"addEventListener":"removeEventListener";k[R]("pointerdown",b,L),n[R]("pointermove",v,L),n[R]("pointerup",y,I)}function x(){!e.params.scrollbar.el||!e.scrollbar.el||T("on")}function M(){!e.params.scrollbar.el||!e.scrollbar.el||T("off")}function S(){const{scrollbar:E,el:_}=e;e.params.scrollbar=ur(e,e.originalParams.scrollbar,e.params.scrollbar,{el:"swiper-scrollbar"});const P=e.params.scrollbar;if(!P.el)return;let D;if(typeof P.el=="string"&&e.isElement&&(D=e.el.querySelector(P.el)),!D&&typeof P.el=="string"){if(D=n.querySelectorAll(P.el),!D.length)return}else D||(D=P.el);e.params.uniqueNavElements&&typeof P.el=="string"&&D.length>1&&_.querySelectorAll(P.el).length===1&&(D=_.querySelector(P.el)),D.length>0&&(D=D[0]),D.classList.add(e.isHorizontal()?P.horizontalClass:P.verticalClass);let k;D&&(k=D.querySelector(pe(e.params.scrollbar.dragClass)),k||(k=ie("div",e.params.scrollbar.dragClass),D.append(k))),Object.assign(E,{el:D,dragEl:k}),P.draggable&&x(),D&&D.classList[e.enabled?"remove":"add"](...we(e.params.scrollbar.lockClass))}function A(){const E=e.params.scrollbar,_=e.scrollbar.el;_&&_.classList.remove(...we(e.isHorizontal()?E.horizontalClass:E.verticalClass)),M()}r("changeDirection",()=>{if(!e.scrollbar||!e.scrollbar.el)return;const E=e.params.scrollbar;let{el:_}=e.scrollbar;_=H(_),_.forEach(P=>{P.classList.remove(E.horizontalClass,E.verticalClass),P.classList.add(e.isHorizontal()?E.horizontalClass:E.verticalClass)})}),r("init",()=>{e.params.scrollbar.enabled===!1?O():(S(),w(),m())}),r("update resize observerUpdate lock unlock changeDirection",()=>{w()}),r("setTranslate",()=>{m()}),r("setTransition",(E,_)=>{g(_)}),r("enable disable",()=>{const{el:E}=e.scrollbar;E&&E.classList[e.enabled?"remove":"add"](...we(e.params.scrollbar.lockClass))}),r("destroy",()=>{A()});const C=()=>{e.el.classList.remove(...we(e.params.scrollbar.scrollbarDisabledClass)),e.scrollbar.el&&e.scrollbar.el.classList.remove(...we(e.params.scrollbar.scrollbarDisabledClass)),S(),w(),m()},O=()=>{e.el.classList.add(...we(e.params.scrollbar.scrollbarDisabledClass)),e.scrollbar.el&&e.scrollbar.el.classList.add(...we(e.params.scrollbar.scrollbarDisabledClass)),A()};Object.assign(e.scrollbar,{enable:C,disable:O,updateSize:w,setTranslate:m,init:S,destroy:A})}function fc(t){let{swiper:e,extendParams:i,on:r}=t;i({parallax:{enabled:!1}});const s="[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y], [data-swiper-parallax-opacity], [data-swiper-parallax-scale]",n=(l,u)=>{const{rtl:d}=e,c=d?-1:1,f=l.getAttribute("data-swiper-parallax")||"0";let m=l.getAttribute("data-swiper-parallax-x"),g=l.getAttribute("data-swiper-parallax-y");const w=l.getAttribute("data-swiper-parallax-scale"),h=l.getAttribute("data-swiper-parallax-opacity"),p=l.getAttribute("data-swiper-parallax-rotate");if(m||g?(m=m||"0",g=g||"0"):e.isHorizontal()?(m=f,g="0"):(g=f,m="0"),m.indexOf("%")>=0?m=`${parseInt(m,10)*u*c}%`:m=`${m*u*c}px`,g.indexOf("%")>=0?g=`${parseInt(g,10)*u}%`:g=`${g*u}px`,typeof h<"u"&&h!==null){const v=h-(h-1)*(1-Math.abs(u));l.style.opacity=v}let b=`translate3d(${m}, ${g}, 0px)`;if(typeof w<"u"&&w!==null){const v=w-(w-1)*(1-Math.abs(u));b+=` scale(${v})`}if(p&&typeof p<"u"&&p!==null){const v=p*u*-1;b+=` rotate(${v}deg)`}l.style.transform=b},a=()=>{const{el:l,slides:u,progress:d,snapGrid:c,isElement:f}=e,m=U(l,s);e.isElement&&m.push(...U(e.hostEl,s)),m.forEach(g=>{n(g,d)}),u.forEach((g,w)=>{let h=g.progress;e.params.slidesPerGroup>1&&e.params.slidesPerView!=="auto"&&(h+=Math.ceil(w/2)-d*(c.length-1)),h=Math.min(Math.max(h,-1),1),g.querySelectorAll(`${s}, [data-swiper-parallax-rotate]`).forEach(p=>{n(p,h)})})},o=function(l){l===void 0&&(l=e.params.speed);const{el:u,hostEl:d}=e,c=[...u.querySelectorAll(s)];e.isElement&&c.push(...d.querySelectorAll(s)),c.forEach(f=>{let m=parseInt(f.getAttribute("data-swiper-parallax-duration"),10)||l;l===0&&(m=0),f.style.transitionDuration=`${m}ms`})};r("beforeInit",()=>{e.params.parallax.enabled&&(e.params.watchSlidesProgress=!0,e.originalParams.watchSlidesProgress=!0)}),r("init",()=>{e.params.parallax.enabled&&a()}),r("setTranslate",()=>{e.params.parallax.enabled&&a()}),r("setTransition",(l,u)=>{e.params.parallax.enabled&&o(u)})}function pc(t){let{swiper:e,extendParams:i,on:r,emit:s}=t;const n=q();i({zoom:{enabled:!1,limitToOriginalSize:!1,maxRatio:3,minRatio:1,toggle:!0,containerClass:"swiper-zoom-container",zoomedSlideClass:"swiper-slide-zoomed"}}),e.zoom={enabled:!1};let a=1,o=!1,l,u;const d=[],c={originX:0,originY:0,slideEl:void 0,slideWidth:void 0,slideHeight:void 0,imageEl:void 0,imageWrapEl:void 0,maxRatio:3},f={isTouched:void 0,isMoved:void 0,currentX:void 0,currentY:void 0,minX:void 0,minY:void 0,maxX:void 0,maxY:void 0,width:void 0,height:void 0,startX:void 0,startY:void 0,touchesStart:{},touchesCurrent:{}},m={x:void 0,y:void 0,prevPositionX:void 0,prevPositionY:void 0,prevTime:void 0};let g=1;Object.defineProperty(e.zoom,"scale",{get(){return g},set($){if(g!==$){const z=c.imageEl,F=c.slideEl;s("zoomChange",$,z,F)}g=$}});function w(){if(d.length<2)return 1;const $=d[0].pageX,z=d[0].pageY,F=d[1].pageX,j=d[1].pageY;return Math.sqrt((F-$)**2+(j-z)**2)}function h(){const $=e.params.zoom,z=c.imageWrapEl.getAttribute("data-swiper-zoom")||$.maxRatio;if($.limitToOriginalSize&&c.imageEl&&c.imageEl.naturalWidth){const F=c.imageEl.naturalWidth/c.imageEl.offsetWidth;return Math.min(F,z)}return z}function p(){if(d.length<2)return{x:null,y:null};const $=c.imageEl.getBoundingClientRect();return[(d[0].pageX+(d[1].pageX-d[0].pageX)/2-$.x-n.scrollX)/a,(d[0].pageY+(d[1].pageY-d[0].pageY)/2-$.y-n.scrollY)/a]}function b(){return e.isElement?"swiper-slide":`.${e.params.slideClass}`}function v($){const z=b();return!!($.target.matches(z)||e.slides.filter(F=>F.contains($.target)).length>0)}function y($){const z=`.${e.params.zoom.containerClass}`;return!!($.target.matches(z)||[...e.hostEl.querySelectorAll(z)].filter(F=>F.contains($.target)).length>0)}function T($){if($.pointerType==="mouse"&&d.splice(0,d.length),!v($))return;const z=e.params.zoom;if(l=!1,u=!1,d.push($),!(d.length<2)){if(l=!0,c.scaleStart=w(),!c.slideEl){c.slideEl=$.target.closest(`.${e.params.slideClass}, swiper-slide`),c.slideEl||(c.slideEl=e.slides[e.activeIndex]);let F=c.slideEl.querySelector(`.${z.containerClass}`);if(F&&(F=F.querySelectorAll("picture, img, svg, canvas, .swiper-zoom-target")[0]),c.imageEl=F,F?c.imageWrapEl=De(c.imageEl,`.${z.containerClass}`)[0]:c.imageWrapEl=void 0,!c.imageWrapEl){c.imageEl=void 0;return}c.maxRatio=h()}if(c.imageEl){const[F,j]=p();c.originX=F,c.originY=j,c.imageEl.style.transitionDuration="0ms"}o=!0}}function x($){if(!v($))return;const z=e.params.zoom,F=e.zoom,j=d.findIndex(N=>N.pointerId===$.pointerId);j>=0&&(d[j]=$),!(d.length<2)&&(u=!0,c.scaleMove=w(),c.imageEl&&(F.scale=c.scaleMove/c.scaleStart*a,F.scale>c.maxRatio&&(F.scale=c.maxRatio-1+(F.scale-c.maxRatio+1)**.5),F.scale<z.minRatio&&(F.scale=z.minRatio+1-(z.minRatio-F.scale+1)**.5),c.imageEl.style.transform=`translate3d(0,0,0) scale(${F.scale})`))}function M($){if(!v($)||$.pointerType==="mouse"&&$.type==="pointerout")return;const z=e.params.zoom,F=e.zoom,j=d.findIndex(N=>N.pointerId===$.pointerId);j>=0&&d.splice(j,1),!(!l||!u)&&(l=!1,u=!1,c.imageEl&&(F.scale=Math.max(Math.min(F.scale,c.maxRatio),z.minRatio),c.imageEl.style.transitionDuration=`${e.params.speed}ms`,c.imageEl.style.transform=`translate3d(0,0,0) scale(${F.scale})`,a=F.scale,o=!1,F.scale>1&&c.slideEl?c.slideEl.classList.add(`${z.zoomedSlideClass}`):F.scale<=1&&c.slideEl&&c.slideEl.classList.remove(`${z.zoomedSlideClass}`),F.scale===1&&(c.originX=0,c.originY=0,c.slideEl=void 0)))}let S;function A(){e.touchEventsData.preventTouchMoveFromPointerMove=!1}function C(){clearTimeout(S),e.touchEventsData.preventTouchMoveFromPointerMove=!0,S=setTimeout(()=>{A()})}function O($){const z=e.device;if(!c.imageEl||f.isTouched)return;z.android&&$.cancelable&&$.preventDefault(),f.isTouched=!0;const F=d.length>0?d[0]:$;f.touchesStart.x=F.pageX,f.touchesStart.y=F.pageY}function E($){if(!v($)||!y($))return;const z=e.zoom;if(!c.imageEl||!f.isTouched||!c.slideEl)return;f.isMoved||(f.width=c.imageEl.offsetWidth||c.imageEl.clientWidth,f.height=c.imageEl.offsetHeight||c.imageEl.clientHeight,f.startX=Fi(c.imageWrapEl,"x")||0,f.startY=Fi(c.imageWrapEl,"y")||0,c.slideWidth=c.slideEl.offsetWidth,c.slideHeight=c.slideEl.offsetHeight,c.imageWrapEl.style.transitionDuration="0ms");const F=f.width*z.scale,j=f.height*z.scale;if(F<c.slideWidth&&j<c.slideHeight){A();return}if(f.minX=Math.min(c.slideWidth/2-F/2,0),f.maxX=-f.minX,f.minY=Math.min(c.slideHeight/2-j/2,0),f.maxY=-f.minY,f.touchesCurrent.x=d.length>0?d[0].pageX:$.pageX,f.touchesCurrent.y=d.length>0?d[0].pageY:$.pageY,Math.max(Math.abs(f.touchesCurrent.x-f.touchesStart.x),Math.abs(f.touchesCurrent.y-f.touchesStart.y))>5&&(e.allowClick=!1),!f.isMoved&&!o){if(e.isHorizontal()&&(Math.floor(f.minX)===Math.floor(f.startX)&&f.touchesCurrent.x<f.touchesStart.x||Math.floor(f.maxX)===Math.floor(f.startX)&&f.touchesCurrent.x>f.touchesStart.x)){f.isTouched=!1,A();return}if(!e.isHorizontal()&&(Math.floor(f.minY)===Math.floor(f.startY)&&f.touchesCurrent.y<f.touchesStart.y||Math.floor(f.maxY)===Math.floor(f.startY)&&f.touchesCurrent.y>f.touchesStart.y)){f.isTouched=!1,A();return}}$.cancelable&&$.preventDefault(),$.stopPropagation(),C(),f.isMoved=!0;const V=(z.scale-a)/(c.maxRatio-e.params.zoom.minRatio),{originX:J,originY:He}=c;f.currentX=f.touchesCurrent.x-f.touchesStart.x+f.startX+V*(f.width-J*2),f.currentY=f.touchesCurrent.y-f.touchesStart.y+f.startY+V*(f.height-He*2),f.currentX<f.minX&&(f.currentX=f.minX+1-(f.minX-f.currentX+1)**.8),f.currentX>f.maxX&&(f.currentX=f.maxX-1+(f.currentX-f.maxX+1)**.8),f.currentY<f.minY&&(f.currentY=f.minY+1-(f.minY-f.currentY+1)**.8),f.currentY>f.maxY&&(f.currentY=f.maxY-1+(f.currentY-f.maxY+1)**.8),m.prevPositionX||(m.prevPositionX=f.touchesCurrent.x),m.prevPositionY||(m.prevPositionY=f.touchesCurrent.y),m.prevTime||(m.prevTime=Date.now()),m.x=(f.touchesCurrent.x-m.prevPositionX)/(Date.now()-m.prevTime)/2,m.y=(f.touchesCurrent.y-m.prevPositionY)/(Date.now()-m.prevTime)/2,Math.abs(f.touchesCurrent.x-m.prevPositionX)<2&&(m.x=0),Math.abs(f.touchesCurrent.y-m.prevPositionY)<2&&(m.y=0),m.prevPositionX=f.touchesCurrent.x,m.prevPositionY=f.touchesCurrent.y,m.prevTime=Date.now(),c.imageWrapEl.style.transform=`translate3d(${f.currentX}px, ${f.currentY}px,0)`}function _(){const $=e.zoom;if(!c.imageEl)return;if(!f.isTouched||!f.isMoved){f.isTouched=!1,f.isMoved=!1;return}f.isTouched=!1,f.isMoved=!1;let z=300,F=300;const j=m.x*z,N=f.currentX+j,V=m.y*F,J=f.currentY+V;m.x!==0&&(z=Math.abs((N-f.currentX)/m.x)),m.y!==0&&(F=Math.abs((J-f.currentY)/m.y));const He=Math.max(z,F);f.currentX=N,f.currentY=J;const bt=f.width*$.scale,fe=f.height*$.scale;f.minX=Math.min(c.slideWidth/2-bt/2,0),f.maxX=-f.minX,f.minY=Math.min(c.slideHeight/2-fe/2,0),f.maxY=-f.minY,f.currentX=Math.max(Math.min(f.currentX,f.maxX),f.minX),f.currentY=Math.max(Math.min(f.currentY,f.maxY),f.minY),c.imageWrapEl.style.transitionDuration=`${He}ms`,c.imageWrapEl.style.transform=`translate3d(${f.currentX}px, ${f.currentY}px,0)`}function P(){const $=e.zoom;c.slideEl&&e.activeIndex!==e.slides.indexOf(c.slideEl)&&(c.imageEl&&(c.imageEl.style.transform="translate3d(0,0,0) scale(1)"),c.imageWrapEl&&(c.imageWrapEl.style.transform="translate3d(0,0,0)"),c.slideEl.classList.remove(`${e.params.zoom.zoomedSlideClass}`),$.scale=1,a=1,c.slideEl=void 0,c.imageEl=void 0,c.imageWrapEl=void 0,c.originX=0,c.originY=0)}function D($){const z=e.zoom,F=e.params.zoom;if(!c.slideEl){$&&$.target&&(c.slideEl=$.target.closest(`.${e.params.slideClass}, swiper-slide`)),c.slideEl||(e.params.virtual&&e.params.virtual.enabled&&e.virtual?c.slideEl=U(e.slidesEl,`.${e.params.slideActiveClass}`)[0]:c.slideEl=e.slides[e.activeIndex]);let Qe=c.slideEl.querySelector(`.${F.containerClass}`);Qe&&(Qe=Qe.querySelectorAll("picture, img, svg, canvas, .swiper-zoom-target")[0]),c.imageEl=Qe,Qe?c.imageWrapEl=De(c.imageEl,`.${F.containerClass}`)[0]:c.imageWrapEl=void 0}if(!c.imageEl||!c.imageWrapEl)return;e.params.cssMode&&(e.wrapperEl.style.overflow="hidden",e.wrapperEl.style.touchAction="none"),c.slideEl.classList.add(`${F.zoomedSlideClass}`);let j,N,V,J,He,bt,fe,Ce,hr,gr,vr,wr,yt,xt,si,ai,oi,li;typeof f.touchesStart.x>"u"&&$?(j=$.pageX,N=$.pageY):(j=f.touchesStart.x,N=f.touchesStart.y);const Ze=typeof $=="number"?$:null;a===1&&Ze&&(j=void 0,N=void 0);const br=h();z.scale=Ze||br,a=Ze||br,$&&!(a===1&&Ze)?(oi=c.slideEl.offsetWidth,li=c.slideEl.offsetHeight,V=Nt(c.slideEl).left+n.scrollX,J=Nt(c.slideEl).top+n.scrollY,He=V+oi/2-j,bt=J+li/2-N,hr=c.imageEl.offsetWidth||c.imageEl.clientWidth,gr=c.imageEl.offsetHeight||c.imageEl.clientHeight,vr=hr*z.scale,wr=gr*z.scale,yt=Math.min(oi/2-vr/2,0),xt=Math.min(li/2-wr/2,0),si=-yt,ai=-xt,fe=He*z.scale,Ce=bt*z.scale,fe<yt&&(fe=yt),fe>si&&(fe=si),Ce<xt&&(Ce=xt),Ce>ai&&(Ce=ai)):(fe=0,Ce=0),Ze&&z.scale===1&&(c.originX=0,c.originY=0),c.imageWrapEl.style.transitionDuration="300ms",c.imageWrapEl.style.transform=`translate3d(${fe}px, ${Ce}px,0)`,c.imageEl.style.transitionDuration="300ms",c.imageEl.style.transform=`translate3d(0,0,0) scale(${z.scale})`}function k(){const $=e.zoom,z=e.params.zoom;if(!c.slideEl){e.params.virtual&&e.params.virtual.enabled&&e.virtual?c.slideEl=U(e.slidesEl,`.${e.params.slideActiveClass}`)[0]:c.slideEl=e.slides[e.activeIndex];let F=c.slideEl.querySelector(`.${z.containerClass}`);F&&(F=F.querySelectorAll("picture, img, svg, canvas, .swiper-zoom-target")[0]),c.imageEl=F,F?c.imageWrapEl=De(c.imageEl,`.${z.containerClass}`)[0]:c.imageWrapEl=void 0}!c.imageEl||!c.imageWrapEl||(e.params.cssMode&&(e.wrapperEl.style.overflow="",e.wrapperEl.style.touchAction=""),$.scale=1,a=1,c.imageWrapEl.style.transitionDuration="300ms",c.imageWrapEl.style.transform="translate3d(0,0,0)",c.imageEl.style.transitionDuration="300ms",c.imageEl.style.transform="translate3d(0,0,0) scale(1)",c.slideEl.classList.remove(`${z.zoomedSlideClass}`),c.slideEl=void 0,c.originX=0,c.originY=0)}function L($){const z=e.zoom;z.scale&&z.scale!==1?k():D($)}function I(){const $=e.params.passiveListeners?{passive:!0,capture:!1}:!1,z=e.params.passiveListeners?{passive:!1,capture:!0}:!0;return{passiveListener:$,activeListenerWithCapture:z}}function R(){const $=e.zoom;if($.enabled)return;$.enabled=!0;const{passiveListener:z,activeListenerWithCapture:F}=I();e.wrapperEl.addEventListener("pointerdown",T,z),e.wrapperEl.addEventListener("pointermove",x,F),["pointerup","pointercancel","pointerout"].forEach(j=>{e.wrapperEl.addEventListener(j,M,z)}),e.wrapperEl.addEventListener("pointermove",E,F)}function B(){const $=e.zoom;if(!$.enabled)return;$.enabled=!1;const{passiveListener:z,activeListenerWithCapture:F}=I();e.wrapperEl.removeEventListener("pointerdown",T,z),e.wrapperEl.removeEventListener("pointermove",x,F),["pointerup","pointercancel","pointerout"].forEach(j=>{e.wrapperEl.removeEventListener(j,M,z)}),e.wrapperEl.removeEventListener("pointermove",E,F)}r("init",()=>{e.params.zoom.enabled&&R()}),r("destroy",()=>{B()}),r("touchStart",($,z)=>{e.zoom.enabled&&O(z)}),r("touchEnd",($,z)=>{e.zoom.enabled&&_()}),r("doubleTap",($,z)=>{!e.animating&&e.params.zoom.enabled&&e.zoom.enabled&&e.params.zoom.toggle&&L(z)}),r("transitionEnd",()=>{e.zoom.enabled&&e.params.zoom.enabled&&P()}),r("slideChange",()=>{e.zoom.enabled&&e.params.zoom.enabled&&e.params.cssMode&&P()}),Object.assign(e.zoom,{enable:R,disable:B,in:D,out:k,toggle:L})}function mc(t){let{swiper:e,extendParams:i,on:r}=t;i({controller:{control:void 0,inverse:!1,by:"slide"}}),e.controller={control:void 0};function s(u,d){const c=function(){let w,h,p;return(b,v)=>{for(h=-1,w=b.length;w-h>1;)p=w+h>>1,b[p]<=v?h=p:w=p;return w}}();this.x=u,this.y=d,this.lastIndex=u.length-1;let f,m;return this.interpolate=function(w){return w?(m=c(this.x,w),f=m-1,(w-this.x[f])*(this.y[m]-this.y[f])/(this.x[m]-this.x[f])+this.y[f]):0},this}function n(u){e.controller.spline=e.params.loop?new s(e.slidesGrid,u.slidesGrid):new s(e.snapGrid,u.snapGrid)}function a(u,d){const c=e.controller.control;let f,m;const g=e.constructor;function w(h){if(h.destroyed)return;const p=e.rtlTranslate?-e.translate:e.translate;e.params.controller.by==="slide"&&(n(h),m=-e.controller.spline.interpolate(-p)),(!m||e.params.controller.by==="container")&&(f=(h.maxTranslate()-h.minTranslate())/(e.maxTranslate()-e.minTranslate()),(Number.isNaN(f)||!Number.isFinite(f))&&(f=1),m=(p-e.minTranslate())*f+h.minTranslate()),e.params.controller.inverse&&(m=h.maxTranslate()-m),h.updateProgress(m),h.setTranslate(m,e),h.updateActiveIndex(),h.updateSlidesClasses()}if(Array.isArray(c))for(let h=0;h<c.length;h+=1)c[h]!==d&&c[h]instanceof g&&w(c[h]);else c instanceof g&&d!==c&&w(c)}function o(u,d){const c=e.constructor,f=e.controller.control;let m;function g(w){w.destroyed||(w.setTransition(u,e),u!==0&&(w.transitionStart(),w.params.autoHeight&&ze(()=>{w.updateAutoHeight()}),ct(w.wrapperEl,()=>{f&&w.transitionEnd()})))}if(Array.isArray(f))for(m=0;m<f.length;m+=1)f[m]!==d&&f[m]instanceof c&&g(f[m]);else f instanceof c&&d!==f&&g(f)}function l(){e.controller.control&&e.controller.spline&&(e.controller.spline=void 0,delete e.controller.spline)}r("beforeInit",()=>{if(typeof window<"u"&&(typeof e.params.controller.control=="string"||e.params.controller.control instanceof HTMLElement)){const u=document.querySelector(e.params.controller.control);if(u&&u.swiper)e.controller.control=u.swiper;else if(u){const d=c=>{e.controller.control=c.detail[0],e.update(),u.removeEventListener("init",d)};u.addEventListener("init",d)}return}e.controller.control=e.params.controller.control}),r("update",()=>{l()}),r("resize",()=>{l()}),r("observerUpdate",()=>{l()}),r("setTranslate",(u,d,c)=>{!e.controller.control||e.controller.control.destroyed||e.controller.setTranslate(d,c)}),r("setTransition",(u,d,c)=>{!e.controller.control||e.controller.control.destroyed||e.controller.setTransition(d,c)}),Object.assign(e.controller,{setTranslate:a,setTransition:o})}function hc(t){let{swiper:e,extendParams:i,on:r}=t;i({a11y:{enabled:!0,notificationClass:"swiper-notification",prevSlideMessage:"Previous slide",nextSlideMessage:"Next slide",firstSlideMessage:"This is the first slide",lastSlideMessage:"This is the last slide",paginationBulletMessage:"Go to slide {{index}}",slideLabelMessage:"{{index}} / {{slidesLength}}",containerMessage:null,containerRoleDescriptionMessage:null,itemRoleDescriptionMessage:null,slideRole:"group",id:null}}),e.a11y={clicked:!1};let s=null,n,a,o=new Date().getTime();function l(L){const I=s;I.length!==0&&(I.innerHTML="",I.innerHTML=L)}function u(L){const I=()=>Math.round(16*Math.random()).toString(16);return"x".repeat(L).replace(/x/g,I)}function d(L){L=H(L),L.forEach(I=>{I.setAttribute("tabIndex","0")})}function c(L){L=H(L),L.forEach(I=>{I.setAttribute("tabIndex","-1")})}function f(L,I){L=H(L),L.forEach(R=>{R.setAttribute("role",I)})}function m(L,I){L=H(L),L.forEach(R=>{R.setAttribute("aria-roledescription",I)})}function g(L,I){L=H(L),L.forEach(R=>{R.setAttribute("aria-controls",I)})}function w(L,I){L=H(L),L.forEach(R=>{R.setAttribute("aria-label",I)})}function h(L,I){L=H(L),L.forEach(R=>{R.setAttribute("id",I)})}function p(L,I){L=H(L),L.forEach(R=>{R.setAttribute("aria-live",I)})}function b(L){L=H(L),L.forEach(I=>{I.setAttribute("aria-disabled",!0)})}function v(L){L=H(L),L.forEach(I=>{I.setAttribute("aria-disabled",!1)})}function y(L){if(L.keyCode!==13&&L.keyCode!==32)return;const I=e.params.a11y,R=L.target;if(!(e.pagination&&e.pagination.el&&(R===e.pagination.el||e.pagination.el.contains(L.target))&&!L.target.matches(pe(e.params.pagination.bulletClass)))){if(e.navigation&&e.navigation.prevEl&&e.navigation.nextEl){const B=H(e.navigation.prevEl);H(e.navigation.nextEl).includes(R)&&(e.isEnd&&!e.params.loop||e.slideNext(),e.isEnd?l(I.lastSlideMessage):l(I.nextSlideMessage)),B.includes(R)&&(e.isBeginning&&!e.params.loop||e.slidePrev(),e.isBeginning?l(I.firstSlideMessage):l(I.prevSlideMessage))}e.pagination&&R.matches(pe(e.params.pagination.bulletClass))&&R.click()}}function T(){if(e.params.loop||e.params.rewind||!e.navigation)return;const{nextEl:L,prevEl:I}=e.navigation;I&&(e.isBeginning?(b(I),c(I)):(v(I),d(I))),L&&(e.isEnd?(b(L),c(L)):(v(L),d(L)))}function x(){return e.pagination&&e.pagination.bullets&&e.pagination.bullets.length}function M(){return x()&&e.params.pagination.clickable}function S(){const L=e.params.a11y;x()&&e.pagination.bullets.forEach(I=>{e.params.pagination.clickable&&(d(I),e.params.pagination.renderBullet||(f(I,"button"),w(I,L.paginationBulletMessage.replace(/\{\{index\}\}/,ut(I)+1)))),I.matches(pe(e.params.pagination.bulletActiveClass))?I.setAttribute("aria-current","true"):I.removeAttribute("aria-current")})}const A=(L,I,R)=>{d(L),L.tagName!=="BUTTON"&&(f(L,"button"),L.addEventListener("keydown",y)),w(L,R),g(L,I)},C=L=>{a&&a!==L.target&&!a.contains(L.target)&&(n=!0),e.a11y.clicked=!0},O=()=>{n=!1,requestAnimationFrame(()=>{requestAnimationFrame(()=>{e.destroyed||(e.a11y.clicked=!1)})})},E=L=>{o=new Date().getTime()},_=L=>{if(e.a11y.clicked||new Date().getTime()-o<100)return;const I=L.target.closest(`.${e.params.slideClass}, swiper-slide`);if(!I||!e.slides.includes(I))return;a=I;const R=e.slides.indexOf(I)===e.activeIndex,B=e.params.watchSlidesProgress&&e.visibleSlides&&e.visibleSlides.includes(I);R||B||L.sourceCapabilities&&L.sourceCapabilities.firesTouchEvents||(e.isHorizontal()?e.el.scrollLeft=0:e.el.scrollTop=0,requestAnimationFrame(()=>{n||(e.slideTo(e.slides.indexOf(I),0),n=!1)}))},P=()=>{const L=e.params.a11y;L.itemRoleDescriptionMessage&&m(e.slides,L.itemRoleDescriptionMessage),L.slideRole&&f(e.slides,L.slideRole);const I=e.slides.length;L.slideLabelMessage&&e.slides.forEach((R,B)=>{const $=e.params.loop?parseInt(R.getAttribute("data-swiper-slide-index"),10):B,z=L.slideLabelMessage.replace(/\{\{index\}\}/,$+1).replace(/\{\{slidesLength\}\}/,I);w(R,z)})},D=()=>{const L=e.params.a11y;e.el.append(s);const I=e.el;L.containerRoleDescriptionMessage&&m(I,L.containerRoleDescriptionMessage),L.containerMessage&&w(I,L.containerMessage);const R=e.wrapperEl,B=L.id||R.getAttribute("id")||`swiper-wrapper-${u(16)}`,$=e.params.autoplay&&e.params.autoplay.enabled?"off":"polite";h(R,B),p(R,$),P();let{nextEl:z,prevEl:F}=e.navigation?e.navigation:{};z=H(z),F=H(F),z&&z.forEach(N=>A(N,B,L.nextSlideMessage)),F&&F.forEach(N=>A(N,B,L.prevSlideMessage)),M()&&H(e.pagination.el).forEach(V=>{V.addEventListener("keydown",y)}),K().addEventListener("visibilitychange",E),e.el.addEventListener("focus",_,!0),e.el.addEventListener("focus",_,!0),e.el.addEventListener("pointerdown",C,!0),e.el.addEventListener("pointerup",O,!0)};function k(){s&&s.remove();let{nextEl:L,prevEl:I}=e.navigation?e.navigation:{};L=H(L),I=H(I),L&&L.forEach(B=>B.removeEventListener("keydown",y)),I&&I.forEach(B=>B.removeEventListener("keydown",y)),M()&&H(e.pagination.el).forEach($=>{$.removeEventListener("keydown",y)}),K().removeEventListener("visibilitychange",E),e.el.removeEventListener("focus",_,!0),e.el.removeEventListener("pointerdown",C,!0),e.el.removeEventListener("pointerup",O,!0)}r("beforeInit",()=>{s=ie("span",e.params.a11y.notificationClass),s.setAttribute("aria-live","assertive"),s.setAttribute("aria-atomic","true")}),r("afterInit",()=>{e.params.a11y.enabled&&D()}),r("slidesLengthChange snapGridLengthChange slidesGridLengthChange",()=>{e.params.a11y.enabled&&P()}),r("fromEdge toEdge afterInit lock unlock",()=>{e.params.a11y.enabled&&T()}),r("paginationUpdate",()=>{e.params.a11y.enabled&&S()}),r("destroy",()=>{e.params.a11y.enabled&&k()})}function gc(t){let{swiper:e,extendParams:i,on:r}=t;i({history:{enabled:!1,root:"",replaceState:!1,key:"slides",keepQuery:!1}});let s=!1,n={};const a=m=>m.toString().replace(/\s+/g,"-").replace(/[^\w-]+/g,"").replace(/--+/g,"-").replace(/^-+/,"").replace(/-+$/,""),o=m=>{const g=q();let w;m?w=new URL(m):w=g.location;const h=w.pathname.slice(1).split("/").filter(y=>y!==""),p=h.length,b=h[p-2],v=h[p-1];return{key:b,value:v}},l=(m,g)=>{const w=q();if(!s||!e.params.history.enabled)return;let h;e.params.url?h=new URL(e.params.url):h=w.location;const p=e.virtual&&e.params.virtual.enabled?e.slidesEl.querySelector(`[data-swiper-slide-index="${g}"]`):e.slides[g];let b=a(p.getAttribute("data-history"));if(e.params.history.root.length>0){let y=e.params.history.root;y[y.length-1]==="/"&&(y=y.slice(0,y.length-1)),b=`${y}/${m?`${m}/`:""}${b}`}else h.pathname.includes(m)||(b=`${m?`${m}/`:""}${b}`);e.params.history.keepQuery&&(b+=h.search);const v=w.history.state;v&&v.value===b||(e.params.history.replaceState?w.history.replaceState({value:b},null,b):w.history.pushState({value:b},null,b))},u=(m,g,w)=>{if(g)for(let h=0,p=e.slides.length;h<p;h+=1){const b=e.slides[h];if(a(b.getAttribute("data-history"))===g){const y=e.getSlideIndex(b);e.slideTo(y,m,w)}}else e.slideTo(0,m,w)},d=()=>{n=o(e.params.url),u(e.params.speed,n.value,!1)},c=()=>{const m=q();if(e.params.history){if(!m.history||!m.history.pushState){e.params.history.enabled=!1,e.params.hashNavigation.enabled=!0;return}if(s=!0,n=o(e.params.url),!n.key&&!n.value){e.params.history.replaceState||m.addEventListener("popstate",d);return}u(0,n.value,e.params.runCallbacksOnInit),e.params.history.replaceState||m.addEventListener("popstate",d)}},f=()=>{const m=q();e.params.history.replaceState||m.removeEventListener("popstate",d)};r("init",()=>{e.params.history.enabled&&c()}),r("destroy",()=>{e.params.history.enabled&&f()}),r("transitionEnd _freeModeNoMomentumRelease",()=>{s&&l(e.params.history.key,e.activeIndex)}),r("slideChange",()=>{s&&e.params.cssMode&&l(e.params.history.key,e.activeIndex)})}function vc(t){let{swiper:e,extendParams:i,emit:r,on:s}=t,n=!1;const a=K(),o=q();i({hashNavigation:{enabled:!1,replaceState:!1,watchState:!1,getSlideIndex(f,m){if(e.virtual&&e.params.virtual.enabled){const g=e.slides.filter(h=>h.getAttribute("data-hash")===m)[0];return g?parseInt(g.getAttribute("data-swiper-slide-index"),10):0}return e.getSlideIndex(U(e.slidesEl,`.${e.params.slideClass}[data-hash="${m}"], swiper-slide[data-hash="${m}"]`)[0])}}});const l=()=>{r("hashChange");const f=a.location.hash.replace("#",""),m=e.virtual&&e.params.virtual.enabled?e.slidesEl.querySelector(`[data-swiper-slide-index="${e.activeIndex}"]`):e.slides[e.activeIndex],g=m?m.getAttribute("data-hash"):"";if(f!==g){const w=e.params.hashNavigation.getSlideIndex(e,f);if(typeof w>"u"||Number.isNaN(w))return;e.slideTo(w)}},u=()=>{if(!n||!e.params.hashNavigation.enabled)return;const f=e.virtual&&e.params.virtual.enabled?e.slidesEl.querySelector(`[data-swiper-slide-index="${e.activeIndex}"]`):e.slides[e.activeIndex],m=f?f.getAttribute("data-hash")||f.getAttribute("data-history"):"";e.params.hashNavigation.replaceState&&o.history&&o.history.replaceState?(o.history.replaceState(null,null,`#${m}`||""),r("hashSet")):(a.location.hash=m||"",r("hashSet"))},d=()=>{if(!e.params.hashNavigation.enabled||e.params.history&&e.params.history.enabled)return;n=!0;const f=a.location.hash.replace("#","");if(f){const g=e.params.hashNavigation.getSlideIndex(e,f);e.slideTo(g||0,0,e.params.runCallbacksOnInit,!0)}e.params.hashNavigation.watchState&&o.addEventListener("hashchange",l)},c=()=>{e.params.hashNavigation.watchState&&o.removeEventListener("hashchange",l)};s("init",()=>{e.params.hashNavigation.enabled&&d()}),s("destroy",()=>{e.params.hashNavigation.enabled&&c()}),s("transitionEnd _freeModeNoMomentumRelease",()=>{n&&u()}),s("slideChange",()=>{n&&e.params.cssMode&&u()})}function wc(t){let{swiper:e,extendParams:i,on:r,emit:s,params:n}=t;e.autoplay={running:!1,paused:!1,timeLeft:0},i({autoplay:{enabled:!1,delay:3e3,waitForTransition:!0,disableOnInteraction:!1,stopOnLastSlide:!1,reverseDirection:!1,pauseOnMouseEnter:!1}});let a,o,l=n&&n.autoplay?n.autoplay.delay:3e3,u=n&&n.autoplay?n.autoplay.delay:3e3,d,c=new Date().getTime(),f,m,g,w,h,p,b;function v(I){!e||e.destroyed||!e.wrapperEl||I.target===e.wrapperEl&&(e.wrapperEl.removeEventListener("transitionend",v),!b&&C())}const y=()=>{if(e.destroyed||!e.autoplay.running)return;e.autoplay.paused?f=!0:f&&(u=d,f=!1);const I=e.autoplay.paused?d:c+u-new Date().getTime();e.autoplay.timeLeft=I,s("autoplayTimeLeft",I,I/l),o=requestAnimationFrame(()=>{y()})},T=()=>{let I;return e.virtual&&e.params.virtual.enabled?I=e.slides.filter(B=>B.classList.contains("swiper-slide-active"))[0]:I=e.slides[e.activeIndex],I?parseInt(I.getAttribute("data-swiper-autoplay"),10):void 0},x=I=>{if(e.destroyed||!e.autoplay.running)return;cancelAnimationFrame(o),y();let R=typeof I>"u"?e.params.autoplay.delay:I;l=e.params.autoplay.delay,u=e.params.autoplay.delay;const B=T();!Number.isNaN(B)&&B>0&&typeof I>"u"&&(R=B,l=B,u=B),d=R;const $=e.params.speed,z=()=>{!e||e.destroyed||(e.params.autoplay.reverseDirection?!e.isBeginning||e.params.loop||e.params.rewind?(e.slidePrev($,!0,!0),s("autoplay")):e.params.autoplay.stopOnLastSlide||(e.slideTo(e.slides.length-1,$,!0,!0),s("autoplay")):!e.isEnd||e.params.loop||e.params.rewind?(e.slideNext($,!0,!0),s("autoplay")):e.params.autoplay.stopOnLastSlide||(e.slideTo(0,$,!0,!0),s("autoplay")),e.params.cssMode&&(c=new Date().getTime(),requestAnimationFrame(()=>{x()})))};return R>0?(clearTimeout(a),a=setTimeout(()=>{z()},R)):requestAnimationFrame(()=>{z()}),R},M=()=>{c=new Date().getTime(),e.autoplay.running=!0,x(),s("autoplayStart")},S=()=>{e.autoplay.running=!1,clearTimeout(a),cancelAnimationFrame(o),s("autoplayStop")},A=(I,R)=>{if(e.destroyed||!e.autoplay.running)return;clearTimeout(a),I||(p=!0);const B=()=>{s("autoplayPause"),e.params.autoplay.waitForTransition?e.wrapperEl.addEventListener("transitionend",v):C()};if(e.autoplay.paused=!0,R){h&&(d=e.params.autoplay.delay),h=!1,B();return}d=(d||e.params.autoplay.delay)-(new Date().getTime()-c),!(e.isEnd&&d<0&&!e.params.loop)&&(d<0&&(d=0),B())},C=()=>{e.isEnd&&d<0&&!e.params.loop||e.destroyed||!e.autoplay.running||(c=new Date().getTime(),p?(p=!1,x(d)):x(),e.autoplay.paused=!1,s("autoplayResume"))},O=()=>{if(e.destroyed||!e.autoplay.running)return;const I=K();I.visibilityState==="hidden"&&(p=!0,A(!0)),I.visibilityState==="visible"&&C()},E=I=>{I.pointerType==="mouse"&&(p=!0,b=!0,!(e.animating||e.autoplay.paused)&&A(!0))},_=I=>{I.pointerType==="mouse"&&(b=!1,e.autoplay.paused&&C())},P=()=>{e.params.autoplay.pauseOnMouseEnter&&(e.el.addEventListener("pointerenter",E),e.el.addEventListener("pointerleave",_))},D=()=>{e.el.removeEventListener("pointerenter",E),e.el.removeEventListener("pointerleave",_)},k=()=>{K().addEventListener("visibilitychange",O)},L=()=>{K().removeEventListener("visibilitychange",O)};r("init",()=>{e.params.autoplay.enabled&&(P(),k(),M())}),r("destroy",()=>{D(),L(),e.autoplay.running&&S()}),r("_freeModeStaticRelease",()=>{(g||p)&&C()}),r("_freeModeNoMomentumRelease",()=>{e.params.autoplay.disableOnInteraction?S():A(!0,!0)}),r("beforeTransitionStart",(I,R,B)=>{e.destroyed||!e.autoplay.running||(B||!e.params.autoplay.disableOnInteraction?A(!0,!0):S())}),r("sliderFirstMove",()=>{if(!(e.destroyed||!e.autoplay.running)){if(e.params.autoplay.disableOnInteraction){S();return}m=!0,g=!1,p=!1,w=setTimeout(()=>{p=!0,g=!0,A(!0)},200)}}),r("touchEnd",()=>{if(!(e.destroyed||!e.autoplay.running||!m)){if(clearTimeout(w),clearTimeout(a),e.params.autoplay.disableOnInteraction){g=!1,m=!1;return}g&&e.params.cssMode&&C(),g=!1,m=!1}}),r("slideChange",()=>{e.destroyed||!e.autoplay.running||(h=!0)}),Object.assign(e.autoplay,{start:M,stop:S,pause:A,resume:C})}function bc(t){let{swiper:e,extendParams:i,on:r}=t;i({thumbs:{swiper:null,multipleActiveThumbs:!0,autoScrollOffset:0,slideThumbActiveClass:"swiper-slide-thumb-active",thumbsContainerClass:"swiper-thumbs"}});let s=!1,n=!1;e.thumbs={swiper:null};function a(){const u=e.thumbs.swiper;if(!u||u.destroyed)return;const d=u.clickedIndex,c=u.clickedSlide;if(c&&c.classList.contains(e.params.thumbs.slideThumbActiveClass)||typeof d>"u"||d===null)return;let f;u.params.loop?f=parseInt(u.clickedSlide.getAttribute("data-swiper-slide-index"),10):f=d,e.params.loop?e.slideToLoop(f):e.slideTo(f)}function o(){const{thumbs:u}=e.params;if(s)return!1;s=!0;const d=e.constructor;if(u.swiper instanceof d)e.thumbs.swiper=u.swiper,Object.assign(e.thumbs.swiper.originalParams,{watchSlidesProgress:!0,slideToClickedSlide:!1}),Object.assign(e.thumbs.swiper.params,{watchSlidesProgress:!0,slideToClickedSlide:!1}),e.thumbs.swiper.update();else if(st(u.swiper)){const c=Object.assign({},u.swiper);Object.assign(c,{watchSlidesProgress:!0,slideToClickedSlide:!1}),e.thumbs.swiper=new d(c),n=!0}return e.thumbs.swiper.el.classList.add(e.params.thumbs.thumbsContainerClass),e.thumbs.swiper.on("tap",a),!0}function l(u){const d=e.thumbs.swiper;if(!d||d.destroyed)return;const c=d.params.slidesPerView==="auto"?d.slidesPerViewDynamic():d.params.slidesPerView;let f=1;const m=e.params.thumbs.slideThumbActiveClass;if(e.params.slidesPerView>1&&!e.params.centeredSlides&&(f=e.params.slidesPerView),e.params.thumbs.multipleActiveThumbs||(f=1),f=Math.floor(f),d.slides.forEach(h=>h.classList.remove(m)),d.params.loop||d.params.virtual&&d.params.virtual.enabled)for(let h=0;h<f;h+=1)U(d.slidesEl,`[data-swiper-slide-index="${e.realIndex+h}"]`).forEach(p=>{p.classList.add(m)});else for(let h=0;h<f;h+=1)d.slides[e.realIndex+h]&&d.slides[e.realIndex+h].classList.add(m);const g=e.params.thumbs.autoScrollOffset,w=g&&!d.params.loop;if(e.realIndex!==d.realIndex||w){const h=d.activeIndex;let p,b;if(d.params.loop){const v=d.slides.filter(y=>y.getAttribute("data-swiper-slide-index")===`${e.realIndex}`)[0];p=d.slides.indexOf(v),b=e.activeIndex>e.previousIndex?"next":"prev"}else p=e.realIndex,b=p>e.previousIndex?"next":"prev";w&&(p+=b==="next"?g:-1*g),d.visibleSlidesIndexes&&d.visibleSlidesIndexes.indexOf(p)<0&&(d.params.centeredSlides?p>h?p=p-Math.floor(c/2)+1:p=p+Math.floor(c/2)-1:p>h&&d.params.slidesPerGroup,d.slideTo(p,u?0:void 0))}}r("beforeInit",()=>{const{thumbs:u}=e.params;if(!(!u||!u.swiper))if(typeof u.swiper=="string"||u.swiper instanceof HTMLElement){const d=K(),c=()=>{const m=typeof u.swiper=="string"?d.querySelector(u.swiper):u.swiper;if(m&&m.swiper)u.swiper=m.swiper,o(),l(!0);else if(m){const g=w=>{u.swiper=w.detail[0],m.removeEventListener("init",g),o(),l(!0),u.swiper.update(),e.update()};m.addEventListener("init",g)}return m},f=()=>{if(e.destroyed)return;c()||requestAnimationFrame(f)};requestAnimationFrame(f)}else o(),l(!0)}),r("slideChange update resize observerUpdate",()=>{l()}),r("setTransition",(u,d)=>{const c=e.thumbs.swiper;!c||c.destroyed||c.setTransition(d)}),r("beforeDestroy",()=>{const u=e.thumbs.swiper;!u||u.destroyed||n&&u.destroy()}),Object.assign(e.thumbs,{init:o,update:l})}function yc(t){let{swiper:e,extendParams:i,emit:r,once:s}=t;i({freeMode:{enabled:!1,momentum:!0,momentumRatio:1,momentumBounce:!0,momentumBounceRatio:1,momentumVelocityRatio:1,sticky:!1,minimumVelocity:.02}});function n(){if(e.params.cssMode)return;const l=e.getTranslate();e.setTranslate(l),e.setTransition(0),e.touchEventsData.velocities.length=0,e.freeMode.onTouchEnd({currentPos:e.rtl?e.translate:-e.translate})}function a(){if(e.params.cssMode)return;const{touchEventsData:l,touches:u}=e;l.velocities.length===0&&l.velocities.push({position:u[e.isHorizontal()?"startX":"startY"],time:l.touchStartTime}),l.velocities.push({position:u[e.isHorizontal()?"currentX":"currentY"],time:ne()})}function o(l){let{currentPos:u}=l;if(e.params.cssMode)return;const{params:d,wrapperEl:c,rtlTranslate:f,snapGrid:m,touchEventsData:g}=e,h=ne()-g.touchStartTime;if(u<-e.minTranslate()){e.slideTo(e.activeIndex);return}if(u>-e.maxTranslate()){e.slides.length<m.length?e.slideTo(m.length-1):e.slideTo(e.slides.length-1);return}if(d.freeMode.momentum){if(g.velocities.length>1){const S=g.velocities.pop(),A=g.velocities.pop(),C=S.position-A.position,O=S.time-A.time;e.velocity=C/O,e.velocity/=2,Math.abs(e.velocity)<d.freeMode.minimumVelocity&&(e.velocity=0),(O>150||ne()-S.time>300)&&(e.velocity=0)}else e.velocity=0;e.velocity*=d.freeMode.momentumVelocityRatio,g.velocities.length=0;let p=1e3*d.freeMode.momentumRatio;const b=e.velocity*p;let v=e.translate+b;f&&(v=-v);let y=!1,T;const x=Math.abs(e.velocity)*20*d.freeMode.momentumBounceRatio;let M;if(v<e.maxTranslate())d.freeMode.momentumBounce?(v+e.maxTranslate()<-x&&(v=e.maxTranslate()-x),T=e.maxTranslate(),y=!0,g.allowMomentumBounce=!0):v=e.maxTranslate(),d.loop&&d.centeredSlides&&(M=!0);else if(v>e.minTranslate())d.freeMode.momentumBounce?(v-e.minTranslate()>x&&(v=e.minTranslate()+x),T=e.minTranslate(),y=!0,g.allowMomentumBounce=!0):v=e.minTranslate(),d.loop&&d.centeredSlides&&(M=!0);else if(d.freeMode.sticky){let S;for(let A=0;A<m.length;A+=1)if(m[A]>-v){S=A;break}Math.abs(m[S]-v)<Math.abs(m[S-1]-v)||e.swipeDirection==="next"?v=m[S]:v=m[S-1],v=-v}if(M&&s("transitionEnd",()=>{e.loopFix()}),e.velocity!==0){if(f?p=Math.abs((-v-e.translate)/e.velocity):p=Math.abs((v-e.translate)/e.velocity),d.freeMode.sticky){const S=Math.abs((f?-v:v)-e.translate),A=e.slidesSizesGrid[e.activeIndex];S<A?p=d.speed:S<2*A?p=d.speed*1.5:p=d.speed*2.5}}else if(d.freeMode.sticky){e.slideToClosest();return}d.freeMode.momentumBounce&&y?(e.updateProgress(T),e.setTransition(p),e.setTranslate(v),e.transitionStart(!0,e.swipeDirection),e.animating=!0,ct(c,()=>{!e||e.destroyed||!g.allowMomentumBounce||(r("momentumBounce"),e.setTransition(d.speed),setTimeout(()=>{e.setTranslate(T),ct(c,()=>{!e||e.destroyed||e.transitionEnd()})},0))})):e.velocity?(r("_freeModeNoMomentumRelease"),e.updateProgress(v),e.setTransition(p),e.setTranslate(v),e.transitionStart(!0,e.swipeDirection),e.animating||(e.animating=!0,ct(c,()=>{!e||e.destroyed||e.transitionEnd()}))):e.updateProgress(v),e.updateActiveIndex(),e.updateSlidesClasses()}else if(d.freeMode.sticky){e.slideToClosest();return}else d.freeMode&&r("_freeModeNoMomentumRelease");(!d.freeMode.momentum||h>=d.longSwipesMs)&&(r("_freeModeStaticRelease"),e.updateProgress(),e.updateActiveIndex(),e.updateSlidesClasses())}Object.assign(e,{freeMode:{onTouchStart:n,onTouchMove:a,onTouchEnd:o}})}function xc(t){let{swiper:e,extendParams:i,on:r}=t;i({grid:{rows:1,fill:"column"}});let s,n,a,o;const l=()=>{let w=e.params.spaceBetween;return typeof w=="string"&&w.indexOf("%")>=0?w=parseFloat(w.replace("%",""))/100*e.size:typeof w=="string"&&(w=parseFloat(w)),w},u=w=>{const{slidesPerView:h}=e.params,{rows:p,fill:b}=e.params.grid,v=e.virtual&&e.params.virtual.enabled?e.virtual.slides.length:w.length;a=Math.floor(v/p),Math.floor(v/p)===v/p?s=v:s=Math.ceil(v/p)*p,h!=="auto"&&b==="row"&&(s=Math.max(s,h*p)),n=s/p},d=()=>{e.slides&&e.slides.forEach(w=>{w.swiperSlideGridSet&&(w.style.height="",w.style[e.getDirectionLabel("margin-top")]="")})},c=(w,h,p)=>{const{slidesPerGroup:b}=e.params,v=l(),{rows:y,fill:T}=e.params.grid,x=e.virtual&&e.params.virtual.enabled?e.virtual.slides.length:p.length;let M,S,A;if(T==="row"&&b>1){const C=Math.floor(w/(b*y)),O=w-y*b*C,E=C===0?b:Math.min(Math.ceil((x-C*y*b)/y),b);A=Math.floor(O/E),S=O-A*E+C*b,M=S+A*s/y,h.style.order=M}else T==="column"?(S=Math.floor(w/y),A=w-S*y,(S>a||S===a&&A===y-1)&&(A+=1,A>=y&&(A=0,S+=1))):(A=Math.floor(w/n),S=w-A*n);h.row=A,h.column=S,h.style.height=`calc((100% - ${(y-1)*v}px) / ${y})`,h.style[e.getDirectionLabel("margin-top")]=A!==0?v&&`${v}px`:"",h.swiperSlideGridSet=!0},f=(w,h)=>{const{centeredSlides:p,roundLengths:b}=e.params,v=l(),{rows:y}=e.params.grid;if(e.virtualSize=(w+v)*s,e.virtualSize=Math.ceil(e.virtualSize/y)-v,e.params.cssMode||(e.wrapperEl.style[e.getDirectionLabel("width")]=`${e.virtualSize+v}px`),p){const T=[];for(let x=0;x<h.length;x+=1){let M=h[x];b&&(M=Math.floor(M)),h[x]<e.virtualSize+h[0]&&T.push(M)}h.splice(0,h.length),h.push(...T)}},m=()=>{o=e.params.grid&&e.params.grid.rows>1},g=()=>{const{params:w,el:h}=e,p=w.grid&&w.grid.rows>1;o&&!p?(h.classList.remove(`${w.containerModifierClass}grid`,`${w.containerModifierClass}grid-column`),a=1,e.emitContainerClasses()):!o&&p&&(h.classList.add(`${w.containerModifierClass}grid`),w.grid.fill==="column"&&h.classList.add(`${w.containerModifierClass}grid-column`),e.emitContainerClasses()),o=p};r("init",m),r("update",g),e.grid={initSlides:u,unsetSlides:d,updateSlide:c,updateWrapperSize:f}}function Sc(t){const e=this,{params:i,slidesEl:r}=e;i.loop&&e.loopDestroy();const s=n=>{if(typeof n=="string"){const a=document.createElement("div");a.innerHTML=n,r.append(a.children[0]),a.innerHTML=""}else r.append(n)};if(typeof t=="object"&&"length"in t)for(let n=0;n<t.length;n+=1)t[n]&&s(t[n]);else s(t);e.recalcSlides(),i.loop&&e.loopCreate(),(!i.observer||e.isElement)&&e.update()}function Ec(t){const e=this,{params:i,activeIndex:r,slidesEl:s}=e;i.loop&&e.loopDestroy();let n=r+1;const a=o=>{if(typeof o=="string"){const l=document.createElement("div");l.innerHTML=o,s.prepend(l.children[0]),l.innerHTML=""}else s.prepend(o)};if(typeof t=="object"&&"length"in t){for(let o=0;o<t.length;o+=1)t[o]&&a(t[o]);n=r+t.length}else a(t);e.recalcSlides(),i.loop&&e.loopCreate(),(!i.observer||e.isElement)&&e.update(),e.slideTo(n,0,!1)}function Tc(t,e){const i=this,{params:r,activeIndex:s,slidesEl:n}=i;let a=s;r.loop&&(a-=i.loopedSlides,i.loopDestroy(),i.recalcSlides());const o=i.slides.length;if(t<=0){i.prependSlide(e);return}if(t>=o){i.appendSlide(e);return}let l=a>t?a+1:a;const u=[];for(let d=o-1;d>=t;d-=1){const c=i.slides[d];c.remove(),u.unshift(c)}if(typeof e=="object"&&"length"in e){for(let d=0;d<e.length;d+=1)e[d]&&n.append(e[d]);l=a>t?a+e.length:a}else n.append(e);for(let d=0;d<u.length;d+=1)n.append(u[d]);i.recalcSlides(),r.loop&&i.loopCreate(),(!r.observer||i.isElement)&&i.update(),r.loop?i.slideTo(l+i.loopedSlides,0,!1):i.slideTo(l,0,!1)}function _c(t){const e=this,{params:i,activeIndex:r}=e;let s=r;i.loop&&(s-=e.loopedSlides,e.loopDestroy());let n=s,a;if(typeof t=="object"&&"length"in t){for(let o=0;o<t.length;o+=1)a=t[o],e.slides[a]&&e.slides[a].remove(),a<n&&(n-=1);n=Math.max(n,0)}else a=t,e.slides[a]&&e.slides[a].remove(),a<n&&(n-=1),n=Math.max(n,0);e.recalcSlides(),i.loop&&e.loopCreate(),(!i.observer||e.isElement)&&e.update(),i.loop?e.slideTo(n+e.loopedSlides,0,!1):e.slideTo(n,0,!1)}function Cc(){const t=this,e=[];for(let i=0;i<t.slides.length;i+=1)e.push(i);t.removeSlide(e)}function Mc(t){let{swiper:e}=t;Object.assign(e,{appendSlide:Sc.bind(e),prependSlide:Ec.bind(e),addSlide:Tc.bind(e),removeSlide:_c.bind(e),removeAllSlides:Cc.bind(e)})}function Je(t){const{effect:e,swiper:i,on:r,setTranslate:s,setTransition:n,overwriteParams:a,perspective:o,recreateShadows:l,getEffectParams:u}=t;r("beforeInit",()=>{if(i.params.effect!==e)return;i.classNames.push(`${i.params.containerModifierClass}${e}`),o&&o()&&i.classNames.push(`${i.params.containerModifierClass}3d`);const c=a?a():{};Object.assign(i.params,c),Object.assign(i.originalParams,c)}),r("setTranslate",()=>{i.params.effect===e&&s()}),r("setTransition",(c,f)=>{i.params.effect===e&&n(f)}),r("transitionEnd",()=>{if(i.params.effect===e&&l){if(!u||!u().slideShadows)return;i.slides.forEach(c=>{c.querySelectorAll(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").forEach(f=>f.remove())}),l()}});let d;r("virtualUpdate",()=>{i.params.effect===e&&(i.slides.length||(d=!0),requestAnimationFrame(()=>{d&&i.slides&&i.slides.length&&(s(),d=!1)}))})}function vt(t,e){const i=Be(e);return i!==e&&(i.style.backfaceVisibility="hidden",i.style["-webkit-backface-visibility"]="hidden"),i}function Qt(t){let{swiper:e,duration:i,transformElements:r,allSlides:s}=t;const{activeIndex:n}=e,a=o=>o.parentElement?o.parentElement:e.slides.filter(u=>u.shadowRoot&&u.shadowRoot===o.parentNode)[0];if(e.params.virtualTranslate&&i!==0){let o=!1,l;s?l=r:l=r.filter(u=>{const d=u.classList.contains("swiper-slide-transform")?a(u):u;return e.getSlideIndex(d)===n}),l.forEach(u=>{ct(u,()=>{if(o||!e||e.destroyed)return;o=!0,e.animating=!1;const d=new window.CustomEvent("transitionend",{bubbles:!0,cancelable:!0});e.wrapperEl.dispatchEvent(d)})})}}function Ac(t){let{swiper:e,extendParams:i,on:r}=t;i({fadeEffect:{crossFade:!1}}),Je({effect:"fade",swiper:e,on:r,setTranslate:()=>{const{slides:a}=e,o=e.params.fadeEffect;for(let l=0;l<a.length;l+=1){const u=e.slides[l];let c=-u.swiperSlideOffset;e.params.virtualTranslate||(c-=e.translate);let f=0;e.isHorizontal()||(f=c,c=0);const m=e.params.fadeEffect.crossFade?Math.max(1-Math.abs(u.progress),0):1+Math.min(Math.max(u.progress,-1),0),g=vt(o,u);g.style.opacity=m,g.style.transform=`translate3d(${c}px, ${f}px, 0px)`}},setTransition:a=>{const o=e.slides.map(l=>Be(l));o.forEach(l=>{l.style.transitionDuration=`${a}ms`}),Qt({swiper:e,duration:a,transformElements:o,allSlides:!0})},overwriteParams:()=>({slidesPerView:1,slidesPerGroup:1,watchSlidesProgress:!0,spaceBetween:0,virtualTranslate:!e.params.cssMode})})}function Pc(t){let{swiper:e,extendParams:i,on:r}=t;i({cubeEffect:{slideShadows:!0,shadow:!0,shadowOffset:20,shadowScale:.94}});const s=(l,u,d)=>{let c=d?l.querySelector(".swiper-slide-shadow-left"):l.querySelector(".swiper-slide-shadow-top"),f=d?l.querySelector(".swiper-slide-shadow-right"):l.querySelector(".swiper-slide-shadow-bottom");c||(c=ie("div",`swiper-slide-shadow-cube swiper-slide-shadow-${d?"left":"top"}`.split(" ")),l.append(c)),f||(f=ie("div",`swiper-slide-shadow-cube swiper-slide-shadow-${d?"right":"bottom"}`.split(" ")),l.append(f)),c&&(c.style.opacity=Math.max(-u,0)),f&&(f.style.opacity=Math.max(u,0))};Je({effect:"cube",swiper:e,on:r,setTranslate:()=>{const{el:l,wrapperEl:u,slides:d,width:c,height:f,rtlTranslate:m,size:g,browser:w}=e,h=e.params.cubeEffect,p=e.isHorizontal(),b=e.virtual&&e.params.virtual.enabled;let v=0,y;h.shadow&&(p?(y=e.wrapperEl.querySelector(".swiper-cube-shadow"),y||(y=ie("div","swiper-cube-shadow"),e.wrapperEl.append(y)),y.style.height=`${c}px`):(y=l.querySelector(".swiper-cube-shadow"),y||(y=ie("div","swiper-cube-shadow"),l.append(y))));for(let x=0;x<d.length;x+=1){const M=d[x];let S=x;b&&(S=parseInt(M.getAttribute("data-swiper-slide-index"),10));let A=S*90,C=Math.floor(A/360);m&&(A=-A,C=Math.floor(-A/360));const O=Math.max(Math.min(M.progress,1),-1);let E=0,_=0,P=0;S%4===0?(E=-C*4*g,P=0):(S-1)%4===0?(E=0,P=-C*4*g):(S-2)%4===0?(E=g+C*4*g,P=g):(S-3)%4===0&&(E=-g,P=3*g+g*4*C),m&&(E=-E),p||(_=E,E=0);const D=`rotateX(${p?0:-A}deg) rotateY(${p?A:0}deg) translate3d(${E}px, ${_}px, ${P}px)`;O<=1&&O>-1&&(v=S*90+O*90,m&&(v=-S*90-O*90),e.browser&&e.browser.need3dFix&&Math.abs(v)/90%2===1&&(v+=.001)),M.style.transform=D,h.slideShadows&&s(M,O,p)}if(u.style.transformOrigin=`50% 50% -${g/2}px`,u.style["-webkit-transform-origin"]=`50% 50% -${g/2}px`,h.shadow)if(p)y.style.transform=`translate3d(0px, ${c/2+h.shadowOffset}px, ${-c/2}px) rotateX(89.99deg) rotateZ(0deg) scale(${h.shadowScale})`;else{const x=Math.abs(v)-Math.floor(Math.abs(v)/90)*90,M=1.5-(Math.sin(x*2*Math.PI/360)/2+Math.cos(x*2*Math.PI/360)/2),S=h.shadowScale,A=h.shadowScale/M,C=h.shadowOffset;y.style.transform=`scale3d(${S}, 1, ${A}) translate3d(0px, ${f/2+C}px, ${-f/2/A}px) rotateX(-89.99deg)`}const T=(w.isSafari||w.isWebView)&&w.needPerspectiveFix?-g/2:0;u.style.transform=`translate3d(0px,0,${T}px) rotateX(${e.isHorizontal()?0:v}deg) rotateY(${e.isHorizontal()?-v:0}deg)`,u.style.setProperty("--swiper-cube-translate-z",`${T}px`)},setTransition:l=>{const{el:u,slides:d}=e;if(d.forEach(c=>{c.style.transitionDuration=`${l}ms`,c.querySelectorAll(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").forEach(f=>{f.style.transitionDuration=`${l}ms`})}),e.params.cubeEffect.shadow&&!e.isHorizontal()){const c=u.querySelector(".swiper-cube-shadow");c&&(c.style.transitionDuration=`${l}ms`)}},recreateShadows:()=>{const l=e.isHorizontal();e.slides.forEach(u=>{const d=Math.max(Math.min(u.progress,1),-1);s(u,d,l)})},getEffectParams:()=>e.params.cubeEffect,perspective:()=>!0,overwriteParams:()=>({slidesPerView:1,slidesPerGroup:1,watchSlidesProgress:!0,resistanceRatio:0,spaceBetween:0,centeredSlides:!1,virtualTranslate:!0})})}function qe(t,e,i){const r=`swiper-slide-shadow${i?`-${i}`:""}${t?` swiper-slide-shadow-${t}`:""}`,s=Be(e);let n=s.querySelector(`.${r.split(" ").join(".")}`);return n||(n=ie("div",r.split(" ")),s.append(n)),n}function Lc(t){let{swiper:e,extendParams:i,on:r}=t;i({flipEffect:{slideShadows:!0,limitRotation:!0}});const s=(l,u)=>{let d=e.isHorizontal()?l.querySelector(".swiper-slide-shadow-left"):l.querySelector(".swiper-slide-shadow-top"),c=e.isHorizontal()?l.querySelector(".swiper-slide-shadow-right"):l.querySelector(".swiper-slide-shadow-bottom");d||(d=qe("flip",l,e.isHorizontal()?"left":"top")),c||(c=qe("flip",l,e.isHorizontal()?"right":"bottom")),d&&(d.style.opacity=Math.max(-u,0)),c&&(c.style.opacity=Math.max(u,0))};Je({effect:"flip",swiper:e,on:r,setTranslate:()=>{const{slides:l,rtlTranslate:u}=e,d=e.params.flipEffect;for(let c=0;c<l.length;c+=1){const f=l[c];let m=f.progress;e.params.flipEffect.limitRotation&&(m=Math.max(Math.min(f.progress,1),-1));const g=f.swiperSlideOffset;let h=-180*m,p=0,b=e.params.cssMode?-g-e.translate:-g,v=0;e.isHorizontal()?u&&(h=-h):(v=b,b=0,p=-h,h=0),e.browser&&e.browser.need3dFix&&(Math.abs(h)/90%2===1&&(h+=.001),Math.abs(p)/90%2===1&&(p+=.001)),f.style.zIndex=-Math.abs(Math.round(m))+l.length,d.slideShadows&&s(f,m);const y=`translate3d(${b}px, ${v}px, 0px) rotateX(${p}deg) rotateY(${h}deg)`,T=vt(d,f);T.style.transform=y}},setTransition:l=>{const u=e.slides.map(d=>Be(d));u.forEach(d=>{d.style.transitionDuration=`${l}ms`,d.querySelectorAll(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").forEach(c=>{c.style.transitionDuration=`${l}ms`})}),Qt({swiper:e,duration:l,transformElements:u})},recreateShadows:()=>{e.params.flipEffect,e.slides.forEach(l=>{let u=l.progress;e.params.flipEffect.limitRotation&&(u=Math.max(Math.min(l.progress,1),-1)),s(l,u)})},getEffectParams:()=>e.params.flipEffect,perspective:()=>!0,overwriteParams:()=>({slidesPerView:1,slidesPerGroup:1,watchSlidesProgress:!0,spaceBetween:0,virtualTranslate:!e.params.cssMode})})}function Ic(t){let{swiper:e,extendParams:i,on:r}=t;i({coverflowEffect:{rotate:50,stretch:0,depth:100,scale:1,modifier:1,slideShadows:!0}}),Je({effect:"coverflow",swiper:e,on:r,setTranslate:()=>{const{width:a,height:o,slides:l,slidesSizesGrid:u}=e,d=e.params.coverflowEffect,c=e.isHorizontal(),f=e.translate,m=c?-f+a/2:-f+o/2,g=c?d.rotate:-d.rotate,w=d.depth;for(let h=0,p=l.length;h<p;h+=1){const b=l[h],v=u[h],y=b.swiperSlideOffset,T=(m-y-v/2)/v,x=typeof d.modifier=="function"?d.modifier(T):T*d.modifier;let M=c?g*x:0,S=c?0:g*x,A=-w*Math.abs(x),C=d.stretch;typeof C=="string"&&C.indexOf("%")!==-1&&(C=parseFloat(d.stretch)/100*v);let O=c?0:C*x,E=c?C*x:0,_=1-(1-d.scale)*Math.abs(x);Math.abs(E)<.001&&(E=0),Math.abs(O)<.001&&(O=0),Math.abs(A)<.001&&(A=0),Math.abs(M)<.001&&(M=0),Math.abs(S)<.001&&(S=0),Math.abs(_)<.001&&(_=0),e.browser&&e.browser.need3dFix&&(Math.abs(M)/90%2===1&&(M+=.001),Math.abs(S)/90%2===1&&(S+=.001));const P=`translate3d(${E}px,${O}px,${A}px)  rotateX(${S}deg) rotateY(${M}deg) scale(${_})`,D=vt(d,b);if(D.style.transform=P,b.style.zIndex=-Math.abs(Math.round(x))+1,d.slideShadows){let k=c?b.querySelector(".swiper-slide-shadow-left"):b.querySelector(".swiper-slide-shadow-top"),L=c?b.querySelector(".swiper-slide-shadow-right"):b.querySelector(".swiper-slide-shadow-bottom");k||(k=qe("coverflow",b,c?"left":"top")),L||(L=qe("coverflow",b,c?"right":"bottom")),k&&(k.style.opacity=x>0?x:0),L&&(L.style.opacity=-x>0?-x:0)}}},setTransition:a=>{e.slides.map(l=>Be(l)).forEach(l=>{l.style.transitionDuration=`${a}ms`,l.querySelectorAll(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").forEach(u=>{u.style.transitionDuration=`${a}ms`})})},perspective:()=>!0,overwriteParams:()=>({watchSlidesProgress:!0})})}function Oc(t){let{swiper:e,extendParams:i,on:r}=t;i({creativeEffect:{limitProgress:1,shadowPerProgress:!1,progressMultiplier:1,perspective:!0,prev:{translate:[0,0,0],rotate:[0,0,0],opacity:1,scale:1},next:{translate:[0,0,0],rotate:[0,0,0],opacity:1,scale:1}}});const s=o=>typeof o=="string"?o:`${o}px`;Je({effect:"creative",swiper:e,on:r,setTranslate:()=>{const{slides:o,wrapperEl:l,slidesSizesGrid:u}=e,d=e.params.creativeEffect,{progressMultiplier:c}=d,f=e.params.centeredSlides;if(f){const m=u[0]/2-e.params.slidesOffsetBefore||0;l.style.transform=`translateX(calc(50% - ${m}px))`}for(let m=0;m<o.length;m+=1){const g=o[m],w=g.progress,h=Math.min(Math.max(g.progress,-d.limitProgress),d.limitProgress);let p=h;f||(p=Math.min(Math.max(g.originalProgress,-d.limitProgress),d.limitProgress));const b=g.swiperSlideOffset,v=[e.params.cssMode?-b-e.translate:-b,0,0],y=[0,0,0];let T=!1;e.isHorizontal()||(v[1]=v[0],v[0]=0);let x={translate:[0,0,0],rotate:[0,0,0],scale:1,opacity:1};h<0?(x=d.next,T=!0):h>0&&(x=d.prev,T=!0),v.forEach((_,P)=>{v[P]=`calc(${_}px + (${s(x.translate[P])} * ${Math.abs(h*c)}))`}),y.forEach((_,P)=>{let D=x.rotate[P]*Math.abs(h*c);e.browser&&e.browser.need3dFix&&Math.abs(D)/90%2===1&&(D+=.001),y[P]=D}),g.style.zIndex=-Math.abs(Math.round(w))+o.length;const M=v.join(", "),S=`rotateX(${y[0]}deg) rotateY(${y[1]}deg) rotateZ(${y[2]}deg)`,A=p<0?`scale(${1+(1-x.scale)*p*c})`:`scale(${1-(1-x.scale)*p*c})`,C=p<0?1+(1-x.opacity)*p*c:1-(1-x.opacity)*p*c,O=`translate3d(${M}) ${S} ${A}`;if(T&&x.shadow||!T){let _=g.querySelector(".swiper-slide-shadow");if(!_&&x.shadow&&(_=qe("creative",g)),_){const P=d.shadowPerProgress?h*(1/d.limitProgress):h;_.style.opacity=Math.min(Math.max(Math.abs(P),0),1)}}const E=vt(d,g);E.style.transform=O,E.style.opacity=C,x.origin&&(E.style.transformOrigin=x.origin)}},setTransition:o=>{const l=e.slides.map(u=>Be(u));l.forEach(u=>{u.style.transitionDuration=`${o}ms`,u.querySelectorAll(".swiper-slide-shadow").forEach(d=>{d.style.transitionDuration=`${o}ms`})}),Qt({swiper:e,duration:o,transformElements:l,allSlides:!0})},perspective:()=>e.params.creativeEffect.perspective,overwriteParams:()=>({watchSlidesProgress:!0,virtualTranslate:!e.params.cssMode})})}function Dc(t){let{swiper:e,extendParams:i,on:r}=t;i({cardsEffect:{slideShadows:!0,rotate:!0,perSlideRotate:2,perSlideOffset:8}}),Je({effect:"cards",swiper:e,on:r,setTranslate:()=>{const{slides:a,activeIndex:o,rtlTranslate:l}=e,u=e.params.cardsEffect,{startTranslate:d,isTouched:c}=e.touchEventsData,f=l?-e.translate:e.translate;for(let m=0;m<a.length;m+=1){const g=a[m],w=g.progress,h=Math.min(Math.max(w,-4),4);let p=g.swiperSlideOffset;e.params.centeredSlides&&!e.params.cssMode&&(e.wrapperEl.style.transform=`translateX(${e.minTranslate()}px)`),e.params.centeredSlides&&e.params.cssMode&&(p-=a[0].swiperSlideOffset);let b=e.params.cssMode?-p-e.translate:-p,v=0;const y=-100*Math.abs(h);let T=1,x=-u.perSlideRotate*h,M=u.perSlideOffset-Math.abs(h)*.75;const S=e.virtual&&e.params.virtual.enabled?e.virtual.from+m:m,A=(S===o||S===o-1)&&h>0&&h<1&&(c||e.params.cssMode)&&f<d,C=(S===o||S===o+1)&&h<0&&h>-1&&(c||e.params.cssMode)&&f>d;if(A||C){const P=(1-Math.abs((Math.abs(h)-.5)/.5))**.5;x+=-28*h*P,T+=-.5*P,M+=96*P,v=`${-25*P*Math.abs(h)}%`}if(h<0?b=`calc(${b}px ${l?"-":"+"} (${M*Math.abs(h)}%))`:h>0?b=`calc(${b}px ${l?"-":"+"} (-${M*Math.abs(h)}%))`:b=`${b}px`,!e.isHorizontal()){const P=v;v=b,b=P}const O=h<0?`${1+(1-T)*h}`:`${1-(1-T)*h}`,E=`
        translate3d(${b}, ${v}, ${y}px)
        rotateZ(${u.rotate?l?-x:x:0}deg)
        scale(${O})
      `;if(u.slideShadows){let P=g.querySelector(".swiper-slide-shadow");P||(P=qe("cards",g)),P&&(P.style.opacity=Math.min(Math.max((Math.abs(h)-.5)/.5,0),1))}g.style.zIndex=-Math.abs(Math.round(w))+a.length;const _=vt(u,g);_.style.transform=E}},setTransition:a=>{const o=e.slides.map(l=>Be(l));o.forEach(l=>{l.style.transitionDuration=`${a}ms`,l.querySelectorAll(".swiper-slide-shadow").forEach(u=>{u.style.transitionDuration=`${a}ms`})}),Qt({swiper:e,duration:a,transformElements:o})},perspective:()=>!0,overwriteParams:()=>({watchSlidesProgress:!0,virtualTranslate:!e.params.cssMode})})}const $c=[ac,oc,lc,cc,dc,uc,fc,pc,mc,hc,gc,vc,wc,bc,yc,xc,Mc,Ac,Pc,Lc,Ic,Oc,Dc];ee.use($c);var ws=["input","select","textarea","a[href]","button","[tabindex]:not(slot)","audio[controls]","video[controls]",'[contenteditable]:not([contenteditable="false"])',"details>summary:first-of-type","details"],Bt=ws.join(","),bs=typeof Element>"u",Re=bs?function(){}:Element.prototype.matches||Element.prototype.msMatchesSelector||Element.prototype.webkitMatchesSelector,Hi=!bs&&Element.prototype.getRootNode?function(t){return t.getRootNode()}:function(t){return t.ownerDocument},ys=function(e,i,r){var s=Array.prototype.slice.apply(e.querySelectorAll(Bt));return i&&Re.call(e,Bt)&&s.unshift(e),s=s.filter(r),s},xs=function t(e,i,r){for(var s=[],n=Array.from(e);n.length;){var a=n.shift();if(a.tagName==="SLOT"){var o=a.assignedElements(),l=o.length?o:a.children,u=t(l,!0,r);r.flatten?s.push.apply(s,u):s.push({scope:a,candidates:u})}else{var d=Re.call(a,Bt);d&&r.filter(a)&&(i||!e.includes(a))&&s.push(a);var c=a.shadowRoot||typeof r.getShadowRoot=="function"&&r.getShadowRoot(a),f=!r.shadowRootFilter||r.shadowRootFilter(a);if(c&&f){var m=t(c===!0?a.children:c.children,!0,r);r.flatten?s.push.apply(s,m):s.push({scope:a,candidates:m})}else n.unshift.apply(n,a.children)}}return s},Ss=function(e,i){return e.tabIndex<0&&(i||/^(AUDIO|VIDEO|DETAILS)$/.test(e.tagName)||e.isContentEditable)&&isNaN(parseInt(e.getAttribute("tabindex"),10))?0:e.tabIndex},zc=function(e,i){return e.tabIndex===i.tabIndex?e.documentOrder-i.documentOrder:e.tabIndex-i.tabIndex},Es=function(e){return e.tagName==="INPUT"},Rc=function(e){return Es(e)&&e.type==="hidden"},kc=function(e){var i=e.tagName==="DETAILS"&&Array.prototype.slice.apply(e.children).some(function(r){return r.tagName==="SUMMARY"});return i},Fc=function(e,i){for(var r=0;r<e.length;r++)if(e[r].checked&&e[r].form===i)return e[r]},Nc=function(e){if(!e.name)return!0;var i=e.form||Hi(e),r=function(o){return i.querySelectorAll('input[type="radio"][name="'+o+'"]')},s;if(typeof window<"u"&&typeof window.CSS<"u"&&typeof window.CSS.escape=="function")s=r(window.CSS.escape(e.name));else try{s=r(e.name)}catch(a){return console.error("Looks like you have a radio button with a name attribute containing invalid CSS selector characters and need the CSS.escape polyfill: %s",a.message),!1}var n=Fc(s,e.form);return!n||n===e},Bc=function(e){return Es(e)&&e.type==="radio"},Hc=function(e){return Bc(e)&&!Nc(e)},Nr=function(e){var i=e.getBoundingClientRect(),r=i.width,s=i.height;return r===0&&s===0},Gc=function(e,i){var r=i.displayCheck,s=i.getShadowRoot;if(getComputedStyle(e).visibility==="hidden")return!0;var n=Re.call(e,"details>summary:first-of-type"),a=n?e.parentElement:e;if(Re.call(a,"details:not([open]) *"))return!0;var o=Hi(e).host,l=(o==null?void 0:o.ownerDocument.contains(o))||e.ownerDocument.contains(e);if(!r||r==="full"){if(typeof s=="function"){for(var u=e;e;){var d=e.parentElement,c=Hi(e);if(d&&!d.shadowRoot&&s(d)===!0)return Nr(e);e.assignedSlot?e=e.assignedSlot:!d&&c!==e.ownerDocument?e=c.host:e=d}e=u}if(l)return!e.getClientRects().length}else if(r==="non-zero-area")return Nr(e);return!1},Vc=function(e){if(/^(INPUT|BUTTON|SELECT|TEXTAREA)$/.test(e.tagName))for(var i=e.parentElement;i;){if(i.tagName==="FIELDSET"&&i.disabled){for(var r=0;r<i.children.length;r++){var s=i.children.item(r);if(s.tagName==="LEGEND")return Re.call(i,"fieldset[disabled] *")?!0:!s.contains(e)}return!0}i=i.parentElement}return!1},Ht=function(e,i){return!(i.disabled||Rc(i)||Gc(i,e)||kc(i)||Vc(i))},Gi=function(e,i){return!(Hc(i)||Ss(i)<0||!Ht(e,i))},jc=function(e){var i=parseInt(e.getAttribute("tabindex"),10);return!!(isNaN(i)||i>=0)},Wc=function t(e){var i=[],r=[];return e.forEach(function(s,n){var a=!!s.scope,o=a?s.scope:s,l=Ss(o,a),u=a?t(s.candidates):o;l===0?a?i.push.apply(i,u):i.push(o):r.push({documentOrder:n,tabIndex:l,item:s,isScope:a,content:u})}),r.sort(zc).reduce(function(s,n){return n.isScope?s.push.apply(s,n.content):s.push(n.content),s},[]).concat(i)},qc=function(e,i){i=i||{};var r;return i.getShadowRoot?r=xs([e],i.includeContainer,{filter:Gi.bind(null,i),flatten:!1,getShadowRoot:i.getShadowRoot,shadowRootFilter:jc}):r=ys(e,i.includeContainer,Gi.bind(null,i)),Wc(r)},Ts=function(e,i){i=i||{};var r;return i.getShadowRoot?r=xs([e],i.includeContainer,{filter:Ht.bind(null,i),flatten:!0,getShadowRoot:i.getShadowRoot}):r=ys(e,i.includeContainer,Ht.bind(null,i)),r},Mt=function(e,i){if(i=i||{},!e)throw new Error("No node provided");return Re.call(e,Bt)===!1?!1:Gi(i,e)},Xc=ws.concat("iframe").join(","),Dt=function(e,i){if(i=i||{},!e)throw new Error("No node provided");return Re.call(e,Xc)===!1?!1:Ht(i,e)};function Br(t,e){var i=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter(function(s){return Object.getOwnPropertyDescriptor(t,s).enumerable})),i.push.apply(i,r)}return i}function Hr(t){for(var e=1;e<arguments.length;e++){var i=arguments[e]!=null?arguments[e]:{};e%2?Br(Object(i),!0).forEach(function(r){Yc(t,r,i[r])}):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(i)):Br(Object(i)).forEach(function(r){Object.defineProperty(t,r,Object.getOwnPropertyDescriptor(i,r))})}return t}function Yc(t,e,i){return e in t?Object.defineProperty(t,e,{value:i,enumerable:!0,configurable:!0,writable:!0}):t[e]=i,t}var Gr=function(){var t=[];return{activateTrap:function(i){if(t.length>0){var r=t[t.length-1];r!==i&&r.pause()}var s=t.indexOf(i);s===-1||t.splice(s,1),t.push(i)},deactivateTrap:function(i){var r=t.indexOf(i);r!==-1&&t.splice(r,1),t.length>0&&t[t.length-1].unpause()}}}(),Uc=function(e){return e.tagName&&e.tagName.toLowerCase()==="input"&&typeof e.select=="function"},Kc=function(e){return e.key==="Escape"||e.key==="Esc"||e.keyCode===27},Jc=function(e){return e.key==="Tab"||e.keyCode===9},Vr=function(e){return setTimeout(e,0)},jr=function(e,i){var r=-1;return e.every(function(s,n){return i(s)?(r=n,!1):!0}),r},rt=function(e){for(var i=arguments.length,r=new Array(i>1?i-1:0),s=1;s<i;s++)r[s-1]=arguments[s];return typeof e=="function"?e.apply(void 0,r):e},At=function(e){return e.target.shadowRoot&&typeof e.composedPath=="function"?e.composedPath()[0]:e.target},Zc=function(e,i){var r=(i==null?void 0:i.document)||document,s=Hr({returnFocusOnDeactivate:!0,escapeDeactivates:!0,delayInitialFocus:!0},i),n={containers:[],containerGroups:[],tabbableGroups:[],nodeFocusedBeforeActivation:null,mostRecentlyFocusedNode:null,active:!1,paused:!1,delayInitialFocusTimer:void 0},a,o=function(x,M,S){return x&&x[M]!==void 0?x[M]:s[S||M]},l=function(x){return n.containerGroups.findIndex(function(M){var S=M.container,A=M.tabbableNodes;return S.contains(x)||A.find(function(C){return C===x})})},u=function(x){var M=s[x];if(typeof M=="function"){for(var S=arguments.length,A=new Array(S>1?S-1:0),C=1;C<S;C++)A[C-1]=arguments[C];M=M.apply(void 0,A)}if(M===!0&&(M=void 0),!M){if(M===void 0||M===!1)return M;throw new Error("`".concat(x,"` was specified but was not a node, or did not return a node"))}var O=M;if(typeof M=="string"&&(O=r.querySelector(M),!O))throw new Error("`".concat(x,"` as selector refers to no known node"));return O},d=function(){var x=u("initialFocus");if(x===!1)return!1;if(x===void 0)if(l(r.activeElement)>=0)x=r.activeElement;else{var M=n.tabbableGroups[0],S=M&&M.firstTabbableNode;x=S||u("fallbackFocus")}if(!x)throw new Error("Your focus-trap needs to have at least one focusable element");return x},c=function(){if(n.containerGroups=n.containers.map(function(x){var M=qc(x,s.tabbableOptions),S=Ts(x,s.tabbableOptions);return{container:x,tabbableNodes:M,focusableNodes:S,firstTabbableNode:M.length>0?M[0]:null,lastTabbableNode:M.length>0?M[M.length-1]:null,nextTabbableNode:function(C){var O=arguments.length>1&&arguments[1]!==void 0?arguments[1]:!0,E=S.findIndex(function(_){return _===C});if(!(E<0))return O?S.slice(E+1).find(function(_){return Mt(_,s.tabbableOptions)}):S.slice(0,E).reverse().find(function(_){return Mt(_,s.tabbableOptions)})}}}),n.tabbableGroups=n.containerGroups.filter(function(x){return x.tabbableNodes.length>0}),n.tabbableGroups.length<=0&&!u("fallbackFocus"))throw new Error("Your focus-trap must have at least one container with at least one tabbable node in it at all times")},f=function T(x){if(x!==!1&&x!==r.activeElement){if(!x||!x.focus){T(d());return}x.focus({preventScroll:!!s.preventScroll}),n.mostRecentlyFocusedNode=x,Uc(x)&&x.select()}},m=function(x){var M=u("setReturnFocus",x);return M||(M===!1?!1:x)},g=function(x){var M=At(x);if(!(l(M)>=0)){if(rt(s.clickOutsideDeactivates,x)){a.deactivate({returnFocus:s.returnFocusOnDeactivate&&!Dt(M,s.tabbableOptions)});return}rt(s.allowOutsideClick,x)||x.preventDefault()}},w=function(x){var M=At(x),S=l(M)>=0;S||M instanceof Document?S&&(n.mostRecentlyFocusedNode=M):(x.stopImmediatePropagation(),f(n.mostRecentlyFocusedNode||d()))},h=function(x){var M=At(x);c();var S=null;if(n.tabbableGroups.length>0){var A=l(M),C=A>=0?n.containerGroups[A]:void 0;if(A<0)x.shiftKey?S=n.tabbableGroups[n.tabbableGroups.length-1].lastTabbableNode:S=n.tabbableGroups[0].firstTabbableNode;else if(x.shiftKey){var O=jr(n.tabbableGroups,function(L){var I=L.firstTabbableNode;return M===I});if(O<0&&(C.container===M||Dt(M,s.tabbableOptions)&&!Mt(M,s.tabbableOptions)&&!C.nextTabbableNode(M,!1))&&(O=A),O>=0){var E=O===0?n.tabbableGroups.length-1:O-1,_=n.tabbableGroups[E];S=_.lastTabbableNode}}else{var P=jr(n.tabbableGroups,function(L){var I=L.lastTabbableNode;return M===I});if(P<0&&(C.container===M||Dt(M,s.tabbableOptions)&&!Mt(M,s.tabbableOptions)&&!C.nextTabbableNode(M))&&(P=A),P>=0){var D=P===n.tabbableGroups.length-1?0:P+1,k=n.tabbableGroups[D];S=k.firstTabbableNode}}}else S=u("fallbackFocus");S&&(x.preventDefault(),f(S))},p=function(x){if(Kc(x)&&rt(s.escapeDeactivates,x)!==!1){x.preventDefault(),a.deactivate();return}if(Jc(x)){h(x);return}},b=function(x){var M=At(x);l(M)>=0||rt(s.clickOutsideDeactivates,x)||rt(s.allowOutsideClick,x)||(x.preventDefault(),x.stopImmediatePropagation())},v=function(){if(n.active)return Gr.activateTrap(a),n.delayInitialFocusTimer=s.delayInitialFocus?Vr(function(){f(d())}):f(d()),r.addEventListener("focusin",w,!0),r.addEventListener("mousedown",g,{capture:!0,passive:!1}),r.addEventListener("touchstart",g,{capture:!0,passive:!1}),r.addEventListener("click",b,{capture:!0,passive:!1}),r.addEventListener("keydown",p,{capture:!0,passive:!1}),a},y=function(){if(n.active)return r.removeEventListener("focusin",w,!0),r.removeEventListener("mousedown",g,!0),r.removeEventListener("touchstart",g,!0),r.removeEventListener("click",b,!0),r.removeEventListener("keydown",p,!0),a};return a={get active(){return n.active},get paused(){return n.paused},activate:function(x){if(n.active)return this;var M=o(x,"onActivate"),S=o(x,"onPostActivate"),A=o(x,"checkCanFocusTrap");A||c(),n.active=!0,n.paused=!1,n.nodeFocusedBeforeActivation=r.activeElement,M&&M();var C=function(){A&&c(),v(),S&&S()};return A?(A(n.containers.concat()).then(C,C),this):(C(),this)},deactivate:function(x){if(!n.active)return this;var M=Hr({onDeactivate:s.onDeactivate,onPostDeactivate:s.onPostDeactivate,checkCanReturnFocus:s.checkCanReturnFocus},x);clearTimeout(n.delayInitialFocusTimer),n.delayInitialFocusTimer=void 0,y(),n.active=!1,n.paused=!1,Gr.deactivateTrap(a);var S=o(M,"onDeactivate"),A=o(M,"onPostDeactivate"),C=o(M,"checkCanReturnFocus"),O=o(M,"returnFocus","returnFocusOnDeactivate");S&&S();var E=function(){Vr(function(){O&&f(m(n.nodeFocusedBeforeActivation)),A&&A()})};return O&&C?(C(m(n.nodeFocusedBeforeActivation)).then(E,E),this):(E(),this)},pause:function(){return n.paused||!n.active?this:(n.paused=!0,y(),this)},unpause:function(){return!n.paused||!n.active?this:(n.paused=!1,c(),v(),this)},updateContainerElements:function(x){var M=[].concat(x).filter(Boolean);return n.containers=M.map(function(S){return typeof S=="string"?r.querySelector(S):S}),n.active&&c(),this}},a.updateContainerElements(e),a};function Qc(t){let e,i;window.addEventListener("focusin",()=>{e=i,i=document.activeElement}),t.magic("focus",r=>{let s=r;return{__noscroll:!1,__wrapAround:!1,within(n){return s=n,this},withoutScrolling(){return this.__noscroll=!0,this},noscroll(){return this.__noscroll=!0,this},withWrapAround(){return this.__wrapAround=!0,this},wrap(){return this.withWrapAround()},focusable(n){return Dt(n)},previouslyFocused(){return e},lastFocused(){return e},focused(){return i},focusables(){return Array.isArray(s)?s:Ts(s,{displayCheck:"none"})},all(){return this.focusables()},isFirst(n){let a=this.all();return a[0]&&a[0].isSameNode(n)},isLast(n){let a=this.all();return a.length&&a.slice(-1)[0].isSameNode(n)},getFirst(){return this.all()[0]},getLast(){return this.all().slice(-1)[0]},getNext(){let n=this.all(),a=document.activeElement;if(n.indexOf(a)!==-1)return this.__wrapAround&&n.indexOf(a)===n.length-1?n[0]:n[n.indexOf(a)+1]},getPrevious(){let n=this.all(),a=document.activeElement;if(n.indexOf(a)!==-1)return this.__wrapAround&&n.indexOf(a)===0?n.slice(-1)[0]:n[n.indexOf(a)-1]},first(){this.focus(this.getFirst())},last(){this.focus(this.getLast())},next(){this.focus(this.getNext())},previous(){this.focus(this.getPrevious())},prev(){return this.previous()},focus(n){n&&setTimeout(()=>{n.hasAttribute("tabindex")||n.setAttribute("tabindex","0"),n.focus({preventScroll:this.__noscroll})})}}}),t.directive("trap",t.skipDuringClone((r,{expression:s,modifiers:n},{effect:a,evaluateLater:o,cleanup:l})=>{let u=o(s),d=!1,c={escapeDeactivates:!1,allowOutsideClick:!0,fallbackFocus:()=>r};if(n.includes("noautofocus"))c.initialFocus=!1;else{let h=r.querySelector("[autofocus]");h&&(c.initialFocus=h)}let f=Zc(r,c),m=()=>{},g=()=>{};const w=()=>{m(),m=()=>{},g(),g=()=>{},f.deactivate({returnFocus:!n.includes("noreturn")})};a(()=>u(h=>{d!==h&&(h&&!d&&(n.includes("noscroll")&&(g=ed()),n.includes("inert")&&(m=Wr(r)),setTimeout(()=>{f.activate()},15)),!h&&d&&w(),d=!!h)})),l(w)},(r,{expression:s,modifiers:n},{evaluate:a})=>{n.includes("inert")&&a(s)&&Wr(r)}))}function Wr(t){let e=[];return _s(t,i=>{let r=i.hasAttribute("aria-hidden");i.setAttribute("aria-hidden","true"),e.push(()=>r||i.removeAttribute("aria-hidden"))}),()=>{for(;e.length;)e.pop()()}}function _s(t,e){t.isSameNode(document.body)||!t.parentNode||Array.from(t.parentNode.children).forEach(i=>{i.isSameNode(t)?_s(t.parentNode,e):e(i)})}function ed(){let t=document.documentElement.style.overflow,e=document.documentElement.style.paddingRight,i=window.innerWidth-document.documentElement.clientWidth;return document.documentElement.style.overflow="hidden",document.documentElement.style.paddingRight=`${i}px`,()=>{document.documentElement.style.overflow=t,document.documentElement.style.paddingRight=e}}var td=Qc;/*! Bundled license information:

tabbable/dist/index.esm.js:
  (*!
  * tabbable 5.3.3
  * @license MIT, https://github.com/focus-trap/tabbable/blob/master/LICENSE
  *)

focus-trap/dist/focus-trap.esm.js:
  (*!
  * focus-trap 6.9.4
  * @license MIT, https://github.com/focus-trap/focus-trap/blob/master/LICENSE
  *)
*/function id(t){t.directive("collapse",e),e.inline=(i,{modifiers:r})=>{r.includes("min")&&(i._x_doShow=()=>{},i._x_doHide=()=>{})};function e(i,{modifiers:r}){let s=qr(r,"duration",250)/1e3,n=qr(r,"min",0),a=!r.includes("min");i._x_isShown||(i.style.height=`${n}px`),!i._x_isShown&&a&&(i.hidden=!0),i._x_isShown||(i.style.overflow="hidden");let o=(u,d)=>{let c=t.setStyles(u,d);return d.height?()=>{}:c},l={transitionProperty:"height",transitionDuration:`${s}s`,transitionTimingFunction:"cubic-bezier(0.4, 0.0, 0.2, 1)"};i._x_transition={in(u=()=>{},d=()=>{}){a&&(i.hidden=!1),a&&(i.style.display=null);let c=i.getBoundingClientRect().height;i.style.height="auto";let f=i.getBoundingClientRect().height;c===f&&(c=n),t.transition(i,t.setStyles,{during:l,start:{height:c+"px"},end:{height:f+"px"}},()=>i._x_isShown=!0,()=>{i.getBoundingClientRect().height==f&&(i.style.overflow=null)})},out(u=()=>{},d=()=>{}){let c=i.getBoundingClientRect().height;t.transition(i,o,{during:l,start:{height:c+"px"},end:{height:n+"px"}},()=>i.style.overflow="hidden",()=>{i._x_isShown=!1,i.style.height==`${n}px`&&a&&(i.style.display="none",i.hidden=!0)})}}}}function qr(t,e,i){if(t.indexOf(e)===-1)return i;const r=t[t.indexOf(e)+1];if(!r)return i;if(e==="duration"){let s=r.match(/([0-9]+)ms/);if(s)return s[1]}if(e==="min"){let s=r.match(/([0-9]+)px/);if(s)return s[1]}return r}var rd=id,Gt=Math.min,$e=Math.max,Vt=Math.round,Pt=Math.floor,Ee=t=>({x:t,y:t}),nd={left:"right",right:"left",bottom:"top",top:"bottom"},sd={start:"end",end:"start"};function Xr(t,e,i){return $e(t,Gt(e,i))}function ei(t,e){return typeof t=="function"?t(e):t}function ke(t){return t.split("-")[0]}function ti(t){return t.split("-")[1]}function Cs(t){return t==="x"?"y":"x"}function Ms(t){return t==="y"?"height":"width"}function ii(t){return["top","bottom"].includes(ke(t))?"y":"x"}function As(t){return Cs(ii(t))}function ad(t,e,i){i===void 0&&(i=!1);const r=ti(t),s=As(t),n=Ms(s);let a=s==="x"?r===(i?"end":"start")?"right":"left":r==="start"?"bottom":"top";return e.reference[n]>e.floating[n]&&(a=jt(a)),[a,jt(a)]}function od(t){const e=jt(t);return[Vi(t),e,Vi(e)]}function Vi(t){return t.replace(/start|end/g,e=>sd[e])}function ld(t,e,i){const r=["left","right"],s=["right","left"],n=["top","bottom"],a=["bottom","top"];switch(t){case"top":case"bottom":return i?e?s:r:e?r:s;case"left":case"right":return e?n:a;default:return[]}}function cd(t,e,i,r){const s=ti(t);let n=ld(ke(t),i==="start",r);return s&&(n=n.map(a=>a+"-"+s),e&&(n=n.concat(n.map(Vi)))),n}function jt(t){return t.replace(/left|right|bottom|top/g,e=>nd[e])}function dd(t){return{top:0,right:0,bottom:0,left:0,...t}}function ud(t){return typeof t!="number"?dd(t):{top:t,right:t,bottom:t,left:t}}function Wt(t){return{...t,top:t.y,left:t.x,right:t.x+t.width,bottom:t.y+t.height}}function Yr(t,e,i){let{reference:r,floating:s}=t;const n=ii(e),a=As(e),o=Ms(a),l=ke(e),u=n==="y",d=r.x+r.width/2-s.width/2,c=r.y+r.height/2-s.height/2,f=r[o]/2-s[o]/2;let m;switch(l){case"top":m={x:d,y:r.y-s.height};break;case"bottom":m={x:d,y:r.y+r.height};break;case"right":m={x:r.x+r.width,y:c};break;case"left":m={x:r.x-s.width,y:c};break;default:m={x:r.x,y:r.y}}switch(ti(e)){case"start":m[a]-=f*(i&&u?-1:1);break;case"end":m[a]+=f*(i&&u?-1:1);break}return m}var fd=async(t,e,i)=>{const{placement:r="bottom",strategy:s="absolute",middleware:n=[],platform:a}=i,o=n.filter(Boolean),l=await(a.isRTL==null?void 0:a.isRTL(e));let u=await a.getElementRects({reference:t,floating:e,strategy:s}),{x:d,y:c}=Yr(u,r,l),f=r,m={},g=0;for(let w=0;w<o.length;w++){const{name:h,fn:p}=o[w],{x:b,y:v,data:y,reset:T}=await p({x:d,y:c,initialPlacement:r,placement:f,strategy:s,middlewareData:m,rects:u,platform:a,elements:{reference:t,floating:e}});if(d=b??d,c=v??c,m={...m,[h]:{...m[h],...y}},T&&g<=50){g++,typeof T=="object"&&(T.placement&&(f=T.placement),T.rects&&(u=T.rects===!0?await a.getElementRects({reference:t,floating:e,strategy:s}):T.rects),{x:d,y:c}=Yr(u,f,l)),w=-1;continue}}return{x:d,y:c,placement:f,strategy:s,middlewareData:m}};async function Ps(t,e){var i;e===void 0&&(e={});const{x:r,y:s,platform:n,rects:a,elements:o,strategy:l}=t,{boundary:u="clippingAncestors",rootBoundary:d="viewport",elementContext:c="floating",altBoundary:f=!1,padding:m=0}=ei(e,t),g=ud(m),h=o[f?c==="floating"?"reference":"floating":c],p=Wt(await n.getClippingRect({element:(i=await(n.isElement==null?void 0:n.isElement(h)))==null||i?h:h.contextElement||await(n.getDocumentElement==null?void 0:n.getDocumentElement(o.floating)),boundary:u,rootBoundary:d,strategy:l})),b=c==="floating"?{...a.floating,x:r,y:s}:a.reference,v=await(n.getOffsetParent==null?void 0:n.getOffsetParent(o.floating)),y=await(n.isElement==null?void 0:n.isElement(v))?await(n.getScale==null?void 0:n.getScale(v))||{x:1,y:1}:{x:1,y:1},T=Wt(n.convertOffsetParentRelativeRectToViewportRelativeRect?await n.convertOffsetParentRelativeRectToViewportRelativeRect({rect:b,offsetParent:v,strategy:l}):b);return{top:(p.top-T.top+g.top)/y.y,bottom:(T.bottom-p.bottom+g.bottom)/y.y,left:(p.left-T.left+g.left)/y.x,right:(T.right-p.right+g.right)/y.x}}var pd=function(t){return t===void 0&&(t={}),{name:"flip",options:t,async fn(e){var i,r;const{placement:s,middlewareData:n,rects:a,initialPlacement:o,platform:l,elements:u}=e,{mainAxis:d=!0,crossAxis:c=!0,fallbackPlacements:f,fallbackStrategy:m="bestFit",fallbackAxisSideDirection:g="none",flipAlignment:w=!0,...h}=ei(t,e);if((i=n.arrow)!=null&&i.alignmentOffset)return{};const p=ke(s),b=ke(o)===o,v=await(l.isRTL==null?void 0:l.isRTL(u.floating)),y=f||(b||!w?[jt(o)]:od(o));!f&&g!=="none"&&y.push(...cd(o,w,g,v));const T=[o,...y],x=await Ps(e,h),M=[];let S=((r=n.flip)==null?void 0:r.overflows)||[];if(d&&M.push(x[p]),c){const E=ad(s,a,v);M.push(x[E[0]],x[E[1]])}if(S=[...S,{placement:s,overflows:M}],!M.every(E=>E<=0)){var A,C;const E=(((A=n.flip)==null?void 0:A.index)||0)+1,_=T[E];if(_)return{data:{index:E,overflows:S},reset:{placement:_}};let P=(C=S.filter(D=>D.overflows[0]<=0).sort((D,k)=>D.overflows[1]-k.overflows[1])[0])==null?void 0:C.placement;if(!P)switch(m){case"bestFit":{var O;const D=(O=S.map(k=>[k.placement,k.overflows.filter(L=>L>0).reduce((L,I)=>L+I,0)]).sort((k,L)=>k[1]-L[1])[0])==null?void 0:O[0];D&&(P=D);break}case"initialPlacement":P=o;break}if(s!==P)return{reset:{placement:P}}}return{}}}};async function md(t,e){const{placement:i,platform:r,elements:s}=t,n=await(r.isRTL==null?void 0:r.isRTL(s.floating)),a=ke(i),o=ti(i),l=ii(i)==="y",u=["left","top"].includes(a)?-1:1,d=n&&l?-1:1,c=ei(e,t);let{mainAxis:f,crossAxis:m,alignmentAxis:g}=typeof c=="number"?{mainAxis:c,crossAxis:0,alignmentAxis:null}:{mainAxis:0,crossAxis:0,alignmentAxis:null,...c};return o&&typeof g=="number"&&(m=o==="end"?g*-1:g),l?{x:m*d,y:f*u}:{x:f*u,y:m*d}}var hd=function(t){return t===void 0&&(t=0),{name:"offset",options:t,async fn(e){const{x:i,y:r}=e,s=await md(e,t);return{x:i+s.x,y:r+s.y,data:s}}}},gd=function(t){return t===void 0&&(t={}),{name:"shift",options:t,async fn(e){const{x:i,y:r,placement:s}=e,{mainAxis:n=!0,crossAxis:a=!1,limiter:o={fn:h=>{let{x:p,y:b}=h;return{x:p,y:b}}},...l}=ei(t,e),u={x:i,y:r},d=await Ps(e,l),c=ii(ke(s)),f=Cs(c);let m=u[f],g=u[c];if(n){const h=f==="y"?"top":"left",p=f==="y"?"bottom":"right",b=m+d[h],v=m-d[p];m=Xr(b,m,v)}if(a){const h=c==="y"?"top":"left",p=c==="y"?"bottom":"right",b=g+d[h],v=g-d[p];g=Xr(b,g,v)}const w=o.fn({...e,[f]:m,[c]:g});return{...w,data:{x:w.x-i,y:w.y-r}}}}};function Te(t){return Ls(t)?(t.nodeName||"").toLowerCase():"#document"}function re(t){var e;return(t==null||(e=t.ownerDocument)==null?void 0:e.defaultView)||window}function ge(t){var e;return(e=(Ls(t)?t.ownerDocument:t.document)||window.document)==null?void 0:e.documentElement}function Ls(t){return t instanceof Node||t instanceof re(t).Node}function he(t){return t instanceof Element||t instanceof re(t).Element}function ue(t){return t instanceof HTMLElement||t instanceof re(t).HTMLElement}function Ur(t){return typeof ShadowRoot>"u"?!1:t instanceof ShadowRoot||t instanceof re(t).ShadowRoot}function wt(t){const{overflow:e,overflowX:i,overflowY:r,display:s}=ae(t);return/auto|scroll|overlay|hidden|clip/.test(e+r+i)&&!["inline","contents"].includes(s)}function vd(t){return["table","td","th"].includes(Te(t))}function fr(t){const e=pr(),i=ae(t);return i.transform!=="none"||i.perspective!=="none"||(i.containerType?i.containerType!=="normal":!1)||!e&&(i.backdropFilter?i.backdropFilter!=="none":!1)||!e&&(i.filter?i.filter!=="none":!1)||["transform","perspective","filter"].some(r=>(i.willChange||"").includes(r))||["paint","layout","strict","content"].some(r=>(i.contain||"").includes(r))}function wd(t){let e=Xe(t);for(;ue(e)&&!ri(e);){if(fr(e))return e;e=Xe(e)}return null}function pr(){return typeof CSS>"u"||!CSS.supports?!1:CSS.supports("-webkit-backdrop-filter","none")}function ri(t){return["html","body","#document"].includes(Te(t))}function ae(t){return re(t).getComputedStyle(t)}function ni(t){return he(t)?{scrollLeft:t.scrollLeft,scrollTop:t.scrollTop}:{scrollLeft:t.pageXOffset,scrollTop:t.pageYOffset}}function Xe(t){if(Te(t)==="html")return t;const e=t.assignedSlot||t.parentNode||Ur(t)&&t.host||ge(t);return Ur(e)?e.host:e}function Is(t){const e=Xe(t);return ri(e)?t.ownerDocument?t.ownerDocument.body:t.body:ue(e)&&wt(e)?e:Is(e)}function ft(t,e,i){var r;e===void 0&&(e=[]),i===void 0&&(i=!0);const s=Is(t),n=s===((r=t.ownerDocument)==null?void 0:r.body),a=re(s);return n?e.concat(a,a.visualViewport||[],wt(s)?s:[],a.frameElement&&i?ft(a.frameElement):[]):e.concat(s,ft(s,[],i))}function Os(t){const e=ae(t);let i=parseFloat(e.width)||0,r=parseFloat(e.height)||0;const s=ue(t),n=s?t.offsetWidth:i,a=s?t.offsetHeight:r,o=Vt(i)!==n||Vt(r)!==a;return o&&(i=n,r=a),{width:i,height:r,$:o}}function mr(t){return he(t)?t:t.contextElement}function Ve(t){const e=mr(t);if(!ue(e))return Ee(1);const i=e.getBoundingClientRect(),{width:r,height:s,$:n}=Os(e);let a=(n?Vt(i.width):i.width)/r,o=(n?Vt(i.height):i.height)/s;return(!a||!Number.isFinite(a))&&(a=1),(!o||!Number.isFinite(o))&&(o=1),{x:a,y:o}}var bd=Ee(0);function Ds(t){const e=re(t);return!pr()||!e.visualViewport?bd:{x:e.visualViewport.offsetLeft,y:e.visualViewport.offsetTop}}function yd(t,e,i){return e===void 0&&(e=!1),!i||e&&i!==re(t)?!1:e}function Fe(t,e,i,r){e===void 0&&(e=!1),i===void 0&&(i=!1);const s=t.getBoundingClientRect(),n=mr(t);let a=Ee(1);e&&(r?he(r)&&(a=Ve(r)):a=Ve(t));const o=yd(n,i,r)?Ds(n):Ee(0);let l=(s.left+o.x)/a.x,u=(s.top+o.y)/a.y,d=s.width/a.x,c=s.height/a.y;if(n){const f=re(n),m=r&&he(r)?re(r):r;let g=f.frameElement;for(;g&&r&&m!==f;){const w=Ve(g),h=g.getBoundingClientRect(),p=ae(g),b=h.left+(g.clientLeft+parseFloat(p.paddingLeft))*w.x,v=h.top+(g.clientTop+parseFloat(p.paddingTop))*w.y;l*=w.x,u*=w.y,d*=w.x,c*=w.y,l+=b,u+=v,g=re(g).frameElement}}return Wt({width:d,height:c,x:l,y:u})}function xd(t){let{rect:e,offsetParent:i,strategy:r}=t;const s=ue(i),n=ge(i);if(i===n)return e;let a={scrollLeft:0,scrollTop:0},o=Ee(1);const l=Ee(0);if((s||!s&&r!=="fixed")&&((Te(i)!=="body"||wt(n))&&(a=ni(i)),ue(i))){const u=Fe(i);o=Ve(i),l.x=u.x+i.clientLeft,l.y=u.y+i.clientTop}return{width:e.width*o.x,height:e.height*o.y,x:e.x*o.x-a.scrollLeft*o.x+l.x,y:e.y*o.y-a.scrollTop*o.y+l.y}}function Sd(t){return Array.from(t.getClientRects())}function $s(t){return Fe(ge(t)).left+ni(t).scrollLeft}function Ed(t){const e=ge(t),i=ni(t),r=t.ownerDocument.body,s=$e(e.scrollWidth,e.clientWidth,r.scrollWidth,r.clientWidth),n=$e(e.scrollHeight,e.clientHeight,r.scrollHeight,r.clientHeight);let a=-i.scrollLeft+$s(t);const o=-i.scrollTop;return ae(r).direction==="rtl"&&(a+=$e(e.clientWidth,r.clientWidth)-s),{width:s,height:n,x:a,y:o}}function Td(t,e){const i=re(t),r=ge(t),s=i.visualViewport;let n=r.clientWidth,a=r.clientHeight,o=0,l=0;if(s){n=s.width,a=s.height;const u=pr();(!u||u&&e==="fixed")&&(o=s.offsetLeft,l=s.offsetTop)}return{width:n,height:a,x:o,y:l}}function _d(t,e){const i=Fe(t,!0,e==="fixed"),r=i.top+t.clientTop,s=i.left+t.clientLeft,n=ue(t)?Ve(t):Ee(1),a=t.clientWidth*n.x,o=t.clientHeight*n.y,l=s*n.x,u=r*n.y;return{width:a,height:o,x:l,y:u}}function Kr(t,e,i){let r;if(e==="viewport")r=Td(t,i);else if(e==="document")r=Ed(ge(t));else if(he(e))r=_d(e,i);else{const s=Ds(t);r={...e,x:e.x-s.x,y:e.y-s.y}}return Wt(r)}function zs(t,e){const i=Xe(t);return i===e||!he(i)||ri(i)?!1:ae(i).position==="fixed"||zs(i,e)}function Cd(t,e){const i=e.get(t);if(i)return i;let r=ft(t,[],!1).filter(o=>he(o)&&Te(o)!=="body"),s=null;const n=ae(t).position==="fixed";let a=n?Xe(t):t;for(;he(a)&&!ri(a);){const o=ae(a),l=fr(a);!l&&o.position==="fixed"&&(s=null),(n?!l&&!s:!l&&o.position==="static"&&!!s&&["absolute","fixed"].includes(s.position)||wt(a)&&!l&&zs(t,a))?r=r.filter(d=>d!==a):s=o,a=Xe(a)}return e.set(t,r),r}function Md(t){let{element:e,boundary:i,rootBoundary:r,strategy:s}=t;const a=[...i==="clippingAncestors"?Cd(e,this._c):[].concat(i),r],o=a[0],l=a.reduce((u,d)=>{const c=Kr(e,d,s);return u.top=$e(c.top,u.top),u.right=Gt(c.right,u.right),u.bottom=Gt(c.bottom,u.bottom),u.left=$e(c.left,u.left),u},Kr(e,o,s));return{width:l.right-l.left,height:l.bottom-l.top,x:l.left,y:l.top}}function Ad(t){return Os(t)}function Pd(t,e,i){const r=ue(e),s=ge(e),n=i==="fixed",a=Fe(t,!0,n,e);let o={scrollLeft:0,scrollTop:0};const l=Ee(0);if(r||!r&&!n)if((Te(e)!=="body"||wt(s))&&(o=ni(e)),r){const u=Fe(e,!0,n,e);l.x=u.x+e.clientLeft,l.y=u.y+e.clientTop}else s&&(l.x=$s(s));return{x:a.left+o.scrollLeft-l.x,y:a.top+o.scrollTop-l.y,width:a.width,height:a.height}}function Jr(t,e){return!ue(t)||ae(t).position==="fixed"?null:e?e(t):t.offsetParent}function Rs(t,e){const i=re(t);if(!ue(t))return i;let r=Jr(t,e);for(;r&&vd(r)&&ae(r).position==="static";)r=Jr(r,e);return r&&(Te(r)==="html"||Te(r)==="body"&&ae(r).position==="static"&&!fr(r))?i:r||wd(t)||i}var Ld=async function(t){let{reference:e,floating:i,strategy:r}=t;const s=this.getOffsetParent||Rs,n=this.getDimensions;return{reference:Pd(e,await s(i),r),floating:{x:0,y:0,...await n(i)}}};function Id(t){return ae(t).direction==="rtl"}var Od={convertOffsetParentRelativeRectToViewportRelativeRect:xd,getDocumentElement:ge,getClippingRect:Md,getOffsetParent:Rs,getElementRects:Ld,getClientRects:Sd,getDimensions:Ad,getScale:Ve,isElement:he,isRTL:Id};function Dd(t,e){let i=null,r;const s=ge(t);function n(){clearTimeout(r),i&&i.disconnect(),i=null}function a(o,l){o===void 0&&(o=!1),l===void 0&&(l=1),n();const{left:u,top:d,width:c,height:f}=t.getBoundingClientRect();if(o||e(),!c||!f)return;const m=Pt(d),g=Pt(s.clientWidth-(u+c)),w=Pt(s.clientHeight-(d+f)),h=Pt(u),b={rootMargin:-m+"px "+-g+"px "+-w+"px "+-h+"px",threshold:$e(0,Gt(1,l))||1};let v=!0;function y(T){const x=T[0].intersectionRatio;if(x!==l){if(!v)return a();x?a(!1,x):r=setTimeout(()=>{a(!1,1e-7)},100)}v=!1}try{i=new IntersectionObserver(y,{...b,root:s.ownerDocument})}catch{i=new IntersectionObserver(y,b)}i.observe(t)}return a(!0),n}function $d(t,e,i,r){r===void 0&&(r={});const{ancestorScroll:s=!0,ancestorResize:n=!0,elementResize:a=typeof ResizeObserver=="function",layoutShift:o=typeof IntersectionObserver=="function",animationFrame:l=!1}=r,u=mr(t),d=s||n?[...u?ft(u):[],...ft(e)]:[];d.forEach(p=>{s&&p.addEventListener("scroll",i,{passive:!0}),n&&p.addEventListener("resize",i)});const c=u&&o?Dd(u,i):null;let f=-1,m=null;a&&(m=new ResizeObserver(p=>{let[b]=p;b&&b.target===u&&m&&(m.unobserve(e),cancelAnimationFrame(f),f=requestAnimationFrame(()=>{m&&m.observe(e)})),i()}),u&&!l&&m.observe(u),m.observe(e));let g,w=l?Fe(t):null;l&&h();function h(){const p=Fe(t);w&&(p.x!==w.x||p.y!==w.y||p.width!==w.width||p.height!==w.height)&&i(),w=p,g=requestAnimationFrame(h)}return i(),()=>{d.forEach(p=>{s&&p.removeEventListener("scroll",i),n&&p.removeEventListener("resize",i)}),c&&c(),m&&m.disconnect(),m=null,l&&cancelAnimationFrame(g)}}var zd=(t,e,i)=>{const r=new Map,s={platform:Od,...i},n={...s.platform,_c:r};return fd(t,e,{...s,platform:n})};function Rd(t){t.magic("anchor",e=>{if(!e._x_anchor)throw"Alpine: No x-anchor directive found on element using $anchor...";return e._x_anchor}),t.interceptClone((e,i)=>{e&&e._x_anchor&&!i._x_anchor&&(i._x_anchor=e._x_anchor)}),t.directive("anchor",t.skipDuringClone((e,{expression:i,modifiers:r,value:s},{cleanup:n,evaluate:a})=>{let{placement:o,offsetValue:l,unstyled:u}=Qr(r);e._x_anchor=t.reactive({x:0,y:0});let d=a(i);if(!d)throw"Alpine: no element provided to x-anchor...";let c=()=>{let m;zd(d,e,{placement:o,middleware:[pd(),gd({padding:5}),hd(l)]}).then(({x:g,y:w})=>{u||Zr(e,g,w),JSON.stringify({x:g,y:w})!==m&&(e._x_anchor.x=g,e._x_anchor.y=w),m=JSON.stringify({x:g,y:w})})},f=$d(d,e,()=>c());n(()=>f())},(e,{expression:i,modifiers:r,value:s},{cleanup:n,evaluate:a})=>{let{placement:o,offsetValue:l,unstyled:u}=Qr(r);e._x_anchor&&(u||Zr(e,e._x_anchor.x,e._x_anchor.y))}))}function Zr(t,e,i){Object.assign(t.style,{left:e+"px",top:i+"px",position:"absolute"})}function Qr(t){let i=["top","top-start","top-end","right","right-start","right-end","bottom","bottom-start","bottom-end","left","left-start","left-end"].find(n=>t.includes(n)),r=0;if(t.includes("offset")){let n=t.findIndex(a=>a==="offset");r=t[n+1]!==void 0?Number(t[n+1]):r}let s=t.includes("no-style");return{placement:i,offsetValue:r,unstyled:s}}var kd=Rd;de.data("product_gallery",()=>({swiperReference:null,init(){this.initSlider();let t=this;window.productGalleryGoToSlide=e=>t.goToSlide(e)},initSlider(){this.swiperReference=new ee(this.$refs.swiperContainer,{slidesPerView:1,spaceBetween:10,pagination:{el:this.$refs.pagination,clickable:!0},navigation:{nextEl:this.$refs.next_arrow,prevEl:this.$refs.prev_arrow}})},goToSlide(t){let e=parseInt(t)-1;this.swiperReference.slideTo(e)}}));function Fd(t){return t&&t.__esModule&&Object.prototype.hasOwnProperty.call(t,"default")?t.default:t}var Nd=/^(?:submit|button|image|reset|file)$/i,Bd=/^(?:input|select|textarea|keygen)/i,ks=/(\[[^\[\]]*\])/g;function Hd(t,e){typeof e!="object"?e={hash:!!e}:e.hash===void 0&&(e.hash=!0);for(var i=e.hash?{}:"",r=e.serializer||(e.hash?Vd:jd),s=t&&t.elements?t.elements:[],n=Object.create(null),a=0;a<s.length;++a){var o=s[a];if(!(!e.disabled&&o.disabled||!o.name)&&!(!Bd.test(o.nodeName)||Nd.test(o.type))){var l=o.name,u=o.value;if((o.type==="checkbox"||o.type==="radio")&&!o.checked&&(u=void 0),e.empty){if(o.type==="checkbox"&&!o.checked&&(u=""),o.type==="radio"&&(!n[o.name]&&!o.checked?n[o.name]=!1:o.checked&&(n[o.name]=!0)),u==null&&o.type=="radio")continue}else if(!u)continue;if(o.type==="select-multiple"){u=[];for(var d=o.options,c=!1,f=0;f<d.length;++f){var m=d[f],g=e.empty&&!m.value,w=m.value||g;m.selected&&w&&(c=!0,e.hash&&l.slice(l.length-2)!=="[]"?i=r(i,l+"[]",m.value):i=r(i,l,m.value))}!c&&e.empty&&(i=r(i,l,""));continue}i=r(i,l,u)}}if(e.empty)for(var l in n)n[l]||(i=r(i,l,""));return i}function Gd(t){var e=[],i=/^([^\[\]]*)/,r=new RegExp(ks),s=i.exec(t);for(s[1]&&e.push(s[1]);(s=r.exec(t))!==null;)e.push(s[1]);return e}function Ge(t,e,i){if(e.length===0)return t=i,t;var r=e.shift(),s=r.match(/^\[(.+?)\]$/);if(r==="[]")return t=t||[],Array.isArray(t)?t.push(Ge(null,e,i)):(t._values=t._values||[],t._values.push(Ge(null,e,i))),t;if(!s)t[r]=Ge(t[r],e,i);else{var n=s[1],a=+n;isNaN(a)?(t=t||{},t[n]=Ge(t[n],e,i)):(t=t||[],t[a]=Ge(t[a],e,i))}return t}function Vd(t,e,i){var r=e.match(ks);if(r){var s=Gd(e);Ge(t,s,i)}else{var n=t[e];n?(Array.isArray(n)||(t[e]=[n]),t[e].push(i)):t[e]=i}return t}function jd(t,e,i){return i=i.replace(/(\r)?\n/g,`\r
`),i=encodeURIComponent(i),i=i.replace(/%20/g,"+"),t+(t?"&":"")+encodeURIComponent(e)+"="+i}var Wd=Hd;const qd=Fd(Wd),G={addToCartButton:".js-add-to-cart",cartDrawer:"#cart-drawer",cartDrawerItems:"#cart-drawer-items",cartDrawerFooter:"#cart-drawer-footer",cartDrawerOverlay:".cart-drawer-overlay",cartDrawerTrigger:".js-cart-drawer-trigger",cartDrawerClose:".js-cart-drawer-close",cartDrawerCartJson:"#ajax-cart-drawer-json",cartCount:".cart-count",lineItem:".cart-line-item",lineItemUpdate:".js-cart-line-item-update",lineItemQuantity:".js-cart-line-item-input-quantity",moneyFormat:Shopify.currency.default_money_format,sections:{cartDrawer:"cart-drawer",mainCart:"main-cart"}};class Q{static removeItemAnimation(e){e.classList.add("is-invisible")}static openCartDrawer(){document.documentElement.style.overflow="hidden",de.store("cart").drawerIsOpen=!0,this.openCartOverlay()}static closeCartDrawer(){document.documentElement.style.overflow="auto",de.store("cart").drawerIsOpen=!1,this.closeCartOverlay()}static openCartOverlay(){document.querySelector(G.cartDrawerOverlay).classList.add("is-open")}static closeCartOverlay(){document.querySelector(G.cartDrawerOverlay).classList.remove("is-open")}static updateCartItemCount(e){e.item_count==0?document.body.classList.add("cart-is-empty"):document.body.classList.remove("cart-is-empty"),document.querySelectorAll(G.cartCount).forEach(i=>{i.innerHTML=e.item_count})}static setLoadingButton(e,i=!0){i?(e.disabled=!0,e.classList.add("processing-spinner")):(e.disabled=!1,e.classList.remove("processing-spinner"))}static updateSections(e){if(!e.sections)return;const i=e.sections;if(i[G.sections.cartDrawer]){const r=i[G.sections.cartDrawer].replace('loading="lazy"','loading="eager"'),s=new DOMParser().parseFromString(r,"text/html"),n=document.querySelector(G.cartDrawerItems);n.innerHTML=s.querySelector(G.cartDrawerItems).innerHTML;const a=document.querySelector(G.cartDrawerFooter);a!=null&&(a.innerHTML=s.querySelector(G.cartDrawerFooter).innerHTML)}if(i[G.sections.mainCart]){const r=new DOMParser().parseFromString(i[G.sections.mainCart],"text/html"),s=document.getElementById(G.sections.mainCart);s.innerHTML=r.getElementById(G.sections.mainCart).innerHTML}}}de.store("cart",{cart:Shopify.cart||{},cartIsUpdating:!1,drawerIsOpen:!1,init(){this.initClickListeners(),this.initEventListeners(),de.effect(()=>{Q.updateCartItemCount(this.cart)})},async addJS(t){return this.cartIsUpdating=!0,fetch(Shopify.routes.root+"cart/add.js",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)}).then(async e=>{if(e.status!=200){const r=(await e.json()).message||"An error has occurred! Please try again.";throw alert(r),new Error}return e.json()}).catch(e=>{throw new Error(e)}).finally(()=>{this.cartIsUpdating=!1})},async changeJS(t){return this.cartIsUpdating=!0,fetch(Shopify.routes.root+"cart/change.js",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)}).then(async e=>{if(e.status!=200){const r=(await e.json()).message||"An error has occurred! Please try again.";throw alert(r),new Error}return e.json()}).catch(e=>{throw new Error(e)}).finally(()=>{this.cartIsUpdating=!1})},async addToCart(t){if(this.cartIsUpdating)return;let e=t.closest("form"),s={items:[qd(e,{hash:!0})],sections:[G.sections.cartDrawer],sections_url:window.location.pathname+"?request_type=ajax"};window.location.pathname.includes(Shopify.routes.cart_url)&&s.sections.push(G.sections.mainCart),Q.setLoadingButton(t);let n=await this.addJS(s).finally(()=>{Q.setLoadingButton(t,!1)});Q.updateSections(n),Q.openCartDrawer(),this.updateCartJson(n)},async updateCart(t){if(this.cartIsUpdating)return;const e=t.dataset.type,i=t.dataset.line,r=t.closest(G.lineItem).querySelector(G.lineItemQuantity),s=Number(r.step||1);let n=Number(r.value||0);switch(e){case"plus":n+=s;break;case"minus":n-=s;break;case"remove":n=0;break}n===0&&Q.removeItemAnimation(t.closest(G.lineItem));let a={line:i,quantity:n,sections:[G.sections.cartDrawer],sections_url:window.location.pathname+"?request_type=ajax"};window.location.pathname.includes(Shopify.routes.cart_url)&&a.sections.push(G.sections.mainCart),Q.setLoadingButton(t);let o=await this.changeJS(a).finally(()=>{Q.setLoadingButton(t,!1)});Q.updateSections(o),this.updateCartJson(o)},async getDrawerUpdated(){let t=Shopify.routes.root+'?request_type="ajax&sections='+G.sections.cartDrawer;window.location.pathname.includes(Shopify.routes.cart_url)&&(endendPoint=t+","+G.sections.mainCart);const i={sections:await fetch(t).then(r=>r.json()).catch(r=>{throw new Error(r)})};Q.updateSections(i),Q.openCartDrawer(),this.updateCartJson(i)},async updateCartJson(t){const e=new DOMParser().parseFromString(t.sections[G.sections.cartDrawer],"text/html");this.cart=JSON.parse(e.querySelector(G.cartDrawerCartJson).textContent)},initClickListeners(){document.addEventListener("click",t=>{const e=t.target;e.closest(G.addToCartButton)&&(t.preventDefault(),this.addToCart(e.closest(G.addToCartButton))),e.closest(G.lineItemUpdate)&&this.updateCart(e.closest(G.lineItemUpdate)),e.closest(G.cartDrawerTrigger)&&(t.preventDefault(),Q.openCartDrawer()),(e.closest(G.cartDrawerOverlay)||e.closest(G.cartDrawerClose))&&Q.closeCartDrawer()})},initEventListeners(){window.addEventListener("keydown",function(t){t.key==="Escape"&&document.querySelector(G.cartDrawer).classList.contains("is-open")&&Q.closeCartDrawer()})}});window.Alpine=de;window.Swiper=ee;de.plugin(td);de.plugin(rd);de.plugin(kd);de.start();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
